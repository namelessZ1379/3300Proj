
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f001 f942 	bl	80014a0 <__core_init>
 800021c:	f003 fc50 	bl	8003ac0 <__early_init>
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <endfiniloop+0xa>)
 8000222:	491e      	ldr	r1, [pc, #120]	; (800029c <endfiniloop+0xe>)
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <endfiniloop+0x12>)

08000226 <msloop>:
 8000226:	4291      	cmp	r1, r2
 8000228:	bf3c      	itt	cc
 800022a:	f841 0b04 	strcc.w	r0, [r1], #4
 800022e:	e7fa      	bcc.n	8000226 <msloop>
 8000230:	491c      	ldr	r1, [pc, #112]	; (80002a4 <endfiniloop+0x16>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <endfiniloop+0x6>)

08000234 <psloop>:
 8000234:	4291      	cmp	r1, r2
 8000236:	bf3c      	itt	cc
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
 800023c:	e7fa      	bcc.n	8000234 <psloop>
 800023e:	491a      	ldr	r1, [pc, #104]	; (80002a8 <endfiniloop+0x1a>)
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <endfiniloop+0x1e>)
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <endfiniloop+0x22>)

08000244 <dloop>:
 8000244:	429a      	cmp	r2, r3
 8000246:	bf3e      	ittt	cc
 8000248:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024c:	f842 0b04 	strcc.w	r0, [r2], #4
 8000250:	e7f8      	bcc.n	8000244 <dloop>
 8000252:	2000      	movs	r0, #0
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <endfiniloop+0x26>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <endfiniloop+0x2a>)

08000258 <bloop>:
 8000258:	4291      	cmp	r1, r2
 800025a:	bf3c      	itt	cc
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000260:	e7fa      	bcc.n	8000258 <bloop>
 8000262:	f001 f8e5 	bl	8001430 <__init_ram_areas>
 8000266:	f001 f913 	bl	8001490 <__late_init>
 800026a:	4c14      	ldr	r4, [pc, #80]	; (80002bc <endfiniloop+0x2e>)
 800026c:	4d14      	ldr	r5, [pc, #80]	; (80002c0 <endfiniloop+0x32>)

0800026e <initloop>:
 800026e:	42ac      	cmp	r4, r5
 8000270:	da03      	bge.n	800027a <endinitloop>
 8000272:	f854 1b04 	ldr.w	r1, [r4], #4
 8000276:	4788      	blx	r1
 8000278:	e7f9      	b.n	800026e <initloop>

0800027a <endinitloop>:
 800027a:	f003 ff09 	bl	8004090 <main>
 800027e:	4c11      	ldr	r4, [pc, #68]	; (80002c4 <endfiniloop+0x36>)
 8000280:	4d11      	ldr	r5, [pc, #68]	; (80002c8 <endfiniloop+0x3a>)

08000282 <finiloop>:
 8000282:	42ac      	cmp	r4, r5
 8000284:	da03      	bge.n	800028e <endfiniloop>
 8000286:	f854 1b04 	ldr.w	r1, [r4], #4
 800028a:	4788      	blx	r1
 800028c:	e7f9      	b.n	8000282 <finiloop>

0800028e <endfiniloop>:
 800028e:	f001 b8f7 	b.w	8001480 <__default_exit>
 8000292:	0000      	.short	0x0000
 8000294:	20000800 	.word	0x20000800
 8000298:	55555555 	.word	0x55555555
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000400 	.word	0x20000400
 80002a4:	20000400 	.word	0x20000400
 80002a8:	08006e10 	.word	0x08006e10
 80002ac:	20000800 	.word	0x20000800
 80002b0:	20000864 	.word	0x20000864
 80002b4:	20000868 	.word	0x20000868
 80002b8:	2000cb68 	.word	0x2000cb68
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
 80002c8:	080001c0 	.word	0x080001c0
 80002cc:	00000000 	.word	0x00000000

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	f000 fd92 	bl	8000e10 <_dbg_check_unlock>
 80002ec:	f000 fab0 	bl	8000850 <_stats_stop_measure_crit_thd>
 80002f0:	2300      	movs	r3, #0
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	4628      	mov	r0, r5
 80002f8:	47a0      	blx	r4
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 ff80 	bl	8001200 <chThdExit>

08000300 <_port_switch_from_isr>:
 8000300:	f000 fabe 	bl	8000880 <_stats_start_measure_crit_thd>
 8000304:	f000 fd94 	bl	8000e30 <_dbg_check_lock>
 8000308:	f000 fb02 	bl	8000910 <chSchDoReschedule>
 800030c:	f000 fd80 	bl	8000e10 <_dbg_check_unlock>
 8000310:	f000 fa9e 	bl	8000850 <_stats_stop_measure_crit_thd>

08000314 <_port_exit_from_isr>:
 8000314:	df00      	svc	0
 8000316:	e7fe      	b.n	8000316 <_port_exit_from_isr+0x2>
	...

08000320 <memcpy>:
 8000320:	4684      	mov	ip, r0
 8000322:	ea41 0300 	orr.w	r3, r1, r0
 8000326:	f013 0303 	ands.w	r3, r3, #3
 800032a:	d16d      	bne.n	8000408 <memcpy+0xe8>
 800032c:	3a40      	subs	r2, #64	; 0x40
 800032e:	d341      	bcc.n	80003b4 <memcpy+0x94>
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a40      	subs	r2, #64	; 0x40
 80003b2:	d2bd      	bcs.n	8000330 <memcpy+0x10>
 80003b4:	3230      	adds	r2, #48	; 0x30
 80003b6:	d311      	bcc.n	80003dc <memcpy+0xbc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c4:	f840 3b04 	str.w	r3, [r0], #4
 80003c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003cc:	f840 3b04 	str.w	r3, [r0], #4
 80003d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d4:	f840 3b04 	str.w	r3, [r0], #4
 80003d8:	3a10      	subs	r2, #16
 80003da:	d2ed      	bcs.n	80003b8 <memcpy+0x98>
 80003dc:	320c      	adds	r2, #12
 80003de:	d305      	bcc.n	80003ec <memcpy+0xcc>
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	3a04      	subs	r2, #4
 80003ea:	d2f9      	bcs.n	80003e0 <memcpy+0xc0>
 80003ec:	3204      	adds	r2, #4
 80003ee:	d008      	beq.n	8000402 <memcpy+0xe2>
 80003f0:	07d2      	lsls	r2, r2, #31
 80003f2:	bf1c      	itt	ne
 80003f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003fc:	d301      	bcc.n	8000402 <memcpy+0xe2>
 80003fe:	880b      	ldrh	r3, [r1, #0]
 8000400:	8003      	strh	r3, [r0, #0]
 8000402:	4660      	mov	r0, ip
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	2a08      	cmp	r2, #8
 800040a:	d313      	bcc.n	8000434 <memcpy+0x114>
 800040c:	078b      	lsls	r3, r1, #30
 800040e:	d08d      	beq.n	800032c <memcpy+0xc>
 8000410:	f010 0303 	ands.w	r3, r0, #3
 8000414:	d08a      	beq.n	800032c <memcpy+0xc>
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	07db      	lsls	r3, r3, #31
 800041e:	bf1c      	itt	ne
 8000420:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000424:	f800 3b01 	strbne.w	r3, [r0], #1
 8000428:	d380      	bcc.n	800032c <memcpy+0xc>
 800042a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800042e:	f820 3b02 	strh.w	r3, [r0], #2
 8000432:	e77b      	b.n	800032c <memcpy+0xc>
 8000434:	3a04      	subs	r2, #4
 8000436:	d3d9      	bcc.n	80003ec <memcpy+0xcc>
 8000438:	3a01      	subs	r2, #1
 800043a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800043e:	f800 3b01 	strb.w	r3, [r0], #1
 8000442:	d2f9      	bcs.n	8000438 <memcpy+0x118>
 8000444:	780b      	ldrb	r3, [r1, #0]
 8000446:	7003      	strb	r3, [r0, #0]
 8000448:	784b      	ldrb	r3, [r1, #1]
 800044a:	7043      	strb	r3, [r0, #1]
 800044c:	788b      	ldrb	r3, [r1, #2]
 800044e:	7083      	strb	r3, [r0, #2]
 8000450:	4660      	mov	r0, ip
 8000452:	4770      	bx	lr
	...
 8000460:	eba2 0003 	sub.w	r0, r2, r3
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <strcmp>:
 8000468:	7802      	ldrb	r2, [r0, #0]
 800046a:	780b      	ldrb	r3, [r1, #0]
 800046c:	2a01      	cmp	r2, #1
 800046e:	bf28      	it	cs
 8000470:	429a      	cmpcs	r2, r3
 8000472:	d1f5      	bne.n	8000460 <memcpy+0x140>
 8000474:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000478:	ea40 0401 	orr.w	r4, r0, r1
 800047c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000480:	f06f 0c00 	mvn.w	ip, #0
 8000484:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000488:	b312      	cbz	r2, 80004d0 <strcmp+0x68>
 800048a:	ea80 0401 	eor.w	r4, r0, r1
 800048e:	f014 0f07 	tst.w	r4, #7
 8000492:	d16a      	bne.n	800056a <strcmp+0x102>
 8000494:	f000 0407 	and.w	r4, r0, #7
 8000498:	f020 0007 	bic.w	r0, r0, #7
 800049c:	f004 0503 	and.w	r5, r4, #3
 80004a0:	f021 0107 	bic.w	r1, r1, #7
 80004a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004ac:	f014 0f04 	tst.w	r4, #4
 80004b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b4:	fa0c f405 	lsl.w	r4, ip, r5
 80004b8:	ea62 0204 	orn	r2, r2, r4
 80004bc:	ea66 0604 	orn	r6, r6, r4
 80004c0:	d00a      	beq.n	80004d8 <strcmp+0x70>
 80004c2:	ea63 0304 	orn	r3, r3, r4
 80004c6:	4662      	mov	r2, ip
 80004c8:	ea67 0704 	orn	r7, r7, r4
 80004cc:	4666      	mov	r6, ip
 80004ce:	e003      	b.n	80004d8 <strcmp+0x70>
 80004d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004d8:	fa82 f54c 	uadd8	r5, r2, ip
 80004dc:	ea82 0406 	eor.w	r4, r2, r6
 80004e0:	faa4 f48c 	sel	r4, r4, ip
 80004e4:	bb6c      	cbnz	r4, 8000542 <strcmp+0xda>
 80004e6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ea:	ea83 0507 	eor.w	r5, r3, r7
 80004ee:	faa5 f58c 	sel	r5, r5, ip
 80004f2:	b995      	cbnz	r5, 800051a <strcmp+0xb2>
 80004f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004fc:	fa82 f54c 	uadd8	r5, r2, ip
 8000500:	ea82 0406 	eor.w	r4, r2, r6
 8000504:	faa4 f48c 	sel	r4, r4, ip
 8000508:	fa83 f54c 	uadd8	r5, r3, ip
 800050c:	ea83 0507 	eor.w	r5, r3, r7
 8000510:	faa5 f58c 	sel	r5, r5, ip
 8000514:	4325      	orrs	r5, r4
 8000516:	d0db      	beq.n	80004d0 <strcmp+0x68>
 8000518:	b99c      	cbnz	r4, 8000542 <strcmp+0xda>
 800051a:	ba2d      	rev	r5, r5
 800051c:	fab5 f485 	clz	r4, r5
 8000520:	f024 0407 	bic.w	r4, r4, #7
 8000524:	fa27 f104 	lsr.w	r1, r7, r4
 8000528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800052c:	fa23 f304 	lsr.w	r3, r3, r4
 8000530:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000534:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000538:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800053c:	eba0 0001 	sub.w	r0, r0, r1
 8000540:	4770      	bx	lr
 8000542:	ba24      	rev	r4, r4
 8000544:	fab4 f484 	clz	r4, r4
 8000548:	f024 0407 	bic.w	r4, r4, #7
 800054c:	fa26 f104 	lsr.w	r1, r6, r4
 8000550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000554:	fa22 f204 	lsr.w	r2, r2, r4
 8000558:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800055c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000560:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000564:	eba0 0001 	sub.w	r0, r0, r1
 8000568:	4770      	bx	lr
 800056a:	f014 0f03 	tst.w	r4, #3
 800056e:	d13c      	bne.n	80005ea <strcmp+0x182>
 8000570:	f010 0403 	ands.w	r4, r0, #3
 8000574:	d128      	bne.n	80005c8 <strcmp+0x160>
 8000576:	f850 2b08 	ldr.w	r2, [r0], #8
 800057a:	f851 3b08 	ldr.w	r3, [r1], #8
 800057e:	fa82 f54c 	uadd8	r5, r2, ip
 8000582:	ea82 0503 	eor.w	r5, r2, r3
 8000586:	faa5 f58c 	sel	r5, r5, ip
 800058a:	b95d      	cbnz	r5, 80005a4 <strcmp+0x13c>
 800058c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000594:	fa82 f54c 	uadd8	r5, r2, ip
 8000598:	ea82 0503 	eor.w	r5, r2, r3
 800059c:	faa5 f58c 	sel	r5, r5, ip
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d0e8      	beq.n	8000576 <strcmp+0x10e>
 80005a4:	ba2d      	rev	r5, r5
 80005a6:	fab5 f485 	clz	r4, r5
 80005aa:	f024 0407 	bic.w	r4, r4, #7
 80005ae:	fa23 f104 	lsr.w	r1, r3, r4
 80005b2:	fa22 f204 	lsr.w	r2, r2, r4
 80005b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80005ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005c2:	eba0 0001 	sub.w	r0, r0, r1
 80005c6:	4770      	bx	lr
 80005c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005cc:	f020 0003 	bic.w	r0, r0, #3
 80005d0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005d4:	f021 0103 	bic.w	r1, r1, #3
 80005d8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005dc:	fa0c f404 	lsl.w	r4, ip, r4
 80005e0:	ea62 0204 	orn	r2, r2, r4
 80005e4:	ea63 0304 	orn	r3, r3, r4
 80005e8:	e7c9      	b.n	800057e <strcmp+0x116>
 80005ea:	f010 0403 	ands.w	r4, r0, #3
 80005ee:	d01a      	beq.n	8000626 <strcmp+0x1be>
 80005f0:	eba1 0104 	sub.w	r1, r1, r4
 80005f4:	f020 0003 	bic.w	r0, r0, #3
 80005f8:	07e4      	lsls	r4, r4, #31
 80005fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80005fe:	d006      	beq.n	800060e <strcmp+0x1a6>
 8000600:	d20f      	bcs.n	8000622 <strcmp+0x1ba>
 8000602:	788b      	ldrb	r3, [r1, #2]
 8000604:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000608:	1ae4      	subs	r4, r4, r3
 800060a:	d106      	bne.n	800061a <strcmp+0x1b2>
 800060c:	b12b      	cbz	r3, 800061a <strcmp+0x1b2>
 800060e:	78cb      	ldrb	r3, [r1, #3]
 8000610:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	d100      	bne.n	800061a <strcmp+0x1b2>
 8000618:	b91b      	cbnz	r3, 8000622 <strcmp+0x1ba>
 800061a:	4620      	mov	r0, r4
 800061c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000620:	4770      	bx	lr
 8000622:	f101 0104 	add.w	r1, r1, #4
 8000626:	f850 2b04 	ldr.w	r2, [r0], #4
 800062a:	07cc      	lsls	r4, r1, #31
 800062c:	f021 0103 	bic.w	r1, r1, #3
 8000630:	f851 3b04 	ldr.w	r3, [r1], #4
 8000634:	d848      	bhi.n	80006c8 <strcmp+0x260>
 8000636:	d224      	bcs.n	8000682 <strcmp+0x21a>
 8000638:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800063c:	fa82 f54c 	uadd8	r5, r2, ip
 8000640:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000644:	faa5 f58c 	sel	r5, r5, ip
 8000648:	d10a      	bne.n	8000660 <strcmp+0x1f8>
 800064a:	b965      	cbnz	r5, 8000666 <strcmp+0x1fe>
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	ea84 0402 	eor.w	r4, r4, r2
 8000654:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000658:	d10e      	bne.n	8000678 <strcmp+0x210>
 800065a:	f850 2b04 	ldr.w	r2, [r0], #4
 800065e:	e7eb      	b.n	8000638 <strcmp+0x1d0>
 8000660:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000664:	e055      	b.n	8000712 <strcmp+0x2aa>
 8000666:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800066a:	d14d      	bne.n	8000708 <strcmp+0x2a0>
 800066c:	7808      	ldrb	r0, [r1, #0]
 800066e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000672:	f1c0 0000 	rsb	r0, r0, #0
 8000676:	4770      	bx	lr
 8000678:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800067c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000680:	e047      	b.n	8000712 <strcmp+0x2aa>
 8000682:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000686:	fa82 f54c 	uadd8	r5, r2, ip
 800068a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800068e:	faa5 f58c 	sel	r5, r5, ip
 8000692:	d10a      	bne.n	80006aa <strcmp+0x242>
 8000694:	b965      	cbnz	r5, 80006b0 <strcmp+0x248>
 8000696:	f851 3b04 	ldr.w	r3, [r1], #4
 800069a:	ea84 0402 	eor.w	r4, r4, r2
 800069e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80006a2:	d10c      	bne.n	80006be <strcmp+0x256>
 80006a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80006a8:	e7eb      	b.n	8000682 <strcmp+0x21a>
 80006aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80006ae:	e030      	b.n	8000712 <strcmp+0x2aa>
 80006b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80006b4:	d128      	bne.n	8000708 <strcmp+0x2a0>
 80006b6:	880b      	ldrh	r3, [r1, #0]
 80006b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006bc:	e029      	b.n	8000712 <strcmp+0x2aa>
 80006be:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006c6:	e024      	b.n	8000712 <strcmp+0x2aa>
 80006c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006cc:	fa82 f54c 	uadd8	r5, r2, ip
 80006d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006d4:	faa5 f58c 	sel	r5, r5, ip
 80006d8:	d10a      	bne.n	80006f0 <strcmp+0x288>
 80006da:	b965      	cbnz	r5, 80006f6 <strcmp+0x28e>
 80006dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e0:	ea84 0402 	eor.w	r4, r4, r2
 80006e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006e8:	d109      	bne.n	80006fe <strcmp+0x296>
 80006ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ee:	e7eb      	b.n	80006c8 <strcmp+0x260>
 80006f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006f4:	e00d      	b.n	8000712 <strcmp+0x2aa>
 80006f6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006fa:	d105      	bne.n	8000708 <strcmp+0x2a0>
 80006fc:	680b      	ldr	r3, [r1, #0]
 80006fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000706:	e004      	b.n	8000712 <strcmp+0x2aa>
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000710:	4770      	bx	lr
 8000712:	ba12      	rev	r2, r2
 8000714:	ba1b      	rev	r3, r3
 8000716:	fa82 f44c 	uadd8	r4, r2, ip
 800071a:	ea82 0403 	eor.w	r4, r2, r3
 800071e:	faa4 f58c 	sel	r5, r4, ip
 8000722:	fab5 f485 	clz	r4, r5
 8000726:	fa02 f204 	lsl.w	r2, r2, r4
 800072a:	fa03 f304 	lsl.w	r3, r3, r4
 800072e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000732:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000736:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800073a:	4770      	bx	lr
 800073c:	0000      	movs	r0, r0
	...

08000740 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000742:	6842      	ldr	r2, [r0, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000746:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000748:	608b      	str	r3, [r1, #8]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800074a:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800074c:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800074e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000752:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000754:	18e4      	adds	r4, r4, r3
 8000756:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800075a:	4293      	cmp	r3, r2
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800075c:	6802      	ldr	r2, [r0, #0]

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800075e:	bf88      	it	hi
 8000760:	6043      	strhi	r3, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000762:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8000764:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000766:	e9c0 4504 	strd	r4, r5, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800076a:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800076c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 800076e:	bf38      	it	cc
 8000770:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000772:	bc70      	pop	{r4, r5, r6}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e0001000 	.word	0xe0001000
 800077c:	00000000 	.word	0x00000000

08000780 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <_dbg_trace+0x30>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000782:	490c      	ldr	r1, [pc, #48]	; (80007b4 <_dbg_trace+0x34>)
 8000784:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8000786:	b410      	push	{r4}
 8000788:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800078a:	6991      	ldr	r1, [r2, #24]
 800078c:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 800078e:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8000790:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000792:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8000794:	f890 1020 	ldrb.w	r1, [r0, #32]
 8000798:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800079a:	3310      	adds	r3, #16
 800079c:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 80007a0:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80007a2:	bf28      	it	cs
 80007a4:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 80007a8:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 80007aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	2000bfd8 	.word	0x2000bfd8
 80007b4:	40000c00 	.word	0x40000c00
	...

080007c0 <_idle_thread.lto_priv.79>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80007c0:	e7fe      	b.n	80007c0 <_idle_thread.lto_priv.79>
 80007c2:	bf00      	nop
	...

080007d0 <_stats_increase_irq>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80007d0:	2320      	movs	r3, #32
 80007d2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_stats_increase_irq+0x1c>)
 80007d8:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 80007dc:	3301      	adds	r3, #1
 80007de:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 80007e2:	2300      	movs	r3, #0
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000bfd8 	.word	0x2000bfd8

080007f0 <chTMStopMeasurementX>:
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80007f2:	4910      	ldr	r1, [pc, #64]	; (8000834 <chTMStopMeasurementX+0x44>)
 80007f4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80007f6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80007f8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80007fa:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80007fe:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000800:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000802:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800080a:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800080c:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800080e:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000810:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000814:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000816:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800081a:	bf88      	it	hi
 800081c:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800081e:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000820:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000822:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000826:	bf38      	it	cc
 8000828:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800082a:	bcf0      	pop	{r4, r5, r6, r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e0001000 	.word	0xe0001000
 8000834:	2000bfd8 	.word	0x2000bfd8
	...

08000840 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000840:	4801      	ldr	r0, [pc, #4]	; (8000848 <_stats_stop_measure_crit_isr+0x8>)
 8000842:	f7ff bfd5 	b.w	80007f0 <chTMStopMeasurementX>
 8000846:	bf00      	nop
 8000848:	2000c4a0 	.word	0x2000c4a0
 800084c:	00000000 	.word	0x00000000

08000850 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000850:	4801      	ldr	r0, [pc, #4]	; (8000858 <_stats_stop_measure_crit_thd+0x8>)
 8000852:	f7ff bfcd 	b.w	80007f0 <chTMStopMeasurementX>
 8000856:	bf00      	nop
 8000858:	2000c488 	.word	0x2000c488
 800085c:	00000000 	.word	0x00000000

08000860 <chTMStartMeasurementX>:
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <chTMStartMeasurementX+0x8>)
 8000862:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000864:	6083      	str	r3, [r0, #8]
 8000866:	4770      	bx	lr
 8000868:	e0001000 	.word	0xe0001000
 800086c:	00000000 	.word	0x00000000

08000870 <_stats_start_measure_crit_isr>:
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000870:	4801      	ldr	r0, [pc, #4]	; (8000878 <_stats_start_measure_crit_isr+0x8>)
 8000872:	f7ff bff5 	b.w	8000860 <chTMStartMeasurementX>
 8000876:	bf00      	nop
 8000878:	2000c4a0 	.word	0x2000c4a0
 800087c:	00000000 	.word	0x00000000

08000880 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000880:	4801      	ldr	r0, [pc, #4]	; (8000888 <_stats_start_measure_crit_thd+0x8>)
 8000882:	f7ff bfed 	b.w	8000860 <chTMStartMeasurementX>
 8000886:	bf00      	nop
 8000888:	2000c488 	.word	0x2000c488
 800088c:	00000000 	.word	0x00000000

08000890 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000890:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp, *cp;

  otp = currp;
 8000892:	4d1b      	ldr	r5, [pc, #108]	; (8000900 <chSchDoRescheduleAhead+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000894:	682a      	ldr	r2, [r5, #0]
 8000896:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	68a1      	ldr	r1, [r4, #8]
 800089c:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800089e:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80008a0:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80008a2:	605d      	str	r5, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80008a4:	f882 6020 	strb.w	r6, [r2, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80008a8:	61aa      	str	r2, [r5, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80008aa:	f884 0020 	strb.w	r0, [r4, #32]
 80008ae:	e000      	b.n	80008b2 <chSchDoRescheduleAhead+0x22>
 80008b0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	428a      	cmp	r2, r1
 80008b6:	d8fb      	bhi.n	80008b0 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80008bc:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80008be:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80008c0:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80008c2:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 80008c4:	f7ff ff5c 	bl	8000780 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80008c8:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
 80008cc:	69a9      	ldr	r1, [r5, #24]
 80008ce:	4e0c      	ldr	r6, [pc, #48]	; (8000900 <chSchDoRescheduleAhead+0x70>)
 80008d0:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80008d2:	3148      	adds	r1, #72	; 0x48
 80008d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80008d8:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80008dc:	f7ff ff30 	bl	8000740 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80008e0:	f3ef 8309 	mrs	r3, PSP
 80008e4:	69e2      	ldr	r2, [r4, #28]
 80008e6:	3b64      	subs	r3, #100	; 0x64
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d805      	bhi.n	80008f8 <chSchDoRescheduleAhead+0x68>
 80008ec:	69b0      	ldr	r0, [r6, #24]
 80008ee:	4621      	mov	r1, r4
}
 80008f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80008f4:	f7ff bcec 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80008fa:	4b02      	ldr	r3, [pc, #8]	; (8000904 <chSchDoRescheduleAhead+0x74>)
 80008fc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80008fe:	e7fe      	b.n	80008fe <chSchDoRescheduleAhead+0x6e>
 8000900:	2000bfd8 	.word	0x2000bfd8
 8000904:	080054e0 	.word	0x080054e0
	...

08000910 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000910:	f7ff bfbe 	b.w	8000890 <chSchDoRescheduleAhead>
	...

08000920 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <chDbgCheckClassS+0x18>)
 8000922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000924:	b91a      	cbnz	r2, 800092e <chDbgCheckClassS+0xe>
 8000926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000928:	2a00      	cmp	r2, #0
 800092a:	dd00      	ble.n	800092e <chDbgCheckClassS+0xe>
 800092c:	4770      	bx	lr
 800092e:	b672      	cpsid	i
 8000930:	4a02      	ldr	r2, [pc, #8]	; (800093c <chDbgCheckClassS+0x1c>)
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
 8000934:	e7fe      	b.n	8000934 <chDbgCheckClassS+0x14>
 8000936:	bf00      	nop
 8000938:	2000bfd8 	.word	0x2000bfd8
 800093c:	080054f0 	.word	0x080054f0

08000940 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000940:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000942:	4c16      	ldr	r4, [pc, #88]	; (800099c <chSchGoSleepS+0x5c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000944:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8000946:	f7ff ffeb 	bl	8000920 <chDbgCheckClassS>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800094a:	6823      	ldr	r3, [r4, #0]

  otp = currp;
 800094c:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 800094e:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8000950:	f885 6020 	strb.w	r6, [r5, #32]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000954:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000956:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8000958:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800095a:	f883 1020 	strb.w	r1, [r3, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800095e:	6022      	str	r2, [r4, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000960:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000962:	f7ff ff0d 	bl	8000780 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000966:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800096a:	69a1      	ldr	r1, [r4, #24]
 800096c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800096e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000972:	3148      	adds	r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000974:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000978:	f7ff fee2 	bl	8000740 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800097c:	f3ef 8309 	mrs	r3, PSP
 8000980:	69ea      	ldr	r2, [r5, #28]
 8000982:	3b64      	subs	r3, #100	; 0x64
 8000984:	429a      	cmp	r2, r3
 8000986:	d805      	bhi.n	8000994 <chSchGoSleepS+0x54>
 8000988:	69a0      	ldr	r0, [r4, #24]
 800098a:	4629      	mov	r1, r5
}
 800098c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000990:	f7ff bc9e 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
 8000996:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <chSchGoSleepS+0x60>)
 8000998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800099a:	e7fe      	b.n	800099a <chSchGoSleepS+0x5a>
 800099c:	2000bfd8 	.word	0x2000bfd8
 80009a0:	080054e0 	.word	0x080054e0
	...

080009b0 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <chDbgCheckClassI+0x18>)
 80009b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	db03      	blt.n	80009c0 <chDbgCheckClassI+0x10>
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	dd00      	ble.n	80009c0 <chDbgCheckClassI+0x10>
 80009be:	4770      	bx	lr
 80009c0:	b672      	cpsid	i
 80009c2:	4a02      	ldr	r2, [pc, #8]	; (80009cc <chDbgCheckClassI+0x1c>)
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c6:	e7fe      	b.n	80009c6 <chDbgCheckClassI+0x16>
 80009c8:	2000bfd8 	.word	0x2000bfd8
 80009cc:	080054f8 	.word	0x080054f8

080009d0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80009d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d4:	460c      	mov	r4, r1
 80009d6:	b087      	sub	sp, #28
 80009d8:	4607      	mov	r7, r0

  chDbgCheckClassS();
 80009da:	f7ff ffa1 	bl	8000920 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80009de:	1c63      	adds	r3, r4, #1
 80009e0:	d055      	beq.n	8000a8e <chSchGoSleepTimeoutS+0xbe>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80009e2:	4e51      	ldr	r6, [pc, #324]	; (8000b28 <chSchGoSleepTimeoutS+0x158>)
 80009e4:	f8d6 9018 	ldr.w	r9, [r6, #24]
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 80009e8:	f7ff ffe2 	bl	80009b0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80009ec:	b91c      	cbnz	r4, 80009f6 <chSchGoSleepTimeoutS+0x26>
 80009ee:	b672      	cpsid	i
 80009f0:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <chSchGoSleepTimeoutS+0x15c>)
 80009f2:	62f3      	str	r3, [r6, #44]	; 0x2c
 80009f4:	e7fe      	b.n	80009f4 <chSchGoSleepTimeoutS+0x24>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80009f6:	46b0      	mov	r8, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80009f8:	2c01      	cmp	r4, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80009fa:	f858 5f1c 	ldr.w	r5, [r8, #28]!
 80009fe:	4a4c      	ldr	r2, [pc, #304]	; (8000b30 <chSchGoSleepTimeoutS+0x160>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000a00:	494c      	ldr	r1, [pc, #304]	; (8000b34 <chSchGoSleepTimeoutS+0x164>)
 8000a02:	6a53      	ldr	r3, [r2, #36]	; 0x24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000a04:	f8cd 9014 	str.w	r9, [sp, #20]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000a08:	bf08      	it	eq
 8000a0a:	2402      	moveq	r4, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000a0c:	4545      	cmp	r5, r8

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000a0e:	9104      	str	r1, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000a10:	d046      	beq.n	8000aa0 <chSchGoSleepTimeoutS+0xd0>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000a12:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8000a14:	1a1b      	subs	r3, r3, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a16:	18e4      	adds	r4, r4, r3
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000a18:	68ab      	ldr	r3, [r5, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000a1a:	d355      	bcc.n	8000ac8 <chSchGoSleepTimeoutS+0xf8>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 8000a1c:	682d      	ldr	r5, [r5, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d904      	bls.n	8000a30 <chSchGoSleepTimeoutS+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000a26:	682d      	ldr	r5, [r5, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000a28:	1ae4      	subs	r4, r4, r3
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000a2a:	68ab      	ldr	r3, [r5, #8]
 8000a2c:	42a3      	cmp	r3, r4
 8000a2e:	d3fa      	bcc.n	8000a26 <chSchGoSleepTimeoutS+0x56>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000a30:	686b      	ldr	r3, [r5, #4]
 8000a32:	9302      	str	r3, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8000a34:	f10d 0904 	add.w	r9, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000a38:	9501      	str	r5, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000a3a:	f8c3 9000 	str.w	r9, [r3]
  p->vt_prev = vtp;
 8000a3e:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->vt_delta = delta
 8000a42:	9403      	str	r4, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000a44:	68ab      	ldr	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000a4a:	1b1b      	subs	r3, r3, r4
 8000a4c:	60ab      	str	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000a4e:	6272      	str	r2, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000a50:	4638      	mov	r0, r7
 8000a52:	f7ff ff75 	bl	8000940 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000a56:	f7ff ffab 	bl	80009b0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000a5a:	9b04      	ldr	r3, [sp, #16]
 8000a5c:	b1db      	cbz	r3, 8000a96 <chSchGoSleepTimeoutS+0xc6>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000a5e:	f7ff ffa7 	bl	80009b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000a62:	69f3      	ldr	r3, [r6, #28]
 8000a64:	4930      	ldr	r1, [pc, #192]	; (8000b28 <chSchGoSleepTimeoutS+0x158>)
 8000a66:	454b      	cmp	r3, r9
 8000a68:	d035      	beq.n	8000ad6 <chSchGoSleepTimeoutS+0x106>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000a6a:	9a02      	ldr	r2, [sp, #8]
 8000a6c:	9b01      	ldr	r3, [sp, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000a70:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8000a72:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000a74:	4543      	cmp	r3, r8
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000a76:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000a78:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000a7a:	d00c      	beq.n	8000a96 <chSchGoSleepTimeoutS+0xc6>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000a7c:	6899      	ldr	r1, [r3, #8]
 8000a7e:	9a03      	ldr	r2, [sp, #12]
 8000a80:	440a      	add	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000a84:	69b3      	ldr	r3, [r6, #24]
 8000a86:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000a88:	b007      	add	sp, #28
 8000a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000a8e:	4638      	mov	r0, r7
 8000a90:	f7ff ff56 	bl	8000940 <chSchGoSleepS>
 8000a94:	4e24      	ldr	r6, [pc, #144]	; (8000b28 <chSchGoSleepTimeoutS+0x158>)
  }

  return currp->p_u.rdymsg;
 8000a96:	69b3      	ldr	r3, [r6, #24]
 8000a98:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000a9a:	b007      	add	sp, #28
 8000a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 8000aa0:	9403      	str	r4, [sp, #12]
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000aa4:	68d1      	ldr	r1, [r2, #12]
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000aa6:	9501      	str	r5, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000aa8:	f10d 0904 	add.w	r9, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000aac:	f011 0102 	ands.w	r1, r1, #2
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000ab0:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000ab2:	441c      	add	r4, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000ab4:	f8c6 901c 	str.w	r9, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8000ab8:	f8c6 9020 	str.w	r9, [r6, #32]
 8000abc:	d129      	bne.n	8000b12 <chSchGoSleepTimeoutS+0x142>
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000abe:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000ac0:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000ac2:	6111      	str	r1, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000ac4:	60d3      	str	r3, [r2, #12]
 8000ac6:	e7c3      	b.n	8000a50 <chSchGoSleepTimeoutS+0x80>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d2aa      	bcs.n	8000a22 <chSchGoSleepTimeoutS+0x52>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000acc:	4420      	add	r0, r4
 8000ace:	f001 fdff 	bl	80026d0 <stSetAlarm>
 8000ad2:	68ab      	ldr	r3, [r5, #8]
 8000ad4:	e7a5      	b.n	8000a22 <chSchGoSleepTimeoutS+0x52>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000ad6:	9a01      	ldr	r2, [sp, #4]
 8000ad8:	61ca      	str	r2, [r1, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000ada:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000adc:	4542      	cmp	r2, r8
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000ade:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_func = NULL;
 8000ae2:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ae4:	d019      	beq.n	8000b1a <chSchGoSleepTimeoutS+0x14a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000ae6:	6893      	ldr	r3, [r2, #8]
 8000ae8:	9c03      	ldr	r4, [sp, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <chSchGoSleepTimeoutS+0x160>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000aec:	6a89      	ldr	r1, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000aee:	4423      	add	r3, r4
 8000af0:	6093      	str	r3, [r2, #8]
 8000af2:	6a40      	ldr	r0, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000af4:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d9cd      	bls.n	8000a96 <chSchGoSleepTimeoutS+0xc6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000afa:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	bf98      	it	ls
 8000b00:	2302      	movls	r3, #2
 8000b02:	4418      	add	r0, r3
 8000b04:	f001 fde4 	bl	80026d0 <stSetAlarm>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000b08:	69b3      	ldr	r3, [r6, #24]
 8000b0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000b0c:	b007      	add	sp, #28
 8000b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b12:	b672      	cpsid	i
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <chSchGoSleepTimeoutS+0x168>)
 8000b16:	62f3      	str	r3, [r6, #44]	; 0x2c
 8000b18:	e7fe      	b.n	8000b18 <chSchGoSleepTimeoutS+0x148>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <chSchGoSleepTimeoutS+0x160>)
 8000b1c:	60d3      	str	r3, [r2, #12]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000b1e:	69b3      	ldr	r3, [r6, #24]
 8000b20:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000b22:	b007      	add	sp, #28
 8000b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b28:	2000bfd8 	.word	0x2000bfd8
 8000b2c:	080055d0 	.word	0x080055d0
 8000b30:	40000c00 	.word	0x40000c00
 8000b34:	08000da1 	.word	0x08000da1
 8000b38:	08005480 	.word	0x08005480
 8000b3c:	00000000 	.word	0x00000000

08000b40 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000b40:	b169      	cbz	r1, 8000b5e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000b44:	b410      	push	{r4}
 8000b46:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000b48:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b4a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000b52:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000b54:	6053      	str	r3, [r2, #4]
}
 8000b56:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b5a:	f7ff bf39 	b.w	80009d0 <chSchGoSleepTimeoutS>
}
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	4770      	bx	lr
 8000b64:	2000bfd8 	.word	0x2000bfd8
	...

08000b70 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000b70:	b510      	push	{r4, lr}
 8000b72:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8000b74:	f7ff ff1c 	bl	80009b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000b78:	b1cc      	cbz	r4, 8000bae <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 8000b7a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000b7e:	b18b      	cbz	r3, 8000ba4 <chSchReadyI+0x34>
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d00f      	beq.n	8000ba4 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000b84:	2200      	movs	r2, #0
 8000b86:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <chSchReadyI+0x48>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000b8a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000b8e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	428a      	cmp	r2, r1
 8000b94:	d2fb      	bcs.n	8000b8e <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000b9a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000b9c:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000b9e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000ba0:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000ba2:	bd10      	pop	{r4, pc}
 8000ba4:	b672      	cpsid	i
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <chSchReadyI+0x48>)
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <chSchReadyI+0x4c>)
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bac:	e7fe      	b.n	8000bac <chSchReadyI+0x3c>
 8000bae:	b672      	cpsid	i
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <chSchReadyI+0x48>)
 8000bb2:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <chSchReadyI+0x4c>)
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb6:	e7fe      	b.n	8000bb6 <chSchReadyI+0x46>
 8000bb8:	2000bfd8 	.word	0x2000bfd8
 8000bbc:	080054b0 	.word	0x080054b0

08000bc0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc4:	4680      	mov	r8, r0
 8000bc6:	460e      	mov	r6, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8000bc8:	f7ff fef2 	bl	80009b0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8000bcc:	f1b8 0f00 	cmp.w	r8, #0
 8000bd0:	d039      	beq.n	8000c46 <chEvtBroadcastFlagsI+0x86>

  elp = esp->es_next;
 8000bd2:	f8d8 4000 	ldr.w	r4, [r8]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000bd6:	45a0      	cmp	r8, r4
 8000bd8:	d026      	beq.n	8000c28 <chEvtBroadcastFlagsI+0x68>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000bda:	2700      	movs	r7, #0
 8000bdc:	e002      	b.n	8000be4 <chEvtBroadcastFlagsI+0x24>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000bde:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	d021      	beq.n	8000c28 <chEvtBroadcastFlagsI+0x68>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000be4:	68e3      	ldr	r3, [r4, #12]
 8000be6:	4333      	orrs	r3, r6
 8000be8:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000bea:	b116      	cbz	r6, 8000bf2 <chEvtBroadcastFlagsI+0x32>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000bec:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000bee:	4213      	tst	r3, r2
 8000bf0:	d0f5      	beq.n	8000bde <chEvtBroadcastFlagsI+0x1e>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000bf2:	6865      	ldr	r5, [r4, #4]
 8000bf4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 8000bf8:	f7ff feda 	bl	80009b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000bfc:	b1f5      	cbz	r5, 8000c3c <chEvtBroadcastFlagsI+0x7c>

  tp->p_epending |= events;
 8000bfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000c00:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000c04:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000c08:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000c0a:	63ab      	str	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000c0c:	d00e      	beq.n	8000c2c <chEvtBroadcastFlagsI+0x6c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000c0e:	2a0b      	cmp	r2, #11
 8000c10:	d1e5      	bne.n	8000bde <chEvtBroadcastFlagsI+0x1e>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000c12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c14:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d1e1      	bne.n	8000bde <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000c1a:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f7ff ffa7 	bl	8000b70 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000c22:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d1dd      	bne.n	8000be4 <chEvtBroadcastFlagsI+0x24>
 8000c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000c2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000c2e:	4213      	tst	r3, r2
 8000c30:	d0d5      	beq.n	8000bde <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000c32:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000c34:	4628      	mov	r0, r5
 8000c36:	f7ff ff9b 	bl	8000b70 <chSchReadyI>
 8000c3a:	e7f2      	b.n	8000c22 <chEvtBroadcastFlagsI+0x62>
 8000c3c:	b672      	cpsid	i
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <chEvtBroadcastFlagsI+0x90>)
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <chEvtBroadcastFlagsI+0x94>)
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c44:	e7fe      	b.n	8000c44 <chEvtBroadcastFlagsI+0x84>
 8000c46:	b672      	cpsid	i
 8000c48:	4b01      	ldr	r3, [pc, #4]	; (8000c50 <chEvtBroadcastFlagsI+0x90>)
 8000c4a:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <chEvtBroadcastFlagsI+0x98>)
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c4e:	e7fe      	b.n	8000c4e <chEvtBroadcastFlagsI+0x8e>
 8000c50:	2000bfd8 	.word	0x2000bfd8
 8000c54:	08005490 	.word	0x08005490
 8000c58:	08005530 	.word	0x08005530
 8000c5c:	00000000 	.word	0x00000000

08000c60 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	b173      	cbz	r3, 8000c82 <chThdResumeI+0x22>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8000c64:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000c68:	2a03      	cmp	r2, #3
 8000c6a:	d004      	beq.n	8000c76 <chThdResumeI+0x16>
 8000c6c:	b672      	cpsid	i
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <chThdResumeI+0x24>)
 8000c70:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <chThdResumeI+0x28>)
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c74:	e7fe      	b.n	8000c74 <chThdResumeI+0x14>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000c76:	2200      	movs	r2, #0
 8000c78:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000c7a:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000c7c:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000c7e:	f7ff bf77 	b.w	8000b70 <chSchReadyI>
 8000c82:	4770      	bx	lr
 8000c84:	2000bfd8 	.word	0x2000bfd8
 8000c88:	08005600 	.word	0x08005600
 8000c8c:	00000000 	.word	0x00000000

08000c90 <chThdExitS>:
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8000c90:	4d10      	ldr	r5, [pc, #64]	; (8000cd4 <chThdExitS+0x44>)
 8000c92:	69ac      	ldr	r4, [r5, #24]
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000c94:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8000c98:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000c9a:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d007      	beq.n	8000cb2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff62 	bl	8000b70 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000cae:	42b3      	cmp	r3, r6
 8000cb0:	d1f7      	bne.n	8000ca2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000cb2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000cb6:	079b      	lsls	r3, r3, #30
 8000cb8:	d104      	bne.n	8000cc4 <chThdExitS+0x34>
    REG_REMOVE(tp);
 8000cba:	6963      	ldr	r3, [r4, #20]
 8000cbc:	6922      	ldr	r2, [r4, #16]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	6922      	ldr	r2, [r4, #16]
 8000cc2:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f7ff fe3b 	bl	8000940 <chSchGoSleepS>
 8000cca:	b672      	cpsid	i
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <chThdExitS+0x48>)
 8000cce:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000cd0:	e7fe      	b.n	8000cd0 <chThdExitS+0x40>
 8000cd2:	bf00      	nop
 8000cd4:	2000bfd8 	.word	0x2000bfd8
 8000cd8:	080054c0 	.word	0x080054c0
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <_dbg_check_leave_isr>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_leave_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_dbg_check_leave_isr+0x24>)
 8000ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	dd01      	ble.n	8000cf2 <_dbg_check_leave_isr+0x12>
 8000cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cf0:	b119      	cbz	r1, 8000cfa <_dbg_check_leave_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf2:	b672      	cpsid	i
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <_dbg_check_leave_isr+0x28>)
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf8:	e7fe      	b.n	8000cf8 <_dbg_check_leave_isr+0x18>
    chSysHalt("SV#9");
  }
  ch.dbg.isr_cnt--;
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000cfe:	f381 8811 	msr	BASEPRI, r1
 8000d02:	4770      	bx	lr
 8000d04:	2000bfd8 	.word	0x2000bfd8
 8000d08:	08005500 	.word	0x08005500
 8000d0c:	00000000 	.word	0x00000000

08000d10 <_dbg_check_enter_isr>:
 8000d10:	2320      	movs	r3, #32
 8000d12:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_enter_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_dbg_check_enter_isr+0x24>)
 8000d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	db01      	blt.n	8000d22 <_dbg_check_enter_isr+0x12>
 8000d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d20:	b119      	cbz	r1, 8000d2a <_dbg_check_enter_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d22:	b672      	cpsid	i
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <_dbg_check_enter_isr+0x28>)
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d28:	e7fe      	b.n	8000d28 <_dbg_check_enter_isr+0x18>
    chSysHalt("SV#8");
  }
  ch.dbg.isr_cnt++;
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d2e:	f381 8811 	msr	BASEPRI, r1
 8000d32:	4770      	bx	lr
 8000d34:	2000bfd8 	.word	0x2000bfd8
 8000d38:	08005508 	.word	0x08005508
 8000d3c:	00000000 	.word	0x00000000

08000d40 <_dbg_check_unlock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <_dbg_check_unlock_from_isr+0x1c>)
 8000d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd05      	ble.n	8000d54 <_dbg_check_unlock_from_isr+0x14>
 8000d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	dd02      	ble.n	8000d54 <_dbg_check_unlock_from_isr+0x14>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
 8000d52:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
 8000d56:	4a02      	ldr	r2, [pc, #8]	; (8000d60 <_dbg_check_unlock_from_isr+0x20>)
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5a:	e7fe      	b.n	8000d5a <_dbg_check_unlock_from_isr+0x1a>
 8000d5c:	2000bfd8 	.word	0x2000bfd8
 8000d60:	08005510 	.word	0x08005510
	...

08000d70 <_dbg_check_lock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <_dbg_check_lock_from_isr+0x1c>)
 8000d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dd01      	ble.n	8000d7c <_dbg_check_lock_from_isr+0xc>
 8000d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7a:	b11a      	cbz	r2, 8000d84 <_dbg_check_lock_from_isr+0x14>
 8000d7c:	b672      	cpsid	i
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <_dbg_check_lock_from_isr+0x20>)
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d82:	e7fe      	b.n	8000d82 <_dbg_check_lock_from_isr+0x12>
    chSysHalt("SV#6");
  }
  _dbg_enter_lock();
 8000d84:	2201      	movs	r2, #1
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000bfd8 	.word	0x2000bfd8
 8000d90:	08005518 	.word	0x08005518
	...

08000da0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000da4:	2320      	movs	r3, #32
 8000da6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8000daa:	f7ff fd61 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000dae:	f7ff ffdf 	bl	8000d70 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000db2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000db6:	2b07      	cmp	r3, #7
 8000db8:	d810      	bhi.n	8000ddc <wakeup+0x3c>
 8000dba:	e8df f003 	tbb	[pc, r3]
 8000dbe:	0f15      	.short	0x0f15
 8000dc0:	040a1d0f 	.word	0x040a1d0f
 8000dc4:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000dc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000dc8:	f7ff fdf2 	bl	80009b0 <chDbgCheckClassI>

  sp->s_cnt++;
 8000dcc:	68ab      	ldr	r3, [r5, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000dd2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000dd6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000dd8:	6822      	ldr	r2, [r4, #0]
 8000dda:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fec4 	bl	8000b70 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000de8:	f7ff ffaa 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000dec:	f7ff fd28 	bl	8000840 <_stats_stop_measure_crit_isr>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff feb3 	bl	8000b70 <chSchReadyI>
 8000e0a:	e7ed      	b.n	8000de8 <wakeup+0x48>
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <_dbg_check_unlock>:
 *
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <_dbg_check_unlock+0x18>)
 8000e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e14:	b922      	cbnz	r2, 8000e20 <_dbg_check_unlock+0x10>
 8000e16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	dd01      	ble.n	8000e20 <_dbg_check_unlock+0x10>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1e:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
 8000e22:	4a02      	ldr	r2, [pc, #8]	; (8000e2c <_dbg_check_unlock+0x1c>)
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e26:	e7fe      	b.n	8000e26 <_dbg_check_unlock+0x16>
 8000e28:	2000bfd8 	.word	0x2000bfd8
 8000e2c:	08005520 	.word	0x08005520

08000e30 <_dbg_check_lock>:
 *
 * @notapi
 */
void _dbg_check_lock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_dbg_check_lock+0x18>)
 8000e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e34:	b90a      	cbnz	r2, 8000e3a <_dbg_check_lock+0xa>
 8000e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e38:	b11a      	cbz	r2, 8000e42 <_dbg_check_lock+0x12>
 8000e3a:	b672      	cpsid	i
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <_dbg_check_lock+0x1c>)
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e40:	e7fe      	b.n	8000e40 <_dbg_check_lock+0x10>
    chSysHalt("SV#4");
  }
  _dbg_enter_lock();
 8000e42:	2201      	movs	r2, #1
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
 8000e46:	4770      	bx	lr
 8000e48:	2000bfd8 	.word	0x2000bfd8
 8000e4c:	08005528 	.word	0x08005528

08000e50 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	4604      	mov	r4, r0
 8000e54:	460f      	mov	r7, r1
 8000e56:	4616      	mov	r6, r2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e58:	2320      	movs	r3, #32
 8000e5a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8000e5e:	f7ff fd0f 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000e62:	f7ff ffe5 	bl	8000e30 <_dbg_check_lock>
 8000e66:	e003      	b.n	8000e70 <chOQPutTimeout+0x20>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e68:	f7ff fe6a 	bl	8000b40 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000e6c:	1e05      	subs	r5, r0, #0
 8000e6e:	db28      	blt.n	8000ec2 <chOQPutTimeout+0x72>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8000e70:	f7ff fd9e 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 8000e74:	68a3      	ldr	r3, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e76:	4620      	mov	r0, r4
 8000e78:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f4      	beq.n	8000e68 <chOQPutTimeout+0x18>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000e7e:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e80:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e82:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e84:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000e86:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e88:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e8a:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000e8c:	6923      	ldr	r3, [r4, #16]
 8000e8e:	6962      	ldr	r2, [r4, #20]
 8000e90:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000e92:	bf24      	itt	cs
 8000e94:	68e3      	ldrcs	r3, [r4, #12]
 8000e96:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000e98:	69e3      	ldr	r3, [r4, #28]
 8000e9a:	b10b      	cbz	r3, 8000ea0 <chOQPutTimeout+0x50>
    oqp->q_notify(oqp);
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000ea0:	f7ff ffb6 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000ea4:	f7ff fcd4 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <chOQPutTimeout+0xa8>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d004      	beq.n	8000eba <chOQPutTimeout+0x6a>
 8000eb0:	6999      	ldr	r1, [r3, #24]
 8000eb2:	6892      	ldr	r2, [r2, #8]
 8000eb4:	6889      	ldr	r1, [r1, #8]
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d319      	bcc.n	8000eee <chOQPutTimeout+0x9e>
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8000ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000ec2:	f7ff ffa5 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000ec6:	f7ff fcc3 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <chOQPutTimeout+0xa8>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d004      	beq.n	8000edc <chOQPutTimeout+0x8c>
 8000ed2:	6999      	ldr	r1, [r3, #24]
 8000ed4:	6892      	ldr	r2, [r2, #8]
 8000ed6:	6889      	ldr	r1, [r1, #8]
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	d304      	bcc.n	8000ee6 <chOQPutTimeout+0x96>
 8000edc:	2300      	movs	r3, #0
 8000ede:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee6:	b672      	cpsid	i
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <chOQPutTimeout+0xac>)
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eec:	e7fe      	b.n	8000eec <chOQPutTimeout+0x9c>
 8000eee:	b672      	cpsid	i
 8000ef0:	4a02      	ldr	r2, [pc, #8]	; (8000efc <chOQPutTimeout+0xac>)
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef4:	e7fe      	b.n	8000ef4 <chOQPutTimeout+0xa4>
 8000ef6:	bf00      	nop
 8000ef8:	2000bfd8 	.word	0x2000bfd8
 8000efc:	08006780 	.word	0x08006780

08000f00 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f04:	b083      	sub	sp, #12
 8000f06:	4699      	mov	r9, r3
  qnotify_t nfy = iqp->q_notify;
 8000f08:	69c3      	ldr	r3, [r0, #28]
 8000f0a:	9301      	str	r3, [sp, #4]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000f0c:	4682      	mov	sl, r0
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;

  chDbgCheck(n > 0U);
 8000f0e:	4614      	mov	r4, r2
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d065      	beq.n	8000fe0 <chIQReadTimeout+0xe0>
 8000f14:	460e      	mov	r6, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f16:	f04f 0820 	mov.w	r8, #32
 8000f1a:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8000f1e:	f7ff fcaf 	bl	8000880 <_stats_start_measure_crit_thd>
 8000f22:	4d36      	ldr	r5, [pc, #216]	; (8000ffc <chIQReadTimeout+0xfc>)
  _dbg_check_lock();
 8000f24:	f7ff ff84 	bl	8000e30 <_dbg_check_lock>
 8000f28:	3c01      	subs	r4, #1
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 8000f2a:	2700      	movs	r7, #0
 8000f2c:	4434      	add	r4, r6

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000f2e:	46ab      	mov	fp, r5

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000f30:	9b01      	ldr	r3, [sp, #4]
 8000f32:	b133      	cbz	r3, 8000f42 <chIQReadTimeout+0x42>
      nfy(iqp);
 8000f34:	4650      	mov	r0, sl
 8000f36:	4798      	blx	r3
 8000f38:	e003      	b.n	8000f42 <chIQReadTimeout+0x42>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000f3a:	f7ff fe01 	bl	8000b40 <chThdEnqueueTimeoutS>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d13a      	bne.n	8000fb8 <chIQReadTimeout+0xb8>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 8000f42:	f7ff fd35 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 8000f46:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000f4a:	4650      	mov	r0, sl
 8000f4c:	4649      	mov	r1, r9
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f3      	beq.n	8000f3a <chIQReadTimeout+0x3a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000f52:	f8da 2018 	ldr.w	r2, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f56:	f8da 3008 	ldr.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f5a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f5c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000f5e:	f8ca 1018 	str.w	r1, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f62:	f8ca 3008 	str.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f66:	7813      	ldrb	r3, [r2, #0]
 8000f68:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8000f6a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000f6e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8000f72:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000f74:	bf24      	itt	cs
 8000f76:	f8da 300c 	ldrcs.w	r3, [sl, #12]
 8000f7a:	f8ca 3018 	strcs.w	r3, [sl, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000f7e:	f7ff ff47 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000f82:	f7ff fc65 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <chIQReadTimeout+0xfc>)
 8000f8a:	42ab      	cmp	r3, r5
 8000f8c:	d005      	beq.n	8000f9a <chIQReadTimeout+0x9a>
 8000f8e:	f8db 1018 	ldr.w	r1, [fp, #24]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	6889      	ldr	r1, [r1, #8]
 8000f96:	4299      	cmp	r1, r3
 8000f98:	d327      	bcc.n	8000fea <chIQReadTimeout+0xea>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
    if (--n == 0U) {
 8000fa0:	42a6      	cmp	r6, r4
    if (iqp->q_rdptr >= iqp->q_top) {
      iqp->q_rdptr = iqp->q_buffer;
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8000fa2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8000fa6:	d017      	beq.n	8000fd8 <chIQReadTimeout+0xd8>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000fa8:	3601      	adds	r6, #1
 8000faa:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8000fae:	f7ff fc67 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000fb2:	f7ff ff3d 	bl	8000e30 <_dbg_check_lock>
 8000fb6:	e7bb      	b.n	8000f30 <chIQReadTimeout+0x30>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000fb8:	f7ff ff2a 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000fbc:	f7ff fc48 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000fc0:	682a      	ldr	r2, [r5, #0]
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <chIQReadTimeout+0xfc>)
 8000fc4:	42aa      	cmp	r2, r5
 8000fc6:	d004      	beq.n	8000fd2 <chIQReadTimeout+0xd2>
 8000fc8:	6999      	ldr	r1, [r3, #24]
 8000fca:	6892      	ldr	r2, [r2, #8]
 8000fcc:	6889      	ldr	r1, [r1, #8]
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d30f      	bcc.n	8000ff2 <chIQReadTimeout+0xf2>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    chSysLock();
  }
}
 8000fd8:	4638      	mov	r0, r7
 8000fda:	b003      	add	sp, #12
 8000fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <chIQReadTimeout+0xfc>)
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <chIQReadTimeout+0x100>)
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe8:	e7fe      	b.n	8000fe8 <chIQReadTimeout+0xe8>
 8000fea:	b672      	cpsid	i
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <chIQReadTimeout+0x104>)
 8000fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ff0:	e7fe      	b.n	8000ff0 <chIQReadTimeout+0xf0>
 8000ff2:	b672      	cpsid	i
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <chIQReadTimeout+0x104>)
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ff8:	e7fe      	b.n	8000ff8 <chIQReadTimeout+0xf8>
 8000ffa:	bf00      	nop
 8000ffc:	2000bfd8 	.word	0x2000bfd8
 8001000:	080055e0 	.word	0x080055e0
 8001004:	08006780 	.word	0x08006780
	...

08001010 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001010:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001012:	2320      	movs	r3, #32
 8001014:	4604      	mov	r4, r0
 8001016:	460e      	mov	r6, r1
 8001018:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800101c:	f7ff fc30 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001020:	f7ff ff06 	bl	8000e30 <_dbg_check_lock>
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	b133      	cbz	r3, 8001036 <chIQGetTimeout+0x26>
    iqp->q_notify(iqp);
 8001028:	4620      	mov	r0, r4
 800102a:	4798      	blx	r3
 800102c:	e003      	b.n	8001036 <chIQGetTimeout+0x26>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800102e:	f7ff fd87 	bl	8000b40 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001032:	1e05      	subs	r5, r0, #0
 8001034:	db25      	blt.n	8001082 <chIQGetTimeout+0x72>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 8001036:	f7ff fcbb 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 800103a:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800103c:	4620      	mov	r0, r4
 800103e:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f4      	beq.n	800102e <chIQGetTimeout+0x1e>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001044:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001046:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001048:	6920      	ldr	r0, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800104a:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800104c:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800104e:	4282      	cmp	r2, r0
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001050:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001052:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001054:	bf28      	it	cs
 8001056:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001058:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800105a:	bf28      	it	cs
 800105c:	61a3      	strcs	r3, [r4, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800105e:	f7ff fed7 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001062:	f7ff fbf5 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <chIQGetTimeout+0x9c>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d004      	beq.n	8001078 <chIQGetTimeout+0x68>
 800106e:	6999      	ldr	r1, [r3, #24]
 8001070:	6892      	ldr	r2, [r2, #8]
 8001072:	6889      	ldr	r1, [r1, #8]
 8001074:	4291      	cmp	r1, r2
 8001076:	d315      	bcc.n	80010a4 <chIQGetTimeout+0x94>
 8001078:	2300      	movs	r3, #0
 800107a:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
 800107e:	4628      	mov	r0, r5
}
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001082:	f7ff fec5 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001086:	f7ff fbe3 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <chIQGetTimeout+0x9c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d0f2      	beq.n	8001078 <chIQGetTimeout+0x68>
 8001092:	6999      	ldr	r1, [r3, #24]
 8001094:	6892      	ldr	r2, [r2, #8]
 8001096:	6889      	ldr	r1, [r1, #8]
 8001098:	4291      	cmp	r1, r2
 800109a:	d2ed      	bcs.n	8001078 <chIQGetTimeout+0x68>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <chIQGetTimeout+0xa0>)
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a2:	e7fe      	b.n	80010a2 <chIQGetTimeout+0x92>
 80010a4:	b672      	cpsid	i
 80010a6:	4a02      	ldr	r2, [pc, #8]	; (80010b0 <chIQGetTimeout+0xa0>)
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010aa:	e7fe      	b.n	80010aa <chIQGetTimeout+0x9a>
 80010ac:	2000bfd8 	.word	0x2000bfd8
 80010b0:	08006780 	.word	0x08006780
	...

080010c0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	4605      	mov	r5, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80010c4:	2320      	movs	r3, #32
 80010c6:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80010ca:	4e47      	ldr	r6, [pc, #284]	; (80011e8 <chMtxLock+0x128>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80010cc:	f7ff fbd8 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010d0:	f7ff feae 	bl	8000e30 <_dbg_check_lock>
 80010d4:	69b4      	ldr	r4, [r6, #24]

  chDbgCheckClassS();
 80010d6:	f7ff fc23 	bl	8000920 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d046      	beq.n	800116c <chMtxLock+0xac>

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80010de:	68a8      	ldr	r0, [r5, #8]
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d04e      	beq.n	8001182 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80010e4:	68a2      	ldr	r2, [r4, #8]
 80010e6:	6883      	ldr	r3, [r0, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d907      	bls.n	80010fc <chMtxLock+0x3c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80010ec:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80010f0:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d05e      	beq.n	80011b4 <chMtxLock+0xf4>
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d024      	beq.n	8001144 <chMtxLock+0x84>
 80010fa:	b1c3      	cbz	r3, 800112e <chMtxLock+0x6e>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010fc:	462b      	mov	r3, r5
 80010fe:	e003      	b.n	8001108 <chMtxLock+0x48>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001100:	6899      	ldr	r1, [r3, #8]
 8001102:	68a2      	ldr	r2, [r4, #8]
 8001104:	4291      	cmp	r1, r2
 8001106:	d302      	bcc.n	800110e <chMtxLock+0x4e>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001108:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800110a:	429d      	cmp	r5, r3
 800110c:	d1f8      	bne.n	8001100 <chMtxLock+0x40>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001112:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001114:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001116:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001118:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 800111a:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800111c:	f7ff fc10 	bl	8000940 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8001120:	68ab      	ldr	r3, [r5, #8]
 8001122:	429c      	cmp	r4, r3
 8001124:	d026      	beq.n	8001174 <chMtxLock+0xb4>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001126:	b672      	cpsid	i
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <chMtxLock+0x12c>)
 800112a:	62f3      	str	r3, [r6, #44]	; 0x2c
 800112c:	e7fe      	b.n	800112c <chMtxLock+0x6c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800112e:	e890 000c 	ldmia.w	r0, {r2, r3}
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
 8001132:	2101      	movs	r1, #1
 8001134:	f880 1020 	strb.w	r1, [r0, #32]
 8001138:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	6053      	str	r3, [r2, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800113e:	f7ff fd17 	bl	8000b70 <chSchReadyI>
 8001142:	e7db      	b.n	80010fc <chMtxLock+0x3c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001144:	e890 000a 	ldmia.w	r0, {r1, r3}
 8001148:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800114a:	6807      	ldr	r7, [r0, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800114c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800114e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001150:	460b      	mov	r3, r1
 8001152:	e002      	b.n	800115a <chMtxLock+0x9a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001154:	689f      	ldr	r7, [r3, #8]
 8001156:	4297      	cmp	r7, r2
 8001158:	d302      	bcc.n	8001160 <chMtxLock+0xa0>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800115a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800115c:	4299      	cmp	r1, r3
 800115e:	d1f9      	bne.n	8001154 <chMtxLock+0x94>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001164:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001166:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8001168:	6058      	str	r0, [r3, #4]
 800116a:	e7c7      	b.n	80010fc <chMtxLock+0x3c>
 800116c:	b672      	cpsid	i
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <chMtxLock+0x12c>)
 8001170:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001172:	e7fe      	b.n	8001172 <chMtxLock+0xb2>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
      chDbgAssert(ctp->p_mtxlist == mp, "not owned");
 8001174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001176:	429d      	cmp	r5, r3
 8001178:	d007      	beq.n	800118a <chMtxLock+0xca>
 800117a:	b672      	cpsid	i
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <chMtxLock+0x12c>)
 800117e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001180:	e7fe      	b.n	8001180 <chMtxLock+0xc0>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001182:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001184:	60eb      	str	r3, [r5, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8001186:	60ac      	str	r4, [r5, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 8001188:	63e5      	str	r5, [r4, #60]	; 0x3c
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800118a:	f7ff fe41 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800118e:	f7ff fb5f 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001192:	6832      	ldr	r2, [r6, #0]
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <chMtxLock+0x128>)
 8001196:	42b2      	cmp	r2, r6
 8001198:	d004      	beq.n	80011a4 <chMtxLock+0xe4>
 800119a:	6999      	ldr	r1, [r3, #24]
 800119c:	6892      	ldr	r2, [r2, #8]
 800119e:	6889      	ldr	r1, [r1, #8]
 80011a0:	4291      	cmp	r1, r2
 80011a2:	d303      	bcc.n	80011ac <chMtxLock+0xec>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80011a4:	2300      	movs	r3, #0
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <chMtxLock+0x130>)
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b2:	e7fe      	b.n	80011b2 <chMtxLock+0xf2>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80011b4:	e890 000a 	ldmia.w	r0, {r1, r3}
 80011b8:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80011ba:	6807      	ldr	r7, [r0, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80011bc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80011be:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80011c0:	460b      	mov	r3, r1
 80011c2:	e002      	b.n	80011ca <chMtxLock+0x10a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011c4:	689f      	ldr	r7, [r3, #8]
 80011c6:	4297      	cmp	r7, r2
 80011c8:	d302      	bcc.n	80011d0 <chMtxLock+0x110>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80011ca:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d1f9      	bne.n	80011c4 <chMtxLock+0x104>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80011d4:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011d6:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80011d8:	6058      	str	r0, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80011da:	6888      	ldr	r0, [r1, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80011dc:	68a2      	ldr	r2, [r4, #8]
 80011de:	6883      	ldr	r3, [r0, #8]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d883      	bhi.n	80010ec <chMtxLock+0x2c>
 80011e4:	e78a      	b.n	80010fc <chMtxLock+0x3c>
 80011e6:	bf00      	nop
 80011e8:	2000bfd8 	.word	0x2000bfd8
 80011ec:	080054a0 	.word	0x080054a0
 80011f0:	08006ce0 	.word	0x08006ce0
	...

08001200 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001200:	b508      	push	{r3, lr}
 8001202:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001204:	2320      	movs	r3, #32
 8001206:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800120a:	f7ff fb39 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800120e:	f7ff fe0f 	bl	8000e30 <_dbg_check_lock>

  chSysLock();
  chThdExitS(msg);
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff fd3c 	bl	8000c90 <chThdExitS>
	...

08001220 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001220:	b510      	push	{r4, lr}
 8001222:	2320      	movs	r3, #32
 8001224:	4604      	mov	r4, r0
 8001226:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800122a:	f7ff fb29 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800122e:	f7ff fdff 	bl	8000e30 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8001232:	b1a4      	cbz	r4, 800125e <chThdSleep+0x3e>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001234:	4621      	mov	r1, r4
 8001236:	2008      	movs	r0, #8
 8001238:	f7ff fbca 	bl	80009d0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800123c:	f7ff fde8 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001240:	f7ff fb06 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <chThdSleep+0x50>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d004      	beq.n	8001256 <chThdSleep+0x36>
 800124c:	6999      	ldr	r1, [r3, #24]
 800124e:	6892      	ldr	r2, [r2, #8]
 8001250:	6889      	ldr	r1, [r1, #8]
 8001252:	4291      	cmp	r1, r2
 8001254:	d308      	bcc.n	8001268 <chThdSleep+0x48>
 8001256:	2300      	movs	r3, #0
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125e:	b672      	cpsid	i
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <chThdSleep+0x50>)
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <chThdSleep+0x54>)
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
 8001266:	e7fe      	b.n	8001266 <chThdSleep+0x46>
 8001268:	b672      	cpsid	i
 800126a:	4a03      	ldr	r2, [pc, #12]	; (8001278 <chThdSleep+0x58>)
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
 800126e:	e7fe      	b.n	800126e <chThdSleep+0x4e>
 8001270:	2000bfd8 	.word	0x2000bfd8
 8001274:	08006d80 	.word	0x08006d80
 8001278:	08006dc0 	.word	0x08006dc0
 800127c:	00000000 	.word	0x00000000

08001280 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	4617      	mov	r7, r2
 8001286:	4698      	mov	r8, r3
 8001288:	b083      	sub	sp, #12
 800128a:	4604      	mov	r4, r0
 800128c:	468a      	mov	sl, r1
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800128e:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001292:	4603      	mov	r3, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	f803 2b01 	strb.w	r2, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 800129a:	429d      	cmp	r5, r3
 800129c:	d1fb      	bne.n	8001296 <chThdCreateStatic+0x16>
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 800129e:	eb04 020a 	add.w	r2, r4, sl
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80012a2:	4295      	cmp	r5, r2
 80012a4:	d205      	bcs.n	80012b2 <chThdCreateStatic+0x32>
 80012a6:	462b      	mov	r3, r5
    *startp++ = v;
 80012a8:	2155      	movs	r1, #85	; 0x55
 80012aa:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d1fb      	bne.n	80012aa <chThdCreateStatic+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80012b2:	2320      	movs	r3, #32
 80012b4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80012b8:	f7ff fae2 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80012bc:	f7ff fdb8 	bl	8000e30 <_dbg_check_lock>
                       tprio_t prio, tfunc_t pf, void *arg) {
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 80012c0:	f7ff fb76 	bl	80009b0 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	f000 8083 	beq.w	80013d0 <chThdCreateStatic+0x150>
 80012ca:	f5ba 7fb8 	cmp.w	sl, #368	; 0x170
 80012ce:	d37f      	bcc.n	80013d0 <chThdCreateStatic+0x150>
 80012d0:	2f7f      	cmp	r7, #127	; 0x7f
 80012d2:	d87d      	bhi.n	80013d0 <chThdCreateStatic+0x150>
 80012d4:	f1b8 0f00 	cmp.w	r8, #0
 80012d8:	d07a      	beq.n	80013d0 <chThdCreateStatic+0x150>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012da:	4e49      	ldr	r6, [pc, #292]	; (8001400 <chThdCreateStatic+0x180>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012dc:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001414 <chThdCreateStatic+0x194>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012e0:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012e2:	f1aa 0164 	sub.w	r1, sl, #100	; 0x64
 80012e6:	4421      	add	r1, r4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80012e8:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80012ec:	9201      	str	r2, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012f0:	60e1      	str	r1, [r4, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80012f2:	2000      	movs	r0, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012f4:	f8c1 8040 	str.w	r8, [r1, #64]	; 0x40
 80012f8:	644a      	str	r2, [r1, #68]	; 0x44
 80012fa:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012fe:	9a01      	ldr	r2, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001300:	6163      	str	r3, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001302:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001306:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800130a:	f04f 0a02 	mov.w	sl, #2
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800130e:	f04f 3bff 	mov.w	fp, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001312:	f04f 0800 	mov.w	r8, #0
 8001316:	f04f 0900 	mov.w	r9, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800131a:	60a7      	str	r7, [r4, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800131c:	6126      	str	r6, [r4, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800131e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001322:	63e0      	str	r0, [r4, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001324:	63a0      	str	r0, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001326:	61a0      	str	r0, [r4, #24]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001328:	6427      	str	r7, [r4, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800132a:	f884 a020 	strb.w	sl, [r4, #32]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800132e:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001332:	611c      	str	r4, [r3, #16]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001334:	64e0      	str	r0, [r4, #76]	; 0x4c
  tmp->last       = (rtcnt_t)0;
 8001336:	6520      	str	r0, [r4, #80]	; 0x50
  tmp->n          = (ucnt_t)0;
 8001338:	6560      	str	r0, [r4, #84]	; 0x54
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 800133a:	61e5      	str	r5, [r4, #28]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800133c:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001340:	62e2      	str	r2, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8001342:	6322      	str	r2, [r4, #48]	; 0x30
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001344:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001348:	e9c4 8916 	strd	r8, r9, [r4, #88]	; 0x58
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800134c:	6174      	str	r4, [r6, #20]
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {

  chDbgCheckClassS();
 800134e:	f7ff fae7 	bl	8000920 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	69b0      	ldr	r0, [r6, #24]
 8001356:	42b3      	cmp	r3, r6
 8001358:	d04f      	beq.n	80013fa <chThdCreateStatic+0x17a>
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	6883      	ldr	r3, [r0, #8]
 800135e:	4293      	cmp	r3, r2
 8001360:	d347      	bcc.n	80013f2 <chThdCreateStatic+0x172>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001362:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001364:	429f      	cmp	r7, r3
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001366:	6262      	str	r2, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001368:	d93f      	bls.n	80013ea <chThdCreateStatic+0x16a>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 800136a:	f7ff fc01 	bl	8000b70 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800136e:	2301      	movs	r3, #1
 8001370:	f884 3020 	strb.w	r3, [r4, #32]
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8001374:	4605      	mov	r5, r0
    setcurrp(ntp);
 8001376:	61b4      	str	r4, [r6, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001378:	f7ff fa02 	bl	8000780 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 800137c:	f8d6 34ac 	ldr.w	r3, [r6, #1196]	; 0x4ac
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001380:	4f1f      	ldr	r7, [pc, #124]	; (8001400 <chThdCreateStatic+0x180>)
 8001382:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8001384:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8001388:	f104 0148 	add.w	r1, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 800138c:	f8c6 34ac 	str.w	r3, [r6, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8001390:	f7ff f9d6 	bl	8000740 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001394:	f3ef 8309 	mrs	r3, PSP
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001398:	69ea      	ldr	r2, [r5, #28]
 800139a:	3b64      	subs	r3, #100	; 0x64
 800139c:	429a      	cmp	r2, r3
 800139e:	d820      	bhi.n	80013e2 <chThdCreateStatic+0x162>
 80013a0:	4629      	mov	r1, r5
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7fe ff94 	bl	80002d0 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80013a8:	f7ff fd32 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80013ac:	f7ff fa50 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80013b0:	6832      	ldr	r2, [r6, #0]
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <chThdCreateStatic+0x180>)
 80013b4:	42b2      	cmp	r2, r6
 80013b6:	d004      	beq.n	80013c2 <chThdCreateStatic+0x142>
 80013b8:	6999      	ldr	r1, [r3, #24]
 80013ba:	6892      	ldr	r2, [r2, #8]
 80013bc:	6889      	ldr	r1, [r1, #8]
 80013be:	4291      	cmp	r1, r2
 80013c0:	d30b      	bcc.n	80013da <chThdCreateStatic+0x15a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80013c2:	2300      	movs	r3, #0
 80013c4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
  chSysUnlock();

  return tp;
}
 80013c8:	4620      	mov	r0, r4
 80013ca:	b003      	add	sp, #12
 80013cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <chThdCreateStatic+0x180>)
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <chThdCreateStatic+0x184>)
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d8:	e7fe      	b.n	80013d8 <chThdCreateStatic+0x158>
 80013da:	b672      	cpsid	i
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <chThdCreateStatic+0x188>)
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e0:	e7fe      	b.n	80013e0 <chThdCreateStatic+0x160>
 80013e2:	b672      	cpsid	i
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <chThdCreateStatic+0x18c>)
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e8:	e7fe      	b.n	80013e8 <chThdCreateStatic+0x168>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff fbc0 	bl	8000b70 <chSchReadyI>
 80013f0:	e7da      	b.n	80013a8 <chThdCreateStatic+0x128>
 80013f2:	b672      	cpsid	i
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <chThdCreateStatic+0x190>)
 80013f6:	62f3      	str	r3, [r6, #44]	; 0x2c
 80013f8:	e7fe      	b.n	80013f8 <chThdCreateStatic+0x178>
 80013fa:	6883      	ldr	r3, [r0, #8]
 80013fc:	e7b1      	b.n	8001362 <chThdCreateStatic+0xe2>
 80013fe:	bf00      	nop
 8001400:	2000bfd8 	.word	0x2000bfd8
 8001404:	080054d0 	.word	0x080054d0
 8001408:	08006dc0 	.word	0x08006dc0
 800140c:	080054e0 	.word	0x080054e0
 8001410:	080055f0 	.word	0x080055f0
 8001414:	080002e9 	.word	0x080002e9
	...

08001420 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001420:	e7fe      	b.n	8001420 <BusFault_Handler>
 8001422:	bf00      	nop
	...

08001430 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001430:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001432:	4e11      	ldr	r6, [pc, #68]	; (8001478 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001434:	2500      	movs	r5, #0
 8001436:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800143a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800143e:	42a3      	cmp	r3, r4
 8001440:	d20d      	bcs.n	800145e <__init_ram_areas+0x2e>
 8001442:	3904      	subs	r1, #4
 8001444:	461a      	mov	r2, r3
      *p = *tp;
 8001446:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800144a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800144e:	42a2      	cmp	r2, r4
 8001450:	d3f9      	bcc.n	8001446 <__init_ram_areas+0x16>
 8001452:	43da      	mvns	r2, r3
 8001454:	4414      	add	r4, r2
 8001456:	f024 0403 	bic.w	r4, r4, #3
 800145a:	3404      	adds	r4, #4
 800145c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800145e:	68f2      	ldr	r2, [r6, #12]
 8001460:	4293      	cmp	r3, r2
 8001462:	d203      	bcs.n	800146c <__init_ram_areas+0x3c>
      *p = 0;
 8001464:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001468:	4293      	cmp	r3, r2
 800146a:	d3fb      	bcc.n	8001464 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800146c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800146e:	42be      	cmp	r6, r7
 8001470:	d3e3      	bcc.n	800143a <__init_ram_areas+0xa>
#endif
}
 8001472:	bcf0      	pop	{r4, r5, r6, r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	08005550 	.word	0x08005550
 800147c:	00000000 	.word	0x00000000

08001480 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001480:	e7fe      	b.n	8001480 <__default_exit>
 8001482:	bf00      	nop
	...

08001490 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
	...

080014a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
	...

080014b0 <Test_thread.lto_priv.71>:
static rc_channel_t* rc_channel;
static PIMUStruct pIMU;

static THD_WORKING_AREA(Test_thread_wa, 64);
static THD_FUNCTION(Test_thread, p)
{
 80014b0:	b500      	push	{lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <Test_thread.lto_priv.71+0x90>)
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 80014b4:	4c23      	ldr	r4, [pc, #140]	; (8001544 <Test_thread.lto_priv.71+0x94>)
 80014b6:	699b      	ldr	r3, [r3, #24]
  }
}

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);
 80014b8:	4d23      	ldr	r5, [pc, #140]	; (8001548 <Test_thread.lto_priv.71+0x98>)
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <Test_thread.lto_priv.71+0x9c>)
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palSetPad(GPIOD,GPIOD_LED5);
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  palClearPad(GPIOD,GPIOD_LED3);
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
static THD_FUNCTION(Test_thread, p)
{
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 80014ca:	8321      	strh	r1, [r4, #24]
static rc_channel_t* rc_channel;
static PIMUStruct pIMU;

static THD_WORKING_AREA(Test_thread_wa, 64);
static THD_FUNCTION(Test_thread, p)
{
 80014cc:	b083      	sub	sp, #12
 80014ce:	4628      	mov	r0, r5
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
  palSetPad(GPIOD,GPIOD_LED5);
 80014d0:	8322      	strh	r2, [r4, #24]
 80014d2:	491f      	ldr	r1, [pc, #124]	; (8001550 <Test_thread.lto_priv.71+0xa0>)
  palClearPad(GPIOD,GPIOD_LED3);
 80014d4:	8363      	strh	r3, [r4, #26]
 80014d6:	f001 fcdb 	bl	8002e90 <gptStart>

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 80014da:	68ea      	ldr	r2, [r5, #12]
  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <Test_thread.lto_priv.71+0xa4>)
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <Test_thread.lto_priv.71+0xa8>)

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 80014e0:	2500      	movs	r5, #0
 80014e2:	6015      	str	r5, [r2, #0]
  RC_GPT.tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80014e4:	6355      	str	r5, [r2, #52]	; 0x34
  RC_GPT.tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80014e6:	6395      	str	r5, [r2, #56]	; 0x38
  RC_GPT.tim->CCR[2] = 0;                  /* Comparator 2 disabled.       */
 80014e8:	63d5      	str	r5, [r2, #60]	; 0x3c
  RC_GPT.tim->CCR[3] = 0;                  /* Comparator 2 disabled.       */
 80014ea:	6415      	str	r5, [r2, #64]	; 0x40
  RC_GPT.tim->CNT    = 0;                  /* Counter reset to zero.       */
 80014ec:	6255      	str	r5, [r2, #36]	; 0x24

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
 80014ee:	6991      	ldr	r1, [r2, #24]
 80014f0:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 80014f4:	f041 0142 	orr.w	r1, r1, #66	; 0x42
 80014f8:	6191      	str	r1, [r2, #24]
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 80014fa:	69d1      	ldr	r1, [r2, #28]
 80014fc:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 8001500:	f041 0141 	orr.w	r1, r1, #65	; 0x41
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001504:	f243 3613 	movw	r6, #13075	; 0x3313

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 8001508:	61d1      	str	r1, [r2, #28]
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800150a:	6216      	str	r6, [r2, #32]
                    STM32_TIM_CCER_CC2E |
                    STM32_TIM_CCER_CC3E | STM32_TIM_CCER_CC3P |
                    STM32_TIM_CCER_CC4E | STM32_TIM_CCER_CC4P;


  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);
 800150c:	6891      	ldr	r1, [r2, #8]
 800150e:	f041 0164 	orr.w	r1, r1, #100	; 0x64
 8001512:	6091      	str	r1, [r2, #8]


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;
 8001514:	6811      	ldr	r1, [r2, #0]
 8001516:	f041 0101 	orr.w	r1, r1, #1
 800151a:	6011      	str	r1, [r2, #0]

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 800151c:	223b      	movs	r2, #59	; 0x3b
 800151e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001522:	9500      	str	r5, [sp, #0]
 8001524:	f7ff feac 	bl	8001280 <chThdCreateStatic>

  rc_channel = rc_init();
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <Test_thread.lto_priv.71+0xac>)
 800152a:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <Test_thread.lto_priv.71+0xb0>)
 800152c:	601a      	str	r2, [r3, #0]

  while (true)
  {
    palTogglePad(GPIOD,GPIOD_LED6);
 800152e:	6963      	ldr	r3, [r4, #20]
 8001530:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8001534:	6163      	str	r3, [r4, #20]
    chThdSleepMilliseconds(200);
 8001536:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800153a:	f7ff fe71 	bl	8001220 <chThdSleep>
 800153e:	e7f6      	b.n	800152e <Test_thread.lto_priv.71+0x7e>
 8001540:	2000bfd8 	.word	0x2000bfd8
 8001544:	40020c00 	.word	0x40020c00
 8001548:	2000c7e8 	.word	0x2000c7e8
 800154c:	08006650 	.word	0x08006650
 8001550:	080066c0 	.word	0x080066c0
 8001554:	08004a21 	.word	0x08004a21
 8001558:	20000868 	.word	0x20000868
 800155c:	20000a1c 	.word	0x20000a1c
 8001560:	2000c998 	.word	0x2000c998
	...

08001570 <TFT_thread.lto_priv.73>:
  }
}

static THD_WORKING_AREA(TFT_thread_wa, 4096);
static THD_FUNCTION(TFT_thread, p)
{
 8001570:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001574:	4d0f      	ldr	r5, [pc, #60]	; (80015b4 <TFT_thread.lto_priv.73+0x44>)
  * @retval None
  */
void tft_init(uint8_t orientation, uint16_t in_bg_color,
  uint16_t in_text_color, uint16_t in_text_color_sp)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <TFT_thread.lto_priv.73+0x48>)
 8001578:	69aa      	ldr	r2, [r5, #24]
 800157a:	4910      	ldr	r1, [pc, #64]	; (80015bc <TFT_thread.lto_priv.73+0x4c>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800157c:	4c10      	ldr	r4, [pc, #64]	; (80015c0 <TFT_thread.lto_priv.73+0x50>)
 800157e:	6191      	str	r1, [r2, #24]
 8001580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001584:	831a      	strh	r2, [r3, #24]
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fd99 	bl	80010c0 <chMtxLock>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800158e:	2320      	movs	r3, #32
 8001590:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8001594:	f7ff f974 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001598:	f7ff fc4a 	bl	8000e30 <_dbg_check_lock>
void spiStart(SPIDriver *spip, const SPIConfig *config) {

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800159c:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
 80015a0:	1e53      	subs	r3, r2, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f1a4 040c 	sub.w	r4, r4, #12
 80015a8:	d90e      	bls.n	80015c8 <TFT_thread.lto_priv.73+0x58>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <TFT_thread.lto_priv.73+0x54>)
 80015ae:	62eb      	str	r3, [r5, #44]	; 0x2c
 80015b0:	e7fe      	b.n	80015b0 <TFT_thread.lto_priv.73+0x40>
 80015b2:	bf00      	nop
 80015b4:	2000bfd8 	.word	0x2000bfd8
 80015b8:	40020400 	.word	0x40020400
 80015bc:	08006658 	.word	0x08006658
 80015c0:	2000be0c 	.word	0x2000be0c
 80015c4:	08006630 	.word	0x08006630
                "invalid state");
  spip->config = config;
 80015c8:	4be3      	ldr	r3, [pc, #908]	; (8001958 <TFT_thread.lto_priv.73+0x3e8>)
 80015ca:	6063      	str	r3, [r4, #4]
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80015cc:	2a01      	cmp	r2, #1
 80015ce:	f000 823b 	beq.w	8001a48 <TFT_thread.lto_priv.73+0x4d8>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80015d2:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80015d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80015d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80015d8:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80015da:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80015de:	bf48      	it	mi
 80015e0:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80015e4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80015e8:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80015ea:	bf48      	it	mi
 80015ec:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80015f0:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80015f2:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80015f4:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80015f8:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80015fa:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80015fc:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80015fe:	6019      	str	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001600:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001608:	601a      	str	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800160a:	2302      	movs	r3, #2
 800160c:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800160e:	f7ff fbff 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001612:	f7ff f91d 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001616:	682a      	ldr	r2, [r5, #0]
 8001618:	4bd0      	ldr	r3, [pc, #832]	; (800195c <TFT_thread.lto_priv.73+0x3ec>)
 800161a:	42aa      	cmp	r2, r5
 800161c:	d005      	beq.n	800162a <TFT_thread.lto_priv.73+0xba>
 800161e:	6999      	ldr	r1, [r3, #24]
 8001620:	6892      	ldr	r2, [r2, #8]
 8001622:	6889      	ldr	r1, [r1, #8]
 8001624:	4291      	cmp	r1, r2
 8001626:	f0c0 822c 	bcc.w	8001a82 <TFT_thread.lto_priv.73+0x512>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800162a:	2400      	movs	r4, #0
 800162c:	f384 8811 	msr	BASEPRI, r4
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 8001630:	4dcb      	ldr	r5, [pc, #812]	; (8001960 <TFT_thread.lto_priv.73+0x3f0>)
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8001632:	4ecc      	ldr	r6, [pc, #816]	; (8001964 <TFT_thread.lto_priv.73+0x3f4>)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 8001634:	696b      	ldr	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8001636:	f44f 4780 	mov.w	r7, #16384	; 0x4000
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 800163a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800163e:	616b      	str	r3, [r5, #20]
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 8001640:	200a      	movs	r0, #10
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8001642:	8377      	strh	r7, [r6, #26]
	chThdSleepMilliseconds(1);
 8001644:	f7ff fdec 	bl	8001220 <chThdSleep>
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 8001648:	200a      	movs	r0, #10
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
 800164a:	8337      	strh	r7, [r6, #24]
	chThdSleepMilliseconds(1);
 800164c:	f7ff fde8 	bl	8001220 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED4);

  tft_reset();

  palTogglePad(GPIOD,GPIOD_LED5);
 8001650:	696b      	ldr	r3, [r5, #20]
 8001652:	407b      	eors	r3, r7
 8001654:	616b      	str	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_config(void)
{
	tft_write_command(0x01);   //Sofeware setting
 8001656:	2001      	movs	r0, #1
 8001658:	f002 fd02 	bl	8004060 <tft_write_command>
	//chThdSleepMilliseconds(0);
	tft_write_command(0x11);//Sleep out
 800165c:	2011      	movs	r0, #17
 800165e:	f002 fcff 	bl	8004060 <tft_write_command>
	chThdSleepMilliseconds(120);
 8001662:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001666:	f7ff fddb 	bl	8001220 <chThdSleep>

	//ST7735R Frame Rate
	tft_write_command(0xB1);
 800166a:	20b1      	movs	r0, #177	; 0xb1
 800166c:	f002 fcf8 	bl	8004060 <tft_write_command>
	tft_write_data(0x01);
 8001670:	2001      	movs	r0, #1
 8001672:	f002 fcdd 	bl	8004030 <tft_write_data>
	tft_write_data(0x2C);
 8001676:	202c      	movs	r0, #44	; 0x2c
 8001678:	f002 fcda 	bl	8004030 <tft_write_data>
	tft_write_data(0x2D);
 800167c:	202d      	movs	r0, #45	; 0x2d
 800167e:	f002 fcd7 	bl	8004030 <tft_write_data>
	tft_write_command(0xB2);
 8001682:	20b2      	movs	r0, #178	; 0xb2
 8001684:	f002 fcec 	bl	8004060 <tft_write_command>
	tft_write_data(0x01);
 8001688:	2001      	movs	r0, #1
 800168a:	f002 fcd1 	bl	8004030 <tft_write_data>
	tft_write_data(0x2C);
 800168e:	202c      	movs	r0, #44	; 0x2c
 8001690:	f002 fcce 	bl	8004030 <tft_write_data>
	tft_write_data(0x2D);
 8001694:	202d      	movs	r0, #45	; 0x2d
 8001696:	f002 fccb 	bl	8004030 <tft_write_data>
	tft_write_command(0xB3);
 800169a:	20b3      	movs	r0, #179	; 0xb3
 800169c:	f002 fce0 	bl	8004060 <tft_write_command>
	tft_write_data(0x01);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f002 fcc5 	bl	8004030 <tft_write_data>
	tft_write_data(0x2C);
 80016a6:	202c      	movs	r0, #44	; 0x2c
 80016a8:	f002 fcc2 	bl	8004030 <tft_write_data>
	tft_write_data(0x2D);
 80016ac:	202d      	movs	r0, #45	; 0x2d
 80016ae:	f002 fcbf 	bl	8004030 <tft_write_data>
	tft_write_data(0x01);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f002 fcbc 	bl	8004030 <tft_write_data>
	tft_write_data(0x2C);
 80016b8:	202c      	movs	r0, #44	; 0x2c
 80016ba:	f002 fcb9 	bl	8004030 <tft_write_data>
	tft_write_data(0x2D);
 80016be:	202d      	movs	r0, #45	; 0x2d
 80016c0:	f002 fcb6 	bl	8004030 <tft_write_data>
	//------------------------------------End ST7735R Frame Rate-----------------------------------------//
	tft_write_command(0xB4);//Column inversion
 80016c4:	20b4      	movs	r0, #180	; 0xb4
 80016c6:	f002 fccb 	bl	8004060 <tft_write_command>
	tft_write_data(0x07);
 80016ca:	2007      	movs	r0, #7
 80016cc:	f002 fcb0 	bl	8004030 <tft_write_data>
	//------------------------------------ST7735R Power Sequence-----------------------------------------//
	tft_write_command(0xC0);
 80016d0:	20c0      	movs	r0, #192	; 0xc0
 80016d2:	f002 fcc5 	bl	8004060 <tft_write_command>
	tft_write_data(0xA2);
 80016d6:	20a2      	movs	r0, #162	; 0xa2
 80016d8:	f002 fcaa 	bl	8004030 <tft_write_data>
	tft_write_data(0x02);
 80016dc:	2002      	movs	r0, #2
 80016de:	f002 fca7 	bl	8004030 <tft_write_data>
	tft_write_data(0x84);
 80016e2:	2084      	movs	r0, #132	; 0x84
 80016e4:	f002 fca4 	bl	8004030 <tft_write_data>
	tft_write_command(0xC1);
 80016e8:	20c1      	movs	r0, #193	; 0xc1
 80016ea:	f002 fcb9 	bl	8004060 <tft_write_command>
	tft_write_data(0xC5);
 80016ee:	20c5      	movs	r0, #197	; 0xc5
 80016f0:	f002 fc9e 	bl	8004030 <tft_write_data>
	tft_write_command(0xC2);
 80016f4:	20c2      	movs	r0, #194	; 0xc2
 80016f6:	f002 fcb3 	bl	8004060 <tft_write_command>
	tft_write_data(0x0A);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f002 fc98 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8001700:	4620      	mov	r0, r4
 8001702:	f002 fc95 	bl	8004030 <tft_write_data>
	tft_write_command(0xC3);
 8001706:	20c3      	movs	r0, #195	; 0xc3
 8001708:	f002 fcaa 	bl	8004060 <tft_write_command>
	tft_write_data(0x8A);
 800170c:	208a      	movs	r0, #138	; 0x8a
 800170e:	f002 fc8f 	bl	8004030 <tft_write_data>
	tft_write_data(0x2A);
 8001712:	202a      	movs	r0, #42	; 0x2a
 8001714:	f002 fc8c 	bl	8004030 <tft_write_data>
	tft_write_command(0xC4);
 8001718:	20c4      	movs	r0, #196	; 0xc4
 800171a:	f002 fca1 	bl	8004060 <tft_write_command>
	tft_write_data(0x8A);
 800171e:	208a      	movs	r0, #138	; 0x8a
 8001720:	f002 fc86 	bl	8004030 <tft_write_data>
	tft_write_data(0xEE);
 8001724:	20ee      	movs	r0, #238	; 0xee
 8001726:	f002 fc83 	bl	8004030 <tft_write_data>
	//---------------------------------End ST7735R Power Sequence-------------------------------------//
	tft_write_command(0xC5);//VCOM
 800172a:	20c5      	movs	r0, #197	; 0xc5
 800172c:	f002 fc98 	bl	8004060 <tft_write_command>
	tft_write_data(0x0E);
 8001730:	200e      	movs	r0, #14
 8001732:	f002 fc7d 	bl	8004030 <tft_write_data>
	tft_write_command(0x36);//MX, MY, RGB mode
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f002 fc92 	bl	8004060 <tft_write_command>
	tft_write_data(0xC8);
 800173c:	20c8      	movs	r0, #200	; 0xc8
 800173e:	f002 fc77 	bl	8004030 <tft_write_data>
	//------------------------------------ST7735R Gamma Sequence-----------------------------------------//
	tft_write_command(0xe0);
 8001742:	20e0      	movs	r0, #224	; 0xe0
 8001744:	f002 fc8c 	bl	8004060 <tft_write_command>
	tft_write_data(0x02);
 8001748:	2002      	movs	r0, #2
 800174a:	f002 fc71 	bl	8004030 <tft_write_data>
	tft_write_data(0x1c);
 800174e:	201c      	movs	r0, #28
 8001750:	f002 fc6e 	bl	8004030 <tft_write_data>
	tft_write_data(0x07);
 8001754:	2007      	movs	r0, #7
 8001756:	f002 fc6b 	bl	8004030 <tft_write_data>
	tft_write_data(0x12);
 800175a:	2012      	movs	r0, #18
 800175c:	f002 fc68 	bl	8004030 <tft_write_data>
	tft_write_data(0x37);
 8001760:	2037      	movs	r0, #55	; 0x37
 8001762:	f002 fc65 	bl	8004030 <tft_write_data>
	tft_write_data(0x32);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f002 fc62 	bl	8004030 <tft_write_data>
	tft_write_data(0x29);
 800176c:	2029      	movs	r0, #41	; 0x29
 800176e:	f002 fc5f 	bl	8004030 <tft_write_data>
	tft_write_data(0x2d);
 8001772:	202d      	movs	r0, #45	; 0x2d
 8001774:	f002 fc5c 	bl	8004030 <tft_write_data>
	tft_write_data(0x29);
 8001778:	2029      	movs	r0, #41	; 0x29
 800177a:	f002 fc59 	bl	8004030 <tft_write_data>
	tft_write_data(0x25);
 800177e:	2025      	movs	r0, #37	; 0x25
 8001780:	f002 fc56 	bl	8004030 <tft_write_data>
	tft_write_data(0x2b);
 8001784:	202b      	movs	r0, #43	; 0x2b
 8001786:	f002 fc53 	bl	8004030 <tft_write_data>
	tft_write_data(0x39);
 800178a:	2039      	movs	r0, #57	; 0x39
 800178c:	f002 fc50 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8001790:	4620      	mov	r0, r4
 8001792:	f002 fc4d 	bl	8004030 <tft_write_data>
	tft_write_data(0x01);
 8001796:	2001      	movs	r0, #1
 8001798:	f002 fc4a 	bl	8004030 <tft_write_data>
	tft_write_data(0x03);
 800179c:	2003      	movs	r0, #3
 800179e:	f002 fc47 	bl	8004030 <tft_write_data>
	tft_write_data(0x10);
 80017a2:	2010      	movs	r0, #16
 80017a4:	f002 fc44 	bl	8004030 <tft_write_data>
	tft_write_command(0xe1);
 80017a8:	20e1      	movs	r0, #225	; 0xe1
 80017aa:	f002 fc59 	bl	8004060 <tft_write_command>
	tft_write_data(0x03);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f002 fc3e 	bl	8004030 <tft_write_data>
	tft_write_data(0x1d);
 80017b4:	201d      	movs	r0, #29
 80017b6:	f002 fc3b 	bl	8004030 <tft_write_data>
	tft_write_data(0x07);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f002 fc38 	bl	8004030 <tft_write_data>
	tft_write_data(0x06);
 80017c0:	2006      	movs	r0, #6
 80017c2:	f002 fc35 	bl	8004030 <tft_write_data>
	tft_write_data(0x2e);
 80017c6:	202e      	movs	r0, #46	; 0x2e
 80017c8:	f002 fc32 	bl	8004030 <tft_write_data>
	tft_write_data(0x2c);
 80017cc:	202c      	movs	r0, #44	; 0x2c
 80017ce:	f002 fc2f 	bl	8004030 <tft_write_data>
	tft_write_data(0x29);
 80017d2:	2029      	movs	r0, #41	; 0x29
 80017d4:	f002 fc2c 	bl	8004030 <tft_write_data>
	tft_write_data(0x2d);
 80017d8:	202d      	movs	r0, #45	; 0x2d
 80017da:	f002 fc29 	bl	8004030 <tft_write_data>
	tft_write_data(0x2e);
 80017de:	202e      	movs	r0, #46	; 0x2e
 80017e0:	f002 fc26 	bl	8004030 <tft_write_data>
	tft_write_data(0x2e);
 80017e4:	202e      	movs	r0, #46	; 0x2e
 80017e6:	f002 fc23 	bl	8004030 <tft_write_data>
	tft_write_data(0x37);
 80017ea:	2037      	movs	r0, #55	; 0x37
 80017ec:	f002 fc20 	bl	8004030 <tft_write_data>
	tft_write_data(0x3f);
 80017f0:	203f      	movs	r0, #63	; 0x3f
 80017f2:	f002 fc1d 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 80017f6:	4620      	mov	r0, r4
 80017f8:	f002 fc1a 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f002 fc17 	bl	8004030 <tft_write_data>
	tft_write_data(0x02);
 8001802:	2002      	movs	r0, #2
 8001804:	f002 fc14 	bl	8004030 <tft_write_data>
	tft_write_data(0x10);
 8001808:	2010      	movs	r0, #16
 800180a:	f002 fc11 	bl	8004030 <tft_write_data>
	tft_write_command(0x2A);
 800180e:	202a      	movs	r0, #42	; 0x2a
 8001810:	f002 fc26 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 8001814:	4620      	mov	r0, r4
 8001816:	f002 fc0b 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 800181a:	4620      	mov	r0, r4
 800181c:	f002 fc08 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8001820:	4620      	mov	r0, r4
 8001822:	f002 fc05 	bl	8004030 <tft_write_data>
	tft_write_data(0x7f);
 8001826:	207f      	movs	r0, #127	; 0x7f
 8001828:	f002 fc02 	bl	8004030 <tft_write_data>

	tft_write_command(0x2B);
 800182c:	202b      	movs	r0, #43	; 0x2b
 800182e:	f002 fc17 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 8001832:	4620      	mov	r0, r4
 8001834:	f002 fbfc 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8001838:	4620      	mov	r0, r4
 800183a:	f002 fbf9 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 800183e:	4620      	mov	r0, r4
 8001840:	f002 fbf6 	bl	8004030 <tft_write_data>
	tft_write_data(0x9f);
 8001844:	209f      	movs	r0, #159	; 0x9f
 8001846:	f002 fbf3 	bl	8004030 <tft_write_data>
	//------------------------------------End ST7735R Gamma Sequence-----------------------------------------//

	tft_write_command(0x3A);
 800184a:	203a      	movs	r0, #58	; 0x3a
 800184c:	f002 fc08 	bl	8004060 <tft_write_command>
	tft_write_data(0x05);
 8001850:	2005      	movs	r0, #5
 8001852:	f002 fbed 	bl	8004030 <tft_write_data>
	tft_write_command(0x29);//Display on
 8001856:	2029      	movs	r0, #41	; 0x29
 8001858:	f002 fc02 	bl	8004060 <tft_write_command>

	chThdSleepMilliseconds(10);
 800185c:	2064      	movs	r0, #100	; 0x64
 800185e:	f7ff fcdf 	bl	8001220 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED5);

  tft_config();

  palTogglePad(GPIOD,GPIOD_LED6);
 8001862:	696b      	ldr	r3, [r5, #20]
 8001864:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8001868:	616b      	str	r3, [r5, #20]

  tft_write_command(0x2C);
 800186a:	202c      	movs	r0, #44	; 0x2c
 800186c:	f002 fbf8 	bl	8004060 <tft_write_command>
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 8001870:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <TFT_thread.lto_priv.73+0x3f8>)
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 8001872:	493e      	ldr	r1, [pc, #248]	; (800196c <TFT_thread.lto_priv.73+0x3fc>)
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <TFT_thread.lto_priv.73+0x400>)
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 8001876:	8014      	strh	r4, [r2, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 8001878:	202a      	movs	r0, #42	; 0x2a
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 800187a:	f64f 4251 	movw	r2, #64593	; 0xfc51
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 800187e:	800c      	strh	r4, [r1, #0]
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 8001880:	801a      	strh	r2, [r3, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 8001882:	f002 fbed 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 8001886:	4620      	mov	r0, r4
 8001888:	f002 fbd2 	bl	8004030 <tft_write_data>
	tft_write_data(0x00); 				// X START
 800188c:	4620      	mov	r0, r4
 800188e:	f002 fbcf 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8001892:	4620      	mov	r0, r4
 8001894:	f002 fbcc 	bl	8004030 <tft_write_data>
	tft_write_data(0x7f); 			// X END
 8001898:	207f      	movs	r0, #127	; 0x7f
 800189a:	f002 fbc9 	bl	8004030 <tft_write_data>

	tft_write_command(0x2b);		// Row addr set
 800189e:	202b      	movs	r0, #43	; 0x2b
 80018a0:	f002 fbde 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f002 fbc3 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);				// Y START
 80018aa:	4620      	mov	r0, r4
 80018ac:	f002 fbc0 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 80018b0:	4620      	mov	r0, r4
 80018b2:	f002 fbbd 	bl	8004030 <tft_write_data>
	tft_write_data(0x9f);			// Y END
 80018b6:	209f      	movs	r0, #159	; 0x9f
 80018b8:	f002 fbba 	bl	8004030 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 80018bc:	202c      	movs	r0, #44	; 0x2c
 80018be:	f002 fbcf 	bl	8004060 <tft_write_command>
 80018c2:	f44f 44a0 	mov.w	r4, #20480	; 0x5000

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
		tft_write_data(color >> 8);
 80018c6:	20fc      	movs	r0, #252	; 0xfc
 80018c8:	3c01      	subs	r4, #1
 80018ca:	f002 fbb1 	bl	8004030 <tft_write_data>
 80018ce:	b2a4      	uxth	r4, r4
		tft_write_data(color);
 80018d0:	2051      	movs	r0, #81	; 0x51
 80018d2:	f002 fbad 	bl	8004030 <tft_write_data>
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d1f5      	bne.n	80018c6 <TFT_thread.lto_priv.73+0x356>

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 80018da:	4926      	ldr	r1, [pc, #152]	; (8001974 <TFT_thread.lto_priv.73+0x404>)
 80018dc:	4d26      	ldr	r5, [pc, #152]	; (8001978 <TFT_thread.lto_priv.73+0x408>)
 80018de:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001998 <TFT_thread.lto_priv.73+0x428>
 80018e2:	2201      	movs	r2, #1
 80018e4:	4623      	mov	r3, r4
 80018e6:	4620      	mov	r0, r4
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 80018e8:	4626      	mov	r6, r4

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 80018ea:	700a      	strb	r2, [r1, #0]


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
			text[x][y] = ' ';
 80018ec:	f04f 0a20 	mov.w	sl, #32
			text_color[x][y] = in_text_color;
			bg_color[x][y] = in_bg_color;
 80018f0:	f64f 4951 	movw	r9, #64593	; 0xfc51
 80018f4:	4c21      	ldr	r4, [pc, #132]	; (800197c <TFT_thread.lto_priv.73+0x40c>)
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	eb05 0c01 	add.w	ip, r5, r1
 80018fc:	4421      	add	r1, r4
 80018fe:	4c20      	ldr	r4, [pc, #128]	; (8001980 <TFT_thread.lto_priv.73+0x410>)
 8001900:	9101      	str	r1, [sp, #4]
 8001902:	1e9a      	subs	r2, r3, #2
 8001904:	eb04 0e02 	add.w	lr, r4, r2
 8001908:	491e      	ldr	r1, [pc, #120]	; (8001984 <TFT_thread.lto_priv.73+0x414>)
 800190a:	4c1f      	ldr	r4, [pc, #124]	; (8001988 <TFT_thread.lto_priv.73+0x418>)
 800190c:	18a7      	adds	r7, r4, r2
 800190e:	eb0b 0402 	add.w	r4, fp, r2
 8001912:	440a      	add	r2, r1
 8001914:	9901      	ldr	r1, [sp, #4]
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 8001916:	f04f 0800 	mov.w	r8, #0
 800191a:	f108 0801 	add.w	r8, r8, #1
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 800191e:	f1b8 0f0a 	cmp.w	r8, #10
			text[x][y] = ' ';
 8001922:	f80c af01 	strb.w	sl, [ip, #1]!
			text_color[x][y] = in_text_color;
 8001926:	f82e 6f02 	strh.w	r6, [lr, #2]!
			bg_color[x][y] = in_bg_color;
 800192a:	f827 9f02 	strh.w	r9, [r7, #2]!

			text_prev[x][y] = ' ';
 800192e:	f801 af01 	strb.w	sl, [r1, #1]!
			text_color_prev[x][y] = in_text_color;
 8001932:	f824 6f02 	strh.w	r6, [r4, #2]!
			bg_color_prev[x][y] = in_bg_color;
 8001936:	f822 9f02 	strh.w	r9, [r2, #2]!
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 800193a:	d1ee      	bne.n	800191a <TFT_thread.lto_priv.73+0x3aa>
 800193c:	300a      	adds	r0, #10
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
 800193e:	28c8      	cmp	r0, #200	; 0xc8
 8001940:	f103 0314 	add.w	r3, r3, #20
 8001944:	d1d6      	bne.n	80018f4 <TFT_thread.lto_priv.73+0x384>
 8001946:	f8df a054 	ldr.w	sl, [pc, #84]	; 800199c <TFT_thread.lto_priv.73+0x42c>

  tft_init(1, CYAN,BLACK,BLACK);
  while(true)
  {
    tft_printf(5,1,"Stat:%2d",pIMU->init_stat);
    tft_printf(5,2,"P:%6d",(int)(pIMU->P_R_Y[0]*100));
 800194a:	ed9f 8a10 	vldr	s16, [pc, #64]	; 800198c <TFT_thread.lto_priv.73+0x41c>
  chRegSetThreadName("TFT Display");

  tft_init(1, CYAN,BLACK,BLACK);
  while(true)
  {
    tft_printf(5,1,"Stat:%2d",pIMU->init_stat);
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <TFT_thread.lto_priv.73+0x420>)
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <TFT_thread.lto_priv.73+0x424>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2005      	movs	r0, #5
 8001956:	e023      	b.n	80019a0 <TFT_thread.lto_priv.73+0x430>
 8001958:	080066b0 	.word	0x080066b0
 800195c:	2000bfd8 	.word	0x2000bfd8
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	2000bfd0 	.word	0x2000bfd0
 800196c:	2000c99e 	.word	0x2000c99e
 8001970:	2000c7c8 	.word	0x2000c7c8
 8001974:	20000a18 	.word	0x20000a18
 8001978:	2000be30 	.word	0x2000be30
 800197c:	2000bf08 	.word	0x2000bf08
 8001980:	2000c7f8 	.word	0x2000c7f8
 8001984:	2000c9d8 	.word	0x2000c9d8
 8001988:	2000bc70 	.word	0x2000bc70
 800198c:	42c80000 	.word	0x42c80000
 8001990:	20000a20 	.word	0x20000a20
 8001994:	08006664 	.word	0x08006664
 8001998:	2000c638 	.word	0x2000c638
 800199c:	08005620 	.word	0x08005620
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2101      	movs	r1, #1
 80019a4:	f003 f8ec 	bl	8004b80 <tft_printf.constprop.7>
    tft_printf(5,2,"P:%6d",(int)(pIMU->P_R_Y[0]*100));
 80019a8:	4bad      	ldr	r3, [pc, #692]	; (8001c60 <TFT_thread.lto_priv.73+0x6f0>)
 80019aa:	4aae      	ldr	r2, [pc, #696]	; (8001c64 <TFT_thread.lto_priv.73+0x6f4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80019ba:	2005      	movs	r0, #5
 80019bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c0:	2102      	movs	r1, #2
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	f003 f8db 	bl	8004b80 <tft_printf.constprop.7>
    tft_printf(5,3,"R:%6d",(int)(pIMU->P_R_Y[1]*100));
 80019ca:	4ba5      	ldr	r3, [pc, #660]	; (8001c60 <TFT_thread.lto_priv.73+0x6f0>)
 80019cc:	4aa6      	ldr	r2, [pc, #664]	; (8001c68 <TFT_thread.lto_priv.73+0x6f8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80019dc:	2005      	movs	r0, #5
 80019de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e2:	2103      	movs	r1, #3
 80019e4:	ee17 3a90 	vmov	r3, s15
 80019e8:	f003 f8ca 	bl	8004b80 <tft_printf.constprop.7>
    tft_printf(5,4,"Y:%6d",(int)(pIMU->P_R_Y[2]*100));
 80019ec:	4b9c      	ldr	r3, [pc, #624]	; (8001c60 <TFT_thread.lto_priv.73+0x6f0>)
 80019ee:	4a9f      	ldr	r2, [pc, #636]	; (8001c6c <TFT_thread.lto_priv.73+0x6fc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80019fe:	2005      	movs	r0, #5
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	2104      	movs	r1, #4
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	f003 f8b9 	bl	8004b80 <tft_printf.constprop.7>
    //tft_printf(5,4,"Gyro:%6d",pIMU->Gyro[0]);
    tft_printf(5,5,"Accl:%6d",pIMU->Accel[0]);
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <TFT_thread.lto_priv.73+0x6f0>)
 8001a10:	4a97      	ldr	r2, [pc, #604]	; (8001c70 <TFT_thread.lto_priv.73+0x700>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2005      	movs	r0, #5
 8001a16:	4601      	mov	r1, r0
 8001a18:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001a1c:	f003 f8b0 	bl	8004b80 <tft_printf.constprop.7>
    tft_printf(5,6,"Gyro:%6d",pIMU->Gyro[0]);
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <TFT_thread.lto_priv.73+0x6f0>)
 8001a22:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <TFT_thread.lto_priv.73+0x704>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2005      	movs	r0, #5
 8001a28:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 8001a2c:	2106      	movs	r1, #6
 8001a2e:	f003 f8a7 	bl	8004b80 <tft_printf.constprop.7>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8001a32:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <TFT_thread.lto_priv.73+0x708>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	f200 82a5 	bhi.w	8001f86 <TFT_thread.lto_priv.73+0xa16>
 8001a3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a40:	016d01fa 	.word	0x016d01fa
 8001a44:	002d00be 	.word	0x002d00be
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8001a48:	6a20      	ldr	r0, [r4, #32]
 8001a4a:	4a8c      	ldr	r2, [pc, #560]	; (8001c7c <TFT_thread.lto_priv.73+0x70c>)
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f000 fdd6 	bl	8002600 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8001a54:	b9e8      	cbnz	r0, 8001a92 <TFT_thread.lto_priv.73+0x522>
      b = dmaStreamAllocate(spip->dmatx,
 8001a56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a58:	4a89      	ldr	r2, [pc, #548]	; (8001c80 <TFT_thread.lto_priv.73+0x710>)
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	f000 fdcf 	bl	8002600 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8001a62:	b990      	cbnz	r0, 8001a8a <TFT_thread.lto_priv.73+0x51a>
      rccEnableSPI2(FALSE);
 8001a64:	4887      	ldr	r0, [pc, #540]	; (8001c84 <TFT_thread.lto_priv.73+0x714>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a66:	6a26      	ldr	r6, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8001a6a:	6c01      	ldr	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a6c:	69e2      	ldr	r2, [r4, #28]
 8001a6e:	6837      	ldr	r7, [r6, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a70:	681e      	ldr	r6, [r3, #0]
 8001a72:	6863      	ldr	r3, [r4, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a74:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8001a76:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001a7a:	6401      	str	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a7c:	60ba      	str	r2, [r7, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a7e:	60b2      	str	r2, [r6, #8]
 8001a80:	e5a7      	b.n	80015d2 <TFT_thread.lto_priv.73+0x62>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a82:	b672      	cpsid	i
 8001a84:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <TFT_thread.lto_priv.73+0x718>)
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a88:	e7fe      	b.n	8001a88 <TFT_thread.lto_priv.73+0x518>
 8001a8a:	b672      	cpsid	i
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <TFT_thread.lto_priv.73+0x71c>)
 8001a8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a90:	e7fe      	b.n	8001a90 <TFT_thread.lto_priv.73+0x520>
 8001a92:	b672      	cpsid	i
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <TFT_thread.lto_priv.73+0x71c>)
 8001a96:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a98:	e7fe      	b.n	8001a98 <TFT_thread.lto_priv.73+0x528>
 8001a9a:	2313      	movs	r3, #19
 8001a9c:	9307      	str	r3, [sp, #28]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9304      	str	r3, [sp, #16]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8001aa2:	9b04      	ldr	r3, [sp, #16]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001aa4:	9907      	ldr	r1, [sp, #28]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8001aa6:	3307      	adds	r3, #7
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	9306      	str	r3, [sp, #24]
 8001aac:	b2cb      	uxtb	r3, r1
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001aae:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001ab2:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8001ab4:	2300      	movs	r3, #0
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001ab6:	ea4f 064c 	mov.w	r6, ip, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8001aba:	9301      	str	r3, [sp, #4]
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
 8001abc:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8001ac0:	9803      	ldr	r0, [sp, #12]
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	f003 f974 	bl	8004db0 <tft_char_is_changed>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	f000 82b4 	beq.w	8002036 <TFT_thread.lto_priv.73+0xac6>
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 8001ace:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
 8001ad2:	f109 0b01 	add.w	fp, r9, #1
 8001ad6:	f1bb 0f07 	cmp.w	fp, #7
 8001ada:	f300 82c5 	bgt.w	8002068 <TFT_thread.lto_priv.73+0xaf8>
 8001ade:	2401      	movs	r4, #1
 8001ae0:	46a0      	mov	r8, r4
 8001ae2:	9602      	str	r6, [sp, #8]
 8001ae4:	4626      	mov	r6, r4
 8001ae6:	464c      	mov	r4, r9
 8001ae8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001aec:	e008      	b.n	8001b00 <TFT_thread.lto_priv.73+0x590>
 8001aee:	fa1f f883 	uxth.w	r8, r3
 8001af2:	fa0f f688 	sxth.w	r6, r8
 8001af6:	eb06 0b04 	add.w	fp, r6, r4
 8001afa:	f1bb 0f07 	cmp.w	fp, #7
 8001afe:	dc09      	bgt.n	8001b14 <TFT_thread.lto_priv.73+0x5a4>
 8001b00:	eb07 0108 	add.w	r1, r7, r8
 8001b04:	b2c9      	uxtb	r1, r1
 8001b06:	4648      	mov	r0, r9
 8001b08:	f003 f952 	bl	8004db0 <tft_char_is_changed>
 8001b0c:	f108 0301 	add.w	r3, r8, #1
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d1ec      	bne.n	8001aee <TFT_thread.lto_priv.73+0x57e>
 8001b14:	4634      	mov	r4, r6
 8001b16:	fa1f f388 	uxth.w	r3, r8
 8001b1a:	9e02      	ldr	r6, [sp, #8]
 8001b1c:	9305      	str	r3, [sp, #20]
 8001b1e:	0124      	lsls	r4, r4, #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8001b20:	9f01      	ldr	r7, [sp, #4]
 8001b22:	9b06      	ldr	r3, [sp, #24]
 8001b24:	9904      	ldr	r1, [sp, #16]
 8001b26:	ea4f 120b 	mov.w	r2, fp, lsl #4
 8001b2a:	0138      	lsls	r0, r7, #4
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001b34:	b2bf      	uxth	r7, r7
 8001b36:	9701      	str	r7, [sp, #4]
 8001b38:	f003 f982 	bl	8004e40 <tft_set_char_pos>
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	46b3      	mov	fp, r6
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8001b42:	2c00      	cmp	r4, #0
 8001b44:	f340 8269 	ble.w	800201a <TFT_thread.lto_priv.73+0xaaa>
 8001b48:	9b02      	ldr	r3, [sp, #8]
 8001b4a:	2780      	movs	r7, #128	; 0x80
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	411f      	asrs	r7, r3
 8001b50:	4630      	mov	r0, r6
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001b52:	f04f 0810 	mov.w	r8, #16
 8001b56:	e01a      	b.n	8001b8e <TFT_thread.lto_priv.73+0x61e>
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	fb18 3300 	smlabb	r3, r8, r0, r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8001b64:	423b      	tst	r3, r7
 8001b66:	bf15      	itete	ne
 8001b68:	4b49      	ldrne	r3, [pc, #292]	; (8001c90 <TFT_thread.lto_priv.73+0x720>)
 8001b6a:	4b4a      	ldreq	r3, [pc, #296]	; (8001c94 <TFT_thread.lto_priv.73+0x724>)
 8001b6c:	f833 9011 	ldrhne.w	r9, [r3, r1, lsl #1]
 8001b70:	f833 9012 	ldrheq.w	r9, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 8001b74:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8001b78:	f002 fa5a 	bl	8004030 <tft_write_data>
 8001b7c:	b2b6      	uxth	r6, r6
								tft_write_data(clr);
 8001b7e:	fa5f f089 	uxtb.w	r0, r9
 8001b82:	f002 fa55 	bl	8004030 <tft_write_data>
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8001b86:	b230      	sxth	r0, r6
 8001b88:	42a0      	cmp	r0, r4
 8001b8a:	f280 8246 	bge.w	800201a <TFT_thread.lto_priv.73+0xaaa>
								y2 = y+py/CHAR_HEIGHT;
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	9901      	ldr	r1, [sp, #4]
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <TFT_thread.lto_priv.73+0x728>)
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
 8001b94:	4602      	mov	r2, r0
 8001b96:	bfb8      	it	lt
 8001b98:	f100 020f 	addlt.w	r2, r0, #15
 8001b9c:	eb01 1222 	add.w	r2, r1, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001ba0:	b212      	sxth	r2, r2
 8001ba2:	4003      	ands	r3, r0
 8001ba4:	eb0b 0002 	add.w	r0, fp, r2
 8001ba8:	4601      	mov	r1, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	5c28      	ldrb	r0, [r5, r0]
 8001bae:	460a      	mov	r2, r1
 8001bb0:	dad2      	bge.n	8001b58 <TFT_thread.lto_priv.73+0x5e8>
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f063 030f 	orn	r3, r3, #15
 8001bb8:	3301      	adds	r3, #1
 8001bba:	e7cd      	b.n	8001b58 <TFT_thread.lto_priv.73+0x5e8>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f04f 0b09 	mov.w	fp, #9
 8001bc2:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 8001bc4:	9b03      	ldr	r3, [sp, #12]
 8001bc6:	330f      	adds	r3, #15
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	9305      	str	r3, [sp, #20]
 8001bcc:	fa5f f38b 	uxtb.w	r3, fp
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	260f      	movs	r6, #15
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
 8001bd4:	b2f7      	uxtb	r7, r6
 8001bd6:	4638      	mov	r0, r7
 8001bd8:	9902      	ldr	r1, [sp, #8]
 8001bda:	f003 f8e9 	bl	8004db0 <tft_char_is_changed>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	f000 8207 	beq.w	8001ff2 <TFT_thread.lto_priv.73+0xa82>
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 8001be4:	b234      	sxth	r4, r6
 8001be6:	2c00      	cmp	r4, #0
 8001be8:	f340 8247 	ble.w	800207a <TFT_thread.lto_priv.73+0xb0a>
 8001bec:	f04f 0901 	mov.w	r9, #1
 8001bf0:	9601      	str	r6, [sp, #4]
 8001bf2:	46c8      	mov	r8, r9
 8001bf4:	4626      	mov	r6, r4
 8001bf6:	9c02      	ldr	r4, [sp, #8]
 8001bf8:	e007      	b.n	8001c0a <TFT_thread.lto_priv.73+0x69a>
 8001bfa:	fa1f f883 	uxth.w	r8, r3
 8001bfe:	fa0f f988 	sxth.w	r9, r8
 8001c02:	ebc9 0306 	rsb	r3, r9, r6
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db09      	blt.n	8001c1e <TFT_thread.lto_priv.73+0x6ae>
 8001c0a:	ebc8 0007 	rsb	r0, r8, r7
 8001c0e:	b2c0      	uxtb	r0, r0
 8001c10:	4621      	mov	r1, r4
 8001c12:	f003 f8cd 	bl	8004db0 <tft_char_is_changed>
 8001c16:	f108 0301 	add.w	r3, r8, #1
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d1ed      	bne.n	8001bfa <TFT_thread.lto_priv.73+0x68a>
 8001c1e:	4634      	mov	r4, r6
 8001c20:	fa1f f388 	uxth.w	r3, r8
 8001c24:	9e01      	ldr	r6, [sp, #4]
 8001c26:	9304      	str	r3, [sp, #16]
 8001c28:	ea4f 07c9 	mov.w	r7, r9, lsl #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 8001c2c:	f1c4 040f 	rsb	r4, r4, #15
 8001c30:	eb04 0209 	add.w	r2, r4, r9
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	00e0      	lsls	r0, r4, #3
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	b2b4      	uxth	r4, r6
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001c42:	9903      	ldr	r1, [sp, #12]
 8001c44:	9b05      	ldr	r3, [sp, #20]
 8001c46:	9401      	str	r4, [sp, #4]
 8001c48:	f003 f8fa 	bl	8004e40 <tft_set_char_pos>
 8001c4c:	240f      	movs	r4, #15
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8001c4e:	2f00      	cmp	r7, #0
 8001c50:	f340 81c6 	ble.w	8001fe0 <TFT_thread.lto_priv.73+0xa70>
 8001c54:	f04f 0900 	mov.w	r9, #0
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001c58:	2680      	movs	r6, #128	; 0x80
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	e03e      	b.n	8001cdc <TFT_thread.lto_priv.73+0x76c>
 8001c5e:	bf00      	nop
 8001c60:	20000a20 	.word	0x20000a20
 8001c64:	08006670 	.word	0x08006670
 8001c68:	08006678 	.word	0x08006678
 8001c6c:	08006680 	.word	0x08006680
 8001c70:	08006688 	.word	0x08006688
 8001c74:	08006694 	.word	0x08006694
 8001c78:	20000a18 	.word	0x20000a18
 8001c7c:	08003631 	.word	0x08003631
 8001c80:	080032c1 	.word	0x080032c1
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08006d00 	.word	0x08006d00
 8001c8c:	08005610 	.word	0x08005610
 8001c90:	2000c7f8 	.word	0x2000c7f8
 8001c94:	2000bc70 	.word	0x2000bc70
 8001c98:	8000000f 	.word	0x8000000f
 8001c9c:	b212      	sxth	r2, r2
 8001c9e:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8001ca2:	f1c2 0207 	rsb	r2, r2, #7
 8001ca6:	fa46 f202 	asr.w	r2, r6, r2
 8001caa:	4202      	tst	r2, r0
 8001cac:	bf15      	itete	ne
 8001cae:	4bb8      	ldrne	r3, [pc, #736]	; (8001f90 <TFT_thread.lto_priv.73+0xa20>)
 8001cb0:	4ab8      	ldreq	r2, [pc, #736]	; (8001f94 <TFT_thread.lto_priv.73+0xa24>)
 8001cb2:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8001cb6:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8001cba:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8001cbe:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8001cc2:	f002 f9b5 	bl	8004030 <tft_write_data>
 8001cc6:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8001cca:	fa5f f088 	uxtb.w	r0, r8
 8001cce:	f002 f9af 	bl	8004030 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8001cd2:	fa0f f189 	sxth.w	r1, r9
 8001cd6:	42b9      	cmp	r1, r7
 8001cd8:	f280 8182 	bge.w	8001fe0 <TFT_thread.lto_priv.73+0xa70>
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001cdc:	4aae      	ldr	r2, [pc, #696]	; (8001f98 <TFT_thread.lto_priv.73+0xa28>)
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001ce2:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8001ce6:	bfb8      	it	lt
 8001ce8:	1dcb      	addlt	r3, r1, #7
 8001cea:	9901      	ldr	r1, [sp, #4]
 8001cec:	eba1 03e3 	sub.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8001cf6:	eb0e 0003 	add.w	r0, lr, r3
 8001cfa:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8001cfe:	4601      	mov	r1, r0
 8001d00:	5c28      	ldrb	r0, [r5, r0]
 8001d02:	f04f 0e10 	mov.w	lr, #16
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	dac5      	bge.n	8001c9c <TFT_thread.lto_priv.73+0x72c>
 8001d10:	3a01      	subs	r2, #1
 8001d12:	f062 0207 	orn	r2, r2, #7
 8001d16:	3201      	adds	r2, #1
 8001d18:	e7c0      	b.n	8001c9c <TFT_thread.lto_priv.73+0x72c>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	9305      	str	r3, [sp, #20]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9303      	str	r3, [sp, #12]
 8001d22:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	9306      	str	r3, [sp, #24]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8001d2e:	2407      	movs	r4, #7
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
 8001d30:	b2e6      	uxtb	r6, r4
 8001d32:	4631      	mov	r1, r6
 8001d34:	9802      	ldr	r0, [sp, #8]
 8001d36:	f003 f83b 	bl	8004db0 <tft_char_is_changed>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	f000 813c 	beq.w	8001fb8 <TFT_thread.lto_priv.73+0xa48>
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 8001d40:	b227      	sxth	r7, r4
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	f340 8194 	ble.w	8002070 <TFT_thread.lto_priv.73+0xb00>
 8001d48:	f04f 0b01 	mov.w	fp, #1
 8001d4c:	46d8      	mov	r8, fp
 8001d4e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8001d52:	e007      	b.n	8001d64 <TFT_thread.lto_priv.73+0x7f4>
 8001d54:	fa1f f883 	uxth.w	r8, r3
 8001d58:	fa0f fb88 	sxth.w	fp, r8
 8001d5c:	ebcb 0307 	rsb	r3, fp, r7
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db09      	blt.n	8001d78 <TFT_thread.lto_priv.73+0x808>
 8001d64:	ebc8 0106 	rsb	r1, r8, r6
 8001d68:	b2c9      	uxtb	r1, r1
 8001d6a:	4648      	mov	r0, r9
 8001d6c:	f003 f820 	bl	8004db0 <tft_char_is_changed>
 8001d70:	f108 0301 	add.w	r3, r8, #1
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1ed      	bne.n	8001d54 <TFT_thread.lto_priv.73+0x7e4>
 8001d78:	fa1f f388 	uxth.w	r3, r8
 8001d7c:	9304      	str	r3, [sp, #16]
 8001d7e:	ea4f 160b 	mov.w	r6, fp, lsl #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8001d82:	f1c7 0707 	rsb	r7, r7, #7
 8001d86:	eb07 020b 	add.w	r2, r7, fp
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0138      	lsls	r0, r7, #4
 8001d90:	9906      	ldr	r1, [sp, #24]
 8001d92:	9b05      	ldr	r3, [sp, #20]
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001d9a:	f003 f851 	bl	8004e40 <tft_set_char_pos>
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8001d9e:	9b03      	ldr	r3, [sp, #12]
 8001da0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8001da4:	2300      	movs	r3, #0
 8001da6:	b2a4      	uxth	r4, r4
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8001da8:	ea4f 0b41 	mov.w	fp, r1, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8001dac:	9301      	str	r3, [sp, #4]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	f340 80f8 	ble.w	8001fa4 <TFT_thread.lto_priv.73+0xa34>
 8001db4:	9b01      	ldr	r3, [sp, #4]
 8001db6:	f04f 0900 	mov.w	r9, #0
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	fa42 f703 	asr.w	r7, r2, r3
 8001dc2:	e01f      	b.n	8001e04 <TFT_thread.lto_priv.73+0x894>
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	ebc3 1300 	rsb	r3, r3, r0, lsl #4
 8001dca:	4874      	ldr	r0, [pc, #464]	; (8001f9c <TFT_thread.lto_priv.73+0xa2c>)
 8001dcc:	4403      	add	r3, r0
 8001dce:	f109 0901 	add.w	r9, r9, #1
 8001dd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001dd6:	423b      	tst	r3, r7
 8001dd8:	bf15      	itete	ne
 8001dda:	4b6d      	ldrne	r3, [pc, #436]	; (8001f90 <TFT_thread.lto_priv.73+0xa20>)
 8001ddc:	4b6d      	ldreq	r3, [pc, #436]	; (8001f94 <TFT_thread.lto_priv.73+0xa24>)
 8001dde:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8001de2:	f833 8012 	ldrheq.w	r8, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 8001de6:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8001dea:	f002 f921 	bl	8004030 <tft_write_data>
 8001dee:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8001df2:	fa5f f088 	uxtb.w	r0, r8
 8001df6:	f002 f91b 	bl	8004030 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8001dfa:	fa0f f189 	sxth.w	r1, r9
 8001dfe:	42b1      	cmp	r1, r6
 8001e00:	f280 80d0 	bge.w	8001fa4 <TFT_thread.lto_priv.73+0xa34>
								y2 = y-py/CHAR_HEIGHT;
 8001e04:	2900      	cmp	r1, #0
 8001e06:	460a      	mov	r2, r1
 8001e08:	bfb8      	it	lt
 8001e0a:	f101 020f 	addlt.w	r2, r1, #15
 8001e0e:	eba4 1222 	sub.w	r2, r4, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8001e12:	b212      	sxth	r2, r2
 8001e14:	eb0b 0002 	add.w	r0, fp, r2
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <TFT_thread.lto_priv.73+0xa30>)
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	5c28      	ldrb	r0, [r5, r0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f100 0001 	add.w	r0, r0, #1
 8001e26:	460a      	mov	r2, r1
 8001e28:	dacc      	bge.n	8001dc4 <TFT_thread.lto_priv.73+0x854>
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f063 030f 	orn	r3, r3, #15
 8001e30:	3301      	adds	r3, #1
 8001e32:	e7c7      	b.n	8001dc4 <TFT_thread.lto_priv.73+0x854>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8001e34:	230f      	movs	r3, #15
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	f04f 0b00 	mov.w	fp, #0
 8001e3c:	fa5f f38b 	uxtb.w	r3, fp
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	9305      	str	r3, [sp, #20]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
 8001e4c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8001e50:	9902      	ldr	r1, [sp, #8]
 8001e52:	4620      	mov	r0, r4
 8001e54:	f002 ffac 	bl	8004db0 <tft_char_is_changed>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	f000 8082 	beq.w	8001f62 <TFT_thread.lto_priv.73+0x9f2>
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 8001e5e:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8001e62:	f108 0901 	add.w	r9, r8, #1
 8001e66:	f1b9 0f0f 	cmp.w	r9, #15
 8001e6a:	f300 810b 	bgt.w	8002084 <TFT_thread.lto_priv.73+0xb14>
 8001e6e:	2601      	movs	r6, #1
 8001e70:	4637      	mov	r7, r6
 8001e72:	f8cd b010 	str.w	fp, [sp, #16]
 8001e76:	46b3      	mov	fp, r6
 8001e78:	4646      	mov	r6, r8
 8001e7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8001e7e:	e007      	b.n	8001e90 <TFT_thread.lto_priv.73+0x920>
 8001e80:	b29f      	uxth	r7, r3
 8001e82:	fa0f fb87 	sxth.w	fp, r7
 8001e86:	eb0b 0906 	add.w	r9, fp, r6
 8001e8a:	f1b9 0f0f 	cmp.w	r9, #15
 8001e8e:	dc07      	bgt.n	8001ea0 <TFT_thread.lto_priv.73+0x930>
 8001e90:	19e0      	adds	r0, r4, r7
 8001e92:	b2c0      	uxtb	r0, r0
 8001e94:	4641      	mov	r1, r8
 8001e96:	f002 ff8b 	bl	8004db0 <tft_char_is_changed>
 8001e9a:	1c7b      	adds	r3, r7, #1
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d1ef      	bne.n	8001e80 <TFT_thread.lto_priv.73+0x910>
 8001ea0:	465e      	mov	r6, fp
 8001ea2:	b2bb      	uxth	r3, r7
 8001ea4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001ea8:	9304      	str	r3, [sp, #16]
 8001eaa:	00f6      	lsls	r6, r6, #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8001eac:	9c01      	ldr	r4, [sp, #4]
 8001eae:	9905      	ldr	r1, [sp, #20]
 8001eb0:	9b03      	ldr	r3, [sp, #12]
 8001eb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001eb6:	00e0      	lsls	r0, r4, #3
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	b2a4      	uxth	r4, r4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001ec2:	9401      	str	r4, [sp, #4]
 8001ec4:	f002 ffbc 	bl	8004e40 <tft_set_char_pos>
 8001ec8:	2400      	movs	r4, #0
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8001eca:	2e00      	cmp	r6, #0
 8001ecc:	dd40      	ble.n	8001f50 <TFT_thread.lto_priv.73+0x9e0>
 8001ece:	f04f 0900 	mov.w	r9, #0
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001ed2:	2780      	movs	r7, #128	; 0x80
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	e01c      	b.n	8001f12 <TFT_thread.lto_priv.73+0x9a2>
 8001ed8:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8001edc:	b212      	sxth	r2, r2
 8001ede:	fa47 f202 	asr.w	r2, r7, r2
 8001ee2:	4202      	tst	r2, r0
 8001ee4:	bf15      	itete	ne
 8001ee6:	4b2a      	ldrne	r3, [pc, #168]	; (8001f90 <TFT_thread.lto_priv.73+0xa20>)
 8001ee8:	4a2a      	ldreq	r2, [pc, #168]	; (8001f94 <TFT_thread.lto_priv.73+0xa24>)
 8001eea:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8001eee:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8001ef2:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8001ef6:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8001efa:	f002 f899 	bl	8004030 <tft_write_data>
 8001efe:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8001f02:	fa5f f088 	uxtb.w	r0, r8
 8001f06:	f002 f893 	bl	8004030 <tft_write_data>
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8001f0a:	fa0f f189 	sxth.w	r1, r9
 8001f0e:	42b1      	cmp	r1, r6
 8001f10:	da1e      	bge.n	8001f50 <TFT_thread.lto_priv.73+0x9e0>
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001f12:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <TFT_thread.lto_priv.73+0xa28>)
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 8001f14:	2900      	cmp	r1, #0
 8001f16:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001f18:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 8001f1c:	bfb8      	it	lt
 8001f1e:	1dcb      	addlt	r3, r1, #7
 8001f20:	9901      	ldr	r1, [sp, #4]
 8001f22:	eb01 03e3 	add.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8001f2c:	eb0e 0003 	add.w	r0, lr, r3
 8001f30:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8001f34:	4601      	mov	r1, r0
 8001f36:	5c28      	ldrb	r0, [r5, r0]
 8001f38:	f04f 0e10 	mov.w	lr, #16
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8001f42:	460b      	mov	r3, r1
 8001f44:	dac8      	bge.n	8001ed8 <TFT_thread.lto_priv.73+0x968>
 8001f46:	3a01      	subs	r2, #1
 8001f48:	f062 0207 	orn	r2, r2, #7
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	e7c3      	b.n	8001ed8 <TFT_thread.lto_priv.73+0x968>
 8001f50:	3401      	adds	r4, #1
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 8001f52:	2c10      	cmp	r4, #16
 8001f54:	d1b9      	bne.n	8001eca <TFT_thread.lto_priv.73+0x95a>
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	1e5f      	subs	r7, r3, #1
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x += char_n-1;
 8001f5a:	9b04      	ldr	r3, [sp, #16]
 8001f5c:	443b      	add	r3, r7
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	9301      	str	r3, [sp, #4]
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
 8001f62:	9f01      	ldr	r7, [sp, #4]
 8001f64:	3701      	adds	r7, #1
 8001f66:	b2bb      	uxth	r3, r7
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	f77f af6d 	ble.w	8001e4c <TFT_thread.lto_priv.73+0x8dc>
 8001f72:	9b03      	ldr	r3, [sp, #12]
 8001f74:	f10b 0b01 	add.w	fp, fp, #1
 8001f78:	3310      	adds	r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
	if (!tft_enabled)
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
 8001f7c:	f1bb 0f0a 	cmp.w	fp, #10
 8001f80:	9303      	str	r3, [sp, #12]
 8001f82:	f47f af5b 	bne.w	8001e3c <TFT_thread.lto_priv.73+0x8cc>
    tft_update();
    chThdSleepMilliseconds(50);
 8001f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8a:	f7ff f949 	bl	8001220 <chThdSleep>
 8001f8e:	e4de      	b.n	800194e <TFT_thread.lto_priv.73+0x3de>
 8001f90:	2000c7f8 	.word	0x2000c7f8
 8001f94:	2000bc70 	.word	0x2000bc70
 8001f98:	80000007 	.word	0x80000007
 8001f9c:	08005620 	.word	0x08005620
 8001fa0:	8000000f 	.word	0x8000000f
 8001fa4:	9b01      	ldr	r3, [sp, #4]
 8001fa6:	3301      	adds	r3, #1
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	f47f aeff 	bne.w	8001dae <TFT_thread.lto_priv.73+0x83e>
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y -= char_n-1;
 8001fb0:	9b04      	ldr	r3, [sp, #16]
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	1ae4      	subs	r4, r4, r3
 8001fb6:	b2a4      	uxth	r4, r4
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
 8001fb8:	3c01      	subs	r4, #1
 8001fba:	b2a4      	uxth	r4, r4
 8001fbc:	0422      	lsls	r2, r4, #16
 8001fbe:	f57f aeb7 	bpl.w	8001d30 <TFT_thread.lto_priv.73+0x7c0>
 8001fc2:	9b05      	ldr	r3, [sp, #20]
 8001fc4:	9a03      	ldr	r2, [sp, #12]
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	3201      	adds	r2, #1
 8001fca:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
 8001fcc:	2a14      	cmp	r2, #20
 8001fce:	9203      	str	r2, [sp, #12]
 8001fd0:	9305      	str	r3, [sp, #20]
 8001fd2:	f47f aea6 	bne.w	8001d22 <TFT_thread.lto_priv.73+0x7b2>
 8001fd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fda:	f7ff f921 	bl	8001220 <chThdSleep>
 8001fde:	e4b6      	b.n	800194e <TFT_thread.lto_priv.73+0x3de>
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 8001fe0:	f114 34ff 	adds.w	r4, r4, #4294967295
 8001fe4:	f4bf ae33 	bcs.w	8001c4e <TFT_thread.lto_priv.73+0x6de>
 8001fe8:	9e01      	ldr	r6, [sp, #4]
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x -= char_n-1;
 8001fea:	9b04      	ldr	r3, [sp, #16]
 8001fec:	3601      	adds	r6, #1
 8001fee:	1af6      	subs	r6, r6, r3
 8001ff0:	b2b6      	uxth	r6, r6
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
 8001ff2:	3e01      	subs	r6, #1
 8001ff4:	b2b6      	uxth	r6, r6
 8001ff6:	0433      	lsls	r3, r6, #16
 8001ff8:	f57f adec 	bpl.w	8001bd4 <TFT_thread.lto_priv.73+0x664>
 8001ffc:	9b03      	ldr	r3, [sp, #12]
 8001ffe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002002:	3310      	adds	r3, #16
 8002004:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
 8002006:	f1bb 3fff 	cmp.w	fp, #4294967295
 800200a:	9303      	str	r3, [sp, #12]
 800200c:	f47f adda 	bne.w	8001bc4 <TFT_thread.lto_priv.73+0x654>
 8002010:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002014:	f7ff f904 	bl	8001220 <chThdSleep>
 8002018:	e499      	b.n	800194e <TFT_thread.lto_priv.73+0x3de>
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	9302      	str	r3, [sp, #8]
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 8002020:	3301      	adds	r3, #1
 8002022:	f47f ad8e 	bne.w	8001b42 <TFT_thread.lto_priv.73+0x5d2>
 8002026:	9b01      	ldr	r3, [sp, #4]
 8002028:	f103 38ff 	add.w	r8, r3, #4294967295
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y += char_n-1;
 800202c:	9b05      	ldr	r3, [sp, #20]
 800202e:	4443      	add	r3, r8
 8002030:	b29b      	uxth	r3, r3
 8002032:	465e      	mov	r6, fp
 8002034:	9301      	str	r3, [sp, #4]
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
 8002036:	9b01      	ldr	r3, [sp, #4]
 8002038:	f103 0801 	add.w	r8, r3, #1
 800203c:	fa1f f388 	uxth.w	r3, r8
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	b21b      	sxth	r3, r3
 8002044:	2b07      	cmp	r3, #7
 8002046:	f77f ad39 	ble.w	8001abc <TFT_thread.lto_priv.73+0x54c>
 800204a:	9b04      	ldr	r3, [sp, #16]
 800204c:	9a07      	ldr	r2, [sp, #28]
 800204e:	3308      	adds	r3, #8
 8002050:	3a01      	subs	r2, #1
 8002052:	9207      	str	r2, [sp, #28]
 8002054:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
 8002056:	3201      	adds	r2, #1
 8002058:	9304      	str	r3, [sp, #16]
 800205a:	f47f ad22 	bne.w	8001aa2 <TFT_thread.lto_priv.73+0x532>
 800205e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002062:	f7ff f8dd 	bl	8001220 <chThdSleep>
 8002066:	e472      	b.n	800194e <TFT_thread.lto_priv.73+0x3de>
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 8002068:	2301      	movs	r3, #1
 800206a:	2410      	movs	r4, #16
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	e557      	b.n	8001b20 <TFT_thread.lto_priv.73+0x5b0>
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 8002070:	2301      	movs	r3, #1
 8002072:	9304      	str	r3, [sp, #16]
 8002074:	469b      	mov	fp, r3
 8002076:	2610      	movs	r6, #16
 8002078:	e683      	b.n	8001d82 <TFT_thread.lto_priv.73+0x812>
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 800207a:	2301      	movs	r3, #1
 800207c:	9304      	str	r3, [sp, #16]
 800207e:	4699      	mov	r9, r3
 8002080:	2708      	movs	r7, #8
 8002082:	e5d3      	b.n	8001c2c <TFT_thread.lto_priv.73+0x6bc>
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 8002084:	2301      	movs	r3, #1
 8002086:	2608      	movs	r6, #8
 8002088:	9304      	str	r3, [sp, #16]
 800208a:	e70f      	b.n	8001eac <TFT_thread.lto_priv.73+0x93c>
 800208c:	0000      	movs	r0, r0
	...

08002090 <MPU_thread.lto_priv.72>:
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {

  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8002090:	4ec1      	ldr	r6, [pc, #772]	; (8002398 <MPU_thread.lto_priv.72+0x308>)
 8002092:	4dc2      	ldr	r5, [pc, #776]	; (800239c <MPU_thread.lto_priv.72+0x30c>)
 8002094:	7833      	ldrb	r3, [r6, #0]
 8002096:	69aa      	ldr	r2, [r5, #24]
 8002098:	48c1      	ldr	r0, [pc, #772]	; (80023a0 <MPU_thread.lto_priv.72+0x310>)
static THD_FUNCTION(MPU_thread, p)
{
  (void)p;
  chRegSetThreadName("MPU6050");

  pIMU = getIMU();
 800209a:	49c2      	ldr	r1, [pc, #776]	; (80023a4 <MPU_thread.lto_priv.72+0x314>)
 800209c:	4cc2      	ldr	r4, [pc, #776]	; (80023a8 <MPU_thread.lto_priv.72+0x318>)
  }
}

static THD_WORKING_AREA(MPU_thread_wa, 32768);
static THD_FUNCTION(MPU_thread, p)
{
 800209e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80020a2:	6190      	str	r0, [r2, #24]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	b085      	sub	sp, #20
  (void)p;
  chRegSetThreadName("MPU6050");

  pIMU = getIMU();
 80020aa:	600c      	str	r4, [r1, #0]
 80020ac:	d905      	bls.n	80020ba <MPU_thread.lto_priv.72+0x2a>
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d003      	beq.n	80020ba <MPU_thread.lto_priv.72+0x2a>
 80020b2:	b672      	cpsid	i
 80020b4:	4bbd      	ldr	r3, [pc, #756]	; (80023ac <MPU_thread.lto_priv.72+0x31c>)
 80020b6:	62eb      	str	r3, [r5, #44]	; 0x2c
 80020b8:	e7fe      	b.n	80020b8 <MPU_thread.lto_priv.72+0x28>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80020ba:	2320      	movs	r3, #32
 80020bc:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80020c0:	f7fe fbde 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80020c4:	f7fe feb4 	bl	8000e30 <_dbg_check_lock>
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80020c8:	f896 9000 	ldrb.w	r9, [r6]
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 80020cc:	49b8      	ldr	r1, [pc, #736]	; (80023b0 <MPU_thread.lto_priv.72+0x320>)
 80020ce:	6071      	str	r1, [r6, #4]
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80020d0:	f240 4256 	movw	r2, #1110	; 0x456
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80020d4:	f240 4316 	movw	r3, #1046	; 0x416
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80020d8:	f1b9 0f01 	cmp.w	r9, #1
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80020dc:	62b2      	str	r2, [r6, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80020de:	6273      	str	r3, [r6, #36]	; 0x24
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80020e0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80020e2:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8002398 <MPU_thread.lto_priv.72+0x308>
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80020e6:	d03e      	beq.n	8002166 <MPU_thread.lto_priv.72+0xd6>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80020e8:	463a      	mov	r2, r7
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80020ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80020ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80020ee:	f8d0 a000 	ldr.w	sl, [r0]
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 80020f2:	f8d1 e004 	ldr.w	lr, [r1, #4]
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80020f6:	f8d3 b000 	ldr.w	fp, [r3]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 80020fa:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80023d8 <MPU_thread.lto_priv.72+0x348>
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80020fe:	f891 c008 	ldrb.w	ip, [r1, #8]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002102:	f107 0010 	add.w	r0, r7, #16
 8002106:	f8ca 0008 	str.w	r0, [sl, #8]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 800210a:	f10e 3aff 	add.w	sl, lr, #4294967295
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800210e:	f8cb 0008 	str.w	r0, [fp, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8002112:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  dp->CR1 = 0;
 8002116:	2300      	movs	r3, #0
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002118:	f44f 6010 	mov.w	r0, #2304	; 0x900
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 800211c:	45c2      	cmp	sl, r8
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800211e:	f8c7 9000 	str.w	r9, [r7]
  dp->CR1 = 0;
 8002122:	603b      	str	r3, [r7, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002124:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8002126:	d81a      	bhi.n	800215e <MPU_thread.lto_priv.72+0xce>
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002128:	f8d2 9004 	ldr.w	r9, [r2, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800212c:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 80023dc <MPU_thread.lto_priv.72+0x34c>
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002130:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8002134:	ea09 0000 	and.w	r0, r9, r0
 8002138:	6050      	str	r0, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800213a:	6850      	ldr	r0, [r2, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800213c:	45c6      	cmp	lr, r8
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800213e:	f040 002a 	orr.w	r0, r0, #42	; 0x2a
 8002142:	6050      	str	r0, [r2, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002144:	f240 80e7 	bls.w	8002316 <MPU_thread.lto_priv.72+0x286>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8002148:	489a      	ldr	r0, [pc, #616]	; (80023b4 <MPU_thread.lto_priv.72+0x324>)
 800214a:	4586      	cmp	lr, r0
 800214c:	dc74      	bgt.n	8002238 <MPU_thread.lto_priv.72+0x1a8>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 800214e:	f1ac 0302 	sub.w	r3, ip, #2
 8002152:	2b01      	cmp	r3, #1
 8002154:	d954      	bls.n	8002200 <MPU_thread.lto_priv.72+0x170>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002156:	b672      	cpsid	i
 8002158:	4b97      	ldr	r3, [pc, #604]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 800215a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800215c:	e7fe      	b.n	800215c <MPU_thread.lto_priv.72+0xcc>
 800215e:	b672      	cpsid	i
 8002160:	4b95      	ldr	r3, [pc, #596]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 8002162:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002164:	e7fe      	b.n	8002164 <MPU_thread.lto_priv.72+0xd4>

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002166:	f8df a278 	ldr.w	sl, [pc, #632]	; 80023e0 <MPU_thread.lto_priv.72+0x350>
      b = dmaStreamAllocate(i2cp->dmarx,
 800216a:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 800216e:	f8da 3020 	ldr.w	r3, [sl, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002172:	4a92      	ldr	r2, [pc, #584]	; (80023bc <MPU_thread.lto_priv.72+0x32c>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	f04f 0e00 	mov.w	lr, #0
 800217c:	f8ca 3020 	str.w	r3, [sl, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002180:	2105      	movs	r1, #5

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002182:	f8ca e020 	str.w	lr, [sl, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002186:	4643      	mov	r3, r8
 8002188:	f000 fa3a 	bl	8002600 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 800218c:	2800      	cmp	r0, #0
 800218e:	f040 812b 	bne.w	80023e8 <MPU_thread.lto_priv.72+0x358>
      b = dmaStreamAllocate(i2cp->dmatx,
 8002192:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8002196:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <MPU_thread.lto_priv.72+0x330>)
 8002198:	2105      	movs	r1, #5
 800219a:	4643      	mov	r3, r8
 800219c:	f000 fa30 	bl	8002600 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 80021a0:	2800      	cmp	r0, #0
 80021a2:	f040 80ae 	bne.w	8002302 <MPU_thread.lto_priv.72+0x272>
      rccEnableI2C1(FALSE);
 80021a6:	f8da c040 	ldr.w	ip, [sl, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80021aa:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80021ae:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021b2:	f8df e230 	ldr.w	lr, [pc, #560]	; 80023e4 <MPU_thread.lto_priv.72+0x354>
 80021b6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80021ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80021be:	f44c 1c00 	orr.w	ip, ip, #2097152	; 0x200000
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80021c2:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80021c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80021ca:	f8ca c040 	str.w	ip, [sl, #64]	; 0x40
 80021ce:	f04f 0b50 	mov.w	fp, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80021d6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80021da:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021de:	f88e b31f 	strb.w	fp, [lr, #799]	; 0x31f
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80021e2:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021e6:	f8ce c180 	str.w	ip, [lr, #384]	; 0x180
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80021ea:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021ee:	f8ce c000 	str.w	ip, [lr]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80021f2:	f88e b320 	strb.w	fp, [lr, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021f6:	f8ce 9184 	str.w	r9, [lr, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021fa:	f8ce 9004 	str.w	r9, [lr, #4]
 80021fe:	e774      	b.n	80020ea <MPU_thread.lto_priv.72+0x5a>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8002200:	f1bc 0f02 	cmp.w	ip, #2
 8002204:	f000 80ba 	beq.w	800237c <MPU_thread.lto_priv.72+0x2ec>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8002208:	2319      	movs	r3, #25
 800220a:	fb03 fe0e 	mul.w	lr, r3, lr
 800220e:	486d      	ldr	r0, [pc, #436]	; (80023c4 <MPU_thread.lto_priv.72+0x334>)
 8002210:	fbb0 f3fe 	udiv	r3, r0, lr
 8002214:	fb0e fe03 	mul.w	lr, lr, r3
 8002218:	ebce 0000 	rsb	r0, lr, r0
 800221c:	2800      	cmp	r0, #0
 800221e:	f040 80a9 	bne.w	8002374 <MPU_thread.lto_priv.72+0x2e4>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002222:	b298      	uxth	r0, r3
      regCCR |= I2C_CCR_DUTY;
 8002224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8002228:	4303      	orrs	r3, r0
 800222a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222e:	ea6f 4353 	mvn.w	r3, r3, lsr #17

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002232:	200d      	movs	r0, #13
      regCCR |= I2C_CCR_DUTY;
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8002234:	b29b      	uxth	r3, r3

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002236:	6210      	str	r0, [r2, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8002238:	61d3      	str	r3, [r2, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 800223a:	7809      	ldrb	r1, [r1, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800223c:	6813      	ldr	r3, [r2, #0]
  switch (opmode) {
 800223e:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8002240:	b29b      	uxth	r3, r3
  switch (opmode) {
 8002242:	d062      	beq.n	800230a <MPU_thread.lto_priv.72+0x27a>
 8002244:	2903      	cmp	r1, #3
 8002246:	f000 808e 	beq.w	8002366 <MPU_thread.lto_priv.72+0x2d6>
 800224a:	2901      	cmp	r1, #1
 800224c:	d102      	bne.n	8002254 <MPU_thread.lto_priv.72+0x1c4>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800224e:	f023 030a 	bic.w	r3, r3, #10
 8002252:	b29b      	uxth	r3, r3
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8002254:	6013      	str	r3, [r2, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	603b      	str	r3, [r7, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 800225e:	2302      	movs	r3, #2
 8002260:	7033      	strb	r3, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002262:	f7fe fdd5 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002266:	f7fe faf3 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800226a:	682a      	ldr	r2, [r5, #0]
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <MPU_thread.lto_priv.72+0x30c>)
 800226e:	42aa      	cmp	r2, r5
 8002270:	d004      	beq.n	800227c <MPU_thread.lto_priv.72+0x1ec>
 8002272:	6999      	ldr	r1, [r3, #24]
 8002274:	6892      	ldr	r2, [r2, #8]
 8002276:	6889      	ldr	r1, [r1, #8]
 8002278:	4291      	cmp	r1, r2
 800227a:	d377      	bcc.n	800236c <MPU_thread.lto_priv.72+0x2dc>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800227c:	2500      	movs	r5, #0
 800227e:	f385 8811 	msr	BASEPRI, r5
uint8_t MPU_Init(void)
{
	uint8_t res;
	MPU_i2c_init();

	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//��λMPU6050
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	206b      	movs	r0, #107	; 0x6b
 8002286:	f002 ff63 	bl	8005150 <MPU_Write_Byte>

  chThdSleepMilliseconds(100);
 800228a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228e:	f7fe ffc7 	bl	8001220 <chThdSleep>

	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//����MPU6050
 8002292:	4629      	mov	r1, r5
 8002294:	206b      	movs	r0, #107	; 0x6b
 8002296:	f002 ff5b 	bl	8005150 <MPU_Write_Byte>
//fsr:0,��250dps;1,��500dps;2,��1000dps;3,��2000dps
//����ֵ:0,���óɹ�
//    ����,����ʧ��
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//���������������̷�Χ
 800229a:	2118      	movs	r1, #24
 800229c:	201b      	movs	r0, #27
 800229e:	f002 ff57 	bl	8005150 <MPU_Write_Byte>
//fsr:0,��2g;1,��4g;2,��8g;3,��16g
//����ֵ:0,���óɹ�
//    ����,����ʧ��
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//���ü��ٶȴ����������̷�Χ
 80022a2:	4629      	mov	r1, r5
 80022a4:	201c      	movs	r0, #28
 80022a6:	f002 ff53 	bl	8005150 <MPU_Write_Byte>
  chThdSleepMilliseconds(100);

	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//����MPU6050
	MPU_Set_Gyro_Fsr(3);					//�����Ǵ�����,��2000dps
	MPU_Set_Accel_Fsr(0);					//���ٶȴ�����,��2g
	MPU_Set_Rate(100);						//���ò�����50Hz
 80022aa:	f002 ff71 	bl	8005190 <MPU_Set_Rate.constprop.1>
	//MPU_Write_Byte(MPU_INT_EN_REG,0X00);	//�ر������ж�
	MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C��ģʽ�ر�
 80022ae:	4629      	mov	r1, r5
 80022b0:	206a      	movs	r0, #106	; 0x6a
 80022b2:	f002 ff4d 	bl	8005150 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//�ر�FIFO
 80022b6:	4629      	mov	r1, r5
 80022b8:	2023      	movs	r0, #35	; 0x23
 80022ba:	f002 ff49 	bl	8005150 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT���ŵ͵�ƽ��Ч
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	2037      	movs	r0, #55	; 0x37
 80022c2:	f002 ff45 	bl	8005150 <MPU_Write_Byte>
uint8_t MPU_Read_Byte(uint8_t reg)
{
	uint8_t res;
  i2cAcquireBus(MPU_I2C);

	uint8_t txbuf = reg;
 80022c6:	ad04      	add	r5, sp, #16
 80022c8:	483f      	ldr	r0, [pc, #252]	; (80023c8 <MPU_thread.lto_priv.72+0x338>)
 80022ca:	f7fe fef9 	bl	80010c0 <chMtxLock>
 80022ce:	2375      	movs	r3, #117	; 0x75
 80022d0:	f805 3d08 	strb.w	r3, [r5, #-8]!

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, &txbuf, 1,
 80022d4:	2101      	movs	r1, #1
 80022d6:	4628      	mov	r0, r5
 80022d8:	f10d 0207 	add.w	r2, sp, #7
 80022dc:	460b      	mov	r3, r1
 80022de:	f002 fe4f 	bl	8004f80 <i2cMasterTransmitTimeout.constprop.35>
 80022e2:	4606      	mov	r6, r0
 80022e4:	2800      	cmp	r0, #0
 80022e6:	f000 8083 	beq.w	80023f0 <MPU_thread.lto_priv.72+0x360>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80022ea:	f002 fdd1 	bl	8004e90 <chMtxUnlock.constprop.48>
  if(MPU_Init())
    while(true)
    {
      palTogglePad(GPIOD,GPIOD_LED3);
 80022ee:	4c37      	ldr	r4, [pc, #220]	; (80023cc <MPU_thread.lto_priv.72+0x33c>)
 80022f0:	6963      	ldr	r3, [r4, #20]
 80022f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f6:	6163      	str	r3, [r4, #20]
      chThdSleepMilliseconds(200);
 80022f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022fc:	f7fe ff90 	bl	8001220 <chThdSleep>
 8002300:	e7f6      	b.n	80022f0 <MPU_thread.lto_priv.72+0x260>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002302:	b672      	cpsid	i
 8002304:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <MPU_thread.lto_priv.72+0x340>)
 8002306:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002308:	e7fe      	b.n	8002308 <MPU_thread.lto_priv.72+0x278>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 800230a:	f023 0308 	bic.w	r3, r3, #8
 800230e:	b29b      	uxth	r3, r3
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	e79e      	b.n	8002254 <MPU_thread.lto_priv.72+0x1c4>
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
    /* Configure clock_div in standard mode.*/
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8002316:	f1bc 0f01 	cmp.w	ip, #1
 800231a:	d003      	beq.n	8002324 <MPU_thread.lto_priv.72+0x294>
 800231c:	b672      	cpsid	i
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 8002320:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002322:	e7fe      	b.n	8002322 <MPU_thread.lto_priv.72+0x292>

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 8002324:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MPU_thread.lto_priv.72+0x334>)
 800232a:	fbb3 f0fe 	udiv	r0, r3, lr
 800232e:	fb0e fe00 	mul.w	lr, lr, r0
 8002332:	ebce 0303 	rsb	r3, lr, r3
 8002336:	b993      	cbnz	r3, 800235e <MPU_thread.lto_priv.72+0x2ce>
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8002338:	b280      	uxth	r0, r0

    osalDbgAssert(clock_div >= 0x04,
 800233a:	2803      	cmp	r0, #3
 800233c:	d90b      	bls.n	8002356 <MPU_thread.lto_priv.72+0x2c6>
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 800233e:	232b      	movs	r3, #43	; 0x2b

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8002340:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002344:	6213      	str	r3, [r2, #32]
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 8002346:	f3c0 030b 	ubfx	r3, r0, #0, #12

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800234a:	f4ff af75 	bcc.w	8002238 <MPU_thread.lto_priv.72+0x1a8>
 800234e:	b672      	cpsid	i
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 8002352:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002354:	e7fe      	b.n	8002354 <MPU_thread.lto_priv.72+0x2c4>
 8002356:	b672      	cpsid	i
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 800235a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800235c:	e7fe      	b.n	800235c <MPU_thread.lto_priv.72+0x2cc>
 800235e:	b672      	cpsid	i
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 8002362:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002364:	e7fe      	b.n	8002364 <MPU_thread.lto_priv.72+0x2d4>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002366:	f043 030a 	orr.w	r3, r3, #10
 800236a:	e773      	b.n	8002254 <MPU_thread.lto_priv.72+0x1c4>
 800236c:	b672      	cpsid	i
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <MPU_thread.lto_priv.72+0x344>)
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
 8002372:	e7fe      	b.n	8002372 <MPU_thread.lto_priv.72+0x2e2>
 8002374:	b672      	cpsid	i
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MPU_thread.lto_priv.72+0x328>)
 8002378:	62eb      	str	r3, [r5, #44]	; 0x2c
 800237a:	e7fe      	b.n	800237a <MPU_thread.lto_priv.72+0x2ea>
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 800237c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MPU_thread.lto_priv.72+0x334>)
 8002382:	fbb3 f0fe 	udiv	r0, r3, lr
 8002386:	fb0e fe00 	mul.w	lr, lr, r0
 800238a:	ebce 0303 	rsb	r3, lr, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8082 	bne.w	8002498 <MPU_thread.lto_priv.72+0x408>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8002394:	b280      	uxth	r0, r0
 8002396:	e747      	b.n	8002228 <MPU_thread.lto_priv.72+0x198>
 8002398:	2000c9a0 	.word	0x2000c9a0
 800239c:	2000bfd8 	.word	0x2000bfd8
 80023a0:	080066a0 	.word	0x080066a0
 80023a4:	20000a20 	.word	0x20000a20
 80023a8:	20000800 	.word	0x20000800
 80023ac:	08006620 	.word	0x08006620
 80023b0:	080066d0 	.word	0x080066d0
 80023b4:	00061a80 	.word	0x00061a80
 80023b8:	080066e0 	.word	0x080066e0
 80023bc:	08002521 	.word	0x08002521
 80023c0:	080024b1 	.word	0x080024b1
 80023c4:	0280de80 	.word	0x0280de80
 80023c8:	2000c9ac 	.word	0x2000c9ac
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	08006640 	.word	0x08006640
 80023d4:	08006cf0 	.word	0x08006cf0
 80023d8:	003d08ff 	.word	0x003d08ff
 80023dc:	000186a0 	.word	0x000186a0
 80023e0:	40023800 	.word	0x40023800
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	b672      	cpsid	i
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MPU_thread.lto_priv.72+0x410>)
 80023ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 80023ee:	e7fe      	b.n	80023ee <MPU_thread.lto_priv.72+0x35e>
 80023f0:	f002 fd4e 	bl	8004e90 <chMtxUnlock.constprop.48>
		i2cReleaseBus(MPU_I2C);
		return MPU_ERROR;
	}

	i2cReleaseBus(MPU_I2C);			//����һ��ֹͣ����
	return res;
 80023f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C��ģʽ�ر�
	MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//�ر�FIFO
	MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT���ŵ͵�ƽ��Ч
	res=MPU_Read_Byte(MPU_DEVICE_ID_REG);

	if(res==MPU6050_I2C_ADDR_USER)//����ID��ȷ
 80023f8:	2b68      	cmp	r3, #104	; 0x68
 80023fa:	f47f af78 	bne.w	80022ee <MPU_thread.lto_priv.72+0x25e>
	{
    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//����CLKSEL,PLL X��Ϊ�ο�
 80023fe:	2101      	movs	r1, #1
 8002400:	206b      	movs	r0, #107	; 0x6b
 8002402:	f002 fea5 	bl	8005150 <MPU_Write_Byte>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//���ٶ��������Ƕ�����
 8002406:	4631      	mov	r1, r6
 8002408:	206c      	movs	r0, #108	; 0x6c
 800240a:	f002 fea1 	bl	8005150 <MPU_Write_Byte>
		MPU_Set_Rate(100);						//���ò�����Ϊ50Hz
 800240e:	f002 febf 	bl	8005190 <MPU_Set_Rate.constprop.1>
    }

  chThdSleepMilliseconds(1000);
 8002412:	f242 7010 	movw	r0, #10000	; 0x2710
 8002416:	f7fe ff03 	bl	8001220 <chThdSleep>
//����ֵ:0,�ɹ�
//    ����,��������
uint8_t MPU_Get_Accelerometer(int16_t* Accel)
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_ACCEL_XOUTH_REG,6,buf);
 800241a:	4629      	mov	r1, r5
 800241c:	203b      	movs	r0, #59	; 0x3b
 800241e:	f002 fe77 	bl	8005110 <MPU_Read_Len.constprop.4>
//����ֵ:0,�ɹ�
//    ����,��������
uint8_t MPU_Get_Gyroscope(int16_t* Gyro)
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_GYRO_XOUTH_REG,6,buf);
 8002422:	4629      	mov	r1, r5
//    ����,��������
uint8_t MPU_Get_Accelerometer(int16_t* Accel)
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_ACCEL_XOUTH_REG,6,buf);
	if(res==0)
 8002424:	b9b8      	cbnz	r0, 8002456 <MPU_thread.lto_priv.72+0x3c6>
	{
		Accel[0]=(int16_t)((buf[0]<<8)|buf[1]);
 8002426:	f89d e008 	ldrb.w	lr, [sp, #8]
 800242a:	f89d 0009 	ldrb.w	r0, [sp, #9]
		Accel[1]=(int16_t)((buf[2]<<8)|buf[3]);
 800242e:	f89d 700a 	ldrb.w	r7, [sp, #10]
 8002432:	f89d 200b 	ldrb.w	r2, [sp, #11]
		Accel[2]=(int16_t)((buf[4]<<8)|buf[5]);
 8002436:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800243a:	f89d 300d 	ldrb.w	r3, [sp, #13]
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_ACCEL_XOUTH_REG,6,buf);
	if(res==0)
	{
		Accel[0]=(int16_t)((buf[0]<<8)|buf[1]);
 800243e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		Accel[1]=(int16_t)((buf[2]<<8)|buf[3]);
 8002442:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
		Accel[2]=(int16_t)((buf[4]<<8)|buf[5]);
 8002446:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_ACCEL_XOUTH_REG,6,buf);
	if(res==0)
	{
		Accel[0]=(int16_t)((buf[0]<<8)|buf[1]);
 800244a:	f8a4 0001 	strh.w	r0, [r4, #1]
		Accel[1]=(int16_t)((buf[2]<<8)|buf[3]);
 800244e:	f8a4 2003 	strh.w	r2, [r4, #3]
		Accel[2]=(int16_t)((buf[4]<<8)|buf[5]);
 8002452:	f8a4 3005 	strh.w	r3, [r4, #5]
//����ֵ:0,�ɹ�
//    ����,��������
uint8_t MPU_Get_Gyroscope(int16_t* Gyro)
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_GYRO_XOUTH_REG,6,buf);
 8002456:	2043      	movs	r0, #67	; 0x43
 8002458:	f002 fe5a 	bl	8005110 <MPU_Read_Len.constprop.4>
	if(res==0)
 800245c:	b9b8      	cbnz	r0, 800248e <MPU_thread.lto_priv.72+0x3fe>
	{
		Gyro[0]=(int16_t)((buf[0]<<8)|buf[1]);
 800245e:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8002462:	f89d 1009 	ldrb.w	r1, [sp, #9]
		Gyro[1]=(int16_t)((buf[2]<<8)|buf[3]);
 8002466:	f89d 600a 	ldrb.w	r6, [sp, #10]
 800246a:	f89d 200b 	ldrb.w	r2, [sp, #11]
		Gyro[2]=(int16_t)((buf[4]<<8)|buf[5]);
 800246e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002472:	f89d 300d 	ldrb.w	r3, [sp, #13]
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_GYRO_XOUTH_REG,6,buf);
	if(res==0)
	{
		Gyro[0]=(int16_t)((buf[0]<<8)|buf[1]);
 8002476:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		Gyro[1]=(int16_t)((buf[2]<<8)|buf[3]);
 800247a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
		Gyro[2]=(int16_t)((buf[4]<<8)|buf[5]);
 800247e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
{
  uint8_t buf[6],res;
	res=MPU_Read_Len(MPU6050_I2C_ADDR_USER,MPU_GYRO_XOUTH_REG,6,buf);
	if(res==0)
	{
		Gyro[0]=(int16_t)((buf[0]<<8)|buf[1]);
 8002482:	f8a4 1007 	strh.w	r1, [r4, #7]
		Gyro[1]=(int16_t)((buf[2]<<8)|buf[3]);
 8002486:	f8a4 2009 	strh.w	r2, [r4, #9]
		Gyro[2]=(int16_t)((buf[4]<<8)|buf[5]);
 800248a:	f8a4 300b 	strh.w	r3, [r4, #11]
  while (true)
  {
    //if(mpu_dmp_get_data(pIMU->P_R_Y))
    //  palTogglePad(GPIOD,GPIOD_LED3);
    MPU_test();
    chThdSleepMilliseconds(250);
 800248e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002492:	f7fe fec5 	bl	8001220 <chThdSleep>
 8002496:	e7c0      	b.n	800241a <MPU_thread.lto_priv.72+0x38a>
 8002498:	b672      	cpsid	i
 800249a:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <MPU_thread.lto_priv.72+0x414>)
 800249c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800249e:	e7fe      	b.n	800249e <MPU_thread.lto_priv.72+0x40e>
 80024a0:	08006640 	.word	0x08006640
 80024a4:	080066e0 	.word	0x080066e0
	...

080024b0 <i2c_lld_serve_tx_end_irq.lto_priv.97>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80024b0:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80024b4:	b410      	push	{r4}
  I2C_TypeDef *dp = i2cp->i2c;
 80024b6:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80024b8:	d114      	bne.n	80024e4 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x34>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 80024ba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	f021 011f 	bic.w	r1, r1, #31
 80024c4:	6019      	str	r1, [r3, #0]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	07c9      	lsls	r1, r1, #31
 80024ca:	d4fc      	bmi.n	80024c6 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x16>
 80024cc:	7a11      	ldrb	r1, [r2, #8]
 80024ce:	6852      	ldr	r2, [r2, #4]
 80024d0:	233d      	movs	r3, #61	; 0x3d
 80024d2:	408b      	lsls	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024dc:	6063      	str	r3, [r4, #4]
}
 80024de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	b672      	cpsid	i
 80024e6:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x40>)
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x44>)
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ec:	e7fe      	b.n	80024ec <i2c_lld_serve_tx_end_irq.lto_priv.97+0x3c>
 80024ee:	bf00      	nop
 80024f0:	2000bfd8 	.word	0x2000bfd8
 80024f4:	08006770 	.word	0x08006770
	...

08002500 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <SVC_Handler+0x1c>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800250a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800250e:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002510:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002514:	2300      	movs	r3, #0
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	4770      	bx	lr
 800251c:	e000ef30 	.word	0xe000ef30

08002520 <i2c_lld_serve_rx_end_irq.lto_priv.96>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002520:	f011 0f0c 	tst.w	r1, #12
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002524:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002526:	d12f      	bne.n	8002588 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x68>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8002528:	b570      	push	{r4, r5, r6, lr}
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800252a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800252c:	6829      	ldr	r1, [r5, #0]
 800252e:	680a      	ldr	r2, [r1, #0]
 8002530:	f022 021f 	bic.w	r2, r2, #31
 8002534:	600a      	str	r2, [r1, #0]
 8002536:	680a      	ldr	r2, [r1, #0]
 8002538:	f012 0401 	ands.w	r4, r2, #1
 800253c:	d1fb      	bne.n	8002536 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x16>
 800253e:	4606      	mov	r6, r0
 8002540:	7a28      	ldrb	r0, [r5, #8]
 8002542:	6869      	ldr	r1, [r5, #4]
 8002544:	223d      	movs	r2, #61	; 0x3d
 8002546:	4082      	lsls	r2, r0
 8002548:	600a      	str	r2, [r1, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002550:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	2320      	movs	r3, #32
 8002564:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8002568:	f7fe f982 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800256c:	f7fe fc00 	bl	8000d70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8002570:	f106 001c 	add.w	r0, r6, #28
 8002574:	4621      	mov	r1, r4
 8002576:	f7fe fb73 	bl	8000c60 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800257a:	f7fe fbe1 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800257e:	f7fe f95f 	bl	8000840 <_stats_stop_measure_crit_isr>
 8002582:	f384 8811 	msr	BASEPRI, r4
 8002586:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
 800258a:	4b02      	ldr	r3, [pc, #8]	; (8002594 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x74>)
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x78>)
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002590:	e7fe      	b.n	8002590 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x70>
 8002592:	bf00      	nop
 8002594:	2000bfd8 	.word	0x2000bfd8
 8002598:	08006770 	.word	0x08006770
 800259c:	00000000 	.word	0x00000000

080025a0 <readt.lto_priv.89>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80025a0:	300c      	adds	r0, #12
 80025a2:	f7fe bcad 	b.w	8000f00 <chIQReadTimeout>
 80025a6:	bf00      	nop
	...

080025b0 <read.lto_priv.83>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80025b0:	300c      	adds	r0, #12
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	f7fe bca3 	b.w	8000f00 <chIQReadTimeout>
 80025ba:	bf00      	nop
 80025bc:	0000      	movs	r0, r0
	...

080025c0 <gett.lto_priv.87>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80025c0:	300c      	adds	r0, #12
 80025c2:	f7fe bd25 	b.w	8001010 <chIQGetTimeout>
 80025c6:	bf00      	nop
	...

080025d0 <get.lto_priv.85>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80025d0:	300c      	adds	r0, #12
 80025d2:	f04f 31ff 	mov.w	r1, #4294967295
 80025d6:	f7fe bd1b 	b.w	8001010 <chIQGetTimeout>
 80025da:	bf00      	nop
 80025dc:	0000      	movs	r0, r0
	...

080025e0 <putt.lto_priv.86>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80025e0:	3030      	adds	r0, #48	; 0x30
 80025e2:	f7fe bc35 	b.w	8000e50 <chOQPutTimeout>
 80025e6:	bf00      	nop
	...

080025f0 <put.lto_priv.84>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80025f0:	3030      	adds	r0, #48	; 0x30
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	f7fe bc2b 	b.w	8000e50 <chOQPutTimeout>
 80025fa:	bf00      	nop
 80025fc:	0000      	movs	r0, r0
	...

08002600 <dmaStreamAllocate>:
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 8002600:	2800      	cmp	r0, #0
 8002602:	d054      	beq.n	80026ae <dmaStreamAllocate+0xae>
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8002604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002608:	4f2b      	ldr	r7, [pc, #172]	; (80026b8 <dmaStreamAllocate+0xb8>)
 800260a:	7a45      	ldrb	r5, [r0, #9]
 800260c:	683c      	ldr	r4, [r7, #0]
 800260e:	4698      	mov	r8, r3
 8002610:	2301      	movs	r3, #1
 8002612:	fa03 fe05 	lsl.w	lr, r3, r5
 8002616:	ea1e 0f04 	tst.w	lr, r4
 800261a:	d13d      	bne.n	8002698 <dmaStreamAllocate+0x98>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800261c:	4e27      	ldr	r6, [pc, #156]	; (80026bc <dmaStreamAllocate+0xbc>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 800261e:	ea4e 0404 	orr.w	r4, lr, r4
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002622:	eb06 0cc5 	add.w	ip, r6, r5, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002626:	f014 0fff 	tst.w	r4, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 800262a:	603c      	str	r4, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800262c:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002630:	f8cc 8004 	str.w	r8, [ip, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002634:	d004      	beq.n	8002640 <dmaStreamAllocate+0x40>
    rccEnableDMA1(false);
 8002636:	4d22      	ldr	r5, [pc, #136]	; (80026c0 <dmaStreamAllocate+0xc0>)
 8002638:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800263a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263e:	632b      	str	r3, [r5, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8002640:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 8002644:	d12b      	bne.n	800269e <dmaStreamAllocate+0x9e>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002646:	6804      	ldr	r4, [r0, #0]
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f023 031f 	bic.w	r3, r3, #31
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	f013 0301 	ands.w	r3, r3, #1
 8002656:	d1fb      	bne.n	8002650 <dmaStreamAllocate+0x50>
 8002658:	7a07      	ldrb	r7, [r0, #8]
 800265a:	6846      	ldr	r6, [r0, #4]
 800265c:	253d      	movs	r5, #61	; 0x3d
 800265e:	40bd      	lsls	r5, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002660:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002662:	6035      	str	r5, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002664:	6023      	str	r3, [r4, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002666:	6167      	str	r7, [r4, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8002668:	b1fa      	cbz	r2, 80026aa <dmaStreamAllocate+0xaa>
    nvicEnableVector(dmastp->vector, priority);
 800266a:	7a80      	ldrb	r0, [r0, #10]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800266c:	0942      	lsrs	r2, r0, #5
 800266e:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002670:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 8002674:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8002678:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800267c:	0109      	lsls	r1, r1, #4
 800267e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002682:	f000 001f 	and.w	r0, r0, #31
 8002686:	2401      	movs	r4, #1
 8002688:	fa04 f000 	lsl.w	r0, r4, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800268c:	b2c9      	uxtb	r1, r1
 800268e:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002692:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002696:	6010      	str	r0, [r2, #0]
  }

  return false;
}
 8002698:	4618      	mov	r0, r3
 800269a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 800269e:	4c08      	ldr	r4, [pc, #32]	; (80026c0 <dmaStreamAllocate+0xc0>)
 80026a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a6:	6323      	str	r3, [r4, #48]	; 0x30
 80026a8:	e7cd      	b.n	8002646 <dmaStreamAllocate+0x46>
  dmaStreamDisable(dmastp);
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 80026aa:	4613      	mov	r3, r2
 80026ac:	e7f4      	b.n	8002698 <dmaStreamAllocate+0x98>
 80026ae:	b672      	cpsid	i
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <dmaStreamAllocate+0xc4>)
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <dmaStreamAllocate+0xc8>)
 80026b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b6:	e7fe      	b.n	80026b6 <dmaStreamAllocate+0xb6>
 80026b8:	2000bc48 	.word	0x2000bc48
 80026bc:	2000a890 	.word	0x2000a890
 80026c0:	40023800 	.word	0x40023800
 80026c4:	2000bfd8 	.word	0x2000bfd8
 80026c8:	08006750 	.word	0x08006750
 80026cc:	00000000 	.word	0x00000000

080026d0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <stSetAlarm+0x18>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80026d4:	0792      	lsls	r2, r2, #30
 80026d6:	d501      	bpl.n	80026dc <stSetAlarm+0xc>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80026d8:	6358      	str	r0, [r3, #52]	; 0x34
 80026da:	4770      	bx	lr
 80026dc:	b672      	cpsid	i
 80026de:	4b03      	ldr	r3, [pc, #12]	; (80026ec <stSetAlarm+0x1c>)
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <stSetAlarm+0x20>)
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80026e4:	e7fe      	b.n	80026e4 <stSetAlarm+0x14>
 80026e6:	bf00      	nop
 80026e8:	40000c00 	.word	0x40000c00
 80026ec:	2000bfd8 	.word	0x2000bfd8
 80026f0:	08006700 	.word	0x08006700
	...

08002700 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002700:	2320      	movs	r3, #32
 8002702:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <_port_irq_epilogue+0x50>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800270e:	d102      	bne.n	8002716 <_port_irq_epilogue+0x16>
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8002716:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800271a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800271e:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002720:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800272a:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800272e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002732:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <_port_irq_epilogue+0x58>)
 8002738:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800273a:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800273c:	6889      	ldr	r1, [r1, #8]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002742:	bf8c      	ite	hi
 8002744:	4a05      	ldrhi	r2, [pc, #20]	; (800275c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002746:	4a06      	ldrls	r2, [pc, #24]	; (8002760 <_port_irq_epilogue+0x60>)
 8002748:	f843 2c50 	str.w	r2, [r3, #-80]
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00
 8002754:	e000ef30 	.word	0xe000ef30
 8002758:	2000bfd8 	.word	0x2000bfd8
 800275c:	08000301 	.word	0x08000301
 8002760:	08000314 	.word	0x08000314
	...

08002770 <VectorC0>:
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8002772:	4c3d      	ldr	r4, [pc, #244]	; (8002868 <VectorC0+0xf8>)
 8002774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002776:	695e      	ldr	r6, [r3, #20]

  OSAL_IRQ_PROLOGUE();
 8002778:	f7fe f82a 	bl	80007d0 <_stats_increase_irq>

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800277c:	b2b5      	uxth	r5, r6

  OSAL_IRQ_PROLOGUE();
 800277e:	f7fe fac7 	bl	8000d10 <_dbg_check_enter_isr>
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002782:	6b27      	ldr	r7, [r4, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002786:	683a      	ldr	r2, [r7, #0]
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002788:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
 800278c:	43db      	mvns	r3, r3
 800278e:	614b      	str	r3, [r1, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002790:	6813      	ldr	r3, [r2, #0]
 8002792:	f023 031f 	bic.w	r3, r3, #31
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	6813      	ldr	r3, [r2, #0]
 800279a:	07d8      	lsls	r0, r3, #31
 800279c:	d4fc      	bmi.n	8002798 <VectorC0+0x28>
 800279e:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 80027a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80027a4:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 80027a6:	6802      	ldr	r2, [r0, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80027a8:	233d      	movs	r3, #61	; 0x3d
 80027aa:	fa03 f30e 	lsl.w	r3, r3, lr
 80027ae:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f023 031f 	bic.w	r3, r3, #31
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f013 0301 	ands.w	r3, r3, #1
 80027be:	d1fb      	bne.n	80027b8 <VectorC0+0x48>
 80027c0:	7a07      	ldrb	r7, [r0, #8]
 80027c2:	6840      	ldr	r0, [r0, #4]
 80027c4:	223d      	movs	r2, #61	; 0x3d
 80027c6:	40ba      	lsls	r2, r7
 80027c8:	6002      	str	r2, [r0, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80027ca:	05ea      	lsls	r2, r5, #23
    i2cp->errors |= I2C_BUS_ERROR;
 80027cc:	bf48      	it	mi
 80027ce:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80027d0:	05af      	lsls	r7, r5, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 80027d2:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80027d4:	bf44      	itt	mi
 80027d6:	f043 0302 	orrmi.w	r3, r3, #2
 80027da:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80027dc:	0568      	lsls	r0, r5, #21
 80027de:	d50a      	bpl.n	80027f6 <VectorC0+0x86>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80027e0:	684a      	ldr	r2, [r1, #4]
 80027e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027e6:	604a      	str	r2, [r1, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80027e8:	680a      	ldr	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80027ea:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	600a      	str	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80027f4:	60a3      	str	r3, [r4, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80027f6:	052a      	lsls	r2, r5, #20
    i2cp->errors |= I2C_OVERRUN;
 80027f8:	bf44      	itt	mi
 80027fa:	f043 0308 	orrmi.w	r3, r3, #8
 80027fe:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002800:	046f      	lsls	r7, r5, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002802:	bf44      	itt	mi
 8002804:	f043 0320 	orrmi.w	r3, r3, #32
 8002808:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800280a:	04e8      	lsls	r0, r5, #19
 800280c:	d51d      	bpl.n	800284a <VectorC0+0xda>
    i2cp->errors |= I2C_PEC_ERROR;
 800280e:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002812:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8002814:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002816:	d422      	bmi.n	800285e <VectorC0+0xee>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002818:	2320      	movs	r3, #32
 800281a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800281e:	f7fe f827 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002822:	f7fe faa5 	bl	8000d70 <_dbg_check_lock_from_isr>
 8002826:	4811      	ldr	r0, [pc, #68]	; (800286c <VectorC0+0xfc>)
 8002828:	f06f 0101 	mvn.w	r1, #1
 800282c:	f7fe fa18 	bl	8000c60 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002830:	f7fe fa86 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002834:	f7fe f804 	bl	8000840 <_stats_stop_measure_crit_isr>
 8002838:	2300      	movs	r3, #0
 800283a:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 800283e:	f7fe fa4f 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8002846:	f7ff bf5b 	b.w	8002700 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800284a:	0432      	lsls	r2, r6, #16
 800284c:	d407      	bmi.n	800285e <VectorC0+0xee>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e2      	bne.n	8002818 <VectorC0+0xa8>
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8002852:	f7fe fa45 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 800285a:	f7ff bf51 	b.w	8002700 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800285e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002862:	60a3      	str	r3, [r4, #8]
 8002864:	e7d8      	b.n	8002818 <VectorC0+0xa8>
 8002866:	bf00      	nop
 8002868:	2000c9a0 	.word	0x2000c9a0
 800286c:	2000c9bc 	.word	0x2000c9bc

08002870 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002872:	4d42      	ldr	r5, [pc, #264]	; (800297c <VectorBC+0x10c>)
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8002874:	f7fd ffac 	bl	80007d0 <_stats_increase_irq>
 8002878:	f7fe fa4a 	bl	8000d10 <_dbg_check_enter_isr>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800287c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <VectorBC+0x110>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 8002880:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8002882:	6966      	ldr	r6, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002884:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002888:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800288c:	4293      	cmp	r3, r2
 800288e:	d050      	beq.n	8002932 <VectorBC+0xc2>
 8002890:	d820      	bhi.n	80028d4 <VectorBC+0x64>
 8002892:	3a07      	subs	r2, #7
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <VectorBC+0xaa>
 8002898:	3201      	adds	r2, #1
 800289a:	4293      	cmp	r3, r2
 800289c:	d110      	bne.n	80028c0 <VectorBC+0x50>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800289e:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80028a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80028a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80028a6:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80028a8:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80028b2:	6862      	ldr	r2, [r4, #4]
 80028b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028b8:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d958      	bls.n	8002972 <VectorBC+0x102>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80028c0:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 80028c4:	bf18      	it	ne
 80028c6:	69a3      	ldrne	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80028c8:	f7fe fa0a 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80028cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80028d0:	f7ff bf16 	b.w	8002700 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80028d4:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <VectorBC+0x114>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d014      	beq.n	8002904 <VectorBC+0x94>
 80028da:	3202      	adds	r2, #2
 80028dc:	4293      	cmp	r3, r2
 80028de:	d1ef      	bne.n	80028c0 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80028e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685f      	ldr	r7, [r3, #4]
 80028e6:	b34f      	cbz	r7, 800293c <VectorBC+0xcc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80028e8:	8c2a      	ldrh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80028ea:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80028ec:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80028f0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80028f4:	842a      	strh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80028f6:	6023      	str	r3, [r4, #0]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80028f8:	f7fe f9f2 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80028fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8002900:	f7ff befe 	b.w	8002700 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002904:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002906:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800290c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800290e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e7d2      	b.n	80028c0 <VectorBC+0x50>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800291a:	8c2b      	ldrh	r3, [r5, #32]
 800291c:	0a1a      	lsrs	r2, r3, #8
 800291e:	d00b      	beq.n	8002938 <VectorBC+0xc8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002928:	f002 0206 	and.w	r2, r2, #6
 800292c:	4313      	orrs	r3, r2
 800292e:	6123      	str	r3, [r4, #16]
 8002930:	e7c6      	b.n	80028c0 <VectorBC+0x50>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002932:	8c2b      	ldrh	r3, [r5, #32]
 8002934:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002938:	6123      	str	r3, [r4, #16]
 800293a:	e7c1      	b.n	80028c0 <VectorBC+0x50>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002942:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294a:	6023      	str	r3, [r4, #0]
 800294c:	2320      	movs	r3, #32
 800294e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8002952:	f7fd ff8d 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002956:	f7fe fa0b 	bl	8000d70 <_dbg_check_lock_from_isr>
 800295a:	f105 001c 	add.w	r0, r5, #28
 800295e:	4639      	mov	r1, r7
 8002960:	f7fe f97e 	bl	8000c60 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002964:	f7fe f9ec 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002968:	f7fd ff6a 	bl	8000840 <_stats_stop_measure_crit_isr>
 800296c:	f387 8811 	msr	BASEPRI, r7
 8002970:	e7a6      	b.n	80028c0 <VectorBC+0x50>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	e7a1      	b.n	80028c0 <VectorBC+0x50>
 800297c:	2000c9a0 	.word	0x2000c9a0
 8002980:	00030008 	.word	0x00030008
 8002984:	00070082 	.word	0x00070082
	...

08002990 <Vector108>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002994:	4e38      	ldr	r6, [pc, #224]	; (8002a78 <Vector108+0xe8>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8002996:	f7fd ff1b 	bl	80007d0 <_stats_increase_irq>
 800299a:	f7fe f9b9 	bl	8000d10 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800299e:	6933      	ldr	r3, [r6, #16]
 80029a0:	079b      	lsls	r3, r3, #30
 80029a2:	d405      	bmi.n	80029b0 <Vector108+0x20>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80029a4:	f7fe f99c 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80029a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80029ac:	f7ff bea8 	b.w	8002700 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80029b0:	2700      	movs	r7, #0
 80029b2:	6137      	str	r7, [r6, #16]
 80029b4:	f04f 0920 	mov.w	r9, #32
 80029b8:	f389 8811 	msr	BASEPRI, r9
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80029bc:	4d2f      	ldr	r5, [pc, #188]	; (8002a7c <Vector108+0xec>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80029be:	f7fd ff57 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80029c2:	f7fe f9d5 	bl	8000d70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80029c6:	f7fd fff3 	bl	80009b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80029ca:	f7fd fff1 	bl	80009b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80029ce:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80029d0:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80029d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80029d4:	68a3      	ldr	r3, [r4, #8]
 80029d6:	1a50      	subs	r0, r2, r1
 80029d8:	4298      	cmp	r0, r3
 80029da:	bf38      	it	cc
 80029dc:	f105 061c 	addcc.w	r6, r5, #28
 80029e0:	d325      	bcc.n	8002a2e <Vector108+0x9e>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80029e2:	46b8      	mov	r8, r7
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80029e4:	4637      	mov	r7, r6
 80029e6:	f105 061c 	add.w	r6, r5, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80029ea:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80029ec:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80029f0:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80029f2:	42b2      	cmp	r2, r6
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80029f4:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80029f6:	6056      	str	r6, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80029f8:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80029fa:	f8c4 800c 	str.w	r8, [r4, #12]
 80029fe:	bf08      	it	eq
 8002a00:	f8c7 800c 	streq.w	r8, [r7, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002a04:	f7fe f99c 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002a08:	f7fd ff1a 	bl	8000840 <_stats_stop_measure_crit_isr>
 8002a0c:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8002a10:	6920      	ldr	r0, [r4, #16]
 8002a12:	47d0      	blx	sl
 8002a14:	f389 8811 	msr	BASEPRI, r9
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8002a18:	f7fd ff2a 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002a1c:	f7fe f9a8 	bl	8000d70 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002a20:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002a24:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	1a50      	subs	r0, r2, r1
 8002a2a:	4283      	cmp	r3, r0
 8002a2c:	d9dd      	bls.n	80029ea <Vector108+0x5a>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002a2e:	42b4      	cmp	r4, r6
 8002a30:	d014      	beq.n	8002a5c <Vector108+0xcc>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8002a32:	440b      	add	r3, r1
 8002a34:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	bf98      	it	ls
 8002a3a:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 8002a3c:	189c      	adds	r4, r3, r2
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff fe46 	bl	80026d0 <stSetAlarm>
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <Vector108+0xe8>)

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8002a46:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <Vector108+0xec>)
 8002a4c:	1a63      	subs	r3, r4, r1
 8002a4e:	1a52      	subs	r2, r2, r1
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d903      	bls.n	8002a5c <Vector108+0xcc>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <Vector108+0xf0>)
 8002a58:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002a5a:	e7fe      	b.n	8002a5a <Vector108+0xca>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002a5c:	f7fe f970 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002a60:	f7fd feee 	bl	8000840 <_stats_stop_measure_crit_isr>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002a64:	2300      	movs	r3, #0
 8002a66:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002a6a:	f7fe f939 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002a6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002a72:	f7ff be45 	b.w	8002700 <_port_irq_epilogue>
 8002a76:	bf00      	nop
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	2000bfd8 	.word	0x2000bfd8
 8002a80:	08006720 	.word	0x08006720
	...

08002a90 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002a90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002a92:	f7fd fe9d 	bl	80007d0 <_stats_increase_irq>
 8002a96:	f7fe f93b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002a9c:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <Vector158+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a9e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002aa0:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002aa2:	0d89      	lsrs	r1, r1, #22
 8002aa4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002aa8:	058c      	lsls	r4, r1, #22
 8002aaa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002aac:	b10a      	cbz	r2, 8002ab2 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002aae:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002ab0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002ab2:	f7fe f915 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002aba:	f7ff be21 	b.w	8002700 <_port_irq_epilogue>
 8002abe:	bf00      	nop
 8002ac0:	40026400 	.word	0x40026400
 8002ac4:	2000a890 	.word	0x2000a890
	...

08002ad0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002ad0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002ad2:	f7fd fe7d 	bl	80007d0 <_stats_increase_irq>
 8002ad6:	f7fe f91b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <Vector154+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ade:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002ae0:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ae2:	0c09      	lsrs	r1, r1, #16
 8002ae4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8002ae8:	040c      	lsls	r4, r1, #16
 8002aea:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8002aec:	b10a      	cbz	r2, 8002af2 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002aee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002af0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002af2:	f7fe f8f5 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002afa:	f7ff be01 	b.w	8002700 <_port_irq_epilogue>
 8002afe:	bf00      	nop
 8002b00:	40026400 	.word	0x40026400
 8002b04:	2000a890 	.word	0x2000a890
	...

08002b10 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002b10:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002b12:	f7fd fe5d 	bl	80007d0 <_stats_increase_irq>
 8002b16:	f7fe f8fb 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <Vector150+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b1e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002b20:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b22:	0989      	lsrs	r1, r1, #6
 8002b24:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8002b28:	018c      	lsls	r4, r1, #6
 8002b2a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002b2c:	b10a      	cbz	r2, 8002b32 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002b2e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002b30:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002b32:	f7fe f8d5 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002b3a:	f7ff bde1 	b.w	8002700 <_port_irq_epilogue>
 8002b3e:	bf00      	nop
 8002b40:	40026400 	.word	0x40026400
 8002b44:	2000a890 	.word	0x2000a890
	...

08002b50 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002b50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002b52:	f7fd fe3d 	bl	80007d0 <_stats_increase_irq>
 8002b56:	f7fe f8db 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002b5c:	4808      	ldr	r0, [pc, #32]	; (8002b80 <Vector130+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b5e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002b60:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002b62:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002b66:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002b68:	b10a      	cbz	r2, 8002b6e <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002b6a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002b6c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002b6e:	f7fe f8b7 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002b76:	f7ff bdc3 	b.w	8002700 <_port_irq_epilogue>
 8002b7a:	bf00      	nop
 8002b7c:	40026400 	.word	0x40026400
 8002b80:	2000a890 	.word	0x2000a890
	...

08002b90 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002b90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002b92:	f7fd fe1d 	bl	80007d0 <_stats_increase_irq>
 8002b96:	f7fe f8bb 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002b9e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002ba0:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ba2:	0d89      	lsrs	r1, r1, #22
 8002ba4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002ba8:	058c      	lsls	r4, r1, #22
 8002baa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002bac:	b10a      	cbz	r2, 8002bb2 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002bae:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002bb0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002bb2:	f7fe f895 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002bba:	f7ff bda1 	b.w	8002700 <_port_irq_epilogue>
 8002bbe:	bf00      	nop
 8002bc0:	40026400 	.word	0x40026400
 8002bc4:	2000a890 	.word	0x2000a890
	...

08002bd0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002bd0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002bd2:	f7fd fdfd 	bl	80007d0 <_stats_increase_irq>
 8002bd6:	f7fe f89b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <Vector128+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002bde:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002be0:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002be8:	040c      	lsls	r4, r1, #16
 8002bea:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002bec:	b10a      	cbz	r2, 8002bf2 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002bee:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002bf0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002bf2:	f7fe f875 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002bfa:	f7ff bd81 	b.w	8002700 <_port_irq_epilogue>
 8002bfe:	bf00      	nop
 8002c00:	40026400 	.word	0x40026400
 8002c04:	2000a890 	.word	0x2000a890
	...

08002c10 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002c10:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002c12:	f7fd fddd 	bl	80007d0 <_stats_increase_irq>
 8002c16:	f7fe f87b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002c1c:	4809      	ldr	r0, [pc, #36]	; (8002c44 <Vector124+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c1e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002c20:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002c22:	0989      	lsrs	r1, r1, #6
 8002c24:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8002c28:	018c      	lsls	r4, r1, #6
 8002c2a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002c2c:	b10a      	cbz	r2, 8002c32 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002c2e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002c30:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002c32:	f7fe f855 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002c3a:	f7ff bd61 	b.w	8002700 <_port_irq_epilogue>
 8002c3e:	bf00      	nop
 8002c40:	40026400 	.word	0x40026400
 8002c44:	2000a890 	.word	0x2000a890
	...

08002c50 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002c50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002c52:	f7fd fdbd 	bl	80007d0 <_stats_increase_irq>
 8002c56:	f7fe f85b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002c5c:	4808      	ldr	r0, [pc, #32]	; (8002c80 <Vector120+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c5e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002c60:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002c62:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002c66:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002c68:	b10a      	cbz	r2, 8002c6e <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002c6a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002c6c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002c6e:	f7fe f837 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002c76:	f7ff bd43 	b.w	8002700 <_port_irq_epilogue>
 8002c7a:	bf00      	nop
 8002c7c:	40026400 	.word	0x40026400
 8002c80:	2000a890 	.word	0x2000a890
	...

08002c90 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002c90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002c92:	f7fd fd9d 	bl	80007d0 <_stats_increase_irq>
 8002c96:	f7fe f83b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002c9c:	4809      	ldr	r0, [pc, #36]	; (8002cc4 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c9e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002ca0:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ca2:	0d89      	lsrs	r1, r1, #22
 8002ca4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8002ca8:	058c      	lsls	r4, r1, #22
 8002caa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002cac:	b10a      	cbz	r2, 8002cb2 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002cae:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002cb0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002cb2:	f7fe f815 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002cba:	f7ff bd21 	b.w	8002700 <_port_irq_epilogue>
 8002cbe:	bf00      	nop
 8002cc0:	40026000 	.word	0x40026000
 8002cc4:	2000a890 	.word	0x2000a890
	...

08002cd0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002cd0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002cd2:	f7fd fd7d 	bl	80007d0 <_stats_increase_irq>
 8002cd6:	f7fe f81b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002cdc:	4809      	ldr	r0, [pc, #36]	; (8002d04 <Vector84+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002cde:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002ce0:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ce2:	0c09      	lsrs	r1, r1, #16
 8002ce4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8002ce8:	040c      	lsls	r4, r1, #16
 8002cea:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002cec:	b10a      	cbz	r2, 8002cf2 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002cee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002cf0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002cf2:	f7fd fff5 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002cfa:	f7ff bd01 	b.w	8002700 <_port_irq_epilogue>
 8002cfe:	bf00      	nop
 8002d00:	40026000 	.word	0x40026000
 8002d04:	2000a890 	.word	0x2000a890
	...

08002d10 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002d10:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002d12:	f7fd fd5d 	bl	80007d0 <_stats_increase_irq>
 8002d16:	f7fd fffb 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002d1c:	4809      	ldr	r0, [pc, #36]	; (8002d44 <Vector80+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d1e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002d20:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d22:	0989      	lsrs	r1, r1, #6
 8002d24:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8002d28:	018c      	lsls	r4, r1, #6
 8002d2a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002d2c:	b10a      	cbz	r2, 8002d32 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002d2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002d30:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002d32:	f7fd ffd5 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d3a:	f7ff bce1 	b.w	8002700 <_port_irq_epilogue>
 8002d3e:	bf00      	nop
 8002d40:	40026000 	.word	0x40026000
 8002d44:	2000a890 	.word	0x2000a890
	...

08002d50 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002d50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002d52:	f7fd fd3d 	bl	80007d0 <_stats_increase_irq>
 8002d56:	f7fd ffdb 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002d5c:	4808      	ldr	r0, [pc, #32]	; (8002d80 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d5e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002d60:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d62:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002d66:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002d68:	b10a      	cbz	r2, 8002d6e <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002d6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002d6c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002d6e:	f7fd ffb7 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d76:	f7ff bcc3 	b.w	8002700 <_port_irq_epilogue>
 8002d7a:	bf00      	nop
 8002d7c:	40026000 	.word	0x40026000
 8002d80:	2000a890 	.word	0x2000a890
	...

08002d90 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002d90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002d92:	f7fd fd1d 	bl	80007d0 <_stats_increase_irq>
 8002d96:	f7fd ffbb 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <Vector78+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d9e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002da0:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002da2:	0d89      	lsrs	r1, r1, #22
 8002da4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8002da8:	058c      	lsls	r4, r1, #22
 8002daa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8002dac:	b10a      	cbz	r2, 8002db2 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002dae:	69c0      	ldr	r0, [r0, #28]
 8002db0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002db2:	f7fd ff95 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dba:	f7ff bca1 	b.w	8002700 <_port_irq_epilogue>
 8002dbe:	bf00      	nop
 8002dc0:	40026000 	.word	0x40026000
 8002dc4:	2000a890 	.word	0x2000a890
	...

08002dd0 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002dd0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002dd2:	f7fd fcfd 	bl	80007d0 <_stats_increase_irq>
 8002dd6:	f7fd ff9b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002ddc:	4809      	ldr	r0, [pc, #36]	; (8002e04 <Vector74+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dde:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002de0:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002de2:	0c09      	lsrs	r1, r1, #16
 8002de4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8002de8:	040c      	lsls	r4, r1, #16
 8002dea:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8002dec:	b10a      	cbz	r2, 8002df2 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002dee:	6940      	ldr	r0, [r0, #20]
 8002df0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002df2:	f7fd ff75 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dfa:	f7ff bc81 	b.w	8002700 <_port_irq_epilogue>
 8002dfe:	bf00      	nop
 8002e00:	40026000 	.word	0x40026000
 8002e04:	2000a890 	.word	0x2000a890
	...

08002e10 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002e10:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002e12:	f7fd fcdd 	bl	80007d0 <_stats_increase_irq>
 8002e16:	f7fd ff7b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <Vector70+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e1e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002e20:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e22:	0989      	lsrs	r1, r1, #6
 8002e24:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8002e28:	018c      	lsls	r4, r1, #6
 8002e2a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002e2c:	b10a      	cbz	r2, 8002e32 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002e2e:	68c0      	ldr	r0, [r0, #12]
 8002e30:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002e32:	f7fd ff55 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e3a:	f7ff bc61 	b.w	8002700 <_port_irq_epilogue>
 8002e3e:	bf00      	nop
 8002e40:	40026000 	.word	0x40026000
 8002e44:	2000a890 	.word	0x2000a890
	...

08002e50 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002e50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002e52:	f7fd fcbd 	bl	80007d0 <_stats_increase_irq>
 8002e56:	f7fd ff5b 	bl	8000d10 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 8002e5c:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002e64:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	b10b      	cbz	r3, 8002e6e <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002e6a:	6850      	ldr	r0, [r2, #4]
 8002e6c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002e6e:	f7fd ff37 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8002e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e76:	f7ff bc43 	b.w	8002700 <_port_irq_epilogue>
 8002e7a:	bf00      	nop
 8002e7c:	40026000 	.word	0x40026000
 8002e80:	2000a890 	.word	0x2000a890
	...

08002e90 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((gptp != NULL) && (config != NULL));
 8002e92:	b328      	cbz	r0, 8002ee0 <gptStart+0x50>
 8002e94:	b321      	cbz	r1, 8002ee0 <gptStart+0x50>
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8002ea0:	f7fd fcee 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002ea4:	f7fd ffc4 	bl	8000e30 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8002ea8:	7823      	ldrb	r3, [r4, #0]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	d904      	bls.n	8002eba <gptStart+0x2a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
 8002eb2:	4b55      	ldr	r3, [pc, #340]	; (8003008 <gptStart+0x178>)
 8002eb4:	4a55      	ldr	r2, [pc, #340]	; (800300c <gptStart+0x17c>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb8:	e7fe      	b.n	8002eb8 <gptStart+0x28>
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8002eba:	2b01      	cmp	r3, #1
              "invalid state");
  gptp->config = config;
 8002ebc:	6065      	str	r5, [r4, #4]
 8002ebe:	d032      	beq.n	8002f26 <gptStart+0x96>
 8002ec0:	462b      	mov	r3, r5
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8002ec2:	68a0      	ldr	r0, [r4, #8]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	fbb0 f2f1 	udiv	r2, r0, r1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	b292      	uxth	r2, r2
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
 8002ece:	fb02 1101 	mla	r1, r2, r1, r1
 8002ed2:	4288      	cmp	r0, r1
 8002ed4:	d009      	beq.n	8002eea <gptStart+0x5a>
 8002ed6:	b672      	cpsid	i
 8002ed8:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <gptStart+0x178>)
 8002eda:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <gptStart+0x180>)
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ede:	e7fe      	b.n	8002ede <gptStart+0x4e>
 8002ee0:	b672      	cpsid	i
 8002ee2:	4b49      	ldr	r3, [pc, #292]	; (8003008 <gptStart+0x178>)
 8002ee4:	4a49      	ldr	r2, [pc, #292]	; (800300c <gptStart+0x17c>)
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee8:	e7fe      	b.n	8002ee8 <gptStart+0x58>
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8002eea:	68d8      	ldr	r0, [r3, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8002eec:	68e1      	ldr	r1, [r4, #12]
  gptp->tim->CR2  = gptp->config->cr2;
 8002eee:	689e      	ldr	r6, [r3, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8002ef0:	2500      	movs	r5, #0
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8002ef2:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 8002ef6:	2002      	movs	r0, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8002ef8:	600d      	str	r5, [r1, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8002efa:	604e      	str	r6, [r1, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8002efc:	628a      	str	r2, [r1, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8002efe:	610d      	str	r5, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8002f00:	60cb      	str	r3, [r1, #12]
 8002f02:	7020      	strb	r0, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002f04:	f7fd ff84 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002f08:	f7fd fca2 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002f0c:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <gptStart+0x178>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d004      	beq.n	8002f1e <gptStart+0x8e>
 8002f14:	6999      	ldr	r1, [r3, #24]
 8002f16:	6892      	ldr	r2, [r2, #8]
 8002f18:	6889      	ldr	r1, [r1, #8]
 8002f1a:	4291      	cmp	r1, r2
 8002f1c:	d311      	bcc.n	8002f42 <gptStart+0xb2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <gptStart+0x184>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d056      	beq.n	8002fda <gptStart+0x14a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <gptStart+0x188>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d03b      	beq.n	8002faa <gptStart+0x11a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8002f32:	4b3a      	ldr	r3, [pc, #232]	; (800301c <gptStart+0x18c>)
 8002f34:	429c      	cmp	r4, r3
 8002f36:	d020      	beq.n	8002f7a <gptStart+0xea>
#endif
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <gptStart+0x190>)
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d005      	beq.n	8002f4a <gptStart+0xba>
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	e7bf      	b.n	8002ec2 <gptStart+0x32>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f42:	b672      	cpsid	i
 8002f44:	4a37      	ldr	r2, [pc, #220]	; (8003024 <gptStart+0x194>)
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f48:	e7fe      	b.n	8002f48 <gptStart+0xb8>
      rccEnableTIM4(FALSE);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f4c:	4a37      	ldr	r2, [pc, #220]	; (800302c <gptStart+0x19c>)
 8002f4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002f50:	4837      	ldr	r0, [pc, #220]	; (8003030 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 8002f52:	f041 0104 	orr.w	r1, r1, #4
 8002f56:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM4();
 8002f58:	6a19      	ldr	r1, [r3, #32]
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	f041 0104 	orr.w	r1, r1, #4
 8002f60:	2570      	movs	r5, #112	; 0x70
 8002f62:	6219      	str	r1, [r3, #32]
 8002f64:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f6a:	f882 531e 	strb.w	r5, [r2, #798]	; 0x31e
 8002f6e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f70:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f74:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002f76:	60a0      	str	r0, [r4, #8]
 8002f78:	e7a3      	b.n	8002ec2 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f7c:	4a2b      	ldr	r2, [pc, #172]	; (800302c <gptStart+0x19c>)
 8002f7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002f80:	482b      	ldr	r0, [pc, #172]	; (8003030 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8002f82:	f041 0102 	orr.w	r1, r1, #2
 8002f86:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8002f88:	6a19      	ldr	r1, [r3, #32]
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	f041 0102 	orr.w	r1, r1, #2
 8002f90:	2570      	movs	r5, #112	; 0x70
 8002f92:	6219      	str	r1, [r3, #32]
 8002f94:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f96:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f9a:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 8002f9e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fa0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fa4:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002fa6:	60a0      	str	r0, [r4, #8]
 8002fa8:	e78b      	b.n	8002ec2 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <gptStart+0x19c>)
 8002fae:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002fb0:	481f      	ldr	r0, [pc, #124]	; (8003030 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 8002fb2:	f041 0101 	orr.w	r1, r1, #1
 8002fb6:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 8002fb8:	6a19      	ldr	r1, [r3, #32]
 8002fba:	2600      	movs	r6, #0
 8002fbc:	f041 0101 	orr.w	r1, r1, #1
 8002fc0:	2570      	movs	r5, #112	; 0x70
 8002fc2:	6219      	str	r1, [r3, #32]
 8002fc4:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fc6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fca:	f882 531c 	strb.w	r5, [r2, #796]	; 0x31c
 8002fce:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fd0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fd4:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002fd6:	60a0      	str	r0, [r4, #8]
 8002fd8:	e773      	b.n	8002ec2 <gptStart+0x32>

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <gptStart+0x19c>)
 8002fde:	6c59      	ldr	r1, [r3, #68]	; 0x44
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8002fe0:	4d14      	ldr	r5, [pc, #80]	; (8003034 <gptStart+0x1a4>)

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 8002fe2:	f041 0101 	orr.w	r1, r1, #1
 8002fe6:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM1();
 8002fe8:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002fee:	2700      	movs	r7, #0
 8002ff0:	f041 0101 	orr.w	r1, r1, #1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002ff4:	2670      	movs	r6, #112	; 0x70
 8002ff6:	6259      	str	r1, [r3, #36]	; 0x24
 8002ff8:	625f      	str	r7, [r3, #36]	; 0x24
 8002ffa:	f882 6319 	strb.w	r6, [r2, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ffe:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003002:	6010      	str	r0, [r2, #0]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8003004:	60a5      	str	r5, [r4, #8]
 8003006:	e79a      	b.n	8002f3e <gptStart+0xae>
 8003008:	2000bfd8 	.word	0x2000bfd8
 800300c:	080067b0 	.word	0x080067b0
 8003010:	08006710 	.word	0x08006710
 8003014:	2000a910 	.word	0x2000a910
 8003018:	2000c7e8 	.word	0x2000c7e8
 800301c:	2000bef8 	.word	0x2000bef8
 8003020:	2000c988 	.word	0x2000c988
 8003024:	080067a0 	.word	0x080067a0
 8003028:	40023800 	.word	0x40023800
 800302c:	e000e100 	.word	0xe000e100
 8003030:	0501bd00 	.word	0x0501bd00
 8003034:	0a037a00 	.word	0x0a037a00
	...

08003040 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8003040:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003042:	2320      	movs	r3, #32
 8003044:	4604      	mov	r4, r0
 8003046:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800304a:	f7fd fc19 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800304e:	f7fd feef 	bl	8000e30 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8003052:	f7fd fcad 	bl	80009b0 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003056:	4812      	ldr	r0, [pc, #72]	; (80030a0 <chCoreAlloc+0x60>)
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <chCoreAlloc+0x64>)
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800305e:	1de3      	adds	r3, r4, #7
 8003060:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003064:	1a89      	subs	r1, r1, r2
 8003066:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8003068:	bf9d      	ittte	ls
 800306a:	189b      	addls	r3, r3, r2
 800306c:	6003      	strls	r3, [r0, #0]

  return p;
 800306e:	4614      	movls	r4, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8003070:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003072:	f7fd fecd 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003076:	f7fd fbeb 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <chCoreAlloc+0x68>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d004      	beq.n	800308c <chCoreAlloc+0x4c>
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	6889      	ldr	r1, [r1, #8]
 8003088:	4291      	cmp	r1, r2
 800308a:	d304      	bcc.n	8003096 <chCoreAlloc+0x56>
 800308c:	2300      	movs	r3, #0
 800308e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8003092:	4620      	mov	r0, r4
 8003094:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003096:	b672      	cpsid	i
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <chCoreAlloc+0x6c>)
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
 800309c:	e7fe      	b.n	800309c <chCoreAlloc+0x5c>
 800309e:	bf00      	nop
 80030a0:	20001bb4 	.word	0x20001bb4
 80030a4:	20001bb8 	.word	0x20001bb8
 80030a8:	2000bfd8 	.word	0x2000bfd8
 80030ac:	08006790 	.word	0x08006790

080030b0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	b083      	sub	sp, #12
 80030b6:	4683      	mov	fp, r0
 80030b8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80030ba:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t w = 0;

  chDbgCheck(n > 0U);
 80030be:	4617      	mov	r7, r2
 80030c0:	2a00      	cmp	r2, #0
 80030c2:	d06e      	beq.n	80031a2 <chOQWriteTimeout+0xf2>
 80030c4:	4688      	mov	r8, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80030c6:	2620      	movs	r6, #32
 80030c8:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80030cc:	f7fd fbd8 	bl	8000880 <_stats_start_measure_crit_thd>
 80030d0:	4c38      	ldr	r4, [pc, #224]	; (80031b4 <chOQWriteTimeout+0x104>)
  _dbg_check_lock();
 80030d2:	f7fd fead 	bl	8000e30 <_dbg_check_lock>
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 80030d6:	2500      	movs	r5, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80030d8:	46a2      	mov	sl, r4
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80030da:	f7fd fc69 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 80030de:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80030e2:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03e      	beq.n	8003166 <chOQWriteTimeout+0xb6>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80030e8:	f8db 2014 	ldr.w	r2, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80030ec:	f8db 3008 	ldr.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 80030f0:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80030f2:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80030f4:	f8cb 1014 	str.w	r1, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80030f8:	f8cb 3008 	str.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 80030fc:	f898 3000 	ldrb.w	r3, [r8]
 8003100:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003102:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003106:	f8db 2014 	ldr.w	r2, [fp, #20]
 800310a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800310c:	bf24      	itt	cs
 800310e:	f8db 300c 	ldrcs.w	r3, [fp, #12]
 8003112:	f8cb 3014 	strcs.w	r3, [fp, #20]
    }

    if (nfy != NULL) {
 8003116:	f1b9 0f00 	cmp.w	r9, #0
 800311a:	d000      	beq.n	800311e <chOQWriteTimeout+0x6e>
      nfy(oqp);
 800311c:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800311e:	f7fd fe77 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003122:	f7fd fb95 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <chOQWriteTimeout+0x104>)
 800312a:	42a3      	cmp	r3, r4
 800312c:	d005      	beq.n	800313a <chOQWriteTimeout+0x8a>
 800312e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	6889      	ldr	r1, [r1, #8]
 8003136:	4299      	cmp	r1, r3
 8003138:	d32f      	bcc.n	800319a <chOQWriteTimeout+0xea>
 800313a:	2300      	movs	r3, #0
 800313c:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8003140:	3f01      	subs	r7, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8003142:	f105 0501 	add.w	r5, r5, #1
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003146:	f108 0801 	add.w	r8, r8, #1
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800314a:	d022      	beq.n	8003192 <chOQWriteTimeout+0xe2>
 800314c:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003150:	f7fd fb96 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003154:	f7fd fe6c 	bl	8000e30 <_dbg_check_lock>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8003158:	f7fd fc2a 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 800315c:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8003160:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1c0      	bne.n	80030e8 <chOQWriteTimeout+0x38>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8003166:	4658      	mov	r0, fp
 8003168:	9901      	ldr	r1, [sp, #4]
 800316a:	f7fd fce9 	bl	8000b40 <chThdEnqueueTimeoutS>
 800316e:	2800      	cmp	r0, #0
 8003170:	d0b3      	beq.n	80030da <chOQWriteTimeout+0x2a>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003172:	f7fd fe4d 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003176:	f7fd fb6b 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <chOQWriteTimeout+0x104>)
 800317e:	42a2      	cmp	r2, r4
 8003180:	d004      	beq.n	800318c <chOQWriteTimeout+0xdc>
 8003182:	6999      	ldr	r1, [r3, #24]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	6889      	ldr	r1, [r1, #8]
 8003188:	4291      	cmp	r1, r2
 800318a:	d30f      	bcc.n	80031ac <chOQWriteTimeout+0xfc>
 800318c:	2300      	movs	r3, #0
 800318e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8003192:	4628      	mov	r0, r5
 8003194:	b003      	add	sp, #12
 8003196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800319a:	b672      	cpsid	i
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <chOQWriteTimeout+0x108>)
 800319e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031a0:	e7fe      	b.n	80031a0 <chOQWriteTimeout+0xf0>
 80031a2:	b672      	cpsid	i
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <chOQWriteTimeout+0x104>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <chOQWriteTimeout+0x10c>)
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031aa:	e7fe      	b.n	80031aa <chOQWriteTimeout+0xfa>
 80031ac:	b672      	cpsid	i
 80031ae:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <chOQWriteTimeout+0x108>)
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031b2:	e7fe      	b.n	80031b2 <chOQWriteTimeout+0x102>
 80031b4:	2000bfd8 	.word	0x2000bfd8
 80031b8:	08006780 	.word	0x08006780
 80031bc:	08006730 	.word	0x08006730

080031c0 <writet.lto_priv.88>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80031c0:	3030      	adds	r0, #48	; 0x30
 80031c2:	f7ff bf75 	b.w	80030b0 <chOQWriteTimeout>
 80031c6:	bf00      	nop
	...

080031d0 <write.lto_priv.82>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80031d0:	3030      	adds	r0, #48	; 0x30
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	f7ff bf6b 	b.w	80030b0 <chOQWriteTimeout>
 80031da:	bf00      	nop
 80031dc:	0000      	movs	r0, r0
	...

080031e0 <get.lto_priv.67>:

static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 80031e0:	6903      	ldr	r3, [r0, #16]
 80031e2:	68c1      	ldr	r1, [r0, #12]
 80031e4:	4299      	cmp	r1, r3
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}

static msg_t get(void *ip) {
 80031e6:	4602      	mov	r2, r0
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 80031e8:	d004      	beq.n	80031f4 <get.lto_priv.67+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 80031ea:	6841      	ldr	r1, [r0, #4]
 80031ec:	5cc8      	ldrb	r0, [r1, r3]
  msp->offset += 1;
 80031ee:	3301      	adds	r3, #1
 80031f0:	6113      	str	r3, [r2, #16]
 80031f2:	4770      	bx	lr
static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
    return MSG_RESET;
 80031f4:	f06f 0001 	mvn.w	r0, #1
  b = *(msp->buffer + msp->offset);
  msp->offset += 1;
  return b;
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	0000      	movs	r0, r0
	...

08003200 <put.lto_priv.66>:
}

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 8003200:	68c3      	ldr	r3, [r0, #12]
 8003202:	6882      	ldr	r2, [r0, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d006      	beq.n	8003216 <put.lto_priv.66+0x16>
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 8003208:	6842      	ldr	r2, [r0, #4]
 800320a:	54d1      	strb	r1, [r2, r3]
  msp->eos += 1;
 800320c:	68c3      	ldr	r3, [r0, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60c3      	str	r3, [r0, #12]
  return MSG_OK;
 8003212:	2000      	movs	r0, #0
 8003214:	4770      	bx	lr

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
    return MSG_RESET;
 8003216:	f06f 0001 	mvn.w	r0, #1
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}
 800321a:	4770      	bx	lr
 800321c:	0000      	movs	r0, r0
	...

08003220 <notify4.lto_priv.80>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE;
 8003220:	4a02      	ldr	r2, [pc, #8]	; (800322c <notify4.lto_priv.80+0xc>)
 8003222:	68d3      	ldr	r3, [r2, #12]
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	60d3      	str	r3, [r2, #12]
 800322a:	4770      	bx	lr
 800322c:	40004c00 	.word	0x40004c00

08003230 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8003230:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8003232:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8003234:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8003236:	68dc      	ldr	r4, [r3, #12]
 8003238:	4014      	ands	r4, r2
 800323a:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800323c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800323e:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8003240:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 8003242:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8003244:	d503      	bpl.n	800324e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8003246:	6843      	ldr	r3, [r0, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800324a:	b103      	cbz	r3, 800324e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 800324c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800324e:	0760      	lsls	r0, r4, #29
 8003250:	d504      	bpl.n	800325c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8003252:	686b      	ldr	r3, [r5, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8003256:	b10b      	cbz	r3, 800325c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8003258:	4628      	mov	r0, r5
 800325a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800325c:	0721      	lsls	r1, r4, #28
 800325e:	d504      	bpl.n	800326a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8003260:	686b      	ldr	r3, [r5, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8003264:	b10b      	cbz	r3, 800326a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8003266:	4628      	mov	r0, r5
 8003268:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800326a:	06e2      	lsls	r2, r4, #27
 800326c:	d504      	bpl.n	8003278 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800326e:	686b      	ldr	r3, [r5, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8003272:	b10b      	cbz	r3, 8003278 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8003274:	4628      	mov	r0, r5
 8003276:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8003278:	07e3      	lsls	r3, r4, #31
 800327a:	d506      	bpl.n	800328a <pwm_lld_serve_interrupt+0x5a>
 800327c:	686b      	ldr	r3, [r5, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	b11b      	cbz	r3, 800328a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8003282:	4628      	mov	r0, r5
}
 8003284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8003288:	4718      	bx	r3
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	0000      	movs	r0, r0
	...

08003290 <gpt_lld_serve_interrupt>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8003290:	7801      	ldrb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8003292:	68c3      	ldr	r3, [r0, #12]
 8003294:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8003296:	2904      	cmp	r1, #4
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8003298:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 800329a:	d107      	bne.n	80032ac <gpt_lld_serve_interrupt+0x1c>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800329c:	2102      	movs	r1, #2
 800329e:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 80032a0:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 80032a2:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032aa:	60da      	str	r2, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 80032ac:	6843      	ldr	r3, [r0, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4718      	bx	r3
 80032b2:	bf00      	nop
	...

080032c0 <spi_lld_serve_tx_interrupt.lto_priv.93>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80032c0:	f011 0f0c 	tst.w	r1, #12
 80032c4:	d100      	bne.n	80032c8 <spi_lld_serve_tx_interrupt.lto_priv.93+0x8>
 80032c6:	4770      	bx	lr
 80032c8:	b672      	cpsid	i
 80032ca:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <spi_lld_serve_tx_interrupt.lto_priv.93+0x14>)
 80032cc:	4a02      	ldr	r2, [pc, #8]	; (80032d8 <spi_lld_serve_tx_interrupt.lto_priv.93+0x18>)
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d0:	e7fe      	b.n	80032d0 <spi_lld_serve_tx_interrupt.lto_priv.93+0x10>
 80032d2:	bf00      	nop
 80032d4:	2000bfd8 	.word	0x2000bfd8
 80032d8:	08006770 	.word	0x08006770
 80032dc:	00000000 	.word	0x00000000

080032e0 <reads.lto_priv.65>:
  memcpy(msp->buffer + msp->eos, bp, n);
  msp->eos += n;
  return n;
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4605      	mov	r5, r0
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 80032e4:	4608      	mov	r0, r1
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 80032e6:	692b      	ldr	r3, [r5, #16]
 80032e8:	68ec      	ldr	r4, [r5, #12]
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 80032ea:	6869      	ldr	r1, [r5, #4]
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 80032ec:	1ae4      	subs	r4, r4, r3
 80032ee:	4294      	cmp	r4, r2
 80032f0:	bf28      	it	cs
 80032f2:	4614      	movcs	r4, r2
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 80032f4:	4419      	add	r1, r3
 80032f6:	4622      	mov	r2, r4
 80032f8:	f7fd f812 	bl	8000320 <memcpy>
  msp->offset += n;
 80032fc:	692b      	ldr	r3, [r5, #16]
 80032fe:	4423      	add	r3, r4
 8003300:	612b      	str	r3, [r5, #16]
  return n;
}
 8003302:	4620      	mov	r0, r4
 8003304:	bd38      	pop	{r3, r4, r5, pc}
 8003306:	bf00      	nop
	...

08003310 <writes.lto_priv.64>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 8003310:	b538      	push	{r3, r4, r5, lr}
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
 8003312:	68c3      	ldr	r3, [r0, #12]
 8003314:	6884      	ldr	r4, [r0, #8]
 8003316:	1ae4      	subs	r4, r4, r3

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 8003318:	4605      	mov	r5, r0
 800331a:	4294      	cmp	r4, r2
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
    n = msp->size - msp->eos;
  memcpy(msp->buffer + msp->eos, bp, n);
 800331c:	6840      	ldr	r0, [r0, #4]
 800331e:	bf28      	it	cs
 8003320:	4614      	movcs	r4, r2
 8003322:	4418      	add	r0, r3
 8003324:	4622      	mov	r2, r4
 8003326:	f7fc fffb 	bl	8000320 <memcpy>
  msp->eos += n;
 800332a:	68eb      	ldr	r3, [r5, #12]
 800332c:	4423      	add	r3, r4
 800332e:	60eb      	str	r3, [r5, #12]
  return n;
}
 8003330:	4620      	mov	r0, r4
 8003332:	bd38      	pop	{r3, r4, r5, pc}
	...

08003340 <VectorA0>:
/**
 * @brief   TIM9 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
 8003340:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8003342:	f7fd fa45 	bl	80007d0 <_stats_increase_irq>
 8003346:	f7fd fce3 	bl	8000d10 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD9);
 800334a:	4804      	ldr	r0, [pc, #16]	; (800335c <VectorA0+0x1c>)
 800334c:	f7ff ff70 	bl	8003230 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8003350:	f7fd fcc6 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD9);

  OSAL_IRQ_EPILOGUE();
 8003358:	f7ff b9d2 	b.w	8002700 <_port_irq_epilogue>
 800335c:	20001b98 	.word	0x20001b98

08003360 <VectorF8>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_CC_HANDLER) {
 8003360:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8003362:	f7fd fa35 	bl	80007d0 <_stats_increase_irq>
 8003366:	f7fd fcd3 	bl	8000d10 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 800336a:	4804      	ldr	r0, [pc, #16]	; (800337c <VectorF8+0x1c>)
 800336c:	f7ff ff60 	bl	8003230 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8003370:	f7fd fcb6 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 8003378:	f7ff b9c2 	b.w	8002700 <_port_irq_epilogue>
 800337c:	2000c7cc 	.word	0x2000c7cc

08003380 <VectorF0>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
 8003380:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8003382:	f7fd fa25 	bl	80007d0 <_stats_increase_irq>
 8003386:	f7fd fcc3 	bl	8000d10 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 800338a:	4804      	ldr	r0, [pc, #16]	; (800339c <VectorF0+0x1c>)
 800338c:	f7ff ff50 	bl	8003230 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8003390:	f7fd fca6 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 8003398:	f7ff b9b2 	b.w	8002700 <_port_irq_epilogue>
 800339c:	2000c7cc 	.word	0x2000c7cc

080033a0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80033a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80033a2:	f7fd fa15 	bl	80007d0 <_stats_increase_irq>
 80033a6:	f7fd fcb3 	bl	8000d10 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD4);
 80033aa:	4804      	ldr	r0, [pc, #16]	; (80033bc <VectorB8+0x1c>)
 80033ac:	f7ff ff70 	bl	8003290 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80033b0:	f7fd fc96 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80033b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 80033b8:	f7ff b9a2 	b.w	8002700 <_port_irq_epilogue>
 80033bc:	2000c988 	.word	0x2000c988

080033c0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80033c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80033c2:	f7fd fa05 	bl	80007d0 <_stats_increase_irq>
 80033c6:	f7fd fca3 	bl	8000d10 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD3);
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <VectorB4+0x1c>)
 80033cc:	f7ff ff60 	bl	8003290 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80033d0:	f7fd fc86 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80033d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 80033d8:	f7ff b992 	b.w	8002700 <_port_irq_epilogue>
 80033dc:	2000bef8 	.word	0x2000bef8

080033e0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80033e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80033e2:	f7fd f9f5 	bl	80007d0 <_stats_increase_irq>
 80033e6:	f7fd fc93 	bl	8000d10 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD2);
 80033ea:	4804      	ldr	r0, [pc, #16]	; (80033fc <VectorB0+0x1c>)
 80033ec:	f7ff ff50 	bl	8003290 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80033f0:	f7fd fc76 	bl	8000ce0 <_dbg_check_leave_isr>
}
 80033f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD2);

  OSAL_IRQ_EPILOGUE();
 80033f8:	f7ff b982 	b.w	8002700 <_port_irq_epilogue>
 80033fc:	2000c7e8 	.word	0x2000c7e8

08003400 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8003400:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8003402:	f7fd f9e5 	bl	80007d0 <_stats_increase_irq>
 8003406:	f7fd fc83 	bl	8000d10 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD1);
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <VectorA4+0x1c>)
 800340c:	f7ff ff40 	bl	8003290 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8003410:	f7fd fc66 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD1);

  OSAL_IRQ_EPILOGUE();
 8003418:	f7ff b972 	b.w	8002700 <_port_irq_epilogue>
 800341c:	2000a910 	.word	0x2000a910

08003420 <Vector110>:
/**
 * @brief   UART4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003424:	4d7c      	ldr	r5, [pc, #496]	; (8003618 <Vector110+0x1f8>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8003426:	f7fd f9d3 	bl	80007d0 <_stats_increase_irq>
 800342a:	f7fd fc71 	bl	8000d10 <_dbg_check_enter_isr>
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800342e:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8003430:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8003434:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003436:	05df      	lsls	r7, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8003438:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800343a:	f100 8097 	bmi.w	800356c <Vector110+0x14c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800343e:	2320      	movs	r3, #32
 8003440:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8003444:	f7fd fa14 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8003448:	f7fd fc92 	bl	8000d70 <_dbg_check_lock_from_isr>
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800344c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003450:	d047      	beq.n	80034e2 <Vector110+0xc2>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8003452:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8003618 <Vector110+0x1f8>
 8003456:	e007      	b.n	8003468 <Vector110+0x48>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003458:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800345a:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 800345c:	d41d      	bmi.n	800349a <Vector110+0x7a>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800345e:	6834      	ldr	r4, [r6, #0]
 8003460:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003462:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003466:	d03c      	beq.n	80034e2 <Vector110+0xc2>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8003468:	0720      	lsls	r0, r4, #28
 800346a:	d0f5      	beq.n	8003458 <Vector110+0x38>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800346c:	f014 0f08 	tst.w	r4, #8
 8003470:	bf0c      	ite	eq
 8003472:	2100      	moveq	r1, #0
 8003474:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8003476:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8003478:	bf48      	it	mi
 800347a:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800347e:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8003480:	bf48      	it	mi
 8003482:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8003486:	0767      	lsls	r7, r4, #29
    sts |= SD_NOISE_ERROR;
 8003488:	bf48      	it	mi
 800348a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800348e:	4863      	ldr	r0, [pc, #396]	; (800361c <Vector110+0x1fc>)
 8003490:	f7fd fb96 	bl	8000bc0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003494:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8003496:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 8003498:	d5e1      	bpl.n	800345e <Vector110+0x3e>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 800349a:	f7fd fa89 	bl	80009b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 800349e:	f7fd fa87 	bl	80009b0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 80034a2:	696b      	ldr	r3, [r5, #20]
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80034a4:	b38b      	cbz	r3, 800350a <Vector110+0xea>
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();
 80034a6:	f7fd fa83 	bl	80009b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();
 80034aa:	f7fd fa81 	bl	80009b0 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80034ae:	6a2b      	ldr	r3, [r5, #32]
 80034b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02e      	beq.n	8003514 <Vector110+0xf4>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80034b6:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80034b8:	1c59      	adds	r1, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80034ba:	3201      	adds	r2, #1
 80034bc:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80034be:	6229      	str	r1, [r5, #32]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80034c0:	701f      	strb	r7, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 80034c2:	6a2a      	ldr	r2, [r5, #32]
 80034c4:	69eb      	ldr	r3, [r5, #28]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d303      	bcc.n	80034d2 <Vector110+0xb2>
    iqp->q_wrptr = iqp->q_buffer;
 80034ca:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80034ce:	f8c8 3020 	str.w	r3, [r8, #32]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 80034d2:	4853      	ldr	r0, [pc, #332]	; (8003620 <Vector110+0x200>)
 80034d4:	f001 faec 	bl	8004ab0 <chThdDequeueNextI.constprop.49>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80034d8:	6834      	ldr	r4, [r6, #0]
 80034da:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80034dc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80034e0:	d1c2      	bne.n	8003468 <Vector110+0x48>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80034e2:	f7fd fc2d 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80034e6:	f7fd f9ab 	bl	8000840 <_stats_stop_measure_crit_isr>
 80034ea:	2300      	movs	r3, #0
 80034ec:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80034f0:	f019 0f80 	tst.w	r9, #128	; 0x80
 80034f4:	d001      	beq.n	80034fa <Vector110+0xda>
 80034f6:	0622      	lsls	r2, r4, #24
 80034f8:	d44f      	bmi.n	800359a <Vector110+0x17a>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80034fa:	0663      	lsls	r3, r4, #25
 80034fc:	d413      	bmi.n	8003526 <Vector110+0x106>

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 80034fe:	f7fd fbef 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003502:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8003506:	f7ff b8fb 	b.w	8002700 <_port_irq_epilogue>
 800350a:	4844      	ldr	r0, [pc, #272]	; (800361c <Vector110+0x1fc>)
 800350c:	2104      	movs	r1, #4
 800350e:	f7fd fb57 	bl	8000bc0 <chEvtBroadcastFlagsI>
 8003512:	e7c8      	b.n	80034a6 <Vector110+0x86>
 8003514:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8003518:	2a00      	cmp	r2, #0
 800351a:	d0cc      	beq.n	80034b6 <Vector110+0x96>
 800351c:	483f      	ldr	r0, [pc, #252]	; (800361c <Vector110+0x1fc>)
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	f7fd fb4e 	bl	8000bc0 <chEvtBroadcastFlagsI>
 8003524:	e79b      	b.n	800345e <Vector110+0x3e>
 8003526:	2320      	movs	r3, #32
 8003528:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800352c:	f7fd f9a0 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8003530:	f7fd fc1e 	bl	8000d70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8003534:	f7fd fa3c 	bl	80009b0 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003538:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800353a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800353c:	4836      	ldr	r0, [pc, #216]	; (8003618 <Vector110+0x1f8>)
 800353e:	429a      	cmp	r2, r3
 8003540:	d053      	beq.n	80035ea <Vector110+0x1ca>
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003542:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003546:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 800354a:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800354e:	60f3      	str	r3, [r6, #12]
    u->SR = ~USART_SR_TC;
 8003550:	6032      	str	r2, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8003552:	f7fd fbf5 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8003556:	f7fd f973 	bl	8000840 <_stats_stop_measure_crit_isr>
 800355a:	2300      	movs	r3, #0
 800355c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8003560:	f7fd fbbe 	bl	8000ce0 <_dbg_check_leave_isr>
}
 8003564:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8003568:	f7ff b8ca 	b.w	8002700 <_port_irq_epilogue>
 800356c:	2320      	movs	r3, #32
 800356e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8003572:	f7fd f97d 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8003576:	f7fd fbfb 	bl	8000d70 <_dbg_check_lock_from_isr>
 800357a:	1d28      	adds	r0, r5, #4
 800357c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003580:	f7fd fb1e 	bl	8000bc0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8003584:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8003588:	6033      	str	r3, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800358a:	f7fd fbd9 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800358e:	f7fd f957 	bl	8000840 <_stats_stop_measure_crit_isr>
 8003592:	2300      	movs	r3, #0
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	e751      	b.n	800343e <Vector110+0x1e>
 800359a:	2320      	movs	r3, #32
 800359c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80035a0:	f7fd f966 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80035a4:	f7fd fbe4 	bl	8000d70 <_dbg_check_lock_from_isr>
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
  uint8_t b;

  chDbgCheckClassI();
 80035a8:	f7fd fa02 	bl	80009b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80035ac:	f7fd fa00 	bl	80009b0 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80035b0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80035b2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80035b4:	4818      	ldr	r0, [pc, #96]	; (8003618 <Vector110+0x1f8>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d01f      	beq.n	80035fa <Vector110+0x1da>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80035ba:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <Vector110+0x1f8>)
  b = *oqp->q_rdptr++;
 80035be:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80035c0:	3201      	adds	r2, #1
 80035c2:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80035c4:	64a8      	str	r0, [r5, #72]	; 0x48
 80035c6:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80035c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80035ca:	4298      	cmp	r0, r3
 80035cc:	d301      	bcc.n	80035d2 <Vector110+0x1b2>
    oqp->q_rdptr = oqp->q_buffer;
 80035ce:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80035d0:	648b      	str	r3, [r1, #72]	; 0x48
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 80035d2:	4814      	ldr	r0, [pc, #80]	; (8003624 <Vector110+0x204>)
 80035d4:	f001 fa6c 	bl	8004ab0 <chThdDequeueNextI.constprop.49>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80035d8:	6077      	str	r7, [r6, #4]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80035da:	f7fd fbb1 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80035de:	f7fd f92f 	bl	8000840 <_stats_stop_measure_crit_isr>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	e787      	b.n	80034fa <Vector110+0xda>
 80035ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0a8      	beq.n	8003542 <Vector110+0x122>
 80035f0:	3004      	adds	r0, #4
 80035f2:	2110      	movs	r1, #16
 80035f4:	f7fd fae4 	bl	8000bc0 <chEvtBroadcastFlagsI>
 80035f8:	e7a3      	b.n	8003542 <Vector110+0x122>
 80035fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d0dc      	beq.n	80035ba <Vector110+0x19a>
 8003600:	3004      	adds	r0, #4
 8003602:	2108      	movs	r1, #8
 8003604:	f7fd fadc 	bl	8000bc0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8003608:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800360c:	ea09 0303 	and.w	r3, r9, r3
 8003610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003614:	60f3      	str	r3, [r6, #12]
 8003616:	e7e0      	b.n	80035da <Vector110+0x1ba>
 8003618:	20001bbc 	.word	0x20001bbc
 800361c:	20001bc0 	.word	0x20001bc0
 8003620:	20001bc8 	.word	0x20001bc8
 8003624:	20001bec 	.word	0x20001bec
	...

08003630 <spi_lld_serve_rx_interrupt.lto_priv.92>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003630:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003634:	b538      	push	{r3, r4, r5, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003636:	d13a      	bne.n	80036ae <spi_lld_serve_rx_interrupt.lto_priv.92+0x7e>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8003638:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800363a:	680b      	ldr	r3, [r1, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f022 021f 	bic.w	r2, r2, #31
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	07d4      	lsls	r4, r2, #31
 8003648:	d4fc      	bmi.n	8003644 <spi_lld_serve_rx_interrupt.lto_priv.92+0x14>
 800364a:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800364c:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800364e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8003650:	6813      	ldr	r3, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8003652:	213d      	movs	r1, #61	; 0x3d
 8003654:	40a9      	lsls	r1, r5
 8003656:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	f021 011f 	bic.w	r1, r1, #31
 800365e:	6019      	str	r1, [r3, #0]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	07c9      	lsls	r1, r1, #31
 8003664:	d4fc      	bmi.n	8003660 <spi_lld_serve_rx_interrupt.lto_priv.92+0x30>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8003666:	6843      	ldr	r3, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8003668:	6851      	ldr	r1, [r2, #4]
 800366a:	4604      	mov	r4, r0
 800366c:	7a10      	ldrb	r0, [r2, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800366e:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8003670:	233d      	movs	r3, #61	; 0x3d
 8003672:	4083      	lsls	r3, r0
 8003674:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8003676:	b1fa      	cbz	r2, 80036b8 <spi_lld_serve_rx_interrupt.lto_priv.92+0x88>
 8003678:	2304      	movs	r3, #4
 800367a:	7023      	strb	r3, [r4, #0]
 800367c:	4620      	mov	r0, r4
 800367e:	4790      	blx	r2
 8003680:	7823      	ldrb	r3, [r4, #0]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d018      	beq.n	80036b8 <spi_lld_serve_rx_interrupt.lto_priv.92+0x88>
 8003686:	2320      	movs	r3, #32
 8003688:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800368c:	f7fd f8f0 	bl	8000870 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8003690:	f7fd fb6e 	bl	8000d70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003694:	f104 0008 	add.w	r0, r4, #8
 8003698:	2100      	movs	r1, #0
 800369a:	f7fd fae1 	bl	8000c60 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800369e:	f7fd fb4f 	bl	8000d40 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80036a2:	f7fd f8cd 	bl	8000840 <_stats_stop_measure_crit_isr>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ae:	b672      	cpsid	i
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <spi_lld_serve_rx_interrupt.lto_priv.92+0x90>)
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <spi_lld_serve_rx_interrupt.lto_priv.92+0x94>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036b6:	e7fe      	b.n	80036b6 <spi_lld_serve_rx_interrupt.lto_priv.92+0x86>
 80036b8:	2302      	movs	r3, #2
 80036ba:	7023      	strb	r3, [r4, #0]
 80036bc:	e7e3      	b.n	8003686 <spi_lld_serve_rx_interrupt.lto_priv.92+0x56>
 80036be:	bf00      	nop
 80036c0:	2000bfd8 	.word	0x2000bfd8
 80036c4:	08006770 	.word	0x08006770
	...

080036d0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80036d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	b087      	sub	sp, #28
 80036d6:	4615      	mov	r5, r2
 80036d8:	f10d 030d 	add.w	r3, sp, #13
 80036dc:	aa03      	add	r2, sp, #12
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	4681      	mov	r9, r0
 80036e2:	468a      	mov	sl, r1
 80036e4:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80036e6:	f04f 0800 	mov.w	r8, #0
 80036ea:	468b      	mov	fp, r1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80036ec:	f89b 1000 	ldrb.w	r1, [fp]
 80036f0:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80036f4:	b179      	cbz	r1, 8003716 <chvprintf+0x46>
      return n;
    if (c != '%') {
 80036f6:	2925      	cmp	r1, #37	; 0x25
 80036f8:	d011      	beq.n	800371e <chvprintf+0x4e>
      streamPut(chp, (uint8_t)c);
 80036fa:	f8d9 2000 	ldr.w	r2, [r9]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80036fe:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	4648      	mov	r0, r9
 8003704:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8003706:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 800370a:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800370e:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8003712:	2900      	cmp	r1, #0
 8003714:	d1ef      	bne.n	80036f6 <chvprintf+0x26>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8003716:	4640      	mov	r0, r8
 8003718:	b007      	add	sp, #28
 800371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800371e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8003722:	2a2d      	cmp	r2, #45	; 0x2d
 8003724:	bf03      	ittte	eq
 8003726:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800372a:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800372e:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8003732:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8003736:	2a30      	cmp	r2, #48	; 0x30
 8003738:	bf03      	ittte	eq
 800373a:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800373c:	3301      	addeq	r3, #1
      filler = '0';
 800373e:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8003740:	2720      	movne	r7, #32
 8003742:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8003744:	2600      	movs	r6, #0
 8003746:	e006      	b.n	8003756 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8003748:	782b      	ldrb	r3, [r5, #0]
 800374a:	3504      	adds	r5, #4
 800374c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8003750:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8003754:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003756:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800375e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8003760:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003764:	d9f2      	bls.n	800374c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8003766:	2a2a      	cmp	r2, #42	; 0x2a
 8003768:	d0ee      	beq.n	8003748 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800376a:	2a2e      	cmp	r2, #46	; 0x2e
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	d043      	beq.n	80037fa <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003772:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003776:	2b4c      	cmp	r3, #76	; 0x4c
 8003778:	d04e      	beq.n	8003818 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800377a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800377e:	2834      	cmp	r0, #52	; 0x34
 8003780:	f200 80f7 	bhi.w	8003972 <chvprintf+0x2a2>
 8003784:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003788:	00f500ea 	.word	0x00f500ea
 800378c:	00f500f5 	.word	0x00f500f5
 8003790:	00ea00f5 	.word	0x00ea00f5
 8003794:	00f500f5 	.word	0x00f500f5
 8003798:	00f500f5 	.word	0x00f500f5
 800379c:	00e800f5 	.word	0x00e800f5
 80037a0:	00f500f5 	.word	0x00f500f5
 80037a4:	00f500f5 	.word	0x00f500f5
 80037a8:	00dd00f5 	.word	0x00dd00f5
 80037ac:	00f500f5 	.word	0x00f500f5
 80037b0:	00f500f2 	.word	0x00f500f2
 80037b4:	00f500f5 	.word	0x00f500f5
 80037b8:	00f500f5 	.word	0x00f500f5
 80037bc:	00f500f5 	.word	0x00f500f5
 80037c0:	00f500f5 	.word	0x00f500f5
 80037c4:	00a100f5 	.word	0x00a100f5
 80037c8:	00f500ea 	.word	0x00f500ea
 80037cc:	00f500f5 	.word	0x00f500f5
 80037d0:	00ea00f5 	.word	0x00ea00f5
 80037d4:	00f500f5 	.word	0x00f500f5
 80037d8:	00f500f5 	.word	0x00f500f5
 80037dc:	00e800f5 	.word	0x00e800f5
 80037e0:	00f500f5 	.word	0x00f500f5
 80037e4:	007100f5 	.word	0x007100f5
 80037e8:	00dd00f5 	.word	0x00dd00f5
 80037ec:	00f500f5 	.word	0x00f500f5
 80037f0:	00f2      	.short	0x00f2
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80037f2:	782b      	ldrb	r3, [r5, #0]
 80037f4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80037f6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80037fa:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 80037fe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8003806:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800380a:	d9f4      	bls.n	80037f6 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 800380c:	2a2a      	cmp	r2, #42	; 0x2a
 800380e:	d0f0      	beq.n	80037f2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003810:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003814:	2b4c      	cmp	r3, #76	; 0x4c
 8003816:	d1b0      	bne.n	800377a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8003818:	f89b 3000 	ldrb.w	r3, [fp]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a8 	beq.w	8003972 <chvprintf+0x2a2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003822:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8003826:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800382a:	2a34      	cmp	r2, #52	; 0x34
 800382c:	f200 80a0 	bhi.w	8003970 <chvprintf+0x2a0>
 8003830:	e8df f002 	tbb	[pc, r2]
 8003834:	9e9e9e94 	.word	0x9e9e9e94
 8003838:	9e9e949e 	.word	0x9e9e949e
 800383c:	929e9e9e 	.word	0x929e9e9e
 8003840:	9e9e9e9e 	.word	0x9e9e9e9e
 8003844:	9e9e879e 	.word	0x9e9e879e
 8003848:	9e9e9e9c 	.word	0x9e9e9e9c
 800384c:	9e9e9e9e 	.word	0x9e9e9e9e
 8003850:	4b9e9e9e 	.word	0x4b9e9e9e
 8003854:	9e9e9e94 	.word	0x9e9e9e94
 8003858:	9e9e949e 	.word	0x9e9e949e
 800385c:	929e9e9e 	.word	0x929e9e9e
 8003860:	1b9e9e9e 	.word	0x1b9e9e9e
 8003864:	9e9e879e 	.word	0x9e9e879e
 8003868:	9c          	.byte	0x9c
 8003869:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800386a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 800386c:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <chvprintf+0x308>)
 800386e:	2c00      	cmp	r4, #0
 8003870:	bf08      	it	eq
 8003872:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003874:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003876:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8003878:	2900      	cmp	r1, #0
 800387a:	f000 8094 	beq.w	80039a6 <chvprintf+0x2d6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8096 	beq.w	80039b0 <chvprintf+0x2e0>
 8003884:	3901      	subs	r1, #1
 8003886:	4620      	mov	r0, r4
 8003888:	e001      	b.n	800388e <chvprintf+0x1be>
 800388a:	3901      	subs	r1, #1
 800388c:	d403      	bmi.n	8003896 <chvprintf+0x1c6>
 800388e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <chvprintf+0x1ba>
 8003896:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003898:	1a36      	subs	r6, r6, r0
 800389a:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800389c:	2720      	movs	r7, #32
 800389e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80038a2:	f1ba 0f00 	cmp.w	sl, #0
 80038a6:	d01f      	beq.n	80038e8 <chvprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	da34      	bge.n	8003918 <chvprintf+0x248>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80038ae:	2e00      	cmp	r6, #0
 80038b0:	f43f af1c 	beq.w	80036ec <chvprintf+0x1c>
 80038b4:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 80038b6:	f8d9 3000 	ldr.w	r3, [r9]
 80038ba:	4648      	mov	r0, r9
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4639      	mov	r1, r7
 80038c0:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80038c2:	3c01      	subs	r4, #1
 80038c4:	d1f7      	bne.n	80038b6 <chvprintf+0x1e6>
 80038c6:	44b0      	add	r8, r6
 80038c8:	e710      	b.n	80036ec <chvprintf+0x1c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	f88d 300c 	strb.w	r3, [sp, #12]
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	3504      	adds	r5, #4
 80038d4:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80038d6:	2720      	movs	r7, #32
 80038d8:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80038da:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80038dc:	1a36      	subs	r6, r6, r0
 80038de:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80038e2:	f1ba 0f00 	cmp.w	sl, #0
 80038e6:	d1df      	bne.n	80038a8 <chvprintf+0x1d8>
 80038e8:	9300      	str	r3, [sp, #0]
      width = -width;
 80038ea:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 80038ee:	f1ba 0f00 	cmp.w	sl, #0
 80038f2:	d045      	beq.n	8003980 <chvprintf+0x2b0>
      if (*s == '-' && filler == '0') {
 80038f4:	7821      	ldrb	r1, [r4, #0]
 80038f6:	292d      	cmp	r1, #45	; 0x2d
 80038f8:	d047      	beq.n	800398a <chvprintf+0x2ba>
        streamPut(chp, (uint8_t)*s++);
        n++;
 80038fa:	4656      	mov	r6, sl
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80038fc:	f8d9 3000 	ldr.w	r3, [r9]
 8003900:	4648      	mov	r0, r9
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4639      	mov	r1, r7
 8003906:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8003908:	3601      	adds	r6, #1
 800390a:	d1f7      	bne.n	80038fc <chvprintf+0x22c>
    }
    while (--i >= 0) {
 800390c:	9b00      	ldr	r3, [sp, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	ebca 0808 	rsb	r8, sl, r8
 8003914:	f6ff aeea 	blt.w	80036ec <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003918:	f8dd a000 	ldr.w	sl, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 800391c:	f8d9 3000 	ldr.w	r3, [r9]
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003926:	f10a 3aff 	add.w	sl, sl, #4294967295
      streamPut(chp, (uint8_t)*s++);
 800392a:	4648      	mov	r0, r9
 800392c:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800392e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003932:	d1f3      	bne.n	800391c <chvprintf+0x24c>
 8003934:	9b00      	ldr	r3, [sp, #0]
 8003936:	f108 0801 	add.w	r8, r8, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfa8      	it	ge
 800393e:	4498      	addge	r8, r3
 8003940:	e7b5      	b.n	80038ae <chvprintf+0x1de>
 8003942:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003944:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003946:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003948:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800394a:	f001 f8f1 	bl	8004b30 <long_to_string_with_divisor.constprop.12>
 800394e:	ab03      	add	r3, sp, #12
 8003950:	1ac0      	subs	r0, r0, r3
 8003952:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003954:	ac03      	add	r4, sp, #12
 8003956:	e7c1      	b.n	80038dc <chvprintf+0x20c>
 8003958:	2208      	movs	r2, #8
 800395a:	e7f3      	b.n	8003944 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800395c:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 800395e:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8003960:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8003964:	db2e      	blt.n	80039c4 <chvprintf+0x2f4>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003966:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003968:	220a      	movs	r2, #10
 800396a:	e7ee      	b.n	800394a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800396c:	2210      	movs	r2, #16
 800396e:	e7e9      	b.n	8003944 <chvprintf+0x274>
 8003970:	461a      	mov	r2, r3
 8003972:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8003974:	f88d 200c 	strb.w	r2, [sp, #12]
 8003978:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800397a:	ac03      	add	r4, sp, #12
 800397c:	3b01      	subs	r3, #1
 800397e:	e7ad      	b.n	80038dc <chvprintf+0x20c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003980:	9b00      	ldr	r3, [sp, #0]
 8003982:	2b00      	cmp	r3, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8003984:	4656      	mov	r6, sl
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003986:	dac7      	bge.n	8003918 <chvprintf+0x248>
 8003988:	e6b0      	b.n	80036ec <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800398a:	2f30      	cmp	r7, #48	; 0x30
 800398c:	d1b5      	bne.n	80038fa <chvprintf+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800398e:	f8d9 3000 	ldr.w	r3, [r9]
 8003992:	4648      	mov	r0, r9
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4798      	blx	r3
 8003998:	9b00      	ldr	r3, [sp, #0]
 800399a:	3b01      	subs	r3, #1
 800399c:	3401      	adds	r4, #1
        n++;
 800399e:	f108 0801 	add.w	r8, r8, #1
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	e7a9      	b.n	80038fa <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80039a6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f af6b 	bne.w	8003886 <chvprintf+0x1b6>
 80039b0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80039b4:	f1ba 0f00 	cmp.w	sl, #0
 80039b8:	d10b      	bne.n	80039d2 <chvprintf+0x302>
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2720      	movs	r7, #32
 80039c2:	e792      	b.n	80038ea <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80039c4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80039c6:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80039c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80039cc:	f10d 000d 	add.w	r0, sp, #13
 80039d0:	e7ca      	b.n	8003968 <chvprintf+0x298>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80039d2:	2720      	movs	r7, #32
 80039d4:	e76b      	b.n	80038ae <chvprintf+0x1de>
 80039d6:	bf00      	nop
 80039d8:	080067d0 	.word	0x080067d0
 80039dc:	00000000 	.word	0x00000000

080039e0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80039e0:	b40e      	push	{r1, r2, r3}
 80039e2:	b500      	push	{lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	aa03      	add	r2, sp, #12
 80039e8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80039ec:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80039ee:	f7ff fe6f 	bl	80036d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80039f2:	b002      	add	sp, #8
 80039f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f8:	b003      	add	sp, #12
 80039fa:	4770      	bx	lr
 80039fc:	0000      	movs	r0, r0
	...

08003a00 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8003a00:	2900      	cmp	r1, #0
 8003a02:	dd03      	ble.n	8003a0c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003a04:	4919      	ldr	r1, [pc, #100]	; (8003a6c <cmd_info+0x6c>)
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <cmd_info+0x70>)
 8003a08:	f7ff bfea 	b.w	80039e0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a0c:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8003a0e:	4919      	ldr	r1, [pc, #100]	; (8003a74 <cmd_info+0x74>)
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003a12:	b082      	sub	sp, #8
 8003a14:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8003a16:	f7ff ffe3 	bl	80039e0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4917      	ldr	r1, [pc, #92]	; (8003a7c <cmd_info+0x7c>)
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <cmd_info+0x80>)
 8003a20:	f7ff ffde 	bl	80039e0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8003a24:	4620      	mov	r0, r4
 8003a26:	4917      	ldr	r1, [pc, #92]	; (8003a84 <cmd_info+0x84>)
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <cmd_info+0x88>)
 8003a2a:	f7ff ffd9 	bl	80039e0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4916      	ldr	r1, [pc, #88]	; (8003a8c <cmd_info+0x8c>)
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <cmd_info+0x90>)
 8003a34:	f7ff ffd4 	bl	80039e0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4916      	ldr	r1, [pc, #88]	; (8003a94 <cmd_info+0x94>)
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <cmd_info+0x98>)
 8003a3e:	f7ff ffcf 	bl	80039e0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8003a42:	4620      	mov	r0, r4
 8003a44:	4915      	ldr	r1, [pc, #84]	; (8003a9c <cmd_info+0x9c>)
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <cmd_info+0xa0>)
 8003a48:	f7ff ffca 	bl	80039e0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <cmd_info+0xa4>)
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <cmd_info+0xa8>)
 8003a52:	f7ff ffc5 	bl	80039e0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <cmd_info+0xac>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <cmd_info+0xb0>)
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <cmd_info+0xb4>)
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <cmd_info+0xb8>)
 8003a62:	f7ff ffbd 	bl	80039e0 <chprintf>
#endif
#endif
}
 8003a66:	b002      	add	sp, #8
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080067d8 	.word	0x080067d8
 8003a70:	080067e4 	.word	0x080067e4
 8003a74:	080067ec 	.word	0x080067ec
 8003a78:	08006800 	.word	0x08006800
 8003a7c:	08006808 	.word	0x08006808
 8003a80:	0800681c 	.word	0x0800681c
 8003a84:	08006864 	.word	0x08006864
 8003a88:	08006878 	.word	0x08006878
 8003a8c:	08006884 	.word	0x08006884
 8003a90:	08006898 	.word	0x08006898
 8003a94:	080068a4 	.word	0x080068a4
 8003a98:	080068b8 	.word	0x080068b8
 8003a9c:	080068d0 	.word	0x080068d0
 8003aa0:	080068e4 	.word	0x080068e4
 8003aa4:	08006910 	.word	0x08006910
 8003aa8:	08006924 	.word	0x08006924
 8003aac:	08006974 	.word	0x08006974
 8003ab0:	0800694c 	.word	0x0800694c
 8003ab4:	08006964 	.word	0x08006964
 8003ab8:	08006970 	.word	0x08006970
 8003abc:	00000000 	.word	0x00000000

08003ac0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003ac0:	492c      	ldr	r1, [pc, #176]	; (8003b74 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003ac8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003acc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003ace:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003ad8:	680a      	ldr	r2, [r1, #0]
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <__early_init+0xb4>)
 8003adc:	0790      	lsls	r0, r2, #30
 8003ade:	d5fb      	bpl.n	8003ad8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	f022 0203 	bic.w	r2, r2, #3
 8003ae6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003aec:	4619      	mov	r1, r3
 8003aee:	688b      	ldr	r3, [r1, #8]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <__early_init+0xb4>)
 8003af2:	f013 030c 	ands.w	r3, r3, #12
 8003af6:	d1fa      	bne.n	8003aee <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003afe:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003b00:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <__early_init+0xb4>)
 8003b0e:	0389      	lsls	r1, r1, #14
 8003b10:	d5fb      	bpl.n	8003b0a <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003b12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003b1a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003b1c:	4915      	ldr	r1, [pc, #84]	; (8003b74 <__early_init+0xb4>)
 8003b1e:	0790      	lsls	r0, r2, #30
 8003b20:	d5fb      	bpl.n	8003b1a <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <__early_init+0xbc>)
 8003b24:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003b26:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003b30:	6853      	ldr	r3, [r2, #4]
 8003b32:	0459      	lsls	r1, r3, #17
 8003b34:	d5fc      	bpl.n	8003b30 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003b36:	490f      	ldr	r1, [pc, #60]	; (8003b74 <__early_init+0xb4>)
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <__early_init+0xb4>)
 8003b3c:	0192      	lsls	r2, r2, #6
 8003b3e:	d5fb      	bpl.n	8003b38 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003b42:	4910      	ldr	r1, [pc, #64]	; (8003b84 <__early_init+0xc4>)
 8003b44:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003b46:	f240 7105 	movw	r1, #1797	; 0x705
 8003b4a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	f042 0202 	orr.w	r2, r2, #2
 8003b52:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003b54:	461a      	mov	r2, r3
 8003b56:	6893      	ldr	r3, [r2, #8]
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <__early_init+0xb4>)
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d1f9      	bne.n	8003b56 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8003b62:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b68:	644b      	str	r3, [r1, #68]	; 0x44
 8003b6a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b70:	664b      	str	r3, [r1, #100]	; 0x64
 8003b72:	4770      	bx	lr
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	07405408 	.word	0x07405408
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	38889400 	.word	0x38889400
	...

08003b90 <shell_thread.lto_priv.74>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8003b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b94:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <shell_thread.lto_priv.74+0x1e0>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8003b96:	6804      	ldr	r4, [r0, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	4a76      	ldr	r2, [pc, #472]	; (8003d74 <shell_thread.lto_priv.74+0x1e4>)
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8003b9c:	6847      	ldr	r7, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8003b9e:	4976      	ldr	r1, [pc, #472]	; (8003d78 <shell_thread.lto_priv.74+0x1e8>)
 8003ba0:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8003ba2:	b099      	sub	sp, #100	; 0x64
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff ff1b 	bl	80039e0 <chprintf>
 8003baa:	ae08      	add	r6, sp, #32
  while (true) {
    chprintf(chp, "ch> ");
 8003bac:	4620      	mov	r0, r4
 8003bae:	4973      	ldr	r1, [pc, #460]	; (8003d7c <shell_thread.lto_priv.74+0x1ec>)
 8003bb0:	f7ff ff16 	bl	80039e0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8003bb4:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	4620      	mov	r0, r4
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f10d 0107 	add.w	r1, sp, #7
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4798      	blx	r3
 8003bc4:	b380      	cbz	r0, 8003c28 <shell_thread.lto_priv.74+0x98>
      return true;
    if (c == 4) {
 8003bc6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003bca:	2904      	cmp	r1, #4
 8003bcc:	d028      	beq.n	8003c20 <shell_thread.lto_priv.74+0x90>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8003bce:	2908      	cmp	r1, #8
 8003bd0:	d012      	beq.n	8003bf8 <shell_thread.lto_priv.74+0x68>
 8003bd2:	297f      	cmp	r1, #127	; 0x7f
 8003bd4:	d010      	beq.n	8003bf8 <shell_thread.lto_priv.74+0x68>
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8003bd6:	290d      	cmp	r1, #13
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8003bd8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8003bdc:	d039      	beq.n	8003c52 <shell_thread.lto_priv.74+0xc2>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8003bde:	291f      	cmp	r1, #31
 8003be0:	d9e9      	bls.n	8003bb6 <shell_thread.lto_priv.74+0x26>
      continue;
    if (p < line + size - 1) {
 8003be2:	429d      	cmp	r5, r3
 8003be4:	d2e7      	bcs.n	8003bb6 <shell_thread.lto_priv.74+0x26>
      chSequentialStreamPut(chp, c);
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	4620      	mov	r0, r4
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4798      	blx	r3
      *p++ = (char)c;
 8003bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bf2:	702b      	strb	r3, [r5, #0]
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7de      	b.n	8003bb6 <shell_thread.lto_priv.74+0x26>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8003bf8:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, 0x08);
 8003bfa:	f04f 0108 	mov.w	r1, #8
 8003bfe:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8003c00:	d0d9      	beq.n	8003bb6 <shell_thread.lto_priv.74+0x26>
        chSequentialStreamPut(chp, 0x08);
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2120      	movs	r1, #32
 8003c10:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x08);
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	4620      	mov	r0, r4
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2108      	movs	r1, #8
        p--;
 8003c1a:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, 0x08);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, 0x08);
 8003c1c:	4798      	blx	r3
 8003c1e:	e7ca      	b.n	8003bb6 <shell_thread.lto_priv.74+0x26>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8003c20:	4620      	mov	r0, r4
 8003c22:	4957      	ldr	r1, [pc, #348]	; (8003d80 <shell_thread.lto_priv.74+0x1f0>)
 8003c24:	f7ff fedc 	bl	80039e0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4956      	ldr	r1, [pc, #344]	; (8003d84 <shell_thread.lto_priv.74+0x1f4>)
 8003c2c:	f7ff fed8 	bl	80039e0 <chprintf>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c30:	2320      	movs	r3, #32
 8003c32:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003c36:	f7fc fe23 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003c3a:	f7fd f8f9 	bl	8000e30 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4851      	ldr	r0, [pc, #324]	; (8003d88 <shell_thread.lto_priv.74+0x1f8>)
 8003c42:	f7fc ffbd 	bl	8000bc0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7fd f822 	bl	8000c90 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8003c4c:	b019      	add	sp, #100	; 0x64
 8003c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8003c52:	494e      	ldr	r1, [pc, #312]	; (8003d8c <shell_thread.lto_priv.74+0x1fc>)
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7ff fec3 	bl	80039e0 <chprintf>
      *p = 0;
 8003c5a:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8003c5c:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8003c5e:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8003c60:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8003c62:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8003c64:	f000 ff44 	bl	8004af0 <_strtok.constprop.13>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8003c68:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8003c6a:	4681      	mov	r9, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f10d 080c 	add.w	r8, sp, #12
 8003c72:	f000 ff3d 	bl	8004af0 <_strtok.constprop.13>
 8003c76:	b150      	cbz	r0, 8003c8e <shell_thread.lto_priv.74+0xfe>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8003c78:	2d04      	cmp	r5, #4
 8003c7a:	d01d      	beq.n	8003cb8 <shell_thread.lto_priv.74+0x128>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8003c7c:	f848 0b04 	str.w	r0, [r8], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8003c80:	a902      	add	r1, sp, #8
 8003c82:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8003c84:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8003c86:	f000 ff33 	bl	8004af0 <_strtok.constprop.13>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d1f4      	bne.n	8003c78 <shell_thread.lto_priv.74+0xe8>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8003c8e:	ab18      	add	r3, sp, #96	; 0x60
 8003c90:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003c94:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8003c98:	f1b9 0f00 	cmp.w	r9, #0
 8003c9c:	d086      	beq.n	8003bac <shell_thread.lto_priv.74+0x1c>
      if (strcmp(cmd, "exit") == 0) {
 8003c9e:	4648      	mov	r0, r9
 8003ca0:	493b      	ldr	r1, [pc, #236]	; (8003d90 <shell_thread.lto_priv.74+0x200>)
 8003ca2:	f7fc fbe1 	bl	8000468 <strcmp>
 8003ca6:	b970      	cbnz	r0, 8003cc6 <shell_thread.lto_priv.74+0x136>
        if (n > 0) {
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d0c1      	beq.n	8003c30 <shell_thread.lto_priv.74+0xa0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003cac:	4620      	mov	r0, r4
 8003cae:	4939      	ldr	r1, [pc, #228]	; (8003d94 <shell_thread.lto_priv.74+0x204>)
 8003cb0:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <shell_thread.lto_priv.74+0x200>)
 8003cb2:	f7ff fe95 	bl	80039e0 <chprintf>
 8003cb6:	e779      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4937      	ldr	r1, [pc, #220]	; (8003d98 <shell_thread.lto_priv.74+0x208>)
 8003cbc:	f7ff fe90 	bl	80039e0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9307      	str	r3, [sp, #28]
 8003cc4:	e772      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8003cc6:	4648      	mov	r0, r9
 8003cc8:	4934      	ldr	r1, [pc, #208]	; (8003d9c <shell_thread.lto_priv.74+0x20c>)
 8003cca:	f7fc fbcd 	bl	8000468 <strcmp>
 8003cce:	b930      	cbnz	r0, 8003cde <shell_thread.lto_priv.74+0x14e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003cd0:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 8003cd2:	b1bd      	cbz	r5, 8003d04 <shell_thread.lto_priv.74+0x174>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003cd4:	492f      	ldr	r1, [pc, #188]	; (8003d94 <shell_thread.lto_priv.74+0x204>)
 8003cd6:	4a31      	ldr	r2, [pc, #196]	; (8003d9c <shell_thread.lto_priv.74+0x20c>)
 8003cd8:	f7ff fe82 	bl	80039e0 <chprintf>
 8003cdc:	e766      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
 8003cde:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003da8 <shell_thread.lto_priv.74+0x218>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8003ce2:	482f      	ldr	r0, [pc, #188]	; (8003da0 <shell_thread.lto_priv.74+0x210>)
 8003ce4:	e002      	b.n	8003cec <shell_thread.lto_priv.74+0x15c>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8003ce6:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8003cea:	b348      	cbz	r0, 8003d40 <shell_thread.lto_priv.74+0x1b0>
    if (strcmp(scp->sc_name, name) == 0) {
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fbbb 	bl	8000468 <strcmp>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d1f7      	bne.n	8003ce6 <shell_thread.lto_priv.74+0x156>
      scp->sc_function(chp, argc, argv);
 8003cf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	aa03      	add	r2, sp, #12
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4798      	blx	r3
 8003d02:	e753      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8003d04:	4927      	ldr	r1, [pc, #156]	; (8003da4 <shell_thread.lto_priv.74+0x214>)
 8003d06:	4d28      	ldr	r5, [pc, #160]	; (8003da8 <shell_thread.lto_priv.74+0x218>)
 8003d08:	f7ff fe6a 	bl	80039e0 <chprintf>
 8003d0c:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <shell_thread.lto_priv.74+0x210>)
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
    chprintf(chp, "%s ", scp->sc_name);
 8003d0e:	4927      	ldr	r1, [pc, #156]	; (8003dac <shell_thread.lto_priv.74+0x21c>)
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7ff fe65 	bl	80039e0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003d16:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	d1f7      	bne.n	8003d0e <shell_thread.lto_priv.74+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8003d1e:	b157      	cbz	r7, 8003d36 <shell_thread.lto_priv.74+0x1a6>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b142      	cbz	r2, 8003d36 <shell_thread.lto_priv.74+0x1a6>
 8003d24:	463d      	mov	r5, r7
    chprintf(chp, "%s ", scp->sc_name);
 8003d26:	4620      	mov	r0, r4
 8003d28:	4920      	ldr	r1, [pc, #128]	; (8003dac <shell_thread.lto_priv.74+0x21c>)
 8003d2a:	f7ff fe59 	bl	80039e0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003d2e:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d1f7      	bne.n	8003d26 <shell_thread.lto_priv.74+0x196>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8003d36:	4620      	mov	r0, r4
 8003d38:	4914      	ldr	r1, [pc, #80]	; (8003d8c <shell_thread.lto_priv.74+0x1fc>)
 8003d3a:	f7ff fe51 	bl	80039e0 <chprintf>
 8003d3e:	e735      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8003d40:	b167      	cbz	r7, 8003d5c <shell_thread.lto_priv.74+0x1cc>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	b150      	cbz	r0, 8003d5c <shell_thread.lto_priv.74+0x1cc>
 8003d46:	46b8      	mov	r8, r7
 8003d48:	e002      	b.n	8003d50 <shell_thread.lto_priv.74+0x1c0>
 8003d4a:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8003d4e:	b128      	cbz	r0, 8003d5c <shell_thread.lto_priv.74+0x1cc>
    if (strcmp(scp->sc_name, name) == 0) {
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fb89 	bl	8000468 <strcmp>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1f7      	bne.n	8003d4a <shell_thread.lto_priv.74+0x1ba>
 8003d5a:	e7cc      	b.n	8003cf6 <shell_thread.lto_priv.74+0x166>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8003d5c:	464a      	mov	r2, r9
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4913      	ldr	r1, [pc, #76]	; (8003db0 <shell_thread.lto_priv.74+0x220>)
 8003d62:	f7ff fe3d 	bl	80039e0 <chprintf>
        chprintf(chp, " ?\r\n");
 8003d66:	4620      	mov	r0, r4
 8003d68:	4912      	ldr	r1, [pc, #72]	; (8003db4 <shell_thread.lto_priv.74+0x224>)
 8003d6a:	f7ff fe39 	bl	80039e0 <chprintf>
 8003d6e:	e71d      	b.n	8003bac <shell_thread.lto_priv.74+0x1c>
 8003d70:	2000bfd8 	.word	0x2000bfd8
 8003d74:	08006980 	.word	0x08006980
 8003d78:	08006988 	.word	0x08006988
 8003d7c:	080069a0 	.word	0x080069a0
 8003d80:	080069a8 	.word	0x080069a8
 8003d84:	080069fc 	.word	0x080069fc
 8003d88:	20000a24 	.word	0x20000a24
 8003d8c:	08006bec 	.word	0x08006bec
 8003d90:	080069c4 	.word	0x080069c4
 8003d94:	080067d8 	.word	0x080067d8
 8003d98:	080069ac 	.word	0x080069ac
 8003d9c:	080069cc 	.word	0x080069cc
 8003da0:	080067e4 	.word	0x080067e4
 8003da4:	080069d4 	.word	0x080069d4
 8003da8:	08006a20 	.word	0x08006a20
 8003dac:	080069ec 	.word	0x080069ec
 8003db0:	080069f0 	.word	0x080069f0
 8003db4:	080069f4 	.word	0x080069f4
	...

08003dc0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	dd03      	ble.n	8003dcc <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003dc4:	4914      	ldr	r1, [pc, #80]	; (8003e18 <cmd_systime+0x58>)
 8003dc6:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <cmd_systime+0x5c>)
 8003dc8:	f7ff be0a 	b.w	80039e0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4604      	mov	r4, r0
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003dd6:	f7fc fd53 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003dda:	f7fd f829 	bl	8000e30 <_dbg_check_lock>
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <cmd_systime+0x60>)
 8003de0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003de2:	f7fd f815 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003de6:	f7fc fd33 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <cmd_systime+0x64>)
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d004      	beq.n	8003dfc <cmd_systime+0x3c>
 8003df2:	6998      	ldr	r0, [r3, #24]
 8003df4:	688a      	ldr	r2, [r1, #8]
 8003df6:	6881      	ldr	r1, [r0, #8]
 8003df8:	4291      	cmp	r1, r2
 8003dfa:	d309      	bcc.n	8003e10 <cmd_systime+0x50>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8003e02:	4909      	ldr	r1, [pc, #36]	; (8003e28 <cmd_systime+0x68>)
 8003e04:	4620      	mov	r0, r4
 8003e06:	462a      	mov	r2, r5
}
 8003e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8003e0c:	f7ff bde8 	b.w	80039e0 <chprintf>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e10:	b672      	cpsid	i
 8003e12:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <cmd_systime+0x6c>)
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e16:	e7fe      	b.n	8003e16 <cmd_systime+0x56>
 8003e18:	080067d8 	.word	0x080067d8
 8003e1c:	08006a08 	.word	0x08006a08
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	2000bfd8 	.word	0x2000bfd8
 8003e28:	08006a10 	.word	0x08006a10
 8003e2c:	080067c0 	.word	0x080067c0

08003e30 <cmd_deccelerate>:
}

static void cmd_deccelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8003e30:	6811      	ldr	r1, [r2, #0]
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003e32:	780a      	ldrb	r2, [r1, #0]
 8003e34:	b39a      	cbz	r2, 8003e9e <cmd_deccelerate+0x6e>
 8003e36:	2300      	movs	r3, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8003e38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
static void cmd_deccelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003e40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8003e44:	3b30      	subs	r3, #48	; 0x30
 8003e46:	b29b      	uxth	r3, r3
static void cmd_deccelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d1f5      	bne.n	8003e38 <cmd_deccelerate+0x8>
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ea4 <cmd_deccelerate+0x74>
 8003e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e58:	ee67 7a87 	vmul.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input - (float)finalNum * 0.01f;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <cmd_deccelerate+0x78>)
  if(cmd >= -0.9f)
 8003e5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003eac <cmd_deccelerate+0x7c>
  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input - (float)finalNum * 0.01f;
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e68:	ee77 7a67 	vsub.f32	s15, s14, s15
  if(cmd >= -0.9f)
 8003e6c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	da00      	bge.n	8003e78 <cmd_deccelerate+0x48>
 8003e76:	4770      	bx	lr
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003e78:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003eb0 <cmd_deccelerate+0x80>
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input - (float)finalNum * 0.01f;
  if(cmd >= -0.9f)
  {
    motors[0].input = cmd;
 8003e7c:	edc3 7a02 	vstr	s15, [r3, #8]
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003e80:	ee27 7a87 	vmul.f32	s14, s15, s14

  float cmd = motors[0].input - (float)finalNum * 0.01f;
  if(cmd >= -0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
 8003e84:	edc3 7a07 	vstr	s15, [r3, #28]
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003e88:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
  }
}

static void cmd_deccelerate(BaseSequentialStream * chp, int argc, char *argv[]){
 8003e8c:	b082      	sub	sp, #8
  float cmd = motors[0].input - (float)finalNum * 0.01f;
  if(cmd >= -0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003e8e:	edcd 7a01 	vstr	s15, [sp, #4]
 8003e92:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8003e96:	4907      	ldr	r1, [pc, #28]	; (8003eb4 <cmd_deccelerate+0x84>)
  }
}
 8003e98:	b002      	add	sp, #8
  float cmd = motors[0].input - (float)finalNum * 0.01f;
  if(cmd >= -0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003e9a:	f7ff bda1 	b.w	80039e0 <chprintf>
static void cmd_deccelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003e9e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003eb8 <cmd_deccelerate+0x88>
 8003ea2:	e7db      	b.n	8003e5c <cmd_deccelerate+0x2c>
 8003ea4:	3c23d70a 	.word	0x3c23d70a
 8003ea8:	20009dac 	.word	0x20009dac
 8003eac:	bf666666 	.word	0xbf666666
 8003eb0:	42c80000 	.word	0x42c80000
 8003eb4:	08006bd0 	.word	0x08006bd0
	...

08003ec0 <cmd_accelerate>:
}

static void cmd_accelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8003ec0:	6811      	ldr	r1, [r2, #0]
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003ec2:	780a      	ldrb	r2, [r1, #0]
 8003ec4:	b39a      	cbz	r2, 8003f2e <cmd_accelerate+0x6e>
 8003ec6:	2300      	movs	r3, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8003ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ecc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
static void cmd_accelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003ed0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8003ed4:	3b30      	subs	r3, #48	; 0x30
 8003ed6:	b29b      	uxth	r3, r3
static void cmd_accelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d1f5      	bne.n	8003ec8 <cmd_accelerate+0x8>
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003f34 <cmd_accelerate+0x74>
 8003ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input + (float)finalNum * 0.01f;
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <cmd_accelerate+0x78>)
  if(cmd <= 0.9f)
 8003eee:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003f3c <cmd_accelerate+0x7c>
  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input + (float)finalNum * 0.01f;
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
  if(cmd <= 0.9f)
 8003efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	d900      	bls.n	8003f08 <cmd_accelerate+0x48>
 8003f06:	4770      	bx	lr
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003f08:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f40 <cmd_accelerate+0x80>
    finalNum=finalNum*10+*(toNumber++)-'0';

  float cmd = motors[0].input + (float)finalNum * 0.01f;
  if(cmd <= 0.9f)
  {
    motors[0].input = cmd;
 8003f0c:	edc3 7a02 	vstr	s15, [r3, #8]
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003f10:	ee27 7a87 	vmul.f32	s14, s15, s14

  float cmd = motors[0].input + (float)finalNum * 0.01f;
  if(cmd <= 0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
 8003f14:	edc3 7a07 	vstr	s15, [r3, #28]
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003f18:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  (void) argc,argv;

  chprintf(chp,"Shell OK\r\n");
}

static void cmd_accelerate(BaseSequentialStream * chp, int argc, char *argv[]){
 8003f1c:	b082      	sub	sp, #8
  float cmd = motors[0].input + (float)finalNum * 0.01f;
  if(cmd <= 0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003f1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8003f22:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8003f26:	4907      	ldr	r1, [pc, #28]	; (8003f44 <cmd_accelerate+0x84>)
  }
}
 8003f28:	b002      	add	sp, #8
  float cmd = motors[0].input + (float)finalNum * 0.01f;
  if(cmd <= 0.9f)
  {
    motors[0].input = cmd;
    motors[1].input = cmd;
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
 8003f2a:	f7ff bd59 	b.w	80039e0 <chprintf>
static void cmd_accelerate(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint16_t finalNum=0;
  while(*toNumber!='\0')
 8003f2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003f48 <cmd_accelerate+0x88>
 8003f32:	e7db      	b.n	8003eec <cmd_accelerate+0x2c>
 8003f34:	3c23d70a 	.word	0x3c23d70a
 8003f38:	20009dac 	.word	0x20009dac
 8003f3c:	3f666666 	.word	0x3f666666
 8003f40:	42c80000 	.word	0x42c80000
 8003f44:	08006bd0 	.word	0x08006bd0
	...

08003f50 <cmd_print>:


static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  chprintf(chp,"Shell OK\r\n");
 8003f50:	4901      	ldr	r1, [pc, #4]	; (8003f58 <cmd_print+0x8>)
 8003f52:	f7ff bd45 	b.w	80039e0 <chprintf>
 8003f56:	bf00      	nop
 8003f58:	08006be4 	.word	0x08006be4
 8003f5c:	00000000 	.word	0x00000000

08003f60 <cmd_flash>:
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
  }
}

static void cmd_flash(BaseSequentialStream * chp, int argc, char *argv[])
{
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <cmd_flash+0xa4>)
 8003f64:	4d28      	ldr	r5, [pc, #160]	; (8004008 <cmd_flash+0xa8>)
 8003f66:	4929      	ldr	r1, [pc, #164]	; (800400c <cmd_flash+0xac>)
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 8003f68:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8004028 <cmd_flash+0xc8>
    FLASH->KEYR = 0xCDEF89AB;
 8003f6c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800402c <cmd_flash+0xcc>
  (void) argc,argv;

  size_t i;
  for (i = 0; i < FLASH_TEST_COUNT; i++)
 8003f70:	4e27      	ldr	r6, [pc, #156]	; (8004010 <cmd_flash+0xb0>)
    chprintf(chp,"Motor Speed: %d\n", (int8_t)(cmd*100));
  }
}

static void cmd_flash(BaseSequentialStream * chp, int argc, char *argv[])
{
 8003f72:	4604      	mov	r4, r0
    return;

  FLASH_DataCacheCmd(ENABLE);
  FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
  FLASH->CR |= FLASH_CR_PSIZE_VALUE;
  flashWaitWhileBusy();
 8003f74:	4618      	mov	r0, r3
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8003f76:	691a      	ldr	r2, [r3, #16]
  (void) argc,argv;

  size_t i;
  for (i = 0; i < FLASH_TEST_COUNT; i++)
    flashWriteData(FLASH_TEST_ADDR + 4*i , flashTestData[i]);
 8003f78:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	db38      	blt.n	8003ff2 <cmd_flash+0x92>
  */
static void FLASH_DataCacheCmd(FunctionalState NewState)
{
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]
  //Red LED on indicates flash error
  if(flashUnlock()==CH_FAILED)
    return;

  FLASH_DataCacheCmd(ENABLE);
  FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f8e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PSIZE_VALUE;
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	611a      	str	r2, [r3, #16]
  flashWaitWhileBusy();
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	03d2      	lsls	r2, r2, #15
 8003f9c:	d4fc      	bmi.n	8003f98 <cmd_flash+0x38>

  /* Enter flash programming mode */
  FLASH->CR |= FLASH_CR_PG;
 8003f9e:	6902      	ldr	r2, [r0, #16]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	6102      	str	r2, [r0, #16]

  /* Write the data */
  *(flashdata_t*)address = data;
 8003fa6:	600f      	str	r7, [r1, #0]

  /* Wait for completion */
  flashWaitWhileBusy();
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	03d2      	lsls	r2, r2, #15
 8003fac:	d4fc      	bmi.n	8003fa8 <cmd_flash+0x48>

  /* Exit flash programming mode */
  FLASH->CR &= ~FLASH_CR_PG;
 8003fae:	6902      	ldr	r2, [r0, #16]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	6102      	str	r2, [r0, #16]

  flashLock();
 8003fb6:	6902      	ldr	r2, [r0, #16]
 8003fb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fbc:	6102      	str	r2, [r0, #16]
 8003fbe:	3104      	adds	r1, #4
static void cmd_flash(BaseSequentialStream * chp, int argc, char *argv[])
{
  (void) argc,argv;

  size_t i;
  for (i = 0; i < FLASH_TEST_COUNT; i++)
 8003fc0:	42b1      	cmp	r1, r6
 8003fc2:	d1d8      	bne.n	8003f76 <cmd_flash+0x16>
    flashWriteData(FLASH_TEST_ADDR + 4*i , flashTestData[i]);

  chprintf(chp,"Flash successful\n");
 8003fc4:	4913      	ldr	r1, [pc, #76]	; (8004014 <cmd_flash+0xb4>)
  chThdSleepMilliseconds(1000);
  chprintf(chp,"Reading flash data...\n");
 8003fc6:	4d14      	ldr	r5, [pc, #80]	; (8004018 <cmd_flash+0xb8>)

  for (i = 0; i < FLASH_TEST_COUNT; i++)
 8003fc8:	4e14      	ldr	r6, [pc, #80]	; (800401c <cmd_flash+0xbc>)

  size_t i;
  for (i = 0; i < FLASH_TEST_COUNT; i++)
    flashWriteData(FLASH_TEST_ADDR + 4*i , flashTestData[i]);

  chprintf(chp,"Flash successful\n");
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff fd08 	bl	80039e0 <chprintf>
  chThdSleepMilliseconds(1000);
 8003fd0:	f242 7010 	movw	r0, #10000	; 0x2710
 8003fd4:	f7fd f924 	bl	8001220 <chThdSleep>
  chprintf(chp,"Reading flash data...\n");
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4911      	ldr	r1, [pc, #68]	; (8004020 <cmd_flash+0xc0>)
 8003fdc:	f7ff fd00 	bl	80039e0 <chprintf>

  for (i = 0; i < FLASH_TEST_COUNT; i++)
    chprintf(chp,"Data1:%d\n",flashReadData(FLASH_TEST_ADDR + 4*i));
 8003fe0:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8003fe4:	490f      	ldr	r1, [pc, #60]	; (8004024 <cmd_flash+0xc4>)
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff fcfa 	bl	80039e0 <chprintf>

  chprintf(chp,"Flash successful\n");
  chThdSleepMilliseconds(1000);
  chprintf(chp,"Reading flash data...\n");

  for (i = 0; i < FLASH_TEST_COUNT; i++)
 8003fec:	42b5      	cmp	r5, r6
 8003fee:	d1f7      	bne.n	8003fe0 <cmd_flash+0x80>
 8003ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 8003ff2:	f8c3 e004 	str.w	lr, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8003ff6:	f8c3 c004 	str.w	ip, [r3, #4]

    /* Check if unlock was successful */
    if (FLASH->CR & FLASH_CR_LOCK)
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	dabf      	bge.n	8003f80 <cmd_flash+0x20>
 8004000:	e7dd      	b.n	8003fbe <cmd_flash+0x5e>
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	08006c9c 	.word	0x08006c9c
 800400c:	08010000 	.word	0x08010000
 8004010:	08010020 	.word	0x08010020
 8004014:	08006bf0 	.word	0x08006bf0
 8004018:	0800fffc 	.word	0x0800fffc
 800401c:	0801001c 	.word	0x0801001c
 8004020:	08006c04 	.word	0x08006c04
 8004024:	08006c1c 	.word	0x08006c1c
 8004028:	45670123 	.word	0x45670123
 800402c:	cdef89ab 	.word	0xcdef89ab

08004030 <tft_write_data>:
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 8004030:	b510      	push	{r4, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	ac02      	add	r4, sp, #8
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <tft_write_data+0x24>)
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 8004038:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 800403c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004040:	831a      	strh	r2, [r3, #24]

  spiSelect(TFT_SPI);
 8004042:	f001 f8b5 	bl	80051b0 <spiSelect.constprop.23>
  spiSend(TFT_SPI, 1, &data);
 8004046:	4620      	mov	r0, r4
 8004048:	f001 f922 	bl	8005290 <spiSend.constprop.19>
  spiUnselect(TFT_SPI);
 800404c:	f001 f8e8 	bl	8005220 <spiUnselect.constprop.21>
}
 8004050:	b002      	add	sp, #8
 8004052:	bd10      	pop	{r4, pc}
 8004054:	40021000 	.word	0x40021000
	...

08004060 <tft_write_command>:
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 8004060:	b510      	push	{r4, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	ac02      	add	r4, sp, #8
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <tft_write_command+0x24>)
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 8004068:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 800406c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004070:	835a      	strh	r2, [r3, #26]

  spiSelect(TFT_SPI);
 8004072:	f001 f89d 	bl	80051b0 <spiSelect.constprop.23>
  spiSend(TFT_SPI, 1, &command);
 8004076:	4620      	mov	r0, r4
 8004078:	f001 f90a 	bl	8005290 <spiSend.constprop.19>
  spiUnselect(TFT_SPI);
 800407c:	f001 f8d0 	bl	8005220 <spiUnselect.constprop.21>
}
 8004080:	b002      	add	sp, #8
 8004082:	bd10      	pop	{r4, pc}
 8004084:	40021000 	.word	0x40021000
	...

08004090 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8004090:	4bd7      	ldr	r3, [pc, #860]	; (80043f0 <main+0x360>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004092:	4cd8      	ldr	r4, [pc, #864]	; (80043f4 <main+0x364>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	f04f 31ff 	mov.w	r1, #4294967295
 800409a:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 800409c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80040a0:	6119      	str	r1, [r3, #16]
 80040a2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80040a4:	6958      	ldr	r0, [r3, #20]
 80040a6:	6159      	str	r1, [r3, #20]
 80040a8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80040aa:	6a18      	ldr	r0, [r3, #32]
 80040ac:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80040b0:	6218      	str	r0, [r3, #32]
 80040b2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80040b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80040b6:	6259      	str	r1, [r3, #36]	; 0x24
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80040ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040c0:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80040c8:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80040ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80040cc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80040d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80040d4:	b08b      	sub	sp, #44	; 0x2c
 80040d6:	d003      	beq.n	80040e0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80040d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80040dc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80040de:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80040e0:	48c4      	ldr	r0, [pc, #784]	; (80043f4 <main+0x364>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 80040e2:	4cc5      	ldr	r4, [pc, #788]	; (80043f8 <main+0x368>)
 80040e4:	6843      	ldr	r3, [r0, #4]
 80040e6:	4ec5      	ldr	r6, [pc, #788]	; (80043fc <main+0x36c>)
 80040e8:	4dc5      	ldr	r5, [pc, #788]	; (8004400 <main+0x370>)
 80040ea:	2100      	movs	r1, #0
 80040ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f0:	6043      	str	r3, [r0, #4]
 80040f2:	460a      	mov	r2, r1
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80040f4:	460b      	mov	r3, r1
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 80040f6:	6021      	str	r1, [r4, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 80040f8:	58b0      	ldr	r0, [r6, r2]
 80040fa:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 80040fc:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004100:	3301      	adds	r3, #1
 8004102:	2b10      	cmp	r3, #16
 8004104:	f102 020c 	add.w	r2, r2, #12
    _stm32_dma_streams[i].stream->CR = 0U;
 8004108:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800410c:	d1f4      	bne.n	80040f8 <main+0x68>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800410e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800442c <main+0x39c>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004112:	4abc      	ldr	r2, [pc, #752]	; (8004404 <main+0x374>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004114:	4fb6      	ldr	r7, [pc, #728]	; (80043f0 <main+0x360>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004116:	f8df c318 	ldr.w	ip, [pc, #792]	; 8004430 <main+0x3a0>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800411a:	f8df b318 	ldr.w	fp, [pc, #792]	; 8004434 <main+0x3a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800411e:	f8df e318 	ldr.w	lr, [pc, #792]	; 8004438 <main+0x3a8>
 8004122:	48b9      	ldr	r0, [pc, #740]	; (8004408 <main+0x378>)
 8004124:	f8df a314 	ldr.w	sl, [pc, #788]	; 800443c <main+0x3ac>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8004128:	49b8      	ldr	r1, [pc, #736]	; (800440c <main+0x37c>)
 800412a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8004440 <main+0x3b0>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800412e:	4db8      	ldr	r5, [pc, #736]	; (8004410 <main+0x380>)
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004130:	f04f 36ff 	mov.w	r6, #4294967295
 8004134:	f8c8 6008 	str.w	r6, [r8, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004138:	f8c8 600c 	str.w	r6, [r8, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800413c:	6096      	str	r6, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 800413e:	60d6      	str	r6, [r2, #12]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004146:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 800414a:	633a      	str	r2, [r7, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800414c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800414e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004152:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 8004156:	653a      	str	r2, [r7, #80]	; 0x50
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8004158:	f46f 42a8 	mvn.w	r2, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800415c:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004160:	f8cc 2008 	str.w	r2, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8004164:	f8cc b00c 	str.w	fp, [ip, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004168:	f10b 5baa 	add.w	fp, fp, #356515840	; 0x15400000
 800416c:	f50b 3b88 	add.w	fp, fp, #69632	; 0x11000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004170:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8004174:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004178:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800417c:	f8cc b020 	str.w	fp, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8004180:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8004444 <main+0x3b4>
 8004184:	f8cc b024 	str.w	fp, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004188:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8004448 <main+0x3b8>
 800418c:	f8cc b000 	str.w	fp, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004190:	f44f 7c10 	mov.w	ip, #576	; 0x240
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004194:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 800444c <main+0x3bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004198:	f8ce c004 	str.w	ip, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800419c:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 80041a0:	f8ce b00c 	str.w	fp, [lr, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80041a4:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 8004450 <main+0x3c0>
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80041a8:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 80041ac:	f8ce b020 	str.w	fp, [lr, #32]
  gpiop->AFRH    = config->afrh;
 80041b0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8004454 <main+0x3c4>
 80041b4:	f8ce b024 	str.w	fp, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80041b8:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8004458 <main+0x3c8>
 80041bc:	f8ce b000 	str.w	fp, [lr]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80041c0:	f8df b298 	ldr.w	fp, [pc, #664]	; 800445c <main+0x3cc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80041c4:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041c6:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80041c8:	f8c0 b00c 	str.w	fp, [r0, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80041cc:	f04f 5b4c 	mov.w	fp, #855638016	; 0x33000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80041d0:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80041d2:	f8c0 b020 	str.w	fp, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80041d6:	f648 0b33 	movw	fp, #34867	; 0x8833
 80041da:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80041de:	f8df b280 	ldr.w	fp, [pc, #640]	; 8004460 <main+0x3d0>
 80041e2:	f8c0 b000 	str.w	fp, [r0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80041e6:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8004464 <main+0x3d4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80041ea:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041ee:	f8ca 6008 	str.w	r6, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 80041f2:	f8ca b00c 	str.w	fp, [sl, #12]
  gpiop->ODR     = config->odr;
 80041f6:	f640 7bff 	movw	fp, #4095	; 0xfff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80041fa:	f5a8 4898 	sub.w	r8, r8, #19456	; 0x4c00
 80041fe:	f8df c268 	ldr.w	ip, [pc, #616]	; 8004468 <main+0x3d8>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004202:	f8ca b014 	str.w	fp, [sl, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004206:	f50e 5ec0 	add.w	lr, lr, #6144	; 0x1800
 800420a:	f500 50c0 	add.w	r0, r0, #6144	; 0x1800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800420e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 800446c <main+0x3dc>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004212:	f8ca 4020 	str.w	r4, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8004216:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800421a:	f8ca b000 	str.w	fp, [sl]
 800421e:	f8df a250 	ldr.w	sl, [pc, #592]	; 8004470 <main+0x3e0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004222:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004226:	f8c9 6008 	str.w	r6, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 800422a:	f8c9 400c 	str.w	r4, [r9, #12]
  gpiop->ODR     = config->odr;
 800422e:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8004232:	f8c9 4020 	str.w	r4, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8004236:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800423a:	f8c9 a000 	str.w	sl, [r9]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800423e:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004242:	f8c8 6008 	str.w	r6, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8004246:	f8c8 400c 	str.w	r4, [r8, #12]
  gpiop->ODR     = config->odr;
 800424a:	f8c8 2014 	str.w	r2, [r8, #20]
  gpiop->AFRL    = config->afrl;
 800424e:	f8c8 4020 	str.w	r4, [r8, #32]
  gpiop->AFRH    = config->afrh;
 8004252:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004256:	f8c8 4000 	str.w	r4, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800425a:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800425e:	f8cc 6008 	str.w	r6, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8004262:	f8cc 400c 	str.w	r4, [ip, #12]
  gpiop->ODR     = config->odr;
 8004266:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800426a:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800426e:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004272:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004276:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800427a:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800427e:	f8ce 400c 	str.w	r4, [lr, #12]
  gpiop->ODR     = config->odr;
 8004282:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8004286:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800428a:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800428e:	f8ce 4000 	str.w	r4, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004292:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004294:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004296:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8004298:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800429a:	6204      	str	r4, [r0, #32]
  i2cp->config = NULL;
 800429c:	604c      	str	r4, [r1, #4]
  gpiop->AFRH    = config->afrh;
 800429e:	6244      	str	r4, [r0, #36]	; 0x24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80042a0:	614c      	str	r4, [r1, #20]
  gpiop->MODER   = config->moder;
 80042a2:	6004      	str	r4, [r0, #0]

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80042a4:	4855      	ldr	r0, [pc, #340]	; (80043fc <main+0x36c>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80042a6:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <main+0x384>)
 80042a8:	634a      	str	r2, [r1, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80042aa:	4602      	mov	r2, r0
 80042ac:	3248      	adds	r2, #72	; 0x48
 80042ae:	630a      	str	r2, [r1, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80042b0:	f101 020c 	add.w	r2, r1, #12
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80042b4:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004474 <main+0x3e4>
 80042b8:	60ca      	str	r2, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 80042ba:	610a      	str	r2, [r1, #16]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80042bc:	2201      	movs	r2, #1
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80042be:	700a      	strb	r2, [r1, #0]
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 80042c0:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8004478 <main+0x3e8>

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80042c4:	62c8      	str	r0, [r1, #44]	; 0x2c
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80042c6:	61cc      	str	r4, [r1, #28]
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80042c8:	4953      	ldr	r1, [pc, #332]	; (8004418 <main+0x388>)
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80042ca:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800447c <main+0x3ec>
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80042ce:	f8cb 100c 	str.w	r1, [fp, #12]
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 80042d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80042d6:	f8c9 100c 	str.w	r1, [r9, #12]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80042da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 80042de:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004480 <main+0x3f0>
 80042e2:	f8ca 100c 	str.w	r1, [sl, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80042e6:	484d      	ldr	r0, [pc, #308]	; (800441c <main+0x38c>)
 80042e8:	494d      	ldr	r1, [pc, #308]	; (8004420 <main+0x390>)
 80042ea:	f8df e198 	ldr.w	lr, [pc, #408]	; 8004484 <main+0x3f4>
 80042ee:	f88b 2000 	strb.w	r2, [fp]
 80042f2:	f889 2000 	strb.w	r2, [r9]
 80042f6:	46a8      	mov	r8, r5
  gptp->config = NULL;
 80042f8:	f8cb 4004 	str.w	r4, [fp, #4]
 80042fc:	f8c9 4004 	str.w	r4, [r9, #4]

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
  PWMD8.tim = STM32_TIM8;
 8004300:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004488 <main+0x3f8>
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8004304:	f88a 2000 	strb.w	r2, [sl]
#endif

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8004308:	f04f 0906 	mov.w	r9, #6
 800430c:	f88c 2000 	strb.w	r2, [ip]
 8004310:	60c8      	str	r0, [r1, #12]
 8004312:	f88c 9010 	strb.w	r9, [ip, #16]
  PWMD8.tim = STM32_TIM8;
 8004316:	f8cc b018 	str.w	fp, [ip, #24]
  gptp->config = NULL;
 800431a:	f8ca 4004 	str.w	r4, [sl, #4]

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
  PWMD9.tim = STM32_TIM9;
 800431e:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8004322:	f04f 0a02 	mov.w	sl, #2
  pwmp->config   = NULL;
 8004326:	f8cc 4004 	str.w	r4, [ip, #4]
  pwmp->enabled  = 0;
 800432a:	f8cc 400c 	str.w	r4, [ip, #12]
 800432e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800448c <main+0x3fc>
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004332:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8004490 <main+0x400>
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8004336:	700a      	strb	r2, [r1, #0]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8004338:	f88e 2000 	strb.w	r2, [lr]
 800433c:	f88e a010 	strb.w	sl, [lr, #16]
  gptp->config = NULL;
 8004340:	604c      	str	r4, [r1, #4]
  pwmp->config   = NULL;
 8004342:	f8ce 4004 	str.w	r4, [lr, #4]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8004346:	4937      	ldr	r1, [pc, #220]	; (8004424 <main+0x394>)
  pwmp->enabled  = 0;
 8004348:	f8ce 400c 	str.w	r4, [lr, #12]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800434c:	f105 0a74 	add.w	sl, r5, #116	; 0x74
  PWMD9.tim = STM32_TIM9;
 8004350:	f8ce 0018 	str.w	r0, [lr, #24]
 8004354:	f848 9b04 	str.w	r9, [r8], #4
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8004358:	4828      	ldr	r0, [pc, #160]	; (80043fc <main+0x36c>)
  oqp->q_notify  = onfy;
 800435a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8004494 <main+0x404>
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800435e:	f8ac 6000 	strh.w	r6, [ip]
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
  SD4.usart = UART4;
 8004362:	f8df e134 	ldr.w	lr, [pc, #308]	; 8004498 <main+0x408>
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004366:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800436a:	f105 0c0c 	add.w	ip, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800436e:	f105 0a54 	add.w	sl, r5, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8004372:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8004376:	f105 0964 	add.w	r9, r5, #100	; 0x64

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 800437a:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800437e:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8004382:	f8c5 8004 	str.w	r8, [r5, #4]
 8004386:	f105 0e30 	add.w	lr, r5, #48	; 0x30
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 800438a:	f100 0824 	add.w	r8, r0, #36	; 0x24
 800438e:	f8c5 c00c 	str.w	ip, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 8004392:	f8c5 c010 	str.w	ip, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004396:	f8c5 a018 	str.w	sl, [r5, #24]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800439a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800449c <main+0x40c>
  iqp->q_rdptr   = bp;
 800439e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80043a2:	f8c5 a020 	str.w	sl, [r5, #32]
  iqp->q_top     = bp + size;
 80043a6:	f8c5 901c 	str.w	r9, [r5, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80043aa:	f101 0a0c 	add.w	sl, r1, #12
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80043ae:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80043b2:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80043b6:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80043ba:	481b      	ldr	r0, [pc, #108]	; (8004428 <main+0x398>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80043bc:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80044a0 <main+0x410>
 80043c0:	700a      	strb	r2, [r1, #0]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80043c2:	722a      	strb	r2, [r5, #8]
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80043c4:	61c8      	str	r0, [r1, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 80043c6:	f8c1 8020 	str.w	r8, [r1, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 80043ca:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80043ce:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 80043d2:	f8c1 a00c 	str.w	sl, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 80043d6:	f8c1 a010 	str.w	sl, [r1, #16]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80043da:	616c      	str	r4, [r5, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80043dc:	f8c5 e030 	str.w	lr, [r5, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80043e0:	63ab      	str	r3, [r5, #56]	; 0x38
  tqp->p_prev = (thread_t *)tqp;
 80043e2:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  spip->config = NULL;
 80043e6:	604c      	str	r4, [r1, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80043e8:	608c      	str	r4, [r1, #8]
 80043ea:	614c      	str	r4, [r1, #20]
 80043ec:	e05a      	b.n	80044a4 <main+0x414>
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000
 80043f8:	2000bc48 	.word	0x2000bc48
 80043fc:	08006ae0 	.word	0x08006ae0
 8004400:	2000a890 	.word	0x2000a890
 8004404:	40026400 	.word	0x40026400
 8004408:	40020800 	.word	0x40020800
 800440c:	2000c9a0 	.word	0x2000c9a0
 8004410:	20001bbc 	.word	0x20001bbc
 8004414:	40005400 	.word	0x40005400
 8004418:	40010000 	.word	0x40010000
 800441c:	40000800 	.word	0x40000800
 8004420:	2000c988 	.word	0x2000c988
 8004424:	2000be00 	.word	0x2000be00
 8004428:	40003800 	.word	0x40003800
 800442c:	40026000 	.word	0x40026000
 8004430:	40020000 	.word	0x40020000
 8004434:	40150000 	.word	0x40150000
 8004438:	40020400 	.word	0x40020400
 800443c:	40020c00 	.word	0x40020c00
 8004440:	40021000 	.word	0x40021000
 8004444:	000aa770 	.word	0x000aa770
 8004448:	2aa8aaa8 	.word	0x2aa8aaa8
 800444c:	55514015 	.word	0x55514015
 8004450:	22220000 	.word	0x22220000
 8004454:	55550044 	.word	0x55550044
 8004458:	aa0aaa80 	.word	0xaa0aaa80
 800445c:	54400554 	.word	0x54400554
 8004460:	02aaa001 	.word	0x02aaa001
 8004464:	aa555055 	.word	0xaa555055
 8004468:	40021800 	.word	0x40021800
 800446c:	55000100 	.word	0x55000100
 8004470:	50082840 	.word	0x50082840
 8004474:	2000a910 	.word	0x2000a910
 8004478:	2000c7e8 	.word	0x2000c7e8
 800447c:	2000bef8 	.word	0x2000bef8
 8004480:	2000c7cc 	.word	0x2000c7cc
 8004484:	20001b98 	.word	0x20001b98
 8004488:	40010400 	.word	0x40010400
 800448c:	08006a70 	.word	0x08006a70
 8004490:	2000aad0 	.word	0x2000aad0
 8004494:	08003221 	.word	0x08003221
 8004498:	40004c00 	.word	0x40004c00
 800449c:	00010016 	.word	0x00010016
 80044a0:	00010046 	.word	0x00010046
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80044a4:	62ac      	str	r4, [r5, #40]	; 0x28
  iqp->q_link    = link;
 80044a6:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80044a8:	652d      	str	r5, [r5, #80]	; 0x50
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80044aa:	f8c1 902c 	str.w	r9, [r1, #44]	; 0x2c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80044ae:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80044b2:	f8df b384 	ldr.w	fp, [pc, #900]	; 8004838 <main+0x7a8>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80044b6:	49c3      	ldr	r1, [pc, #780]	; (80047c4 <main+0x734>)
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80044b8:	f8df e380 	ldr.w	lr, [pc, #896]	; 800483c <main+0x7ac>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044bc:	f8df 9380 	ldr.w	r9, [pc, #896]	; 8004840 <main+0x7b0>
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80044c0:	f8df a380 	ldr.w	sl, [pc, #896]	; 8004844 <main+0x7b4>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80044c4:	48c0      	ldr	r0, [pc, #768]	; (80047c8 <main+0x738>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80044c6:	f8df c380 	ldr.w	ip, [pc, #896]	; 8004848 <main+0x7b8>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80044ca:	f048 0808 	orr.w	r8, r8, #8
 80044ce:	f8c7 8040 	str.w	r8, [r7, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80044d2:	f8db 8008 	ldr.w	r8, [fp, #8]
 80044d6:	f048 0808 	orr.w	r8, r8, #8
 80044da:	f8cb 8008 	str.w	r8, [fp, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80044de:	f242 08cf 	movw	r8, #8399	; 0x20cf
 80044e2:	f8c1 8028 	str.w	r8, [r1, #40]	; 0x28
 80044e6:	f04f 0b80 	mov.w	fp, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044ea:	f44f 2880 	mov.w	r8, #262144	; 0x40000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80044ee:	62ce      	str	r6, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80044f0:	618c      	str	r4, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80044f2:	634c      	str	r4, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80044f4:	60cc      	str	r4, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 80044f6:	604c      	str	r4, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80044f8:	614a      	str	r2, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80044fa:	600a      	str	r2, [r1, #0]
 80044fc:	9203      	str	r2, [sp, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044fe:	f889 b332 	strb.w	fp, [r9, #818]	; 0x332
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004502:	f8c9 8184 	str.w	r8, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004506:	f8c9 8004 	str.w	r8, [r9, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800450a:	f8ce 4008 	str.w	r4, [lr, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800450e:	f8de b00c 	ldr.w	fp, [lr, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004512:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80047fc <main+0x76c>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8004516:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800451a:	ea0b 0101 	and.w	r1, fp, r1
  reg_value  =  (reg_value                                   |
 800451e:	ea41 0a0a 	orr.w	sl, r1, sl
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8004522:	f8ce a00c 	str.w	sl, [lr, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004526:	68c1      	ldr	r1, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8004528:	f8c8 8004 	str.w	r8, [r8, #4]
 800452c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004530:	60c1      	str	r1, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004532:	f8dc 0000 	ldr.w	r0, [ip]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8004536:	f8c8 4008 	str.w	r4, [r8, #8]
 800453a:	4310      	orrs	r0, r2
 800453c:	f8cc 0000 	str.w	r0, [ip]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8004540:	f108 011c 	add.w	r1, r8, #28
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004544:	f88e 301f 	strb.w	r3, [lr, #31]
 8004548:	f04f 0a00 	mov.w	sl, #0
 800454c:	f04f 0b00 	mov.w	fp, #0
 8004550:	f04f 0320 	mov.w	r3, #32
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004554:	a804      	add	r0, sp, #16
 8004556:	f88e 3022 	strb.w	r3, [lr, #34]	; 0x22
 800455a:	f8c8 101c 	str.w	r1, [r8, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800455e:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8004562:	f8c8 8010 	str.w	r8, [r8, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004566:	f8c8 8000 	str.w	r8, [r8]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800456a:	f8c8 8014 	str.w	r8, [r8, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800456e:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8004572:	f8c8 1020 	str.w	r1, [r8, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004576:	9604      	str	r6, [sp, #16]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8004578:	f8c8 44a0 	str.w	r4, [r8, #1184]	; 0x4a0
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800457c:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 800457e:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8004580:	9407      	str	r4, [sp, #28]
  tmp->cumulative = (rttime_t)0;
 8004582:	e9cd ab08 	strd	sl, fp, [sp, #32]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004586:	f7fc f96b 	bl	8000860 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800458a:	a804      	add	r0, sp, #16
 800458c:	f7fc f930 	bl	80007f0 <chTMStopMeasurementX>

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004590:	f508 6e98 	add.w	lr, r8, #1216	; 0x4c0
 8004594:	e9ce ab00 	strd	sl, fp, [lr]
 8004598:	f508 6e9b 	add.w	lr, r8, #1240	; 0x4d8
 800459c:	e9ce ab00 	strd	sl, fp, [lr]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80045a0:	488a      	ldr	r0, [pc, #552]	; (80047cc <main+0x73c>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80045a2:	498b      	ldr	r1, [pc, #556]	; (80047d0 <main+0x740>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80045a4:	4b8b      	ldr	r3, [pc, #556]	; (80047d4 <main+0x744>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80045a6:	f8d8 c014 	ldr.w	ip, [r8, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80045aa:	9a03      	ldr	r2, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80045ac:	f8c8 64b0 	str.w	r6, [r8, #1200]	; 0x4b0
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80045b0:	f108 0e40 	add.w	lr, r8, #64	; 0x40
 80045b4:	f8c8 e03c 	str.w	lr, [r8, #60]	; 0x3c
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80045b8:	f8df e290 	ldr.w	lr, [pc, #656]	; 800484c <main+0x7bc>
 80045bc:	f8c8 64c8 	str.w	r6, [r8, #1224]	; 0x4c8
 80045c0:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80045c4:	f021 0107 	bic.w	r1, r1, #7
 80045c8:	9102      	str	r1, [sp, #8]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80045ca:	f8ce 0000 	str.w	r0, [lr]
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
  chTMStopMeasurementX(&tm);
  ch.tm.offset = tm.last;
 80045ce:	9906      	ldr	r1, [sp, #24]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80045d0:	4881      	ldr	r0, [pc, #516]	; (80047d8 <main+0x748>)
 80045d2:	f8c8 14a0 	str.w	r1, [r8, #1184]	; 0x4a0
 80045d6:	9902      	ldr	r1, [sp, #8]
 80045d8:	6001      	str	r1, [r0, #0]
 80045da:	f103 0010 	add.w	r0, r3, #16
 80045de:	497f      	ldr	r1, [pc, #508]	; (80047dc <main+0x74c>)
 80045e0:	6019      	str	r1, [r3, #0]
 80045e2:	6118      	str	r0, [r3, #16]
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80045e4:	2140      	movs	r1, #64	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 80045e6:	6158      	str	r0, [r3, #20]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80045e8:	f508 6088 	add.w	r0, r8, #1088	; 0x440
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80045ec:	f888 2462 	strb.w	r2, [r8, #1122]	; 0x462
  default_heap.h_free.h.u.next = NULL;
 80045f0:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 80045f2:	60dc      	str	r4, [r3, #12]
 80045f4:	619c      	str	r4, [r3, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80045f6:	f508 6e8d 	add.w	lr, r8, #1128	; 0x468

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 80045fa:	4b79      	ldr	r3, [pc, #484]	; (80047e0 <main+0x750>)
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 80045fc:	f8c8 44a8 	str.w	r4, [r8, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8004600:	f8c8 44ac 	str.w	r4, [r8, #1196]	; 0x4ac
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004604:	f8c8 44b4 	str.w	r4, [r8, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 8004608:	f8c8 44b8 	str.w	r4, [r8, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 800460c:	f8c8 44bc 	str.w	r4, [r8, #1212]	; 0x4bc
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004610:	f8c8 44cc 	str.w	r4, [r8, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 8004614:	f8c8 44d0 	str.w	r4, [r8, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 8004618:	f8c8 44d4 	str.w	r4, [r8, #1236]	; 0x4d4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800461c:	f888 4461 	strb.w	r4, [r8, #1121]	; 0x461
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8004620:	f8c8 447c 	str.w	r4, [r8, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004624:	f8c8 4478 	str.w	r4, [r8, #1144]	; 0x478
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004628:	f8c8 4458 	str.w	r4, [r8, #1112]	; 0x458
  REG_INSERT(tp);
 800462c:	f8c8 8450 	str.w	r8, [r8, #1104]	; 0x450
 8004630:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004634:	f8c8 1448 	str.w	r1, [r8, #1096]	; 0x448
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004638:	f8c8 1480 	str.w	r1, [r8, #1152]	; 0x480
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800463c:	f8c8 c454 	str.w	ip, [r8, #1108]	; 0x454
  tmp->cumulative = (rttime_t)0;
 8004640:	f508 6193 	add.w	r1, r8, #1176	; 0x498
 8004644:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004648:	f8c8 6488 	str.w	r6, [r8, #1160]	; 0x488
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800464c:	f208 466c 	addw	r6, r8, #1132	; 0x46c
 8004650:	f8c8 0014 	str.w	r0, [r8, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8004654:	f8c8 0018 	str.w	r0, [r8, #24]

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8004658:	f8c8 345c 	str.w	r3, [r8, #1116]	; 0x45c
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 800465c:	f508 6091 	add.w	r0, r8, #1160	; 0x488
  tmp->worst      = (rtcnt_t)0;
 8004660:	f8c8 448c 	str.w	r4, [r8, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 8004664:	f8c8 4490 	str.w	r4, [r8, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 8004668:	f8c8 4494 	str.w	r4, [r8, #1172]	; 0x494
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800466c:	f888 2460 	strb.w	r2, [r8, #1120]	; 0x460
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8004670:	f8c8 e468 	str.w	lr, [r8, #1128]	; 0x468
  tmp->cumulative = (rttime_t)0;
 8004674:	e9c1 ab00 	strd	sl, fp, [r1]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004678:	f8c8 646c 	str.w	r6, [r8, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 800467c:	f8c8 6470 	str.w	r6, [r8, #1136]	; 0x470
 8004680:	9202      	str	r2, [sp, #8]
  currp->p_stklimit = &__main_thread_stack_base__;
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 8004682:	f7fc f8ed 	bl	8000860 <chTMStartMeasurementX>
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004686:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800468a:	b91b      	cbnz	r3, 8004694 <main+0x604>
 800468c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8004690:	9a02      	ldr	r2, [sp, #8]
 8004692:	b123      	cbz	r3, 800469e <main+0x60e>
 8004694:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8004696:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <main+0x754>)
 8004698:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 800469c:	e7fe      	b.n	800469c <main+0x60c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800469e:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80046a2:	b662      	cpsie	i
 80046a4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80046a8:	484f      	ldr	r0, [pc, #316]	; (80047e8 <main+0x758>)
 80046aa:	6188      	str	r0, [r1, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	f508 609c 	add.w	r0, r8, #1248	; 0x4e0
 80046b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80046b6:	4b4d      	ldr	r3, [pc, #308]	; (80047ec <main+0x75c>)
 80046b8:	f7fc fde2 	bl	8001280 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80046bc:	4b4c      	ldr	r3, [pc, #304]	; (80047f0 <main+0x760>)
 80046be:	6183      	str	r3, [r0, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80046c0:	2320      	movs	r3, #32
 80046c2:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80046c6:	f7fc f8db 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80046ca:	f7fc fbb1 	bl	8000e30 <_dbg_check_lock>
void sdStart(SerialDriver *sdp, const SerialConfig *config) {

  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80046ce:	7a2b      	ldrb	r3, [r5, #8]
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	d904      	bls.n	80046e0 <main+0x650>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046d6:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <main+0x764>)
 80046da:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 80046de:	e7fe      	b.n	80046de <main+0x64e>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <main+0x66e>
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80046ea:	21c0      	movs	r1, #192	; 0xc0
 80046ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
 80046f2:	f889 1334 	strb.w	r1, [r9, #820]	; 0x334
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046f6:	f8c9 2184 	str.w	r2, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80046fa:	f8c9 2004 	str.w	r2, [r9, #4]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 80046fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004700:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <main+0x768>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d056      	beq.n	80047b4 <main+0x724>
 8004706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800470a:	4293      	cmp	r3, r2
 800470c:	d052      	beq.n	80047b4 <main+0x724>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800470e:	f241 1217 	movw	r2, #4375	; 0x1117
 8004712:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004714:	f242 102c 	movw	r0, #8492	; 0x212c
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004718:	f244 0240 	movw	r2, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800471c:	2100      	movs	r1, #0
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800471e:	2401      	movs	r4, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004720:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004722:	615c      	str	r4, [r3, #20]
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8004724:	2202      	movs	r2, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004726:	60d8      	str	r0, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8004728:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800472a:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	722a      	strb	r2, [r5, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004730:	f7fc fb6e 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004734:	f7fc f88c 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004738:	f8d8 2000 	ldr.w	r2, [r8]
 800473c:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <main+0x76c>)
 800473e:	4542      	cmp	r2, r8
 8004740:	d004      	beq.n	800474c <main+0x6bc>
 8004742:	6999      	ldr	r1, [r3, #24]
 8004744:	6892      	ldr	r2, [r2, #8]
 8004746:	6889      	ldr	r1, [r1, #8]
 8004748:	4291      	cmp	r1, r2
 800474a:	d337      	bcc.n	80047bc <main+0x72c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800474c:	2400      	movs	r4, #0
 800474e:	f384 8811 	msr	BASEPRI, r4

void shellStart(void)
{
  sdStart(BLE, NULL);

  motors = getMotors();
 8004752:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <main+0x770>)
 * @api
 */
thread_t *shellCreateStatic(const ShellConfig *scp, void *wsp,
                            size_t size, tprio_t prio) {

  return chThdCreateStatic(wsp, size, prio, shell_thread, (void *)scp);
 8004754:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <main+0x774>)
 8004756:	492c      	ldr	r1, [pc, #176]	; (8004808 <main+0x778>)
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	482c      	ldr	r0, [pc, #176]	; (800480c <main+0x77c>)
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <main+0x780>)
 8004760:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8004764:	2240      	movs	r2, #64	; 0x40
 8004766:	f7fc fd8b 	bl	8001280 <chThdCreateStatic>
  halInit();
  chSysInit();

  shellStart();

  chThdCreateStatic(Test_thread_wa, sizeof(Test_thread_wa),
 800476a:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <main+0x784>)
 800476c:	9400      	str	r4, [sp, #0]
 800476e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004772:	2240      	movs	r2, #64	; 0x40
 8004774:	4828      	ldr	r0, [pc, #160]	; (8004818 <main+0x788>)
 8004776:	f7fc fd83 	bl	8001280 <chThdCreateStatic>
  NORMALPRIO,
                    Test_thread, NULL);

  chThdCreateStatic(MPU_thread_wa, sizeof(MPU_thread_wa),
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <main+0x78c>)
 800477c:	9400      	str	r4, [sp, #0]
 800477e:	f248 1170 	movw	r1, #33136	; 0x8170
 8004782:	2245      	movs	r2, #69	; 0x45
 8004784:	4826      	ldr	r0, [pc, #152]	; (8004820 <main+0x790>)
 8004786:	f7fc fd7b 	bl	8001280 <chThdCreateStatic>
  NORMALPRIO + 5,
                    MPU_thread, NULL);

  chThdCreateStatic(TFT_thread_wa, sizeof(TFT_thread_wa),
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <main+0x794>)
 800478c:	9400      	str	r4, [sp, #0]
 800478e:	f241 1170 	movw	r1, #4464	; 0x1170
 8004792:	223b      	movs	r2, #59	; 0x3b
 8004794:	4824      	ldr	r0, [pc, #144]	; (8004828 <main+0x798>)
 8004796:	f7fc fd73 	bl	8001280 <chThdCreateStatic>
  NORMALPRIO - 5,
                    TFT_thread, NULL);

  chThdCreateStatic(Motor_thread_wa, sizeof(Motor_thread_wa),
 800479a:	9400      	str	r4, [sp, #0]
 800479c:	4823      	ldr	r0, [pc, #140]	; (800482c <main+0x79c>)
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <main+0x7a0>)
 80047a0:	f241 1170 	movw	r1, #4464	; 0x1170
 80047a4:	2241      	movs	r2, #65	; 0x41
 80047a6:	f7fc fd6b 	bl	8001280 <chThdCreateStatic>
  NORMALPRIO + 1,
                    Motor_thread, NULL);

  while (true) {
    //chprintf(chp,"Serial OK\n");
    chThdSleepMilliseconds(500);
 80047aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80047ae:	f7fc fd37 	bl	8001220 <chThdSleep>
 80047b2:	e7fa      	b.n	80047aa <main+0x71a>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80047b4:	f242 222e 	movw	r2, #8750	; 0x222e
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	e7ab      	b.n	8004714 <main+0x684>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047bc:	b672      	cpsid	i
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <main+0x7a4>)
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80047c2:	e7fe      	b.n	80047c2 <main+0x732>
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	e000edf0 	.word	0xe000edf0
 80047cc:	2000cb6f 	.word	0x2000cb6f
 80047d0:	20020000 	.word	0x20020000
 80047d4:	2000bc50 	.word	0x2000bc50
 80047d8:	20001bb8 	.word	0x20001bb8
 80047dc:	08003041 	.word	0x08003041
 80047e0:	20000400 	.word	0x20000400
 80047e4:	08006c28 	.word	0x08006c28
 80047e8:	08006bb0 	.word	0x08006bb0
 80047ec:	080007c1 	.word	0x080007c1
 80047f0:	08006c30 	.word	0x08006c30
 80047f4:	08006ba0 	.word	0x08006ba0
 80047f8:	40011000 	.word	0x40011000
 80047fc:	2000bfd8 	.word	0x2000bfd8
 8004800:	20009dac 	.word	0x20009dac
 8004804:	08006c90 	.word	0x08006c90
 8004808:	2000083c 	.word	0x2000083c
 800480c:	20009db0 	.word	0x20009db0
 8004810:	08003b91 	.word	0x08003b91
 8004814:	080014b1 	.word	0x080014b1
 8004818:	2000a920 	.word	0x2000a920
 800481c:	08002091 	.word	0x08002091
 8004820:	20001c38 	.word	0x20001c38
 8004824:	08001571 	.word	0x08001571
 8004828:	2000aad8 	.word	0x2000aad8
 800482c:	20000a28 	.word	0x20000a28
 8004830:	08004851 	.word	0x08004851
 8004834:	08006a90 	.word	0x08006a90
 8004838:	e0042000 	.word	0xe0042000
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	e000e100 	.word	0xe000e100
 8004844:	05fa0300 	.word	0x05fa0300
 8004848:	e0001000 	.word	0xe0001000
 800484c:	20001bb4 	.word	0x20001bb4

08004850 <Motor_thread>:
  }
}

static THD_WORKING_AREA(Motor_thread_wa, 4096);
static THD_FUNCTION(Motor_thread, p)
{
 8004850:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8004852:	4d4e      	ldr	r5, [pc, #312]	; (800498c <Motor_thread+0x13c>)
 8004854:	494e      	ldr	r1, [pc, #312]	; (8004990 <Motor_thread+0x140>)
 8004856:	69ab      	ldr	r3, [r5, #24]
  (void)p;
  chRegSetThreadName("Motor Control");

  motors = getMotors();
 8004858:	4a4e      	ldr	r2, [pc, #312]	; (8004994 <Motor_thread+0x144>)
 800485a:	6199      	str	r1, [r3, #24]
  }
}

static THD_WORKING_AREA(Motor_thread_wa, 4096);
static THD_FUNCTION(Motor_thread, p)
{
 800485c:	b082      	sub	sp, #8
  return motors;
}

inline void motor_init(void)
{
  chThdCreateStatic(Hall_thread_wa, sizeof(Hall_thread_wa),
 800485e:	2400      	movs	r4, #0
  (void)p;
  chRegSetThreadName("Motor Control");

  motors = getMotors();
 8004860:	494d      	ldr	r1, [pc, #308]	; (8004998 <Motor_thread+0x148>)
 8004862:	9400      	str	r4, [sp, #0]
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <Motor_thread+0x14c>)
 8004866:	6011      	str	r1, [r2, #0]
 8004868:	484d      	ldr	r0, [pc, #308]	; (80049a0 <Motor_thread+0x150>)
 800486a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 800486e:	2245      	movs	r2, #69	; 0x45
 8004870:	f7fc fd06 	bl	8001280 <chThdCreateStatic>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004874:	2320      	movs	r3, #32
 8004876:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800487a:	f7fc f801 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800487e:	f7fc fad7 	bl	8000e30 <_dbg_check_lock>
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {

  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8004882:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <Motor_thread+0x154>)
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	1e51      	subs	r1, r2, #1
 8004888:	2901      	cmp	r1, #1
 800488a:	d903      	bls.n	8004894 <Motor_thread+0x44>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800488c:	b672      	cpsid	i
 800488e:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <Motor_thread+0x158>)
 8004890:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004892:	e7fe      	b.n	8004892 <Motor_thread+0x42>
                "invalid state");
  pwmp->config = config;
 8004894:	4945      	ldr	r1, [pc, #276]	; (80049ac <Motor_thread+0x15c>)
 8004896:	6059      	str	r1, [r3, #4]
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004898:	2a01      	cmp	r2, #1
  pwmp->period = config->period;
 800489a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800489e:	6099      	str	r1, [r3, #8]
 80048a0:	d019      	beq.n	80048d6 <Motor_thread+0x86>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	6014      	str	r4, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80048a6:	6354      	str	r4, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80048a8:	6394      	str	r4, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80048aa:	63d4      	str	r4, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80048ac:	6414      	str	r4, [r2, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80048ae:	6254      	str	r4, [r2, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80048b0:	6958      	ldr	r0, [r3, #20]
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <Motor_thread+0x160>)
 80048b4:	4a3b      	ldr	r2, [pc, #236]	; (80049a4 <Motor_thread+0x154>)
 80048b6:	fba3 1300 	umull	r1, r3, r3, r0
 80048ba:	0e5b      	lsrs	r3, r3, #25
 80048bc:	1e5c      	subs	r4, r3, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 80048be:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80048c2:	d204      	bcs.n	80048ce <Motor_thread+0x7e>
 80048c4:	493b      	ldr	r1, [pc, #236]	; (80049b4 <Motor_thread+0x164>)
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4298      	cmp	r0, r3
 80048cc:	d028      	beq.n	8004920 <Motor_thread+0xd0>
 80048ce:	b672      	cpsid	i
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <Motor_thread+0x168>)
 80048d2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80048d4:	e7fe      	b.n	80048d4 <Motor_thread+0x84>
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 80048d6:	4939      	ldr	r1, [pc, #228]	; (80049bc <Motor_thread+0x16c>)
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 80048d8:	4f39      	ldr	r7, [pc, #228]	; (80049c0 <Motor_thread+0x170>)
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 80048da:	6c48      	ldr	r0, [r1, #68]	; 0x44
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80048dc:	699e      	ldr	r6, [r3, #24]
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 80048de:	615f      	str	r7, [r3, #20]
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 80048e0:	f040 0002 	orr.w	r0, r0, #2
 80048e4:	6448      	str	r0, [r1, #68]	; 0x44
      rccResetTIM8();
 80048e6:	6a48      	ldr	r0, [r1, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80048e8:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <Motor_thread+0x174>)
 80048ea:	f04f 0c70 	mov.w	ip, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80048ee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80048f2:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80048f6:	f646 0768 	movw	r7, #26728	; 0x6868
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
      rccResetTIM8();
 80048fa:	f040 0002 	orr.w	r0, r0, #2
 80048fe:	6248      	str	r0, [r1, #36]	; 0x24
 8004900:	624c      	str	r4, [r1, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004902:	f882 c32c 	strb.w	ip, [r2, #812]	; 0x32c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004906:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800490a:	f8c2 8004 	str.w	r8, [r2, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800490e:	f882 c32e 	strb.w	ip, [r2, #814]	; 0x32e
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004912:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004916:	f8c2 e004 	str.w	lr, [r2, #4]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800491a:	61b7      	str	r7, [r6, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 800491c:	61f7      	str	r7, [r6, #28]
 800491e:	e7c7      	b.n	80048b0 <Motor_thread+0x60>
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004920:	6891      	ldr	r1, [r2, #8]
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004922:	6993      	ldr	r3, [r2, #24]
  pwmp->tim->ARR  = pwmp->period - 1;
 8004924:	1e48      	subs	r0, r1, #1
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004926:	f241 1c11 	movw	ip, #4369	; 0x1111
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 800492a:	2100      	movs	r1, #0
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 800492c:	f04f 0e01 	mov.w	lr, #1
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8004930:	f44f 4700 	mov.w	r7, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004934:	2685      	movs	r6, #133	; 0x85
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004936:	629c      	str	r4, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8004938:	62d8      	str	r0, [r3, #44]	; 0x2c
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 800493a:	2402      	movs	r4, #2
  pwmp->tim->CR2  = pwmp->config->cr2;
 800493c:	6059      	str	r1, [r3, #4]
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 800493e:	f8c3 c020 	str.w	ip, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004942:	f8c3 e014 	str.w	lr, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004946:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004948:	60d9      	str	r1, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 800494a:	645f      	str	r7, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800494c:	601e      	str	r6, [r3, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 800494e:	60d1      	str	r1, [r2, #12]
  pwmp->state = PWM_READY;
 8004950:	7014      	strb	r4, [r2, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004952:	f7fc fa5d 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004956:	f7fb ff7b 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800495a:	682a      	ldr	r2, [r5, #0]
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <Motor_thread+0x13c>)
 800495e:	42aa      	cmp	r2, r5
 8004960:	d004      	beq.n	800496c <Motor_thread+0x11c>
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	6889      	ldr	r1, [r1, #8]
 8004968:	4291      	cmp	r1, r2
 800496a:	d30a      	bcc.n	8004982 <Motor_thread+0x132>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800496c:	2300      	movs	r3, #0
 800496e:	f383 8811 	msr	BASEPRI, r3
  NORMALPRIO + 5,
                    Hall_thread, NULL);

  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);
  motor_pwmUpdate();
 8004972:	f000 f98d 	bl	8004c90 <motor_pwmUpdate>
  motor_init();
  while(true)
  {
    motor_pwmUpdate();
 8004976:	f000 f98b 	bl	8004c90 <motor_pwmUpdate>
    chThdSleepMilliseconds(20);
 800497a:	20c8      	movs	r0, #200	; 0xc8
 800497c:	f7fc fc50 	bl	8001220 <chThdSleep>
 8004980:	e7f9      	b.n	8004976 <Motor_thread+0x126>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004982:	b672      	cpsid	i
 8004984:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <Motor_thread+0x178>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
 8004988:	e7fe      	b.n	8004988 <Motor_thread+0x138>
 800498a:	bf00      	nop
 800498c:	2000bfd8 	.word	0x2000bfd8
 8004990:	08006c38 	.word	0x08006c38
 8004994:	20009da8 	.word	0x20009da8
 8004998:	2000083c 	.word	0x2000083c
 800499c:	08005361 	.word	0x08005361
 80049a0:	2000a320 	.word	0x2000a320
 80049a4:	2000c7cc 	.word	0x2000c7cc
 80049a8:	08006a40 	.word	0x08006a40
 80049ac:	08006aa0 	.word	0x08006aa0
 80049b0:	6642d929 	.word	0x6642d929
 80049b4:	0501bd00 	.word	0x0501bd00
 80049b8:	08006a60 	.word	0x08006a60
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0a037a00 	.word	0x0a037a00
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	08006a50 	.word	0x08006a50
 80049cc:	00000000 	.word	0x00000000

080049d0 <Hall_update>:
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 80049d0:	6803      	ldr	r3, [r0, #0]

  Hall->count += ((Hall->reverse)?
 80049d2:	7942      	ldrb	r2, [r0, #5]
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 80049d4:	68d9      	ldr	r1, [r3, #12]
 80049d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
 80049d8:	b410      	push	{r4}
  uint16_t count = Hall->Timer->tim->CNT;
 80049da:	b29b      	uxth	r3, r3

  Hall->count += ((Hall->reverse)?
 80049dc:	6884      	ldr	r4, [r0, #8]
 80049de:	b1a2      	cbz	r2, 8004a0a <Hall_update+0x3a>
 80049e0:	8982      	ldrh	r2, [r0, #12]
 80049e2:	1a9a      	subs	r2, r3, r2
 80049e4:	4422      	add	r2, r4
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
 80049e6:	f24f 542f 	movw	r4, #62767	; 0xf52f
 80049ea:	42a3      	cmp	r3, r4

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 80049ec:	6082      	str	r2, [r0, #8]
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;
 80049ee:	8183      	strh	r3, [r0, #12]

  if(count > HALL_UPPER_LIMIT)
 80049f0:	d80e      	bhi.n	8004a10 <Hall_update+0x40>
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
  }
  else if (count < HALL_LOWER_LIMIT)
 80049f2:	f640 22ce 	movw	r2, #2766	; 0xace
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d804      	bhi.n	8004a04 <Hall_update+0x34>
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
 80049fa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80049fe:	3330      	adds	r3, #48	; 0x30
 8004a00:	624b      	str	r3, [r1, #36]	; 0x24
    Hall->count_prev += HALL_RANGE;
 8004a02:	8183      	strh	r3, [r0, #12]
  }
}
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	4770      	bx	lr

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 8004a0a:	8982      	ldrh	r2, [r0, #12]
 8004a0c:	1ad2      	subs	r2, r2, r3
 8004a0e:	e7e9      	b.n	80049e4 <Hall_update+0x14>

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
 8004a10:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8004a14:	3b30      	subs	r3, #48	; 0x30
 8004a16:	624b      	str	r3, [r1, #36]	; 0x24
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 8004a18:	f85d 4b04 	ldr.w	r4, [sp], #4
  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
 8004a1c:	8183      	strh	r3, [r0, #12]
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 8004a1e:	4770      	bx	lr

08004a20 <RC_thread.lto_priv.100>:
  rc_channel[2] = RC_GPT.tim->CCR[3];
}

static THD_WORKING_AREA(RC_thread_wa, 64);
static THD_FUNCTION(RC_thread, p)
{
 8004a20:	b508      	push	{r3, lr}
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <RC_thread.lto_priv.100+0x28>)
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <RC_thread.lto_priv.100+0x2c>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	4d09      	ldr	r5, [pc, #36]	; (8004a50 <RC_thread.lto_priv.100+0x30>)
 8004a2a:	4c0a      	ldr	r4, [pc, #40]	; (8004a54 <RC_thread.lto_priv.100+0x34>)
 8004a2c:	619a      	str	r2, [r3, #24]
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004a2e:	68eb      	ldr	r3, [r5, #12]
  chRegSetThreadName("Radio control");

  while (true)
  {
    rc_update();
    chThdSleepMilliseconds(200);
 8004a30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
  rc_channel[1] = RC_GPT.tim->CCR[2];
 8004a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  rc_channel[2] = RC_GPT.tim->CCR[3];
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004a3a:	8021      	strh	r1, [r4, #0]
  rc_channel[1] = RC_GPT.tim->CCR[2];
 8004a3c:	8062      	strh	r2, [r4, #2]
  rc_channel[2] = RC_GPT.tim->CCR[3];
 8004a3e:	80a3      	strh	r3, [r4, #4]
  chRegSetThreadName("Radio control");

  while (true)
  {
    rc_update();
    chThdSleepMilliseconds(200);
 8004a40:	f7fc fbee 	bl	8001220 <chThdSleep>
 8004a44:	e7f3      	b.n	8004a2e <RC_thread.lto_priv.100+0xe>
 8004a46:	bf00      	nop
 8004a48:	2000bfd8 	.word	0x2000bfd8
 8004a4c:	08006d90 	.word	0x08006d90
 8004a50:	2000c7e8 	.word	0x2000c7e8
 8004a54:	2000c998 	.word	0x2000c998
	...

08004a60 <Hall_init>:
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 8004a60:	b538      	push	{r3, r4, r5, lr}
  GPTDriver* Hall_GPT = Hall->Timer;
 8004a62:	6805      	ldr	r5, [r0, #0]

  gptStart(Hall_GPT, &hall_cfg);
 8004a64:	4911      	ldr	r1, [pc, #68]	; (8004aac <Hall_init+0x4c>)
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 8004a66:	4604      	mov	r4, r0
  GPTDriver* Hall_GPT = Hall->Timer;

  gptStart(Hall_GPT, &hall_cfg);
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7fe fa11 	bl	8002e90 <gptStart>

  if (HALL_USE_CHANNEL1_2)
  {
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(1);
 8004a6e:	68eb      	ldr	r3, [r5, #12]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC2S(1);
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7e:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC1F(8);
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a86:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC2F(8);
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a8e:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 8004a90:	689a      	ldr	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 8004a92:	f647 71ff 	movw	r1, #32767	; 0x7fff
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 8004a96:	f042 0203 	orr.w	r2, r2, #3
 8004a9a:	609a      	str	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 8004a9c:	6259      	str	r1, [r3, #36]	; 0x24
  Hall->count_prev = HALL_INITIAL_VALUE;

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 8004a9e:	681a      	ldr	r2, [r3, #0]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
  Hall->count_prev = HALL_INITIAL_VALUE;
 8004aa0:	81a1      	strh	r1, [r4, #12]

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	bf00      	nop
 8004aac:	08006d70 	.word	0x08006d70

08004ab0 <chThdDequeueNextI.constprop.49>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004ab0:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	d010      	beq.n	8004ad8 <chThdDequeueNextI.constprop.49+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	6002      	str	r2, [r0, #0]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 8004aba:	f893 1020 	ldrb.w	r1, [r3, #32]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004abe:	6050      	str	r0, [r2, #4]
 8004ac0:	2904      	cmp	r1, #4
 8004ac2:	d004      	beq.n	8004ace <chThdDequeueNextI.constprop.49+0x1e>
 8004ac4:	b672      	cpsid	i
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <chThdDequeueNextI.constprop.49+0x2c>)
 8004ac8:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <chThdDequeueNextI.constprop.49+0x30>)
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004acc:	e7fe      	b.n	8004acc <chThdDequeueNextI.constprop.49+0x1c>

  tp->p_u.rdymsg = msg;
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc b84c 	b.w	8000b70 <chSchReadyI>
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000bfd8 	.word	0x2000bfd8
 8004ae0:	08006d50 	.word	0x08006d50
	...

08004af0 <_strtok.constprop.13>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	460d      	mov	r5, r1
  char *token;
  if (str)
 8004af4:	4604      	mov	r4, r0
 8004af6:	b190      	cbz	r0, 8004b1e <_strtok.constprop.13+0x2e>
    *saveptr = str;
 8004af8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8004afa:	4620      	mov	r0, r4
 8004afc:	490b      	ldr	r1, [pc, #44]	; (8004b2c <_strtok.constprop.13+0x3c>)
 8004afe:	f000 fc9f 	bl	8005440 <strspn>
 8004b02:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8004b04:	4620      	mov	r0, r4
 8004b06:	4909      	ldr	r1, [pc, #36]	; (8004b2c <_strtok.constprop.13+0x3c>)
 8004b08:	f000 fc72 	bl	80053f0 <strpbrk>
  if (*saveptr)
 8004b0c:	b160      	cbz	r0, 8004b28 <_strtok.constprop.13+0x38>
    *(*saveptr)++ = '\0';
 8004b0e:	1c42      	adds	r2, r0, #1
 8004b10:	2300      	movs	r3, #0
 8004b12:	602a      	str	r2, [r5, #0]
 8004b14:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8004b16:	7823      	ldrb	r3, [r4, #0]
 8004b18:	b123      	cbz	r3, 8004b24 <_strtok.constprop.13+0x34>
 8004b1a:	4620      	mov	r0, r4
}
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8004b1e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d1ea      	bne.n	8004afa <_strtok.constprop.13+0xa>
    return NULL;
 8004b24:	2000      	movs	r0, #0
 8004b26:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8004b28:	6028      	str	r0, [r5, #0]
 8004b2a:	e7f4      	b.n	8004b16 <_strtok.constprop.13+0x26>
 8004b2c:	08006da0 	.word	0x08006da0

08004b30 <long_to_string_with_divisor.constprop.12>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8004b30:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004b32:	f100 070b 	add.w	r7, r0, #11
 8004b36:	463c      	mov	r4, r7
 8004b38:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8004b3a:	fbb1 f6f2 	udiv	r6, r1, r2
 8004b3e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8004b42:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8004b46:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8004b48:	bfc8      	it	gt
 8004b4a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8004b54:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8004b58:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	d1ed      	bne.n	8004b3a <long_to_string_with_divisor.constprop.12+0xa>

  i = (int)(p + MAX_FILLER - q);
 8004b5e:	1b3a      	subs	r2, r7, r4
 8004b60:	4402      	add	r2, r0
 8004b62:	e001      	b.n	8004b68 <long_to_string_with_divisor.constprop.12+0x38>
 8004b64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8004b68:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8004b6c:	4290      	cmp	r0, r2
 8004b6e:	d1f9      	bne.n	8004b64 <long_to_string_with_divisor.constprop.12+0x34>

  return p;
}
 8004b70:	bcf0      	pop	{r4, r5, r6, r7}
 8004b72:	4770      	bx	lr
	...

08004b80 <tft_printf.constprop.7>:
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8004b80:	b40c      	push	{r2, r3}
 8004b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b86:	b0c6      	sub	sp, #280	; 0x118
 8004b88:	aa4e      	add	r2, sp, #312	; 0x138
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8004b8a:	ac06      	add	r4, sp, #24
 8004b8c:	f852 3b04 	ldr.w	r3, [r2], #4
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8004b90:	4f36      	ldr	r7, [pc, #216]	; (8004c6c <tft_printf.constprop.7+0xec>)
	va_list arglist;

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
 8004b92:	9200      	str	r2, [sp, #0]
  msp->buffer = buffer;
  msp->size   = size;
  msp->eos    = eos;
 8004b94:	2600      	movs	r6, #0
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8004b96:	460d      	mov	r5, r1

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
 8004b98:	a801      	add	r0, sp, #4
 8004b9a:	4619      	mov	r1, r3
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
  msp->size   = size;
 8004b9c:	23ff      	movs	r3, #255	; 0xff
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8004b9e:	9701      	str	r7, [sp, #4]
  msp->buffer = buffer;
  msp->size   = size;
 8004ba0:	9303      	str	r3, [sp, #12]
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8004ba2:	9402      	str	r4, [sp, #8]
  msp->size   = size;
  msp->eos    = eos;
 8004ba4:	9604      	str	r6, [sp, #16]
  msp->offset = 0;
 8004ba6:	9605      	str	r6, [sp, #20]
 8004ba8:	f7fe fd92 	bl	80036d0 <chvprintf>
  va_end(arglist);

  if (ms.eos < 255)
 8004bac:	9b04      	ldr	r3, [sp, #16]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004bae:	4930      	ldr	r1, [pc, #192]	; (8004c70 <tft_printf.constprop.7+0xf0>)
 8004bb0:	4a30      	ldr	r2, [pc, #192]	; (8004c74 <tft_printf.constprop.7+0xf4>)
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8004bb2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8004c84 <tft_printf.constprop.7+0x104>
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004bb6:	4f30      	ldr	r7, [pc, #192]	; (8004c78 <tft_printf.constprop.7+0xf8>)
 8004bb8:	f8b1 9000 	ldrh.w	r9, [r1]
 8004bbc:	f8b2 8000 	ldrh.w	r8, [r2]
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
  va_end(arglist);

  if (ms.eos < 255)
 8004bc0:	2bfe      	cmp	r3, #254	; 0xfe
      buf[ms.eos] = 0;
 8004bc2:	bf98      	it	ls
 8004bc4:	54e6      	strbls	r6, [r4, r3]
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <tft_printf.constprop.7+0xfc>)
 8004bc8:	4e2d      	ldr	r6, [pc, #180]	; (8004c80 <tft_printf.constprop.7+0x100>)
 8004bca:	f8b3 c000 	ldrh.w	ip, [r3]
 8004bce:	4622      	mov	r2, r4
 8004bd0:	2105      	movs	r1, #5
 8004bd2:	2400      	movs	r4, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8004bd4:	7813      	ldrb	r3, [r2, #0]
 8004bd6:	b33b      	cbz	r3, 8004c28 <tft_printf.constprop.7+0xa8>
		if (*fp == '[' && *(fp - 1) != '\\') {
 8004bd8:	2b5b      	cmp	r3, #91	; 0x5b
 8004bda:	d02c      	beq.n	8004c36 <tft_printf.constprop.7+0xb6>
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8004bdc:	2b5d      	cmp	r3, #93	; 0x5d
 8004bde:	d031      	beq.n	8004c44 <tft_printf.constprop.7+0xc4>
			is_special = 0;
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
 8004be0:	2b0d      	cmp	r3, #13
 8004be2:	d026      	beq.n	8004c32 <tft_printf.constprop.7+0xb2>
 8004be4:	2b0a      	cmp	r3, #10
 8004be6:	d024      	beq.n	8004c32 <tft_printf.constprop.7+0xb2>
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
 8004be8:	2914      	cmp	r1, #20
 8004bea:	d822      	bhi.n	8004c32 <tft_printf.constprop.7+0xb2>
 8004bec:	2d0a      	cmp	r5, #10
 8004bee:	d820      	bhi.n	8004c32 <tft_printf.constprop.7+0xb2>
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8004bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8004bf2:	d032      	beq.n	8004c5a <tft_printf.constprop.7+0xda>
        fp++;
      }
			text[x][y] = *fp++;
 8004bf4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8004bf8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	46ca      	movne	sl, r9
 8004c02:	46c2      	moveq	sl, r8
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8004c04:	2914      	cmp	r1, #20
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8004c06:	f102 0201 	add.w	r2, r2, #1
 8004c0a:	f80e 3000 	strb.w	r3, [lr, r0]
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8004c0e:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004c12:	f827 a010 	strh.w	sl, [r7, r0, lsl #1]
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8004c16:	d01c      	beq.n	8004c52 <tft_printf.constprop.7+0xd2>
				x = 0;
				y++;
			} else {
				x++;
 8004c18:	3101      	adds	r1, #1
 8004c1a:	b2c9      	uxtb	r1, r1
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8004c1c:	7813      	ldrb	r3, [r2, #0]
				y++;
			} else {
				x++;
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
 8004c1e:	2d0a      	cmp	r5, #10
 8004c20:	bf28      	it	cs
 8004c22:	2500      	movcs	r5, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1d7      	bne.n	8004bd8 <tft_printf.constprop.7+0x58>
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
		}
	}
}
 8004c28:	b046      	add	sp, #280	; 0x118
 8004c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2e:	b002      	add	sp, #8
 8004c30:	4770      	bx	lr
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
 8004c32:	3201      	adds	r2, #1
 8004c34:	e7ce      	b.n	8004bd4 <tft_printf.constprop.7+0x54>
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
 8004c36:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8004c3a:	285c      	cmp	r0, #92	; 0x5c
 8004c3c:	d0d4      	beq.n	8004be8 <tft_printf.constprop.7+0x68>
			is_special = 1;
			fp++;
 8004c3e:	3201      	adds	r2, #1

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
 8004c40:	2401      	movs	r4, #1
 8004c42:	e7c7      	b.n	8004bd4 <tft_printf.constprop.7+0x54>
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8004c44:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8004c48:	285c      	cmp	r0, #92	; 0x5c
 8004c4a:	d0cd      	beq.n	8004be8 <tft_printf.constprop.7+0x68>
			is_special = 0;
			fp++;
 8004c4c:	3201      	adds	r2, #1
	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
			is_special = 0;
 8004c4e:	2400      	movs	r4, #0
 8004c50:	e7c0      	b.n	8004bd4 <tft_printf.constprop.7+0x54>
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
				y++;
 8004c52:	3501      	adds	r5, #1
 8004c54:	b2ed      	uxtb	r5, r5
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
 8004c56:	2100      	movs	r1, #0
 8004c58:	e7e0      	b.n	8004c1c <tft_printf.constprop.7+0x9c>
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8004c5a:	7850      	ldrb	r0, [r2, #1]
 8004c5c:	285b      	cmp	r0, #91	; 0x5b
 8004c5e:	d001      	beq.n	8004c64 <tft_printf.constprop.7+0xe4>
 8004c60:	285d      	cmp	r0, #93	; 0x5d
 8004c62:	d1c7      	bne.n	8004bf4 <tft_printf.constprop.7+0x74>
        fp++;
 8004c64:	3201      	adds	r2, #1
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8004c66:	4603      	mov	r3, r0
 8004c68:	e7c4      	b.n	8004bf4 <tft_printf.constprop.7+0x74>
 8004c6a:	bf00      	nop
 8004c6c:	08006e00 	.word	0x08006e00
 8004c70:	2000c99e 	.word	0x2000c99e
 8004c74:	2000bfd0 	.word	0x2000bfd0
 8004c78:	2000c7f8 	.word	0x2000c7f8
 8004c7c:	2000c7c8 	.word	0x2000c7c8
 8004c80:	2000bc70 	.word	0x2000bc70
 8004c84:	2000be30 	.word	0x2000be30
	...

08004c90 <motor_pwmUpdate>:
}

void motor_pwmUpdate(void)
{
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <motor_pwmUpdate+0x10c>)
 8004c96:	799a      	ldrb	r2, [r3, #6]
 8004c98:	ed93 7a02 	vldr	s14, [r3, #8]
  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);
  motor_pwmUpdate();
}

void motor_pwmUpdate(void)
{
 8004c9c:	b082      	sub	sp, #8
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
 8004c9e:	b10a      	cbz	r2, 8004ca4 <motor_pwmUpdate+0x14>
 8004ca0:	eeb1 7a47 	vneg.f32	s14, s14
 8004ca4:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <motor_pwmUpdate+0x10c>)
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;
 8004ca6:	7e99      	ldrb	r1, [r3, #26]
  motor_pwmUpdate();
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
 8004ca8:	ed83 7a03 	vstr	s14, [r3, #12]
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;
 8004cac:	edd2 7a07 	vldr	s15, [r2, #28]
 8004cb0:	b109      	cbz	r1, 8004cb6 <motor_pwmUpdate+0x26>
 8004cb2:	eef1 7a67 	vneg.f32	s15, s15

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004cb6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;
 8004cbe:	edc3 7a08 	vstr	s15, [r3, #32]

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004cc2:	dd68      	ble.n	8004d96 <motor_pwmUpdate+0x106>
 8004cc4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004da0 <motor_pwmUpdate+0x110>
 8004cc8:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004ccc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004cd0:	edcd 6a01 	vstr	s13, [sp, #4]
 8004cd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004cd8:	4615      	mov	r5, r2
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004cda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;

  motors[0].pwmA =
 8004ce2:	821a      	strh	r2, [r3, #16]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004ce4:	d44b      	bmi.n	8004d7e <motor_pwmUpdate+0xee>
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	4632      	mov	r2, r6

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
 8004cf2:	825a      	strh	r2, [r3, #18]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004cf4:	dd40      	ble.n	8004d78 <motor_pwmUpdate+0xe8>
 8004cf6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004da0 <motor_pwmUpdate+0x110>
 8004cfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cfe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004d02:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004d06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004d0a:	4617      	mov	r7, r2
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
 8004d14:	849a      	strh	r2, [r3, #36]	; 0x24
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004d16:	d423      	bmi.n	8004d60 <motor_pwmUpdate+0xd0>
 8004d18:	f04f 0e00 	mov.w	lr, #0
 8004d1c:	4672      	mov	r2, lr

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d1e:	4921      	ldr	r1, [pc, #132]	; (8004da4 <motor_pwmUpdate+0x114>)
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004d20:	795c      	ldrb	r4, [r3, #5]
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d22:	f893 c004 	ldrb.w	ip, [r3, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004d26:	7e18      	ldrb	r0, [r3, #24]
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 8004d28:	f893 8019 	ldrb.w	r8, [r3, #25]
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d2c:	6989      	ldr	r1, [r1, #24]
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
 8004d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d30:	f10c 0c0c 	add.w	ip, ip, #12
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004d34:	f104 020c 	add.w	r2, r4, #12

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004d38:	f100 030c 	add.w	r3, r0, #12
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 8004d3c:	f108 040c 	add.w	r4, r8, #12
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d40:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004d44:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004d48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 8004d4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004d50:	6045      	str	r5, [r0, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004d52:	6056      	str	r6, [r2, #4]

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004d54:	605f      	str	r7, [r3, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 8004d56:	f8c1 e004 	str.w	lr, [r1, #4]
}
 8004d5a:	b002      	add	sp, #8
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004d60:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004da0 <motor_pwmUpdate+0x110>
 8004d64:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	edcd 7a01 	vstr	s15, [sp, #4]
 8004d70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004d74:	4696      	mov	lr, r2
 8004d76:	e7d2      	b.n	8004d1e <motor_pwmUpdate+0x8e>
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004d78:	2700      	movs	r7, #0
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	e7c6      	b.n	8004d0c <motor_pwmUpdate+0x7c>
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004d7e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8004da0 <motor_pwmUpdate+0x110>
 8004d82:	ee27 7a66 	vnmul.f32	s14, s14, s13
 8004d86:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004d8a:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004d8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004d92:	4616      	mov	r6, r2
 8004d94:	e7a9      	b.n	8004cea <motor_pwmUpdate+0x5a>
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input : motors[0].input;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input : motors[1].input;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004d96:	2500      	movs	r5, #0
 8004d98:	462a      	mov	r2, r5
 8004d9a:	e79e      	b.n	8004cda <motor_pwmUpdate+0x4a>
 8004d9c:	2000083c 	.word	0x2000083c
 8004da0:	457a0000 	.word	0x457a0000
 8004da4:	2000c7cc 	.word	0x2000c7cc
	...

08004db0 <tft_char_is_changed>:
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8004db4:	0086      	lsls	r6, r0, #2
 8004db6:	1833      	adds	r3, r6, r0
 8004db8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 8004dbc:	4602      	mov	r2, r0
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8004dbe:	4c18      	ldr	r4, [pc, #96]	; (8004e20 <tft_char_is_changed+0x70>)
 8004dc0:	4818      	ldr	r0, [pc, #96]	; (8004e24 <tft_char_is_changed+0x74>)
 8004dc2:	5cc5      	ldrb	r5, [r0, r3]
 8004dc4:	5ce0      	ldrb	r0, [r4, r3]
 8004dc6:	42a8      	cmp	r0, r5
 8004dc8:	d013      	beq.n	8004df2 <tft_char_is_changed+0x42>
 8004dca:	4f17      	ldr	r7, [pc, #92]	; (8004e28 <tft_char_is_changed+0x78>)
 8004dcc:	4817      	ldr	r0, [pc, #92]	; (8004e2c <tft_char_is_changed+0x7c>)
 8004dce:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8004dd2:	f8df c060 	ldr.w	ip, [pc, #96]	; 8004e34 <tft_char_is_changed+0x84>
 8004dd6:	4f16      	ldr	r7, [pc, #88]	; (8004e30 <tft_char_is_changed+0x80>)
 8004dd8:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8004ddc:	2001      	movs	r0, #1
	text_prev[x][y] = text[x][y];
 8004dde:	4432      	add	r2, r6
 8004de0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8004de4:	5465      	strb	r5, [r4, r1]
	text_color_prev[x][y] = text_color[x][y];
 8004de6:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
	bg_color_prev[x][y] = bg_color[x][y];
 8004dea:	f82c 8011 	strh.w	r8, [ip, r1, lsl #1]
	return re;
}
 8004dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8004df2:	4f0f      	ldr	r7, [pc, #60]	; (8004e30 <tft_char_is_changed+0x80>)
 8004df4:	f8df e030 	ldr.w	lr, [pc, #48]	; 8004e28 <tft_char_is_changed+0x78>
 8004df8:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 8004dfc:	f83e e013 	ldrh.w	lr, [lr, r3, lsl #1]
 8004e00:	f8df c030 	ldr.w	ip, [pc, #48]	; 8004e34 <tft_char_is_changed+0x84>
 8004e04:	4570      	cmp	r0, lr
 8004e06:	4809      	ldr	r0, [pc, #36]	; (8004e2c <tft_char_is_changed+0x7c>)
 8004e08:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8004e0c:	d001      	beq.n	8004e12 <tft_char_is_changed+0x62>
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7e5      	b.n	8004dde <tft_char_is_changed+0x2e>
 8004e12:	f83c 0013 	ldrh.w	r0, [ip, r3, lsl #1]
 8004e16:	ebb0 0008 	subs.w	r0, r0, r8
 8004e1a:	bf18      	it	ne
 8004e1c:	2001      	movne	r0, #1
 8004e1e:	e7de      	b.n	8004dde <tft_char_is_changed+0x2e>
 8004e20:	2000bf08 	.word	0x2000bf08
 8004e24:	2000be30 	.word	0x2000be30
 8004e28:	2000c7f8 	.word	0x2000c7f8
 8004e2c:	2000bc70 	.word	0x2000bc70
 8004e30:	2000c638 	.word	0x2000c638
 8004e34:	2000c9d8 	.word	0x2000c9d8
	...

08004e40 <tft_set_char_pos>:
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	4607      	mov	r7, r0
	tft_write_command(0x2a);		// Column addr set
 8004e44:	202a      	movs	r0, #42	; 0x2a
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8004e46:	460d      	mov	r5, r1
 8004e48:	4616      	mov	r6, r2
 8004e4a:	461c      	mov	r4, r3
	tft_write_command(0x2a);		// Column addr set
 8004e4c:	f7ff f908 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7ff f8ed 	bl	8004030 <tft_write_data>
	tft_write_data(x1); 			//X START
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff f8ea 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7ff f8e7 	bl	8004030 <tft_write_data>
	tft_write_data(x2); 			//X END
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7ff f8e4 	bl	8004030 <tft_write_data>

	tft_write_command(0x2b);		//Row addr set
 8004e68:	202b      	movs	r0, #43	; 0x2b
 8004e6a:	f7ff f8f9 	bl	8004060 <tft_write_command>
	tft_write_data(0x00);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7ff f8de 	bl	8004030 <tft_write_data>
	tft_write_data(y1);			//Y START
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7ff f8db 	bl	8004030 <tft_write_data>
	tft_write_data(0x00);
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7ff f8d8 	bl	8004030 <tft_write_data>
	tft_write_data(y2);		//Y END
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff f8d5 	bl	8004030 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 8004e86:	202c      	movs	r0, #44	; 0x2c
}
 8004e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tft_write_data(0x00);
	tft_write_data(y1);			//Y START
	tft_write_data(0x00);
	tft_write_data(y2);		//Y END

	tft_write_command(0x2c); 		// write to RAM
 8004e8c:	f7ff b8e8 	b.w	8004060 <tft_write_command>

08004e90 <chMtxUnlock.constprop.48>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  thread_t *ctp = currp;
 8004e94:	4c35      	ldr	r4, [pc, #212]	; (8004f6c <chMtxUnlock.constprop.48+0xdc>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004e96:	2320      	movs	r3, #32
 8004e98:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8004ea0:	f7fb fcee 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004ea4:	f7fb ffc4 	bl	8000e30 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->p_mtxlist != NULL, "owned mutexes list empty");
 8004ea8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8004eac:	b133      	cbz	r3, 8004ebc <chMtxUnlock.constprop.48+0x2c>
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp, "ownership failure");
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4590      	cmp	r8, r2
 8004eb2:	d007      	beq.n	8004ec4 <chMtxUnlock.constprop.48+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb4:	b672      	cpsid	i
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <chMtxUnlock.constprop.48+0xe0>)
 8004eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eba:	e7fe      	b.n	8004eba <chMtxUnlock.constprop.48+0x2a>
 8004ebc:	b672      	cpsid	i
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <chMtxUnlock.constprop.48+0xe0>)
 8004ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ec2:	e7fe      	b.n	8004ec2 <chMtxUnlock.constprop.48+0x32>
  chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->m_cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");
 8004ec4:	4d2b      	ldr	r5, [pc, #172]	; (8004f74 <chMtxUnlock.constprop.48+0xe4>)
 8004ec6:	f105 090c 	add.w	r9, r5, #12
 8004eca:	454b      	cmp	r3, r9
 8004ecc:	d003      	beq.n	8004ed6 <chMtxUnlock.constprop.48+0x46>
 8004ece:	b672      	cpsid	i
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <chMtxUnlock.constprop.48+0xe0>)
 8004ed2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ed4:	e7fe      	b.n	8004ed4 <chMtxUnlock.constprop.48+0x44>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8004ed6:	69ae      	ldr	r6, [r5, #24]
 8004ed8:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8004edc:	f7fb fd20 	bl	8000920 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004ee0:	68ef      	ldr	r7, [r5, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004ee2:	454f      	cmp	r7, r9
 8004ee4:	d03a      	beq.n	8004f5c <chMtxUnlock.constprop.48+0xcc>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8004ee6:	f8d8 a040 	ldr.w	sl, [r8, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8004eea:	b15e      	cbz	r6, 8004f04 <chMtxUnlock.constprop.48+0x74>
 8004eec:	f7fb fd18 	bl	8000920 <chDbgCheckClassS>
 8004ef0:	6833      	ldr	r3, [r6, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	d003      	beq.n	8004efe <chMtxUnlock.constprop.48+0x6e>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	459a      	cmp	sl, r3
 8004efa:	bf38      	it	cc
 8004efc:	469a      	movcc	sl, r3
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8004efe:	68f6      	ldr	r6, [r6, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8004f00:	2e00      	cmp	r6, #0
 8004f02:	d1f3      	bne.n	8004eec <chMtxUnlock.constprop.48+0x5c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004f04:	683b      	ldr	r3, [r7, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8004f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8004f08:	f8c8 a008 	str.w	sl, [r8, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	60eb      	str	r3, [r5, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004f10:	f8c3 9004 	str.w	r9, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8004f14:	61aa      	str	r2, [r5, #24]
      tp->p_mtxlist = mp;
 8004f16:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8004f1a:	616f      	str	r7, [r5, #20]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8004f1c:	f7fb fe28 	bl	8000b70 <chSchReadyI>
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();
 8004f20:	f7fb fcfe 	bl	8000920 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8004f24:	f7fb fd44 	bl	80009b0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8004f28:	69a2      	ldr	r2, [r4, #24]
 8004f2a:	6823      	ldr	r3, [r4, #0]

  if (chSchIsRescRequiredI()) {
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d201      	bcs.n	8004f38 <chMtxUnlock.constprop.48+0xa8>
    chSchDoRescheduleAhead();
 8004f34:	f7fb fcac 	bl	8000890 <chSchDoRescheduleAhead>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004f38:	f7fb ff6a 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004f3c:	f7fb fc88 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <chMtxUnlock.constprop.48+0xdc>)
 8004f44:	42a2      	cmp	r2, r4
 8004f46:	d004      	beq.n	8004f52 <chMtxUnlock.constprop.48+0xc2>
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	6889      	ldr	r1, [r1, #8]
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	d307      	bcc.n	8004f62 <chMtxUnlock.constprop.48+0xd2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004f52:	2300      	movs	r3, #0
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      chSchRescheduleS();
    }
    else {
      mp->m_owner = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	616b      	str	r3, [r5, #20]
 8004f60:	e7ea      	b.n	8004f38 <chMtxUnlock.constprop.48+0xa8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f62:	b672      	cpsid	i
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <chMtxUnlock.constprop.48+0xe8>)
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f68:	e7fe      	b.n	8004f68 <chMtxUnlock.constprop.48+0xd8>
 8004f6a:	bf00      	nop
 8004f6c:	2000bfd8 	.word	0x2000bfd8
 8004f70:	08006dd0 	.word	0x08006dd0
 8004f74:	2000c9a0 	.word	0x2000c9a0
 8004f78:	08006ce0 	.word	0x08006ce0
 8004f7c:	00000000 	.word	0x00000000

08004f80 <i2cMasterTransmitTimeout.constprop.35>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8004f84:	b159      	cbz	r1, 8004f9e <i2cMasterTransmitTimeout.constprop.35+0x1e>
 8004f86:	b150      	cbz	r0, 8004f9e <i2cMasterTransmitTimeout.constprop.35+0x1e>
 8004f88:	b103      	cbz	r3, 8004f8c <i2cMasterTransmitTimeout.constprop.35+0xc>
 8004f8a:	b142      	cbz	r2, 8004f9e <i2cMasterTransmitTimeout.constprop.35+0x1e>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8004f8c:	4c59      	ldr	r4, [pc, #356]	; (80050f4 <i2cMasterTransmitTimeout.constprop.35+0x174>)
 8004f8e:	7825      	ldrb	r5, [r4, #0]
 8004f90:	2d02      	cmp	r5, #2
 8004f92:	d009      	beq.n	8004fa8 <i2cMasterTransmitTimeout.constprop.35+0x28>
 8004f94:	b672      	cpsid	i
 8004f96:	4b58      	ldr	r3, [pc, #352]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 8004f98:	4a58      	ldr	r2, [pc, #352]	; (80050fc <i2cMasterTransmitTimeout.constprop.35+0x17c>)
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f9c:	e7fe      	b.n	8004f9c <i2cMasterTransmitTimeout.constprop.35+0x1c>
 8004f9e:	b672      	cpsid	i
 8004fa0:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 8004fa2:	4a56      	ldr	r2, [pc, #344]	; (80050fc <i2cMasterTransmitTimeout.constprop.35+0x17c>)
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fa6:	e7fe      	b.n	8004fa6 <i2cMasterTransmitTimeout.constprop.35+0x26>
 8004fa8:	461e      	mov	r6, r3
 8004faa:	4688      	mov	r8, r1
 8004fac:	4617      	mov	r7, r2
 8004fae:	4681      	mov	r9, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	4d50      	ldr	r5, [pc, #320]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8004fb8:	f7fb fc62 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004fbc:	f7fb ff38 	bl	8000e30 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8004fc0:	2203      	movs	r2, #3
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8004fc2:	2100      	movs	r1, #0

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8004fc4:	23d0      	movs	r3, #208	; 0xd0
  i2cp->state = I2C_ACTIVE_TX;
 8004fc6:	7022      	strb	r2, [r4, #0]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8004fc8:	60a1      	str	r1, [r4, #8]
 8004fca:	8423      	strh	r3, [r4, #32]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 8004fcc:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004fd0:	f7fb ff1e 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004fd4:	f7fb fc3c 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004fd8:	682a      	ldr	r2, [r5, #0]
 8004fda:	42aa      	cmp	r2, r5
 8004fdc:	d004      	beq.n	8004fe8 <i2cMasterTransmitTimeout.constprop.35+0x68>
 8004fde:	69ab      	ldr	r3, [r5, #24]
 8004fe0:	6892      	ldr	r2, [r2, #8]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d356      	bcc.n	8005096 <i2cMasterTransmitTimeout.constprop.35+0x116>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8004fee:	6b22      	ldr	r2, [r4, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8004ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8004ff2:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8004ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ffc:	4840      	ldr	r0, [pc, #256]	; (8005100 <i2cMasterTransmitTimeout.constprop.35+0x180>)
 8004ffe:	600b      	str	r3, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8005000:	f8c1 900c 	str.w	r9, [r1, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8005004:	f8c1 8004 	str.w	r8, [r1, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005008:	f8c2 e000 	str.w	lr, [r2]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800500c:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800500e:	6056      	str	r6, [r2, #4]
 8005010:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8005014:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>
 8005018:	4606      	mov	r6, r0
 800501a:	2720      	movs	r7, #32
 800501c:	f387 8811 	msr	BASEPRI, r7
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005020:	f7fb fc2e 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005024:	f7fb ff04 	bl	8000e30 <_dbg_check_lock>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8005028:	f8da 3018 	ldr.w	r3, [sl, #24]
 800502c:	0799      	lsls	r1, r3, #30
 800502e:	d403      	bmi.n	8005038 <i2cMasterTransmitTimeout.constprop.35+0xb8>
 8005030:	f8da 3000 	ldr.w	r3, [sl]
 8005034:	059a      	lsls	r2, r3, #22
 8005036:	d532      	bpl.n	800509e <i2cMasterTransmitTimeout.constprop.35+0x11e>
 8005038:	6a73      	ldr	r3, [r6, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 800503a:	ebc9 0303 	rsb	r3, r9, r3
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 800503e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005042:	d211      	bcs.n	8005068 <i2cMasterTransmitTimeout.constprop.35+0xe8>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005044:	f7fb fee4 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005048:	f7fb fc02 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800504c:	682a      	ldr	r2, [r5, #0]
 800504e:	492a      	ldr	r1, [pc, #168]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 8005050:	42aa      	cmp	r2, r5
 8005052:	d005      	beq.n	8005060 <i2cMasterTransmitTimeout.constprop.35+0xe0>
 8005054:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4293      	cmp	r3, r2
 800505e:	d341      	bcc.n	80050e4 <i2cMasterTransmitTimeout.constprop.35+0x164>
 8005060:	2300      	movs	r3, #0
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	e7d9      	b.n	800501c <i2cMasterTransmitTimeout.constprop.35+0x9c>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8005068:	2305      	movs	r3, #5
 800506a:	7023      	strb	r3, [r4, #0]
 800506c:	f04f 36ff 	mov.w	r6, #4294967295
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005070:	f7fb fece 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005074:	f7fb fbec 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005078:	682a      	ldr	r2, [r5, #0]
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 800507c:	42aa      	cmp	r2, r5
 800507e:	d004      	beq.n	800508a <i2cMasterTransmitTimeout.constprop.35+0x10a>
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	6889      	ldr	r1, [r1, #8]
 8005086:	4291      	cmp	r1, r2
 8005088:	d330      	bcc.n	80050ec <i2cMasterTransmitTimeout.constprop.35+0x16c>
 800508a:	2300      	movs	r3, #0
 800508c:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8005090:	4630      	mov	r0, r6
 8005092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005096:	b672      	cpsid	i
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <i2cMasterTransmitTimeout.constprop.35+0x184>)
 800509a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800509c:	e7fe      	b.n	800509c <i2cMasterTransmitTimeout.constprop.35+0x11c>

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800509e:	f8da 3004 	ldr.w	r3, [sl, #4]
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 80050a2:	69e0      	ldr	r0, [r4, #28]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80050a4:	69aa      	ldr	r2, [r5, #24]
 80050a6:	4914      	ldr	r1, [pc, #80]	; (80050f8 <i2cMasterTransmitTimeout.constprop.35+0x178>)
 80050a8:	4f12      	ldr	r7, [pc, #72]	; (80050f4 <i2cMasterTransmitTimeout.constprop.35+0x174>)
 80050aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ae:	f8ca 3004 	str.w	r3, [sl, #4]
  dp->CR1 |= I2C_CR1_START;
 80050b2:	f8da 3000 	ldr.w	r3, [sl]
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	f8ca 3000 	str.w	r3, [sl]
 80050be:	b118      	cbz	r0, 80050c8 <i2cMasterTransmitTimeout.constprop.35+0x148>
 80050c0:	b672      	cpsid	i
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <i2cMasterTransmitTimeout.constprop.35+0x188>)
 80050c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80050c6:	e7fe      	b.n	80050c6 <i2cMasterTransmitTimeout.constprop.35+0x146>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80050c8:	463b      	mov	r3, r7
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80050ca:	2003      	movs	r0, #3

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80050cc:	f843 2f1c 	str.w	r2, [r3, #28]!
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80050d0:	210a      	movs	r1, #10
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 80050d2:	6253      	str	r3, [r2, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80050d4:	f7fb fc7c 	bl	80009d0 <chSchGoSleepTimeoutS>
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	4606      	mov	r6, r0
 80050dc:	d0c4      	beq.n	8005068 <i2cMasterTransmitTimeout.constprop.35+0xe8>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 80050de:	2302      	movs	r3, #2
 80050e0:	703b      	strb	r3, [r7, #0]
 80050e2:	e7c5      	b.n	8005070 <i2cMasterTransmitTimeout.constprop.35+0xf0>
 80050e4:	b672      	cpsid	i
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <i2cMasterTransmitTimeout.constprop.35+0x184>)
 80050e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80050ea:	e7fe      	b.n	80050ea <i2cMasterTransmitTimeout.constprop.35+0x16a>
 80050ec:	b672      	cpsid	i
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <i2cMasterTransmitTimeout.constprop.35+0x18c>)
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050f2:	e7fe      	b.n	80050f2 <i2cMasterTransmitTimeout.constprop.35+0x172>
 80050f4:	2000c9a0 	.word	0x2000c9a0
 80050f8:	2000bfd8 	.word	0x2000bfd8
 80050fc:	08006d30 	.word	0x08006d30
 8005100:	40000c00 	.word	0x40000c00
 8005104:	08006d10 	.word	0x08006d10
 8005108:	08006de0 	.word	0x08006de0
 800510c:	08006cf0 	.word	0x08006cf0

08005110 <MPU_Read_Len.constprop.4>:
//reg:Ҫ��ȡ�ļĴ�����ַ
//len:Ҫ��ȡ�ĳ���
//buf:��ȡ�������ݴ洢��
//����ֵ:0,����
//    ����,��������
uint8_t MPU_Read_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
 8005110:	b530      	push	{r4, r5, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	b083      	sub	sp, #12
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8005116:	480c      	ldr	r0, [pc, #48]	; (8005148 <MPU_Read_Len.constprop.4+0x38>)
 8005118:	460d      	mov	r5, r1
 800511a:	f7fb ffd1 	bl	80010c0 <chMtxLock>
{
 	i2cAcquireBus(MPU_I2C);

	uint8_t txbuf = reg;
 800511e:	a802      	add	r0, sp, #8

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, &txbuf, 1,
 8005120:	462a      	mov	r2, r5
//    ����,��������
uint8_t MPU_Read_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 	i2cAcquireBus(MPU_I2C);

	uint8_t txbuf = reg;
 8005122:	f800 4d01 	strb.w	r4, [r0, #-1]!

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, &txbuf, 1,
 8005126:	2101      	movs	r1, #1
 8005128:	2306      	movs	r3, #6
 800512a:	f7ff ff29 	bl	8004f80 <i2cMasterTransmitTimeout.constprop.35>
 800512e:	4604      	mov	r4, r0
 8005130:	b920      	cbnz	r0, 800513c <MPU_Read_Len.constprop.4+0x2c>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8005132:	f7ff fead 	bl	8004e90 <chMtxUnlock.constprop.48>
	{
		i2cReleaseBus(MPU_I2C);
		return 1;
	}
  i2cReleaseBus(MPU_I2C);	//����һ��ֹͣ����
	return 0;
 8005136:	4620      	mov	r0, r4
}
 8005138:	b003      	add	sp, #12
 800513a:	bd30      	pop	{r4, r5, pc}
 800513c:	f7ff fea8 	bl	8004e90 <chMtxUnlock.constprop.48>

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, &txbuf, 1,
    buf, len, MS2ST(MPU6050_READ_TIMEOUT_MS)) != MSG_OK)	//�ȴ�Ӧ��
	{
		i2cReleaseBus(MPU_I2C);
		return 1;
 8005140:	2001      	movs	r0, #1
	}
  i2cReleaseBus(MPU_I2C);	//����һ��ֹͣ����
	return 0;
}
 8005142:	b003      	add	sp, #12
 8005144:	bd30      	pop	{r4, r5, pc}
 8005146:	bf00      	nop
 8005148:	2000c9ac 	.word	0x2000c9ac
 800514c:	00000000 	.word	0x00000000

08005150 <MPU_Write_Byte>:
//reg:�Ĵ�����ַ
//data:����
//����ֵ:0,����
//    ����,��������
uint8_t MPU_Write_Byte(uint8_t reg, uint8_t data)
{
 8005150:	b510      	push	{r4, lr}
 8005152:	b082      	sub	sp, #8
	uint8_t txbuf[2] = {reg,data};
 8005154:	f88d 0004 	strb.w	r0, [sp, #4]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8005158:	480a      	ldr	r0, [pc, #40]	; (8005184 <MPU_Write_Byte+0x34>)
 800515a:	f88d 1005 	strb.w	r1, [sp, #5]
 800515e:	f7fb ffaf 	bl	80010c0 <chMtxLock>

	i2cAcquireBus(MPU_I2C);

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, txbuf, 2,
 8005162:	2200      	movs	r2, #0
 8005164:	4613      	mov	r3, r2
 8005166:	a801      	add	r0, sp, #4
 8005168:	2102      	movs	r1, #2
 800516a:	f7ff ff09 	bl	8004f80 <i2cMasterTransmitTimeout.constprop.35>
 800516e:	4604      	mov	r4, r0
 8005170:	b920      	cbnz	r0, 800517c <MPU_Write_Byte+0x2c>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8005172:	f7ff fe8d 	bl	8004e90 <chMtxUnlock.constprop.48>
		i2cReleaseBus(MPU_I2C);
		return 1;
	}

	i2cReleaseBus(MPU_I2C);
	return 0;
 8005176:	4620      	mov	r0, r4
}
 8005178:	b002      	add	sp, #8
 800517a:	bd10      	pop	{r4, pc}
 800517c:	f7ff fe88 	bl	8004e90 <chMtxUnlock.constprop.48>

	if(i2cMasterTransmitTimeout(MPU_I2C, MPU6050_I2C_ADDR_USER, txbuf, 2,
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS)))	//�ȴ�Ӧ��
	{
		i2cReleaseBus(MPU_I2C);
		return 1;
 8005180:	2001      	movs	r0, #1
 8005182:	e7f9      	b.n	8005178 <MPU_Write_Byte+0x28>
 8005184:	2000c9ac 	.word	0x2000c9ac
	...

08005190 <MPU_Set_Rate.constprop.1>:
}
//����MPU6050�Ĳ�����(�ٶ�Fs=1KHz)
//rate:4~1000(Hz)
//����ֵ:0,���óɹ�
//    ����,����ʧ��
uint8_t MPU_Set_Rate(uint16_t rate)
 8005190:	b508      	push	{r3, lr}
{
	uint8_t data;
	if(rate>1000)rate=1000;
	if(rate<4)rate=4;
	data=1000/rate-1;
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//�������ֵ�ͨ�˲���
 8005192:	2109      	movs	r1, #9
 8005194:	2019      	movs	r0, #25
 8005196:	f7ff ffdb 	bl	8005150 <MPU_Write_Byte>
	else if(lpf>=98)data=2;
	else if(lpf>=42)data=3;
	else if(lpf>=20)data=4;
	else if(lpf>=10)data=5;
	else data=6;
	return MPU_Write_Byte(MPU_CFG_REG,data);//�������ֵ�ͨ�˲���
 800519a:	201a      	movs	r0, #26
 800519c:	2103      	movs	r1, #3
	if(rate>1000)rate=1000;
	if(rate<4)rate=4;
	data=1000/rate-1;
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//�������ֵ�ͨ�˲���
 	return MPU_Set_LPF(rate/2);	//�Զ�����LPFΪ�����ʵ�һ��
}
 800519e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	else if(lpf>=98)data=2;
	else if(lpf>=42)data=3;
	else if(lpf>=20)data=4;
	else if(lpf>=10)data=5;
	else data=6;
	return MPU_Write_Byte(MPU_CFG_REG,data);//�������ֵ�ͨ�˲���
 80051a2:	f7ff bfd5 	b.w	8005150 <MPU_Write_Byte>
 80051a6:	bf00      	nop
	...

080051b0 <spiSelect.constprop.23>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80051b0:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80051b2:	2320      	movs	r3, #32
 80051b4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80051b8:	f7fb fb62 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80051bc:	f7fb fe38 	bl	8000e30 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <spiSelect.constprop.23+0x5c>)
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	2a02      	cmp	r2, #2
 80051c6:	d004      	beq.n	80051d2 <spiSelect.constprop.23+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051c8:	b672      	cpsid	i
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <spiSelect.constprop.23+0x60>)
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <spiSelect.constprop.23+0x64>)
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80051d0:	e7fe      	b.n	80051d0 <spiSelect.constprop.23+0x20>
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	8919      	ldrh	r1, [r3, #8]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	2301      	movs	r3, #1
 80051da:	408b      	lsls	r3, r1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8353      	strh	r3, [r2, #26]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80051e0:	f7fb fe16 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80051e4:	f7fb fb34 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <spiSelect.constprop.23+0x60>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d004      	beq.n	80051fa <spiSelect.constprop.23+0x4a>
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	6892      	ldr	r2, [r2, #8]
 80051f4:	6889      	ldr	r1, [r1, #8]
 80051f6:	4291      	cmp	r1, r2
 80051f8:	d303      	bcc.n	8005202 <spiSelect.constprop.23+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80051fa:	2300      	movs	r3, #0
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005202:	b672      	cpsid	i
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <spiSelect.constprop.23+0x68>)
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
 8005208:	e7fe      	b.n	8005208 <spiSelect.constprop.23+0x58>
 800520a:	bf00      	nop
 800520c:	2000be00 	.word	0x2000be00
 8005210:	2000bfd8 	.word	0x2000bfd8
 8005214:	08006cc0 	.word	0x08006cc0
 8005218:	08006d00 	.word	0x08006d00
 800521c:	00000000 	.word	0x00000000

08005220 <spiUnselect.constprop.21>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8005220:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005222:	2320      	movs	r3, #32
 8005224:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005228:	f7fb fb2a 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800522c:	f7fb fe00 	bl	8000e30 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <spiUnselect.constprop.21+0x5c>)
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	2a02      	cmp	r2, #2
 8005236:	d004      	beq.n	8005242 <spiUnselect.constprop.21+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005238:	b672      	cpsid	i
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <spiUnselect.constprop.21+0x60>)
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <spiUnselect.constprop.21+0x64>)
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005240:	e7fe      	b.n	8005240 <spiUnselect.constprop.21+0x20>
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	8919      	ldrh	r1, [r3, #8]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	2301      	movs	r3, #1
 800524a:	408b      	lsls	r3, r1
 800524c:	b29b      	uxth	r3, r3
 800524e:	8313      	strh	r3, [r2, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005250:	f7fb fdde 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005254:	f7fb fafc 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <spiUnselect.constprop.21+0x60>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d004      	beq.n	800526a <spiUnselect.constprop.21+0x4a>
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	6889      	ldr	r1, [r1, #8]
 8005266:	4291      	cmp	r1, r2
 8005268:	d303      	bcc.n	8005272 <spiUnselect.constprop.21+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800526a:	2300      	movs	r3, #0
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005272:	b672      	cpsid	i
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <spiUnselect.constprop.21+0x68>)
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c
 8005278:	e7fe      	b.n	8005278 <spiUnselect.constprop.21+0x58>
 800527a:	bf00      	nop
 800527c:	2000be00 	.word	0x2000be00
 8005280:	2000bfd8 	.word	0x2000bfd8
 8005284:	08006cd0 	.word	0x08006cd0
 8005288:	08006d00 	.word	0x08006d00
 800528c:	00000000 	.word	0x00000000

08005290 <spiSend.constprop.19>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8005292:	b1c0      	cbz	r0, 80052c6 <spiSend.constprop.19+0x36>
 8005294:	4606      	mov	r6, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005296:	2320      	movs	r3, #32
 8005298:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800529c:	f7fb faf0 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80052a0:	f7fb fdc6 	bl	8000e30 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80052a4:	4b28      	ldr	r3, [pc, #160]	; (8005348 <spiSend.constprop.19+0xb8>)
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	2a02      	cmp	r2, #2
 80052aa:	d004      	beq.n	80052b6 <spiSend.constprop.19+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ac:	b672      	cpsid	i
 80052ae:	4b27      	ldr	r3, [pc, #156]	; (800534c <spiSend.constprop.19+0xbc>)
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <spiSend.constprop.19+0xc0>)
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052b4:	e7fe      	b.n	80052b4 <spiSend.constprop.19+0x24>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	b14a      	cbz	r2, 80052d0 <spiSend.constprop.19+0x40>
 80052bc:	b672      	cpsid	i
 80052be:	4b23      	ldr	r3, [pc, #140]	; (800534c <spiSend.constprop.19+0xbc>)
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <spiSend.constprop.19+0xc0>)
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052c4:	e7fe      	b.n	80052c4 <spiSend.constprop.19+0x34>
 80052c6:	b672      	cpsid	i
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <spiSend.constprop.19+0xbc>)
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <spiSend.constprop.19+0xc0>)
 80052cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ce:	e7fe      	b.n	80052ce <spiSend.constprop.19+0x3e>
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80052d0:	6a19      	ldr	r1, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80052d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80052d4:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80052d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80052d8:	6812      	ldr	r2, [r2, #0]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80052da:	481e      	ldr	r0, [pc, #120]	; (8005354 <spiSend.constprop.19+0xc4>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80052dc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80052de:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80052e0:	2501      	movs	r5, #1
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80052e2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  spiStartSendI(spip, n, txbuf);
 80052e6:	2003      	movs	r0, #3
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80052e8:	604d      	str	r5, [r1, #4]
 80052ea:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80052ec:	600f      	str	r7, [r1, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80052ee:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80052f0:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80052f2:	6014      	str	r4, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 80052f4:	680d      	ldr	r5, [r1, #0]
 80052f6:	4c15      	ldr	r4, [pc, #84]	; (800534c <spiSend.constprop.19+0xbc>)
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 80052f8:	689f      	ldr	r7, [r3, #8]
 80052fa:	69a6      	ldr	r6, [r4, #24]
 80052fc:	f045 0501 	orr.w	r5, r5, #1
 8005300:	600d      	str	r5, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8005302:	6811      	ldr	r1, [r2, #0]
 8005304:	f041 0101 	orr.w	r1, r1, #1
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	b11f      	cbz	r7, 8005314 <spiSend.constprop.19+0x84>
 800530c:	b672      	cpsid	i
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <spiSend.constprop.19+0xc8>)
 8005310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005312:	e7fe      	b.n	8005312 <spiSend.constprop.19+0x82>

  *trp = tp;
 8005314:	f843 6f08 	str.w	r6, [r3, #8]!
  tp->p_u.wttrp = trp;
 8005318:	6273      	str	r3, [r6, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800531a:	f7fb fb11 	bl	8000940 <chSchGoSleepS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800531e:	f7fb fd77 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005322:	f7fb fa95 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	42a3      	cmp	r3, r4
 800532a:	d004      	beq.n	8005336 <spiSend.constprop.19+0xa6>
 800532c:	69a2      	ldr	r2, [r4, #24]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	6892      	ldr	r2, [r2, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	d303      	bcc.n	800533e <spiSend.constprop.19+0xae>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005336:	2300      	movs	r3, #0
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800533e:	b672      	cpsid	i
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <spiSend.constprop.19+0xcc>)
 8005342:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005344:	e7fe      	b.n	8005344 <spiSend.constprop.19+0xb4>
 8005346:	bf00      	nop
 8005348:	2000be00 	.word	0x2000be00
 800534c:	2000bfd8 	.word	0x2000bfd8
 8005350:	08006db0 	.word	0x08006db0
 8005354:	2000c7ca 	.word	0x2000c7ca
 8005358:	08006d20 	.word	0x08006d20
 800535c:	08006d00 	.word	0x08006d00

08005360 <Hall_thread.lto_priv.81>:
 8005360:	4e1d      	ldr	r6, [pc, #116]	; (80053d8 <Hall_thread.lto_priv.81+0x78>)
 8005362:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <Hall_thread.lto_priv.81+0x7c>)
 8005364:	69b3      	ldr	r3, [r6, #24]
static THD_FUNCTION(Hall_thread, p)
{
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 8005366:	481e      	ldr	r0, [pc, #120]	; (80053e0 <Hall_thread.lto_priv.81+0x80>)
 8005368:	4c1e      	ldr	r4, [pc, #120]	; (80053e4 <Hall_thread.lto_priv.81+0x84>)
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
}

static THD_FUNCTION(Hall_thread, p)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	619a      	str	r2, [r3, #24]
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 800536e:	f7ff fb77 	bl	8004a60 <Hall_init>
  Hall_init(hall_encoder + 1);
 8005372:	481d      	ldr	r0, [pc, #116]	; (80053e8 <Hall_thread.lto_priv.81+0x88>)
 8005374:	f7ff fb74 	bl	8004a60 <Hall_init>
 8005378:	4637      	mov	r7, r6
 800537a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800537c:	e006      	b.n	800538c <Hall_thread.lto_priv.81+0x2c>
 800537e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(tick>chVTGetSystemTimeX())
      chThdSleepUntil(tick);
    else
      tick=chVTGetSystemTimeX();

    Hall_update(hall_encoder);
 8005380:	4817      	ldr	r0, [pc, #92]	; (80053e0 <Hall_thread.lto_priv.81+0x80>)
 8005382:	f7ff fb25 	bl	80049d0 <Hall_update>
    Hall_update(hall_encoder + 1);
 8005386:	4818      	ldr	r0, [pc, #96]	; (80053e8 <Hall_thread.lto_priv.81+0x88>)
 8005388:	f7ff fb22 	bl	80049d0 <Hall_update>
 800538c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  Hall_init(hall_encoder + 1);

  uint32_t tick = chVTGetSystemTimeX();
  while(true)
  {
    tick+=US2ST(HALL_COUNT);
 800538e:	35c8      	adds	r5, #200	; 0xc8

    if(tick>chVTGetSystemTimeX())
 8005390:	42ab      	cmp	r3, r5
 8005392:	d2f4      	bcs.n	800537e <Hall_thread.lto_priv.81+0x1e>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005394:	2320      	movs	r3, #32
 8005396:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800539a:	f7fb fa71 	bl	8000880 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800539e:	f7fb fd47 	bl	8000e30 <_dbg_check_lock>
 80053a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 80053a4:	1ae9      	subs	r1, r5, r3
 80053a6:	d002      	beq.n	80053ae <Hall_thread.lto_priv.81+0x4e>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80053a8:	2008      	movs	r0, #8
 80053aa:	f7fb fb11 	bl	80009d0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80053ae:	f7fb fd2f 	bl	8000e10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80053b2:	f7fb fa4d 	bl	8000850 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80053b6:	6833      	ldr	r3, [r6, #0]
 80053b8:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <Hall_thread.lto_priv.81+0x78>)
 80053ba:	42b3      	cmp	r3, r6
 80053bc:	d004      	beq.n	80053c8 <Hall_thread.lto_priv.81+0x68>
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	6889      	ldr	r1, [r1, #8]
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d303      	bcc.n	80053d0 <Hall_thread.lto_priv.81+0x70>
 80053c8:	2300      	movs	r3, #0
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	e7d7      	b.n	8005380 <Hall_thread.lto_priv.81+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053d0:	b672      	cpsid	i
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <Hall_thread.lto_priv.81+0x8c>)
 80053d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d6:	e7fe      	b.n	80053d6 <Hall_thread.lto_priv.81+0x76>
 80053d8:	2000bfd8 	.word	0x2000bfd8
 80053dc:	08006da4 	.word	0x08006da4
 80053e0:	2000081c 	.word	0x2000081c
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	2000082c 	.word	0x2000082c
 80053ec:	08006dc0 	.word	0x08006dc0

080053f0 <strpbrk>:
 80053f0:	b430      	push	{r4, r5}
 80053f2:	7804      	ldrb	r4, [r0, #0]
 80053f4:	b1ec      	cbz	r4, 8005432 <strpbrk+0x42>
 80053f6:	780d      	ldrb	r5, [r1, #0]
 80053f8:	b1ad      	cbz	r5, 8005426 <strpbrk+0x36>
 80053fa:	42ac      	cmp	r4, r5
 80053fc:	d00e      	beq.n	800541c <strpbrk+0x2c>
 80053fe:	460a      	mov	r2, r1
 8005400:	e001      	b.n	8005406 <strpbrk+0x16>
 8005402:	429c      	cmp	r4, r3
 8005404:	d009      	beq.n	800541a <strpbrk+0x2a>
 8005406:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f9      	bne.n	8005402 <strpbrk+0x12>
 800540e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005412:	2c00      	cmp	r4, #0
 8005414:	d1f0      	bne.n	80053f8 <strpbrk+0x8>
 8005416:	7815      	ldrb	r5, [r2, #0]
 8005418:	e000      	b.n	800541c <strpbrk+0x2c>
 800541a:	4625      	mov	r5, r4
 800541c:	2d00      	cmp	r5, #0
 800541e:	bf08      	it	eq
 8005420:	2000      	moveq	r0, #0
 8005422:	bc30      	pop	{r4, r5}
 8005424:	4770      	bx	lr
 8005426:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800542a:	460a      	mov	r2, r1
 800542c:	2c00      	cmp	r4, #0
 800542e:	d1e3      	bne.n	80053f8 <strpbrk+0x8>
 8005430:	e7f1      	b.n	8005416 <strpbrk+0x26>
 8005432:	4620      	mov	r0, r4
 8005434:	bc30      	pop	{r4, r5}
 8005436:	4770      	bx	lr
	...

08005440 <strspn>:
 8005440:	b470      	push	{r4, r5, r6}
 8005442:	7804      	ldrb	r4, [r0, #0]
 8005444:	b1a4      	cbz	r4, 8005470 <strspn+0x30>
 8005446:	780e      	ldrb	r6, [r1, #0]
 8005448:	4605      	mov	r5, r0
 800544a:	b14e      	cbz	r6, 8005460 <strspn+0x20>
 800544c:	42b4      	cmp	r4, r6
 800544e:	d00a      	beq.n	8005466 <strspn+0x26>
 8005450:	460a      	mov	r2, r1
 8005452:	e001      	b.n	8005458 <strspn+0x18>
 8005454:	429c      	cmp	r4, r3
 8005456:	d006      	beq.n	8005466 <strspn+0x26>
 8005458:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f9      	bne.n	8005454 <strspn+0x14>
 8005460:	1a28      	subs	r0, r5, r0
 8005462:	bc70      	pop	{r4, r5, r6}
 8005464:	4770      	bx	lr
 8005466:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800546a:	2c00      	cmp	r4, #0
 800546c:	d1ed      	bne.n	800544a <strspn+0xa>
 800546e:	e7f7      	b.n	8005460 <strspn+0x20>
 8005470:	4620      	mov	r0, r4
 8005472:	e7f6      	b.n	8005462 <strspn+0x22>
	...

08005480 <__func__.7536>:
 8005480:	7473 7453 7261 4174 616c 6d72 0000 0000     stStartAlarm....

08005490 <__func__.6708>:
 8005490:	6863 7645 5374 6769 616e 496c 0000 0000     chEvtSignalI....

080054a0 <__func__.6674.lto_priv.112>:
 80054a0:	6863 744d 4c78 636f 536b 0000 0000 0000     chMtxLockS......

080054b0 <__func__.6671>:
 80054b0:	6863 6353 5268 6165 7964 0049 0000 0000     chSchReadyI.....

080054c0 <__func__.6727>:
 80054c0:	6863 6854 4564 6978 5374 0000 0000 0000     chThdExitS......

080054d0 <__func__.6683>:
 80054d0:	6863 6854 4364 6572 7461 4965 0000 0000     chThdCreateI....
 80054e0:	7473 6361 206b 766f 7265 6c66 776f 0000     stack overflow..
 80054f0:	5653 3123 0031 0000 5653 3123 0030 0000     SV#11...SV#10...
 8005500:	5653 3923 0000 0000 5653 3823 0000 0000     SV#9....SV#8....
 8005510:	5653 3723 0000 0000 5653 3623 0000 0000     SV#7....SV#6....
 8005520:	5653 3523 0000 0000 5653 3423 0000 0000     SV#5....SV#4....

08005530 <__func__.6691>:
 8005530:	6863 7645 4274 6f72 6461 6163 7473 6c46     chEvtBroadcastFl
 8005540:	6761 4973 0000 0000 0000 0000 0000 0000     agsI............

08005550 <ram_areas>:
 8005550:	6e74 0800 cb68 2000 cb68 2000 cb68 2000     tn..h.. h.. h.. 
 8005560:	6e74 0800 0000 2000 0000 2000 0000 2000     tn..... ... ... 
 8005570:	6e74 0800 c000 2001 c000 2001 c000 2001     tn..... ... ... 
 8005580:	6e74 0800 0000 0000 0000 0000 0000 0000     tn..............
 8005590:	6e74 0800 0000 1000 0000 1000 0000 1000     tn..............
 80055a0:	6e74 0800 4000 4002 4000 4002 4000 4002     tn...@.@.@.@.@.@
 80055b0:	6e74 0800 0000 0000 0000 0000 0000 0000     tn..............
 80055c0:	6e74 0800 0000 0000 0000 0000 0000 0000     tn..............

080055d0 <__func__.6674.lto_priv.111>:
 80055d0:	6863 5456 6f44 6553 4974 0000 0000 0000     chVTDoSetI......

080055e0 <__func__.6694>:
 80055e0:	6863 5149 6552 6461 6954 656d 756f 0074     chIQReadTimeout.

080055f0 <__func__.6699>:
 80055f0:	6863 6353 5768 6b61 7565 5370 0000 0000     chSchWakeupS....

08005600 <__func__.6749>:
 8005600:	6863 6854 5264 7365 6d75 4965 0000 0000     chThdResumeI....

08005610 <__func__.7554>:
 8005610:	7073 5f69 6c6c 5f64 7473 7261 0074 0000     spi_lld_start...

08005620 <ascii_8x16>:
	...
 8005630:	0000 817e 81a5 bd81 8199 7e81 0000 0000     ..~........~....
 8005640:	0000 ff7e ffdb c3ff ffe7 7eff 0000 0000     ..~........~....
 8005650:	0000 0000 fe6c fefe 7cfe 1038 0000 0000     ....l....|8.....
 8005660:	0000 0000 3810 fe7c 387c 0010 0000 0000     .....8|.|8......
 8005670:	0000 1800 3c3c e7e7 18e7 3c18 0000 0000     ....<<.....<....
 8005680:	0000 1800 7e3c ffff 187e 3c18 0000 0000     ....<~..~..<....
 8005690:	0000 0000 0000 3c18 183c 0000 0000 0000     .......<<.......
 80056a0:	ffff ffff ffff c3e7 e7c3 ffff ffff ffff     ................
 80056b0:	0000 0000 3c00 4266 6642 003c 0000 0000     .....<fBBf<.....
 80056c0:	ffff ffff c3ff bd99 99bd ffc3 ffff ffff     ................
 80056d0:	0000 0e1e 321a cc78 cccc 78cc 0000 0000     .....2x....x....
 80056e0:	0000 663c 6666 3c66 7e18 1818 0000 0000     ..<ffff<.~......
 80056f0:	0000 333f 303f 3030 7030 e0f0 0000 0000     ..?3?0000p......
 8005700:	0000 637f 637f 6363 6763 e6e7 00c0 0000     ...c.ccccg......
 8005710:	0000 1800 db18 e73c db3c 1818 0000 0000     ......<.<.......
 8005720:	8000 e0c0 f8f0 f8fe e0f0 80c0 0000 0000     ................
 8005730:	0200 0e06 3e1e 3efe 0e1e 0206 0000 0000     .....>.>........
 8005740:	0000 3c18 187e 1818 3c7e 0018 0000 0000     ...<~...~<......
 8005750:	0000 6666 6666 6666 0066 6666 0000 0000     ..fffffff.ff....
 8005760:	0000 db7f dbdb 1b7b 1b1b 1b1b 0000 0000     ......{.........
 8005770:	7c00 60c6 6c38 c6c6 386c c60c 007c 0000     .|.`8l..l8..|...
	...
 8005788:	fefe fefe 0000 0000 0000 3c18 187e 1818     ...........<~...
 8005798:	3c7e 7e18 0000 0000 0000 3c18 187e 1818     ~<.~.......<~...
 80057a8:	1818 1818 0000 0000 0000 1818 1818 1818     ................
 80057b8:	7e18 183c 0000 0000 0000 0000 1800 fe0c     .~<.............
 80057c8:	180c 0000 0000 0000 0000 0000 3000 fe60     .............0`.
 80057d8:	3060 0000 0000 0000 0000 0000 0000 c0c0     `0..............
 80057e8:	fec0 0000 0000 0000 0000 0000 2800 fe6c     .............(l.
 80057f8:	286c 0000 0000 0000 0000 0000 3810 7c38     l(...........88|
 8005808:	fe7c 00fe 0000 0000 0000 0000 fefe 7c7c     |.............||
 8005818:	3838 0010 0000 0000 0000 0000 0000 0000     88..............
	...
 8005830:	0000 3c18 3c3c 1818 0018 1818 0000 0000     ...<<<..........
 8005840:	6600 6666 0024 0000 0000 0000 0000 0000     .fff$...........
 8005850:	0000 6c00 fe6c 6c6c fe6c 6c6c 0000 0000     ...ll.lll.ll....
 8005860:	1818 c67c c0c2 067c 8606 7cc6 1818 0000     ..|...|....|....
 8005870:	0000 0000 c6c2 180c 6030 86c6 0000 0000     ........0`......
 8005880:	0000 6c38 386c dc76 cccc 76cc 0000 0000     ..8ll8v....v....
 8005890:	3000 3030 0060 0000 0000 0000 0000 0000     .000`...........
 80058a0:	0000 180c 3030 3030 3030 0c18 0000 0000     ....000000......
 80058b0:	0000 1830 0c0c 0c0c 0c0c 3018 0000 0000     ..0........0....
 80058c0:	0000 0000 6600 ff3c 663c 0000 0000 0000     .....f<.<f......
 80058d0:	0000 0000 1800 7e18 1818 0000 0000 0000     .......~........
	...
 80058e8:	1800 1818 0030 0000 0000 0000 0000 fe00     ....0...........
	...
 8005908:	0000 1818 0000 0000 0000 0000 0602 180c     ................
 8005918:	6030 80c0 0000 0000 0000 6c38 c6c6 d6d6     0`........8l....
 8005928:	c6c6 386c 0000 0000 0000 3818 1878 1818     ..l8.......8x...
 8005938:	1818 7e18 0000 0000 0000 c67c 0c06 3018     ...~......|....0
 8005948:	c060 fec6 0000 0000 0000 c67c 0606 063c     `.........|...<.
 8005958:	0606 7cc6 0000 0000 0000 1c0c 6c3c fecc     ...|........<l..
 8005968:	0c0c 1e0c 0000 0000 0000 c0fe c0c0 06fc     ................
 8005978:	0606 7cc6 0000 0000 0000 6038 c0c0 c6fc     ...|......8`....
 8005988:	c6c6 7cc6 0000 0000 0000 c6fe 0606 180c     ...|............
 8005998:	3030 3030 0000 0000 0000 c67c c6c6 c67c     0000......|...|.
 80059a8:	c6c6 7cc6 0000 0000 0000 c67c c6c6 067e     ...|......|...~.
 80059b8:	0606 780c 0000 0000 0000 0000 1818 0000     ...x............
 80059c8:	1800 0018 0000 0000 0000 0000 1818 0000     ................
 80059d8:	1800 3018 0000 0000 0000 0600 180c 6030     ...0..........0`
 80059e8:	1830 060c 0000 0000 0000 0000 7e00 0000     0............~..
 80059f8:	007e 0000 0000 0000 0000 6000 1830 060c     ~..........`0...
 8005a08:	180c 6030 0000 0000 0000 c67c 0cc6 1818     ..0`......|.....
 8005a18:	0018 1818 0000 0000 0000 7c00 c6c6 dede     ...........|....
 8005a28:	dcde 7cc0 0000 0000 0000 3810 c66c fec6     ...|.......8l...
 8005a38:	c6c6 c6c6 0000 0000 0000 66fc 6666 667c     ...........fff|f
 8005a48:	6666 fc66 0000 0000 0000 663c c0c2 c0c0     fff.......<f....
 8005a58:	c2c0 3c66 0000 0000 0000 6cf8 6666 6666     ..f<.......lffff
 8005a68:	6666 f86c 0000 0000 0000 66fe 6862 6878     ffl........fbhxh
 8005a78:	6260 fe66 0000 0000 0000 66fe 6862 6878     `bf........fbhxh
 8005a88:	6060 f060 0000 0000 0000 663c c0c2 dec0     ```.......<f....
 8005a98:	c6c6 3a66 0000 0000 0000 c6c6 c6c6 c6fe     ..f:............
 8005aa8:	c6c6 c6c6 0000 0000 0000 183c 1818 1818     ..........<.....
 8005ab8:	1818 3c18 0000 0000 0000 0c1e 0c0c 0c0c     ...<............
 8005ac8:	cccc 78cc 0000 0000 0000 66e6 6c66 7878     ...x.......fflxx
 8005ad8:	666c e666 0000 0000 0000 60f0 6060 6060     lff........`````
 8005ae8:	6260 fe66 0000 0000 0000 eec6 fefe c6d6     `bf.............
 8005af8:	c6c6 c6c6 0000 0000 0000 e6c6 fef6 cede     ................
 8005b08:	c6c6 c6c6 0000 0000 0000 c67c c6c6 c6c6     ..........|.....
 8005b18:	c6c6 7cc6 0000 0000 0000 66fc 6666 607c     ...|.......fff|`
 8005b28:	6060 f060 0000 0000 0000 c67c c6c6 c6c6     ```.......|.....
 8005b38:	d6c6 7cde 0e0c 0000 0000 66fc 6666 6c7c     ...|.......fff|l
 8005b48:	6666 e666 0000 0000 0000 c67c 60c6 0c38     fff.......|..`8.
 8005b58:	c606 7cc6 0000 0000 0000 7e7e 185a 1818     ...|......~~Z...
 8005b68:	1818 3c18 0000 0000 0000 c6c6 c6c6 c6c6     ...<............
 8005b78:	c6c6 7cc6 0000 0000 0000 c6c6 c6c6 c6c6     ...|............
 8005b88:	6cc6 1038 0000 0000 0000 c6c6 c6c6 d6d6     .l8.............
 8005b98:	fed6 6cee 0000 0000 0000 c6c6 7c6c 3838     ...l........l|88
 8005ba8:	6c7c c6c6 0000 0000 0000 6666 6666 183c     |l........ffff<.
 8005bb8:	1818 3c18 0000 0000 0000 c6fe 0c86 3018     ...<...........0
 8005bc8:	c260 fec6 0000 0000 0000 303c 3030 3030     `.........<00000
 8005bd8:	3030 3c30 0000 0000 0000 8000 e0c0 3870     000<..........p8
 8005be8:	0e1c 0206 0000 0000 0000 0c3c 0c0c 0c0c     ..........<.....
 8005bf8:	0c0c 3c0c 0000 0000 3810 c66c 0000 0000     ...<.....8l.....
	...
 8005c1c:	ff00 0000 3000 0c18 0000 0000 0000 0000     .....0..........
	...
 8005c34:	7800 7c0c cccc 76cc 0000 0000 0000 60e0     .x.|...v.......`
 8005c44:	7860 666c 6666 7c66 0000 0000 0000 0000     `xlffff|........
 8005c54:	7c00 c0c6 c0c0 7cc6 0000 0000 0000 0c1c     .|.....|........
 8005c64:	3c0c cc6c cccc 76cc 0000 0000 0000 0000     .<l....v........
 8005c74:	7c00 fec6 c0c0 7cc6 0000 0000 0000 361c     .|.....|.......6
 8005c84:	3032 3078 3030 7830 0000 0000 0000 0000     20x0000x........
 8005c94:	7600 cccc cccc 7ccc cc0c 0078 0000 60e0     .v.....|..x....`
 8005ca4:	6c60 6676 6666 e666 0000 0000 0000 1818     `lvffff.........
 8005cb4:	3800 1818 1818 3c18 0000 0000 0000 0606     .8.....<........
 8005cc4:	0e00 0606 0606 0606 6666 003c 0000 60e0     ........ff<....`
 8005cd4:	6660 786c 6c78 e666 0000 0000 0000 1838     `flxxlf.......8.
 8005ce4:	1818 1818 1818 3c18 0000 0000 0000 0000     .......<........
 8005cf4:	ec00 d6fe d6d6 c6d6 0000 0000 0000 0000     ................
 8005d04:	dc00 6666 6666 6666 0000 0000 0000 0000     ..ffffff........
 8005d14:	7c00 c6c6 c6c6 7cc6 0000 0000 0000 0000     .|.....|........
 8005d24:	dc00 6666 6666 7c66 6060 00f0 0000 0000     ..fffff|``......
 8005d34:	7600 cccc cccc 7ccc 0c0c 001e 0000 0000     .v.....|........
 8005d44:	dc00 6676 6060 f060 0000 0000 0000 0000     ..vf```.........
 8005d54:	7c00 60c6 0c38 7cc6 0000 0000 0000 3010     .|.`8..|.......0
 8005d64:	fc30 3030 3030 1c36 0000 0000 0000 0000     0.00006.........
 8005d74:	cc00 cccc cccc 76cc 0000 0000 0000 0000     .......v........
 8005d84:	c600 c6c6 c6c6 386c 0000 0000 0000 0000     ......l8........
 8005d94:	c600 d6c6 d6d6 6cfe 0000 0000 0000 0000     .......l........
 8005da4:	c600 386c 3838 c66c 0000 0000 0000 0000     ..l888l.........
 8005db4:	c600 c6c6 c6c6 7ec6 0c06 00f8 0000 0000     .......~........
 8005dc4:	fe00 18cc 6030 fec6 0000 0000 0000 180e     ....0`..........
 8005dd4:	1818 1870 1818 0e18 0000 0000 0000 1818     ..p.............
 8005de4:	1818 1818 1818 1818 0000 0000 0000 1870     ..............p.
 8005df4:	1818 180e 1818 7018 0000 0000 7600 00dc     .......p.....v..
	...
 8005e14:	3810 c66c c6c6 00fe 0000 0000 0000 fe00     .8l.............
 8005e24:	8282 8282 8282 00fe 0000 0000 0000 fe00     ................
 8005e34:	aad6 aad6 aad6 00fe 0000 0000 0000 fe00     ................
 8005e44:	8a86 da8a b2f2 00fe 0000 0000 0000 fe00     ................
 8005e54:	aad6 fade baf6 00fe 0000 0000 0000 00cc     ................
 8005e64:	7800 7c0c cccc 76cc 0000 0000 6000 1830     .x.|...v.....`0.
 8005e74:	7800 7c0c cccc 76cc 0000 0000 3800 386c     .x.|...v.....8l8
 8005e84:	7800 7c0c cccc 76cc 0000 0000 0000 0000     .x.|...v........
 8005e94:	7c00 c0c6 c0c0 7cc6 7018 0000 1000 6c38     .|.....|.p....8l
 8005ea4:	7c00 fec6 c0c0 7cc6 0000 0000 0000 00c6     .|.....|........
 8005eb4:	7c00 fec6 c0c0 7cc6 0000 0000 6000 1830     .|.....|.....`0.
 8005ec4:	7c00 fec6 c0c0 7cc6 0000 0000 0000 0066     .|.....|......f.
 8005ed4:	3800 1818 1818 3c18 0000 0000 1800 663c     .8.....<......<f
 8005ee4:	3800 1818 1818 3c18 0000 0000 6000 1830     .8.....<.....`0.
 8005ef4:	3800 1818 1818 3c18 0000 0000 c600 1000     .8.....<........
 8005f04:	6c38 c6c6 c6fe c6c6 0000 0000 6c38 1038     8l..........8l8.
 8005f14:	6c38 fec6 c6c6 c6c6 0000 0000 180c fe00     8l..............
 8005f24:	6266 7868 6268 fe66 0000 0000 0000 0000     fbhxhbf.........
 8005f34:	ec00 3636 d87e 6ed8 0000 0000 0000 6c3e     ..66~..n......>l
 8005f44:	cccc ccfe cccc cecc 0000 0000 1000 6c38     ..............8l
 8005f54:	7c00 c6c6 c6c6 7cc6 0000 0000 0000 00c6     .|.....|........
 8005f64:	7c00 c6c6 c6c6 7cc6 0000 0000 6000 1830     .|.....|.....`0.
 8005f74:	7c00 c6c6 c6c6 7cc6 0000 0000 3000 cc78     .|.....|.....0x.
 8005f84:	cc00 cccc cccc 76cc 0000 0000 6000 1830     .......v.....`0.
 8005f94:	cc00 cccc cccc 76cc 0000 0000 0000 00c6     .......v........
 8005fa4:	c600 c6c6 c6c6 7ec6 0c06 0078 c600 7c00     .......~..x....|
 8005fb4:	c6c6 c6c6 c6c6 7cc6 0000 0000 c600 c600     .......|........
 8005fc4:	c6c6 c6c6 c6c6 7cc6 0000 0000 1800 7c18     .......|.......|
 8005fd4:	c0c6 c0c0 7cc6 1818 0000 0000 3800 646c     .....|.......8ld
 8005fe4:	f060 6060 6060 fce6 0000 0000 0000 6666     `.````........ff
 8005ff4:	183c 187e 187e 1818 0000 0000 f800 cccc     <.~.~...........
 8006004:	c4f8 decc cccc c6cc 0000 0000 0e00 181b     ................
 8006014:	1818 187e 1818 70d8 0000 0000 1800 6030     ..~....p......0`
 8006024:	7800 7c0c cccc 76cc 0000 0000 0c00 3018     .x.|...v.......0
 8006034:	3800 1818 1818 3c18 0000 0000 1800 6030     .8.....<......0`
 8006044:	7c00 c6c6 c6c6 7cc6 0000 0000 1800 6030     .|.....|......0`
 8006054:	cc00 cccc cccc 76cc 0000 0000 0000 dc76     .......v......v.
 8006064:	dc00 6666 6666 6666 0000 0000 dc76 c600     ..ffffff....v...
 8006074:	f6e6 defe c6ce c6c6 0000 0000 0000 6c3c     ..............<l
 8006084:	3e6c 7e00 0000 0000 0000 0000 0000 6c38     l>.~..........8l
 8006094:	386c 7c00 0000 0000 0000 0000 0000 3030     l8.|..........00
 80060a4:	3000 6030 c6c0 7cc6 0000 0000 0000 0000     .00`...|........
 80060b4:	0000 c0fe c0c0 00c0 0000 0000 0000 0000     ................
 80060c4:	0000 06fe 0606 0006 0000 0000 6000 62e0     .............`.b
 80060d4:	6c66 3018 dc60 0c86 3e18 0000 6000 62e0     fl.0`....>...`.b
 80060e4:	6c66 3018 ce66 3f9a 0606 0000 0000 1818     fl.0f..?........
 80060f4:	1800 1818 3c3c 183c 0000 0000 0000 0000     ....<<<.........
 8006104:	3600 d86c 366c 0000 0000 0000 0000 0000     .6l.l6..........
 8006114:	d800 366c d86c 0000 0000 0000 4411 4411     ..l6l........D.D
 8006124:	4411 4411 4411 4411 4411 4411 aa55 aa55     .D.D.D.D.D.DU.U.
 8006134:	aa55 aa55 aa55 aa55 aa55 aa55 77dd 77dd     U.U.U.U.U.U..w.w
 8006144:	77dd 77dd 77dd 77dd 77dd 77dd 1818 1818     .w.w.w.w.w.w....
 8006154:	1818 1818 1818 1818 1818 1818 1818 1818     ................
 8006164:	1818 f818 1818 1818 1818 1818 1818 1818     ................
 8006174:	f818 f818 1818 1818 1818 1818 3636 3636     ............6666
 8006184:	3636 f636 3636 3636 3636 3636 0000 0000     666.66666666....
 8006194:	0000 fe00 3636 3636 3636 3636 0000 0000     ....66666666....
 80061a4:	f800 f818 1818 1818 1818 1818 3636 3636     ............6666
 80061b4:	f636 f606 3636 3636 3636 3636 3636 3636     6...666666666666
 80061c4:	3636 3636 3636 3636 3636 3636 0000 0000     666666666666....
 80061d4:	fe00 f606 3636 3636 3636 3636 3636 3636     ....666666666666
 80061e4:	f636 fe06 0000 0000 0000 0000 3636 3636     6...........6666
 80061f4:	3636 fe36 0000 0000 0000 0000 1818 1818     666.............
 8006204:	f818 f818 0000 0000 0000 0000 0000 0000     ................
 8006214:	0000 f800 1818 1818 1818 1818 1818 1818     ................
 8006224:	1818 1f18 0000 0000 0000 0000 1818 1818     ................
 8006234:	1818 ff18 0000 0000 0000 0000 0000 0000     ................
 8006244:	0000 ff00 1818 1818 1818 1818 1818 1818     ................
 8006254:	1818 1f18 1818 1818 1818 1818 0000 0000     ................
 8006264:	0000 ff00 0000 0000 0000 0000 1818 1818     ................
 8006274:	1818 ff18 1818 1818 1818 1818 1818 1818     ................
 8006284:	1f18 1f18 1818 1818 1818 1818 3636 3636     ............6666
 8006294:	3636 3736 3636 3636 3636 3636 3636 3636     6667666666666666
 80062a4:	3736 3f30 0000 0000 0000 0000 0000 0000     670?............
 80062b4:	3f00 3730 3636 3636 3636 3636 3636 3636     .?07666666666666
 80062c4:	f736 ff00 0000 0000 0000 0000 0000 0000     6...............
 80062d4:	ff00 f700 3636 3636 3636 3636 3636 3636     ....666666666666
 80062e4:	3736 3730 3636 3636 3636 3636 0000 0000     670766666666....
 80062f4:	ff00 ff00 0000 0000 0000 0000 3636 3636     ............6666
 8006304:	f736 f700 3636 3636 3636 3636 1818 1818     6...66666666....
 8006314:	ff18 ff00 0000 0000 0000 0000 3636 3636     ............6666
 8006324:	3636 ff36 0000 0000 0000 0000 0000 0000     666.............
 8006334:	ff00 ff00 1818 1818 1818 1818 0000 0000     ................
 8006344:	0000 ff00 3636 3636 3636 3636 3636 3636     ....666666666666
 8006354:	3636 3f36 0000 0000 0000 0000 1818 1818     666?............
 8006364:	1f18 1f18 0000 0000 0000 0000 0000 0000     ................
 8006374:	1f00 1f18 1818 1818 1818 1818 0000 0000     ................
 8006384:	0000 3f00 3636 3636 3636 3636 3636 3636     ...?666666666666
 8006394:	3636 ff36 3636 3636 3636 3636 1818 1818     666.66666666....
 80063a4:	ff18 ff18 1818 1818 1818 1818 1818 1818     ................
 80063b4:	1818 f818 0000 0000 0000 0000 0000 0000     ................
 80063c4:	0000 1f00 1818 1818 1818 1818 ffff ffff     ................
 80063d4:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
 80063e4:	0000 ff00 ffff ffff ffff ffff f0f0 f0f0     ................
 80063f4:	f0f0 f0f0 f0f0 f0f0 f0f0 f0f0 0f0f 0f0f     ................
 8006404:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f ffff ffff     ................
 8006414:	ffff 00ff 0000 0000 0000 0000 0000 0000     ................
 8006424:	7600 d8dc d8d8 76dc 0000 0000 0000 cc78     .v.....v......x.
 8006434:	cccc ccd8 c6c6 ccc6 0000 0000 0000 c6fe     ................
 8006444:	c0c6 c0c0 c0c0 c0c0 0000 0000 0000 0000     ................
 8006454:	fe00 6c6c 6c6c 6c6c 0000 0000 0000 c6fe     ..llllll........
 8006464:	3060 1818 6030 fec6 0000 0000 0000 0000     `0..0`..........
 8006474:	7e00 d8d8 d8d8 70d8 0000 0000 0000 0000     .~.....p........
 8006484:	6600 6666 6666 7c66 6060 00c0 0000 0000     .ffffff|``......
 8006494:	dc76 1818 1818 1818 0000 0000 0000 187e     v.............~.
 80064a4:	663c 6666 3c66 7e18 0000 0000 0000 6c38     <ffff<.~......8l
 80064b4:	c6c6 c6fe c6c6 386c 0000 0000 0000 6c38     ......l8......8l
 80064c4:	c6c6 6cc6 6c6c ee6c 0000 0000 0000 301e     ...llll........0
 80064d4:	0c18 663e 6666 3c66 0000 0000 0000 0000     ..>ffff<........
 80064e4:	7e00 dbdb 7edb 0000 0000 0000 0000 0300     .~...~..........
 80064f4:	7e06 dbdb 7ef3 c060 0000 0000 0000 301c     .~...~`........0
 8006504:	6060 607c 6060 1c30 0000 0000 0000 7c00     ``|```0........|
 8006514:	c6c6 c6c6 c6c6 c6c6 0000 0000 0000 0000     ................
 8006524:	00fe fe00 0000 00fe 0000 0000 0000 0000     ................
 8006534:	1818 187e 0018 7e00 0000 0000 0000 3000     ..~....~.......0
 8006544:	0c18 0c06 3018 7e00 0000 0000 0000 0c00     .....0.~........
 8006554:	3018 3060 0c18 7e00 0000 0000 0000 1b0e     .0`0...~........
 8006564:	181b 1818 1818 1818 1818 1818 1818 1818     ................
 8006574:	1818 1818 d818 d8d8 0070 0000 0000 0000     ........p.......
 8006584:	1800 7e00 1800 0000 0000 0000 0000 0000     ...~............
 8006594:	7600 00dc dc76 0000 0000 0000 3800 6c6c     .v..v........8ll
 80065a4:	0038 0000 0000 0000 0000 0000 0000 0000     8...............
 80065b4:	0000 1800 0018 0000 0000 0000 0000 0000     ................
 80065c4:	0000 1800 0000 0000 0000 0000 0f00 0c0c     ................
 80065d4:	0c0c ec0c 6c6c 1c3c 0000 0000 6c00 3636     ....ll<......l66
 80065e4:	3636 0036 0000 0000 0000 0000 3c00 0c66     666..........<f.
 80065f4:	3218 007e 0000 0000 0000 0000 0000 0000     .2~.............
 8006604:	7e7e 7e7e 7e7e 007e 0000 0000 0000 0000     ~~~~~~~.........
	...

08006620 <__func__.7540.lto_priv.90>:
 8006620:	3269 5363 6174 7472 0000 0000 0000 0000     i2cStart........

08006630 <__func__.7540.lto_priv.91>:
 8006630:	7073 5369 6174 7472 0000 0000 0000 0000     spiStart........

08006640 <__func__.7614>:
 8006640:	3269 5f63 6c6c 5f64 7473 7261 0074 0000     i2c_lld_start...
 8006650:	6554 7473 0000 0000 4654 2054 6944 7073     Test....TFT Disp
 8006660:	616c 0079 7453 7461 253a 6432 0000 0000     lay.Stat:%2d....
 8006670:	3a50 3625 0064 0000 3a52 3625 0064 0000     P:%6d...R:%6d...
 8006680:	3a59 3625 0064 0000 6341 6c63 253a 6436     Y:%6d...Accl:%6d
 8006690:	0000 0000 7947 6f72 253a 6436 0000 0000     ....Gyro:%6d....
 80066a0:	504d 3655 3530 0030 0000 0000 0000 0000     MPU6050.........

080066b0 <TFTSPI_cfg>:
 80066b0:	0000 0000 0400 4002 000c 000f 0000 0000     .......@........

080066c0 <RC_cfg>:
 80066c0:	4240 000f 0000 0000 0000 0000 0000 0000     @B..............

080066d0 <i2cfg>:
 80066d0:	0001 0000 0d40 0003 0002 0000 0000 0000     ....@...........

080066e0 <__func__.7549>:
 80066e0:	3269 5f63 6c6c 5f64 6573 5f74 6c63 636f     i2c_lld_set_cloc
 80066f0:	006b 0000 0000 0000 0000 0000 0000 0000     k...............

08006700 <__func__.7543>:
 8006700:	7473 6553 4174 616c 6d72 0000 0000 0000     stSetAlarm......

08006710 <__func__.7553>:
 8006710:	7067 5f74 6c6c 5f64 7473 7261 0074 0000     gpt_lld_start...

08006720 <__func__.6057>:
 8006720:	6863 5456 6f44 6954 6b63 0049 0000 0000     chVTDoTickI.....

08006730 <__func__.6730>:
 8006730:	6863 514f 7257 7469 5465 6d69 6f65 7475     chOQWriteTimeout
	...

08006750 <__func__.7614>:
 8006750:	6d64 5361 7274 6165 416d 6c6c 636f 7461     dmaStreamAllocat
 8006760:	0065 0000 0000 0000 0000 0000 0000 0000     e...............
 8006770:	4d44 2041 6166 6c69 7275 0065 0000 0000     DMA failure.....

08006780 <__func__.5968.lto_priv.106>:
 8006780:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006790 <__func__.5968.lto_priv.107>:
 8006790:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

080067a0 <__func__.5968.lto_priv.108>:
 80067a0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

080067b0 <__func__.7540>:
 80067b0:	7067 5374 6174 7472 0000 0000 0000 0000     gptStart........

080067c0 <__func__.6282>:
 80067c0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....
 80067d0:	6e28 6c75 296c 0000 7355 6761 3a65 2520     (null)..Usage: %
 80067e0:	0d73 000a 6e69 6f66 0000 0000 654b 6e72     s...info....Kern
 80067f0:	6c65 203a 2020 2020 2020 7325 0a0d 0000     el:       %s....
 8006800:	2e33 2e31 0035 0000 6f43 706d 6c69 7265     3.1.5...Compiler
 8006810:	203a 2020 2020 7325 0a0d 0000 4347 2043     :     %s....GCC 
 8006820:	2e34 2e39 2033 3032 3531 3530 3932 2820     4.9.3 20150529 (
 8006830:	6572 656c 7361 2965 5b20 5241 2f4d 6d65     release) [ARM/em
 8006840:	6562 6464 6465 342d 395f 622d 6172 636e     bedded-4_9-branc
 8006850:	2068 6572 6976 6973 6e6f 3220 3732 3739     h revision 22797
 8006860:	5d37 0000 7241 6863 7469 6365 7574 6572     7]..Architecture
 8006870:	203a 7325 0a0d 0000 5241 764d 4537 4d2d     : %s....ARMv7E-M
 8006880:	0000 0000 6f43 6572 5620 7261 6169 746e     ....Core Variant
 8006890:	203a 7325 0a0d 0000 6f43 7472 7865 4d2d     : %s....Cortex-M
 80068a0:	4634 0000 6f50 7472 4920 666e 3a6f 2020     4F..Port Info:  
 80068b0:	2020 7325 0a0d 0000 6441 6176 636e 6465       %s....Advanced
 80068c0:	6b20 7265 656e 206c 6f6d 6564 0000 0000      kernel mode....
 80068d0:	6c50 7461 6f66 6d72 203a 2020 2020 7325     Platform:     %s
 80068e0:	0a0d 0000 5453 334d 4632 3034 2037 6948     ....STM32F407 Hi
 80068f0:	6867 5020 7265 6f66 6d72 6e61 6563 7720     gh Performance w
 8006900:	7469 2068 5344 2050 6e61 2064 5046 0055     ith DSP and FPU.
 8006910:	6f42 7261 3a64 2020 2020 2020 2020 7325     Board:        %s
 8006920:	0a0d 0000 5453 694d 7263 656f 656c 7463     ....STMicroelect
 8006930:	6f72 696e 7363 5320 4d54 3233 3446 442d     ronics STM32F4-D
 8006940:	7369 6f63 6576 7972 0000 0000 7542 6c69     iscovery....Buil
 8006950:	2064 6974 656d 203a 2020 7325 7325 7325     d time:   %s%s%s
 8006960:	0a0d 0000 7041 2072 3031 3220 3130 0037     ....Apr 10 2017.
 8006970:	2d20 0020 3231 353a 3a36 3431 0000 0000      - .12:56:14....
 8006980:	6873 6c65 006c 0000 0a0d 6843 6269 4f69     shell.....ChibiO
 8006990:	2f53 5452 5320 6568 6c6c 0a0d 0000 0000     S/RT Shell......
 80069a0:	6863 203e 0000 0000 445e 0000 6f74 206f     ch> ....^D..too 
 80069b0:	616d 796e 6120 6772 6d75 6e65 7374 0a0d     many arguments..
 80069c0:	0000 0000 7865 7469 0000 0000 6568 706c     ....exit....help
 80069d0:	0000 0000 6f43 6d6d 6e61 7364 203a 6568     ....Commands: he
 80069e0:	706c 6520 6978 2074 0000 0000 7325 0020     lp exit ....%s .
 80069f0:	7325 0000 3f20 0a0d 0000 0000 0a0d 6f6c     %s.. ?........lo
 8006a00:	6f67 7475 0000 0000 7973 7473 6d69 0065     gout....systime.
 8006a10:	6c25 0d75 000a 0000 0000 0000 0000 0000     %lu.............

08006a20 <local_commands>:
 8006a20:	67e4 0800 3a01 0800 6a08 0800 3dc1 0800     .g...:...j...=..
	...

08006a40 <__func__.7540>:
 8006a40:	7770 536d 6174 7472 0000 0000 0000 0000     pwmStart........

08006a50 <__func__.5968.lto_priv.77>:
 8006a50:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006a60 <__func__.7549>:
 8006a60:	7770 5f6d 6c6c 5f64 7473 7261 0074 0000     pwm_lld_start...

08006a70 <vmt>:
 8006a70:	31d1 0800 25b1 0800 25f1 0800 25d1 0800     .1...%...%...%..
 8006a80:	25e1 0800 25c1 0800 31c1 0800 25a1 0800     .%...%...1...%..

08006a90 <__func__.5968.lto_priv.78>:
 8006a90:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006aa0 <motor_pwmcfg>:
 8006aa0:	bd00 0501 0fa0 0000 0000 0000 0001 0000     ................
 8006ab0:	0000 0000 0001 0000 0000 0000 0001 0000     ................
 8006ac0:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...

08006ae0 <_stm32_dma_streams>:
 8006ae0:	6010 4002 6008 4002 0000 000b 6028 4002     .`.@.`.@....(`.@
 8006af0:	6008 4002 0106 000c 6040 4002 6008 4002     .`.@....@`.@.`.@
 8006b00:	0210 000d 6058 4002 6008 4002 0316 000e     ....X`.@.`.@....
 8006b10:	6070 4002 600c 4002 0400 000f 6088 4002     p`.@.`.@.....`.@
 8006b20:	600c 4002 0506 0010 60a0 4002 600c 4002     .`.@.....`.@.`.@
 8006b30:	0610 0011 60b8 4002 600c 4002 0716 002f     .....`.@.`.@../.
 8006b40:	6410 4002 6408 4002 0800 0038 6428 4002     .d.@.d.@..8.(d.@
 8006b50:	6408 4002 0906 0039 6440 4002 6408 4002     .d.@..9.@d.@.d.@
 8006b60:	0a10 003a 6458 4002 6408 4002 0b16 003b     ..:.Xd.@.d.@..;.
 8006b70:	6470 4002 640c 4002 0c00 003c 6488 4002     pd.@.d.@..<..d.@
 8006b80:	640c 4002 0d06 0044 64a0 4002 640c 4002     .d.@..D..d.@.d.@
 8006b90:	0e10 0045 64b8 4002 640c 4002 0f16 0046     ..E..d.@.d.@..F.

08006ba0 <__func__.7581>:
 8006ba0:	6473 7453 7261 0074 0000 0000 0000 0000     sdStart.........

08006bb0 <ch_debug>:
 8006bb0:	616d 6e69 1600 1845 0404 0860 100c 1814     main..E...`.....
 8006bc0:	201c 2221 0000 0000 0000 0000 0000 0000     . !"............
 8006bd0:	6f4d 6f74 2072 7053 6565 3a64 2520 0a64     Motor Speed: %d.
 8006be0:	0000 0000 6853 6c65 206c 4b4f 0a0d 0000     ....Shell OK....
 8006bf0:	6c46 7361 2068 7573 6363 7365 6673 6c75     Flash successful
 8006c00:	000a 0000 6552 6461 6e69 2067 6c66 7361     ....Reading flas
 8006c10:	2068 6164 6174 2e2e 0a2e 0000 6144 6174     h data......Data
 8006c20:	3a31 6425 000a 0000 5653 3323 0000 0000     1:%d....SV#3....
 8006c30:	6469 656c 0000 0000 6f4d 6f74 2072 6f43     idle....Motor Co
 8006c40:	746e 6f72 006c 0000 7270 6e69 0074 0000     ntrol...print...
 8006c50:	0061 0000 6c66 7361 0068 0000 0000 0000     a...flash.......

08006c60 <commands>:
 8006c60:	6c48 0800 3f51 0800 6c50 0800 3ec1 0800     Hl..Q?..Pl...>..
 8006c70:	6674 0800 3e31 0800 6c54 0800 3f61 0800     tf..1>..Tl..a?..
	...

08006c90 <shell_cfg1>:
 8006c90:	1bbc 2000 6c60 0800 0000 0000 0000 0000     ... `l..........

08006ca0 <flashTestData>:
 8006ca0:	0001 0000 0001 0000 0002 0000 0003 0000     ................
 8006cb0:	0005 0000 0008 0000 000d 0000 0015 0000     ................

08006cc0 <__func__.7548>:
 8006cc0:	7073 5369 6c65 6365 0074 0000 0000 0000     spiSelect.......

08006cd0 <__func__.7552>:
 8006cd0:	7073 5569 736e 6c65 6365 0074 0000 0000     spiUnselect.....

08006ce0 <__func__.5968.lto_priv.60>:
 8006ce0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006cf0 <__func__.5968.lto_priv.61>:
 8006cf0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006d00 <__func__.5968.lto_priv.62>:
 8006d00:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006d10 <__func__.5968.lto_priv.63>:
 8006d10:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006d20 <__func__.6737>:
 8006d20:	6863 6854 5364 7375 6570 646e 0053 0000     chThdSuspendS...

08006d30 <__func__.7559>:
 8006d30:	3269 4d63 7361 6574 5472 6172 736e 696d     i2cMasterTransmi
 8006d40:	5474 6d69 6f65 7475 0000 0000 0000 0000     tTimeout........

08006d50 <__func__.6154>:
 8006d50:	6863 6854 4464 446f 7165 6575 6575 654e     chThdDoDequeueNe
 8006d60:	7478 0049 0000 0000 0000 0000 0000 0000     xtI.............

08006d70 <hall_cfg>:
 8006d70:	bd00 0501 0000 0000 0000 0000 0000 0000     ................

08006d80 <__func__.6142.lto_priv.113>:
 8006d80:	6863 6854 5364 656c 7065 0053 0000 0000     chThdSleepS.....
 8006d90:	6152 6964 206f 6f63 746e 6f72 006c 0000     Radio control...
 8006da0:	0920 0000 6148 6c6c 5320 6e65 6f73 0072      ...Hall Sensor.

08006db0 <__func__.7594>:
 8006db0:	7073 5369 6e65 0064 0000 0000 0000 0000     spiSend.........

08006dc0 <__func__.5968.lto_priv.59>:
 8006dc0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006dd0 <__func__.6697>:
 8006dd0:	6863 744d 5578 6c6e 636f 006b 0000 0000     chMtxUnlock.....

08006de0 <__func__.6743>:
 8006de0:	6863 6854 5364 7375 6570 646e 6954 656d     chThdSuspendTime
 8006df0:	756f 5374 0000 0000 0000 0000 0000 0000     outS............

08006e00 <vmt>:
 8006e00:	3311 0800 32e1 0800 3201 0800 31e1 0800     .3...2...2...1..
