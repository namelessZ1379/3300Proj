
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f004 f85a 	bl	80042d0 <__core_init>
 800021c:	f001 fbb8 	bl	8001990 <__early_init>
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <endfiniloop+0xa>)
 8000222:	491e      	ldr	r1, [pc, #120]	; (800029c <endfiniloop+0xe>)
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <endfiniloop+0x12>)

08000226 <msloop>:
 8000226:	4291      	cmp	r1, r2
 8000228:	bf3c      	itt	cc
 800022a:	f841 0b04 	strcc.w	r0, [r1], #4
 800022e:	e7fa      	bcc.n	8000226 <msloop>
 8000230:	491c      	ldr	r1, [pc, #112]	; (80002a4 <endfiniloop+0x16>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <endfiniloop+0x6>)

08000234 <psloop>:
 8000234:	4291      	cmp	r1, r2
 8000236:	bf3c      	itt	cc
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
 800023c:	e7fa      	bcc.n	8000234 <psloop>
 800023e:	491a      	ldr	r1, [pc, #104]	; (80002a8 <endfiniloop+0x1a>)
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <endfiniloop+0x1e>)
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <endfiniloop+0x22>)

08000244 <dloop>:
 8000244:	429a      	cmp	r2, r3
 8000246:	bf3e      	ittt	cc
 8000248:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024c:	f842 0b04 	strcc.w	r0, [r2], #4
 8000250:	e7f8      	bcc.n	8000244 <dloop>
 8000252:	2000      	movs	r0, #0
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <endfiniloop+0x26>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <endfiniloop+0x2a>)

08000258 <bloop>:
 8000258:	4291      	cmp	r1, r2
 800025a:	bf3c      	itt	cc
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000260:	e7fa      	bcc.n	8000258 <bloop>
 8000262:	f003 fffd 	bl	8004260 <__init_ram_areas>
 8000266:	f004 f82b 	bl	80042c0 <__late_init>
 800026a:	4c14      	ldr	r4, [pc, #80]	; (80002bc <endfiniloop+0x2e>)
 800026c:	4d14      	ldr	r5, [pc, #80]	; (80002c0 <endfiniloop+0x32>)

0800026e <initloop>:
 800026e:	42ac      	cmp	r4, r5
 8000270:	da03      	bge.n	800027a <endinitloop>
 8000272:	f854 1b04 	ldr.w	r1, [r4], #4
 8000276:	4788      	blx	r1
 8000278:	e7f9      	b.n	800026e <initloop>

0800027a <endinitloop>:
 800027a:	f004 f889 	bl	8004390 <main>
 800027e:	4c11      	ldr	r4, [pc, #68]	; (80002c4 <endfiniloop+0x36>)
 8000280:	4d11      	ldr	r5, [pc, #68]	; (80002c8 <endfiniloop+0x3a>)

08000282 <finiloop>:
 8000282:	42ac      	cmp	r4, r5
 8000284:	da03      	bge.n	800028e <endfiniloop>
 8000286:	f854 1b04 	ldr.w	r1, [r4], #4
 800028a:	4788      	blx	r1
 800028c:	e7f9      	b.n	8000282 <finiloop>

0800028e <endfiniloop>:
 800028e:	f004 b80f 	b.w	80042b0 <__default_exit>
 8000292:	0000      	.short	0x0000
 8000294:	20000800 	.word	0x20000800
 8000298:	55555555 	.word	0x55555555
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000400 	.word	0x20000400
 80002a4:	20000400 	.word	0x20000400
 80002a8:	08007fe0 	.word	0x08007fe0
 80002ac:	20000800 	.word	0x20000800
 80002b0:	2000088c 	.word	0x2000088c
 80002b4:	20000890 	.word	0x20000890
 80002b8:	2000ddc0 	.word	0x2000ddc0
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
 80002c8:	080001c0 	.word	0x080001c0
 80002cc:	00000000 	.word	0x00000000

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	f003 fdb2 	bl	8003e50 <_dbg_check_unlock>
 80002ec:	f003 fb20 	bl	8003930 <_stats_stop_measure_crit_thd>
 80002f0:	2300      	movs	r3, #0
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	4628      	mov	r0, r5
 80002f8:	47a0      	blx	r4
 80002fa:	2000      	movs	r0, #0
 80002fc:	f003 fe68 	bl	8003fd0 <chThdExit>

08000300 <_port_switch_from_isr>:
 8000300:	f003 fb2e 	bl	8003960 <_stats_start_measure_crit_thd>
 8000304:	f003 fdb4 	bl	8003e70 <_dbg_check_lock>
 8000308:	f003 fb72 	bl	80039f0 <chSchDoReschedule>
 800030c:	f003 fda0 	bl	8003e50 <_dbg_check_unlock>
 8000310:	f003 fb0e 	bl	8003930 <_stats_stop_measure_crit_thd>

08000314 <_port_exit_from_isr>:
 8000314:	df00      	svc	0
 8000316:	e7fe      	b.n	8000316 <_port_exit_from_isr+0x2>
	...

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800045e:	f1a4 0401 	sub.w	r4, r4, #1
 8000462:	d1e9      	bne.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f092 0f00 	teq	r2, #0
 800060a:	bf14      	ite	ne
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	4770      	bxeq	lr
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800061c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000620:	e720      	b.n	8000464 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_ul2d>:
 8000624:	ea50 0201 	orrs.w	r2, r0, r1
 8000628:	bf08      	it	eq
 800062a:	4770      	bxeq	lr
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	e00a      	b.n	800064a <__aeabi_l2d+0x16>

08000634 <__aeabi_l2d>:
 8000634:	ea50 0201 	orrs.w	r2, r0, r1
 8000638:	bf08      	it	eq
 800063a:	4770      	bxeq	lr
 800063c:	b530      	push	{r4, r5, lr}
 800063e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000642:	d502      	bpl.n	800064a <__aeabi_l2d+0x16>
 8000644:	4240      	negs	r0, r0
 8000646:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000652:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000656:	f43f aedc 	beq.w	8000412 <__adddf3+0xe6>
 800065a:	f04f 0203 	mov.w	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000672:	f1c2 0320 	rsb	r3, r2, #32
 8000676:	fa00 fc03 	lsl.w	ip, r0, r3
 800067a:	fa20 f002 	lsr.w	r0, r0, r2
 800067e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000682:	ea40 000e 	orr.w	r0, r0, lr
 8000686:	fa21 f102 	lsr.w	r1, r1, r2
 800068a:	4414      	add	r4, r2
 800068c:	e6c1      	b.n	8000412 <__adddf3+0xe6>
 800068e:	bf00      	nop

08000690 <__aeabi_dmul>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000696:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800069a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800069e:	bf1d      	ittte	ne
 80006a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006a4:	ea94 0f0c 	teqne	r4, ip
 80006a8:	ea95 0f0c 	teqne	r5, ip
 80006ac:	f000 f8de 	bleq	800086c <__aeabi_dmul+0x1dc>
 80006b0:	442c      	add	r4, r5
 80006b2:	ea81 0603 	eor.w	r6, r1, r3
 80006b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006c2:	bf18      	it	ne
 80006c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d0:	d038      	beq.n	8000744 <__aeabi_dmul+0xb4>
 80006d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006e6:	f04f 0600 	mov.w	r6, #0
 80006ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ee:	f09c 0f00 	teq	ip, #0
 80006f2:	bf18      	it	ne
 80006f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000700:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000704:	d204      	bcs.n	8000710 <__aeabi_dmul+0x80>
 8000706:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800070a:	416d      	adcs	r5, r5
 800070c:	eb46 0606 	adc.w	r6, r6, r6
 8000710:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000714:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000718:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800071c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000720:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000724:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000728:	bf88      	it	hi
 800072a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800072e:	d81e      	bhi.n	800076e <__aeabi_dmul+0xde>
 8000730:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000734:	bf08      	it	eq
 8000736:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800073a:	f150 0000 	adcs.w	r0, r0, #0
 800073e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000748:	ea46 0101 	orr.w	r1, r6, r1
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000758:	bfc2      	ittt	gt
 800075a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800075e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000762:	bd70      	popgt	{r4, r5, r6, pc}
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f04f 0e00 	mov.w	lr, #0
 800076c:	3c01      	subs	r4, #1
 800076e:	f300 80ab 	bgt.w	80008c8 <__aeabi_dmul+0x238>
 8000772:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000776:	bfde      	ittt	le
 8000778:	2000      	movle	r0, #0
 800077a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd70      	pople	{r4, r5, r6, pc}
 8000780:	f1c4 0400 	rsb	r4, r4, #0
 8000784:	3c20      	subs	r4, #32
 8000786:	da35      	bge.n	80007f4 <__aeabi_dmul+0x164>
 8000788:	340c      	adds	r4, #12
 800078a:	dc1b      	bgt.n	80007c4 <__aeabi_dmul+0x134>
 800078c:	f104 0414 	add.w	r4, r4, #20
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f305 	lsl.w	r3, r0, r5
 8000798:	fa20 f004 	lsr.w	r0, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	fa21 f604 	lsr.w	r6, r1, r4
 80007b4:	eb42 0106 	adc.w	r1, r2, r6
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 040c 	rsb	r4, r4, #12
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f304 	lsl.w	r3, r0, r4
 80007d0:	fa20 f005 	lsr.w	r0, r0, r5
 80007d4:	fa01 f204 	lsl.w	r2, r1, r4
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e4:	f141 0100 	adc.w	r1, r1, #0
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f1c4 0520 	rsb	r5, r4, #32
 80007f8:	fa00 f205 	lsl.w	r2, r0, r5
 80007fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000800:	fa20 f304 	lsr.w	r3, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea43 0302 	orr.w	r3, r3, r2
 800080c:	fa21 f004 	lsr.w	r0, r1, r4
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	fa21 f204 	lsr.w	r2, r1, r4
 8000818:	ea20 0002 	bic.w	r0, r0, r2
 800081c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f094 0f00 	teq	r4, #0
 8000830:	d10f      	bne.n	8000852 <__aeabi_dmul+0x1c2>
 8000832:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000836:	0040      	lsls	r0, r0, #1
 8000838:	eb41 0101 	adc.w	r1, r1, r1
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3c01      	subeq	r4, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1a6>
 8000846:	ea41 0106 	orr.w	r1, r1, r6
 800084a:	f095 0f00 	teq	r5, #0
 800084e:	bf18      	it	ne
 8000850:	4770      	bxne	lr
 8000852:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	eb43 0303 	adc.w	r3, r3, r3
 800085c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3d01      	subeq	r5, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1c6>
 8000866:	ea43 0306 	orr.w	r3, r3, r6
 800086a:	4770      	bx	lr
 800086c:	ea94 0f0c 	teq	r4, ip
 8000870:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000874:	bf18      	it	ne
 8000876:	ea95 0f0c 	teqne	r5, ip
 800087a:	d00c      	beq.n	8000896 <__aeabi_dmul+0x206>
 800087c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000886:	d1d1      	bne.n	800082c <__aeabi_dmul+0x19c>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800089a:	bf06      	itte	eq
 800089c:	4610      	moveq	r0, r2
 800089e:	4619      	moveq	r1, r3
 80008a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a4:	d019      	beq.n	80008da <__aeabi_dmul+0x24a>
 80008a6:	ea94 0f0c 	teq	r4, ip
 80008aa:	d102      	bne.n	80008b2 <__aeabi_dmul+0x222>
 80008ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b0:	d113      	bne.n	80008da <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	d105      	bne.n	80008c4 <__aeabi_dmul+0x234>
 80008b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008bc:	bf1c      	itt	ne
 80008be:	4610      	movne	r0, r2
 80008c0:	4619      	movne	r1, r3
 80008c2:	d10a      	bne.n	80008da <__aeabi_dmul+0x24a>
 80008c4:	ea81 0103 	eor.w	r1, r1, r3
 80008c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008e2:	bd70      	pop	{r4, r5, r6, pc}

080008e4 <__aeabi_ddiv>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008f2:	bf1d      	ittte	ne
 80008f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f8:	ea94 0f0c 	teqne	r4, ip
 80008fc:	ea95 0f0c 	teqne	r5, ip
 8000900:	f000 f8a7 	bleq	8000a52 <__aeabi_ddiv+0x16e>
 8000904:	eba4 0405 	sub.w	r4, r4, r5
 8000908:	ea81 0e03 	eor.w	lr, r1, r3
 800090c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000910:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000914:	f000 8088 	beq.w	8000a28 <__aeabi_ddiv+0x144>
 8000918:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800091c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000920:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000924:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000928:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800092c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000930:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000934:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000938:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800093c:	429d      	cmp	r5, r3
 800093e:	bf08      	it	eq
 8000940:	4296      	cmpeq	r6, r2
 8000942:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000946:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800094a:	d202      	bcs.n	8000952 <__aeabi_ddiv+0x6e>
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	1ab6      	subs	r6, r6, r2
 8000954:	eb65 0503 	sbc.w	r5, r5, r3
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000962:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 000c 	orrcs.w	r0, r0, ip
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009c4:	d018      	beq.n	80009f8 <__aeabi_ddiv+0x114>
 80009c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009e2:	d1c0      	bne.n	8000966 <__aeabi_ddiv+0x82>
 80009e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e8:	d10b      	bne.n	8000a02 <__aeabi_ddiv+0x11e>
 80009ea:	ea41 0100 	orr.w	r1, r1, r0
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009f6:	e7b6      	b.n	8000966 <__aeabi_ddiv+0x82>
 80009f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fc:	bf04      	itt	eq
 80009fe:	4301      	orreq	r1, r0
 8000a00:	2000      	moveq	r0, #0
 8000a02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a06:	bf88      	it	hi
 8000a08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a0c:	f63f aeaf 	bhi.w	800076e <__aeabi_dmul+0xde>
 8000a10:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a14:	bf04      	itt	eq
 8000a16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a1e:	f150 0000 	adcs.w	r0, r0, #0
 8000a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a34:	bfc2      	ittt	gt
 8000a36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a44:	f04f 0e00 	mov.w	lr, #0
 8000a48:	3c01      	subs	r4, #1
 8000a4a:	e690      	b.n	800076e <__aeabi_dmul+0xde>
 8000a4c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a50:	e68d      	b.n	800076e <__aeabi_dmul+0xde>
 8000a52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a56:	ea94 0f0c 	teq	r4, ip
 8000a5a:	bf08      	it	eq
 8000a5c:	ea95 0f0c 	teqeq	r5, ip
 8000a60:	f43f af3b 	beq.w	80008da <__aeabi_dmul+0x24a>
 8000a64:	ea94 0f0c 	teq	r4, ip
 8000a68:	d10a      	bne.n	8000a80 <__aeabi_ddiv+0x19c>
 8000a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a6e:	f47f af34 	bne.w	80008da <__aeabi_dmul+0x24a>
 8000a72:	ea95 0f0c 	teq	r5, ip
 8000a76:	f47f af25 	bne.w	80008c4 <__aeabi_dmul+0x234>
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	e72c      	b.n	80008da <__aeabi_dmul+0x24a>
 8000a80:	ea95 0f0c 	teq	r5, ip
 8000a84:	d106      	bne.n	8000a94 <__aeabi_ddiv+0x1b0>
 8000a86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a8a:	f43f aefd 	beq.w	8000888 <__aeabi_dmul+0x1f8>
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4619      	mov	r1, r3
 8000a92:	e722      	b.n	80008da <__aeabi_dmul+0x24a>
 8000a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a9e:	f47f aec5 	bne.w	800082c <__aeabi_dmul+0x19c>
 8000aa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aa6:	f47f af0d 	bne.w	80008c4 <__aeabi_dmul+0x234>
 8000aaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aae:	f47f aeeb 	bne.w	8000888 <__aeabi_dmul+0x1f8>
 8000ab2:	e712      	b.n	80008da <__aeabi_dmul+0x24a>
	...

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <memcpy>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	ea41 0300 	orr.w	r3, r1, r0
 8000b66:	f013 0303 	ands.w	r3, r3, #3
 8000b6a:	d16d      	bne.n	8000c48 <memcpy+0xe8>
 8000b6c:	3a40      	subs	r2, #64	; 0x40
 8000b6e:	d341      	bcc.n	8000bf4 <memcpy+0x94>
 8000b70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b74:	f840 3b04 	str.w	r3, [r0], #4
 8000b78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b7c:	f840 3b04 	str.w	r3, [r0], #4
 8000b80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b84:	f840 3b04 	str.w	r3, [r0], #4
 8000b88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b8c:	f840 3b04 	str.w	r3, [r0], #4
 8000b90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b94:	f840 3b04 	str.w	r3, [r0], #4
 8000b98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b9c:	f840 3b04 	str.w	r3, [r0], #4
 8000ba0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba4:	f840 3b04 	str.w	r3, [r0], #4
 8000ba8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bac:	f840 3b04 	str.w	r3, [r0], #4
 8000bb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bb4:	f840 3b04 	str.w	r3, [r0], #4
 8000bb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bbc:	f840 3b04 	str.w	r3, [r0], #4
 8000bc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bc4:	f840 3b04 	str.w	r3, [r0], #4
 8000bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bcc:	f840 3b04 	str.w	r3, [r0], #4
 8000bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bd4:	f840 3b04 	str.w	r3, [r0], #4
 8000bd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bdc:	f840 3b04 	str.w	r3, [r0], #4
 8000be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000be4:	f840 3b04 	str.w	r3, [r0], #4
 8000be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bec:	f840 3b04 	str.w	r3, [r0], #4
 8000bf0:	3a40      	subs	r2, #64	; 0x40
 8000bf2:	d2bd      	bcs.n	8000b70 <memcpy+0x10>
 8000bf4:	3230      	adds	r2, #48	; 0x30
 8000bf6:	d311      	bcc.n	8000c1c <memcpy+0xbc>
 8000bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bfc:	f840 3b04 	str.w	r3, [r0], #4
 8000c00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c04:	f840 3b04 	str.w	r3, [r0], #4
 8000c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c0c:	f840 3b04 	str.w	r3, [r0], #4
 8000c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c14:	f840 3b04 	str.w	r3, [r0], #4
 8000c18:	3a10      	subs	r2, #16
 8000c1a:	d2ed      	bcs.n	8000bf8 <memcpy+0x98>
 8000c1c:	320c      	adds	r2, #12
 8000c1e:	d305      	bcc.n	8000c2c <memcpy+0xcc>
 8000c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c24:	f840 3b04 	str.w	r3, [r0], #4
 8000c28:	3a04      	subs	r2, #4
 8000c2a:	d2f9      	bcs.n	8000c20 <memcpy+0xc0>
 8000c2c:	3204      	adds	r2, #4
 8000c2e:	d008      	beq.n	8000c42 <memcpy+0xe2>
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	bf1c      	itt	ne
 8000c34:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c38:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c3c:	d301      	bcc.n	8000c42 <memcpy+0xe2>
 8000c3e:	880b      	ldrh	r3, [r1, #0]
 8000c40:	8003      	strh	r3, [r0, #0]
 8000c42:	4660      	mov	r0, ip
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2a08      	cmp	r2, #8
 8000c4a:	d313      	bcc.n	8000c74 <memcpy+0x114>
 8000c4c:	078b      	lsls	r3, r1, #30
 8000c4e:	d08d      	beq.n	8000b6c <memcpy+0xc>
 8000c50:	f010 0303 	ands.w	r3, r0, #3
 8000c54:	d08a      	beq.n	8000b6c <memcpy+0xc>
 8000c56:	f1c3 0304 	rsb	r3, r3, #4
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	07db      	lsls	r3, r3, #31
 8000c5e:	bf1c      	itt	ne
 8000c60:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c64:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c68:	d380      	bcc.n	8000b6c <memcpy+0xc>
 8000c6a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000c6e:	f820 3b02 	strh.w	r3, [r0], #2
 8000c72:	e77b      	b.n	8000b6c <memcpy+0xc>
 8000c74:	3a04      	subs	r2, #4
 8000c76:	d3d9      	bcc.n	8000c2c <memcpy+0xcc>
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c7e:	f800 3b01 	strb.w	r3, [r0], #1
 8000c82:	d2f9      	bcs.n	8000c78 <memcpy+0x118>
 8000c84:	780b      	ldrb	r3, [r1, #0]
 8000c86:	7003      	strb	r3, [r0, #0]
 8000c88:	784b      	ldrb	r3, [r1, #1]
 8000c8a:	7043      	strb	r3, [r0, #1]
 8000c8c:	788b      	ldrb	r3, [r1, #2]
 8000c8e:	7083      	strb	r3, [r0, #2]
 8000c90:	4660      	mov	r0, ip
 8000c92:	4770      	bx	lr
	...
 8000ca0:	eba2 0003 	sub.w	r0, r2, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <strcmp>:
 8000ca8:	7802      	ldrb	r2, [r0, #0]
 8000caa:	780b      	ldrb	r3, [r1, #0]
 8000cac:	2a01      	cmp	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	429a      	cmpcs	r2, r3
 8000cb2:	d1f5      	bne.n	8000ca0 <memcpy+0x140>
 8000cb4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000cb8:	ea40 0401 	orr.w	r4, r0, r1
 8000cbc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000cc0:	f06f 0c00 	mvn.w	ip, #0
 8000cc4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000cc8:	b312      	cbz	r2, 8000d10 <strcmp+0x68>
 8000cca:	ea80 0401 	eor.w	r4, r0, r1
 8000cce:	f014 0f07 	tst.w	r4, #7
 8000cd2:	d16a      	bne.n	8000daa <strcmp+0x102>
 8000cd4:	f000 0407 	and.w	r4, r0, #7
 8000cd8:	f020 0007 	bic.w	r0, r0, #7
 8000cdc:	f004 0503 	and.w	r5, r4, #3
 8000ce0:	f021 0107 	bic.w	r1, r1, #7
 8000ce4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000ce8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000cec:	f014 0f04 	tst.w	r4, #4
 8000cf0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000cf4:	fa0c f405 	lsl.w	r4, ip, r5
 8000cf8:	ea62 0204 	orn	r2, r2, r4
 8000cfc:	ea66 0604 	orn	r6, r6, r4
 8000d00:	d00a      	beq.n	8000d18 <strcmp+0x70>
 8000d02:	ea63 0304 	orn	r3, r3, r4
 8000d06:	4662      	mov	r2, ip
 8000d08:	ea67 0704 	orn	r7, r7, r4
 8000d0c:	4666      	mov	r6, ip
 8000d0e:	e003      	b.n	8000d18 <strcmp+0x70>
 8000d10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000d14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000d18:	fa82 f54c 	uadd8	r5, r2, ip
 8000d1c:	ea82 0406 	eor.w	r4, r2, r6
 8000d20:	faa4 f48c 	sel	r4, r4, ip
 8000d24:	bb6c      	cbnz	r4, 8000d82 <strcmp+0xda>
 8000d26:	fa83 f54c 	uadd8	r5, r3, ip
 8000d2a:	ea83 0507 	eor.w	r5, r3, r7
 8000d2e:	faa5 f58c 	sel	r5, r5, ip
 8000d32:	b995      	cbnz	r5, 8000d5a <strcmp+0xb2>
 8000d34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000d38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000d3c:	fa82 f54c 	uadd8	r5, r2, ip
 8000d40:	ea82 0406 	eor.w	r4, r2, r6
 8000d44:	faa4 f48c 	sel	r4, r4, ip
 8000d48:	fa83 f54c 	uadd8	r5, r3, ip
 8000d4c:	ea83 0507 	eor.w	r5, r3, r7
 8000d50:	faa5 f58c 	sel	r5, r5, ip
 8000d54:	4325      	orrs	r5, r4
 8000d56:	d0db      	beq.n	8000d10 <strcmp+0x68>
 8000d58:	b99c      	cbnz	r4, 8000d82 <strcmp+0xda>
 8000d5a:	ba2d      	rev	r5, r5
 8000d5c:	fab5 f485 	clz	r4, r5
 8000d60:	f024 0407 	bic.w	r4, r4, #7
 8000d64:	fa27 f104 	lsr.w	r1, r7, r4
 8000d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000d6c:	fa23 f304 	lsr.w	r3, r3, r4
 8000d70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000d74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000d7c:	eba0 0001 	sub.w	r0, r0, r1
 8000d80:	4770      	bx	lr
 8000d82:	ba24      	rev	r4, r4
 8000d84:	fab4 f484 	clz	r4, r4
 8000d88:	f024 0407 	bic.w	r4, r4, #7
 8000d8c:	fa26 f104 	lsr.w	r1, r6, r4
 8000d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000d94:	fa22 f204 	lsr.w	r2, r2, r4
 8000d98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000d9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000da0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000da4:	eba0 0001 	sub.w	r0, r0, r1
 8000da8:	4770      	bx	lr
 8000daa:	f014 0f03 	tst.w	r4, #3
 8000dae:	d13c      	bne.n	8000e2a <strcmp+0x182>
 8000db0:	f010 0403 	ands.w	r4, r0, #3
 8000db4:	d128      	bne.n	8000e08 <strcmp+0x160>
 8000db6:	f850 2b08 	ldr.w	r2, [r0], #8
 8000dba:	f851 3b08 	ldr.w	r3, [r1], #8
 8000dbe:	fa82 f54c 	uadd8	r5, r2, ip
 8000dc2:	ea82 0503 	eor.w	r5, r2, r3
 8000dc6:	faa5 f58c 	sel	r5, r5, ip
 8000dca:	b95d      	cbnz	r5, 8000de4 <strcmp+0x13c>
 8000dcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd4:	fa82 f54c 	uadd8	r5, r2, ip
 8000dd8:	ea82 0503 	eor.w	r5, r2, r3
 8000ddc:	faa5 f58c 	sel	r5, r5, ip
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d0e8      	beq.n	8000db6 <strcmp+0x10e>
 8000de4:	ba2d      	rev	r5, r5
 8000de6:	fab5 f485 	clz	r4, r5
 8000dea:	f024 0407 	bic.w	r4, r4, #7
 8000dee:	fa23 f104 	lsr.w	r1, r3, r4
 8000df2:	fa22 f204 	lsr.w	r2, r2, r4
 8000df6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000dfa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000dfe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e02:	eba0 0001 	sub.w	r0, r0, r1
 8000e06:	4770      	bx	lr
 8000e08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000e0c:	f020 0003 	bic.w	r0, r0, #3
 8000e10:	f850 2b08 	ldr.w	r2, [r0], #8
 8000e14:	f021 0103 	bic.w	r1, r1, #3
 8000e18:	f851 3b08 	ldr.w	r3, [r1], #8
 8000e1c:	fa0c f404 	lsl.w	r4, ip, r4
 8000e20:	ea62 0204 	orn	r2, r2, r4
 8000e24:	ea63 0304 	orn	r3, r3, r4
 8000e28:	e7c9      	b.n	8000dbe <strcmp+0x116>
 8000e2a:	f010 0403 	ands.w	r4, r0, #3
 8000e2e:	d01a      	beq.n	8000e66 <strcmp+0x1be>
 8000e30:	eba1 0104 	sub.w	r1, r1, r4
 8000e34:	f020 0003 	bic.w	r0, r0, #3
 8000e38:	07e4      	lsls	r4, r4, #31
 8000e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e3e:	d006      	beq.n	8000e4e <strcmp+0x1a6>
 8000e40:	d20f      	bcs.n	8000e62 <strcmp+0x1ba>
 8000e42:	788b      	ldrb	r3, [r1, #2]
 8000e44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000e48:	1ae4      	subs	r4, r4, r3
 8000e4a:	d106      	bne.n	8000e5a <strcmp+0x1b2>
 8000e4c:	b12b      	cbz	r3, 8000e5a <strcmp+0x1b2>
 8000e4e:	78cb      	ldrb	r3, [r1, #3]
 8000e50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000e54:	1ae4      	subs	r4, r4, r3
 8000e56:	d100      	bne.n	8000e5a <strcmp+0x1b2>
 8000e58:	b91b      	cbnz	r3, 8000e62 <strcmp+0x1ba>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000e60:	4770      	bx	lr
 8000e62:	f101 0104 	add.w	r1, r1, #4
 8000e66:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e6a:	07cc      	lsls	r4, r1, #31
 8000e6c:	f021 0103 	bic.w	r1, r1, #3
 8000e70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e74:	d848      	bhi.n	8000f08 <strcmp+0x260>
 8000e76:	d224      	bcs.n	8000ec2 <strcmp+0x21a>
 8000e78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8000e7c:	fa82 f54c 	uadd8	r5, r2, ip
 8000e80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000e84:	faa5 f58c 	sel	r5, r5, ip
 8000e88:	d10a      	bne.n	8000ea0 <strcmp+0x1f8>
 8000e8a:	b965      	cbnz	r5, 8000ea6 <strcmp+0x1fe>
 8000e8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e90:	ea84 0402 	eor.w	r4, r4, r2
 8000e94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000e98:	d10e      	bne.n	8000eb8 <strcmp+0x210>
 8000e9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e9e:	e7eb      	b.n	8000e78 <strcmp+0x1d0>
 8000ea0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000ea4:	e055      	b.n	8000f52 <strcmp+0x2aa>
 8000ea6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8000eaa:	d14d      	bne.n	8000f48 <strcmp+0x2a0>
 8000eac:	7808      	ldrb	r0, [r1, #0]
 8000eae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000eb2:	f1c0 0000 	rsb	r0, r0, #0
 8000eb6:	4770      	bx	lr
 8000eb8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ebc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000ec0:	e047      	b.n	8000f52 <strcmp+0x2aa>
 8000ec2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000ec6:	fa82 f54c 	uadd8	r5, r2, ip
 8000eca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000ece:	faa5 f58c 	sel	r5, r5, ip
 8000ed2:	d10a      	bne.n	8000eea <strcmp+0x242>
 8000ed4:	b965      	cbnz	r5, 8000ef0 <strcmp+0x248>
 8000ed6:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eda:	ea84 0402 	eor.w	r4, r4, r2
 8000ede:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000ee2:	d10c      	bne.n	8000efe <strcmp+0x256>
 8000ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8000ee8:	e7eb      	b.n	8000ec2 <strcmp+0x21a>
 8000eea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000eee:	e030      	b.n	8000f52 <strcmp+0x2aa>
 8000ef0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000ef4:	d128      	bne.n	8000f48 <strcmp+0x2a0>
 8000ef6:	880b      	ldrh	r3, [r1, #0]
 8000ef8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000efc:	e029      	b.n	8000f52 <strcmp+0x2aa>
 8000efe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000f02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000f06:	e024      	b.n	8000f52 <strcmp+0x2aa>
 8000f08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8000f0c:	fa82 f54c 	uadd8	r5, r2, ip
 8000f10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000f14:	faa5 f58c 	sel	r5, r5, ip
 8000f18:	d10a      	bne.n	8000f30 <strcmp+0x288>
 8000f1a:	b965      	cbnz	r5, 8000f36 <strcmp+0x28e>
 8000f1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f20:	ea84 0402 	eor.w	r4, r4, r2
 8000f24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000f28:	d109      	bne.n	8000f3e <strcmp+0x296>
 8000f2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f2e:	e7eb      	b.n	8000f08 <strcmp+0x260>
 8000f30:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000f34:	e00d      	b.n	8000f52 <strcmp+0x2aa>
 8000f36:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000f3a:	d105      	bne.n	8000f48 <strcmp+0x2a0>
 8000f3c:	680b      	ldr	r3, [r1, #0]
 8000f3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000f42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f46:	e004      	b.n	8000f52 <strcmp+0x2aa>
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f50:	4770      	bx	lr
 8000f52:	ba12      	rev	r2, r2
 8000f54:	ba1b      	rev	r3, r3
 8000f56:	fa82 f44c 	uadd8	r4, r2, ip
 8000f5a:	ea82 0403 	eor.w	r4, r2, r3
 8000f5e:	faa4 f58c 	sel	r5, r4, ip
 8000f62:	fab5 f485 	clz	r4, r5
 8000f66:	fa02 f204 	lsl.w	r2, r2, r4
 8000f6a:	fa03 f304 	lsl.w	r3, r3, r4
 8000f6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000f72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8000f7a:	4770      	bx	lr
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <__gedf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpdf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__ledf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpdf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpdf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000faa:	d01b      	beq.n	8000fe4 <__cmpdf2+0x54>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fb8:	ea91 0f03 	teqne	r1, r3
 8000fbc:	bf02      	ittt	eq
 8000fbe:	ea90 0f02 	teqeq	r0, r2
 8000fc2:	2000      	moveq	r0, #0
 8000fc4:	4770      	bxeq	lr
 8000fc6:	f110 0f00 	cmn.w	r0, #0
 8000fca:	ea91 0f03 	teq	r1, r3
 8000fce:	bf58      	it	pl
 8000fd0:	4299      	cmppl	r1, r3
 8000fd2:	bf08      	it	eq
 8000fd4:	4290      	cmpeq	r0, r2
 8000fd6:	bf2c      	ite	cs
 8000fd8:	17d8      	asrcs	r0, r3, #31
 8000fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000fde:	f040 0001 	orr.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fec:	d102      	bne.n	8000ff4 <__cmpdf2+0x64>
 8000fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ff2:	d107      	bne.n	8001004 <__cmpdf2+0x74>
 8000ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ffc:	d1d6      	bne.n	8000fac <__cmpdf2+0x1c>
 8000ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001002:	d0d3      	beq.n	8000fac <__cmpdf2+0x1c>
 8001004:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__aeabi_cdrcmple>:
 800100c:	4684      	mov	ip, r0
 800100e:	4610      	mov	r0, r2
 8001010:	4662      	mov	r2, ip
 8001012:	468c      	mov	ip, r1
 8001014:	4619      	mov	r1, r3
 8001016:	4663      	mov	r3, ip
 8001018:	e000      	b.n	800101c <__aeabi_cdcmpeq>
 800101a:	bf00      	nop

0800101c <__aeabi_cdcmpeq>:
 800101c:	b501      	push	{r0, lr}
 800101e:	f7ff ffb7 	bl	8000f90 <__cmpdf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	bf48      	it	mi
 8001026:	f110 0f00 	cmnmi.w	r0, #0
 800102a:	bd01      	pop	{r0, pc}

0800102c <__aeabi_dcmpeq>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff fff4 	bl	800101c <__aeabi_cdcmpeq>
 8001034:	bf0c      	ite	eq
 8001036:	2001      	moveq	r0, #1
 8001038:	2000      	movne	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_dcmplt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffea 	bl	800101c <__aeabi_cdcmpeq>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_dcmple>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffe0 	bl	800101c <__aeabi_cdcmpeq>
 800105c:	bf94      	ite	ls
 800105e:	2001      	movls	r0, #1
 8001060:	2000      	movhi	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_dcmpge>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffce 	bl	800100c <__aeabi_cdrcmple>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_dcmpgt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffc4 	bl	800100c <__aeabi_cdrcmple>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <notify4.lto_priv.83>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE;
 8001090:	4a02      	ldr	r2, [pc, #8]	; (800109c <notify4.lto_priv.83+0xc>)
 8001092:	68d3      	ldr	r3, [r2, #12]
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	60d3      	str	r3, [r2, #12]
 800109a:	4770      	bx	lr
 800109c:	40004c00 	.word	0x40004c00

080010a0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010a0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010a4:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010a6:	68dc      	ldr	r4, [r3, #12]
 80010a8:	4014      	ands	r4, r2
 80010aa:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80010ac:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010ae:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010b0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 80010b2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010b4:	d503      	bpl.n	80010be <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80010b6:	6843      	ldr	r3, [r0, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010ba:	b103      	cbz	r3, 80010be <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80010bc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010be:	0760      	lsls	r0, r4, #29
 80010c0:	d504      	bpl.n	80010cc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 80010c2:	686b      	ldr	r3, [r5, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010c6:	b10b      	cbz	r3, 80010cc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 80010c8:	4628      	mov	r0, r5
 80010ca:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010cc:	0721      	lsls	r1, r4, #28
 80010ce:	d504      	bpl.n	80010da <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 80010d0:	686b      	ldr	r3, [r5, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010d4:	b10b      	cbz	r3, 80010da <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 80010d6:	4628      	mov	r0, r5
 80010d8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010da:	06e2      	lsls	r2, r4, #27
 80010dc:	d504      	bpl.n	80010e8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 80010de:	686b      	ldr	r3, [r5, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010e2:	b10b      	cbz	r3, 80010e8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 80010e4:	4628      	mov	r0, r5
 80010e6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80010e8:	07e3      	lsls	r3, r4, #31
 80010ea:	d506      	bpl.n	80010fa <pwm_lld_serve_interrupt+0x5a>
 80010ec:	686b      	ldr	r3, [r5, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	b11b      	cbz	r3, 80010fa <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 80010f2:	4628      	mov	r0, r5
}
 80010f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 80010f8:	4718      	bx	r3
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
 80010fc:	0000      	movs	r0, r0
	...

08001100 <gpt_lld_serve_interrupt>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8001100:	7801      	ldrb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8001102:	68c3      	ldr	r3, [r0, #12]
 8001104:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8001106:	2904      	cmp	r1, #4
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8001108:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 800110a:	d107      	bne.n	800111c <gpt_lld_serve_interrupt+0x1c>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800110c:	2102      	movs	r1, #2
 800110e:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8001110:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8001112:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800111a:	60da      	str	r2, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800111c:	6843      	ldr	r3, [r0, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4718      	bx	r3
 8001122:	bf00      	nop
	...

08001130 <spi_lld_serve_tx_interrupt.lto_priv.94>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001130:	f011 0f0c 	tst.w	r1, #12
 8001134:	d100      	bne.n	8001138 <spi_lld_serve_tx_interrupt.lto_priv.94+0x8>
 8001136:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800113a:	4b02      	ldr	r3, [pc, #8]	; (8001144 <spi_lld_serve_tx_interrupt.lto_priv.94+0x14>)
 800113c:	4a02      	ldr	r2, [pc, #8]	; (8001148 <spi_lld_serve_tx_interrupt.lto_priv.94+0x18>)
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001140:	e7fe      	b.n	8001140 <spi_lld_serve_tx_interrupt.lto_priv.94+0x10>
 8001142:	bf00      	nop
 8001144:	2000d228 	.word	0x2000d228
 8001148:	080066c0 	.word	0x080066c0
 800114c:	00000000 	.word	0x00000000

08001150 <i2c_lld_serve_tx_end_irq.lto_priv.97>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001150:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001154:	b410      	push	{r4}
  I2C_TypeDef *dp = i2cp->i2c;
 8001156:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001158:	d114      	bne.n	8001184 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x34>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800115a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	f021 011f 	bic.w	r1, r1, #31
 8001164:	6019      	str	r1, [r3, #0]
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	07c9      	lsls	r1, r1, #31
 800116a:	d4fc      	bmi.n	8001166 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x16>
 800116c:	7a11      	ldrb	r1, [r2, #8]
 800116e:	6852      	ldr	r2, [r2, #4]
 8001170:	233d      	movs	r3, #61	; 0x3d
 8001172:	408b      	lsls	r3, r1
 8001174:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001176:	6863      	ldr	r3, [r4, #4]
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6063      	str	r3, [r4, #4]
}
 800117e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	b672      	cpsid	i
 8001186:	4b02      	ldr	r3, [pc, #8]	; (8001190 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x40>)
 8001188:	4a02      	ldr	r2, [pc, #8]	; (8001194 <i2c_lld_serve_tx_end_irq.lto_priv.97+0x44>)
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
 800118c:	e7fe      	b.n	800118c <i2c_lld_serve_tx_end_irq.lto_priv.97+0x3c>
 800118e:	bf00      	nop
 8001190:	2000d228 	.word	0x2000d228
 8001194:	080066c0 	.word	0x080066c0
	...

080011a0 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80011a0:	2900      	cmp	r1, #0
 80011a2:	dd03      	ble.n	80011ac <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80011a4:	4919      	ldr	r1, [pc, #100]	; (800120c <cmd_info+0x6c>)
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <cmd_info+0x70>)
 80011a8:	f000 bffa 	b.w	80021a0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80011ac:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80011ae:	4919      	ldr	r1, [pc, #100]	; (8001214 <cmd_info+0x74>)
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80011b2:	b082      	sub	sp, #8
 80011b4:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80011b6:	f000 fff3 	bl	80021a0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 80011ba:	4620      	mov	r0, r4
 80011bc:	4917      	ldr	r1, [pc, #92]	; (800121c <cmd_info+0x7c>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <cmd_info+0x80>)
 80011c0:	f000 ffee 	bl	80021a0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 80011c4:	4620      	mov	r0, r4
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <cmd_info+0x84>)
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <cmd_info+0x88>)
 80011ca:	f000 ffe9 	bl	80021a0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 80011ce:	4620      	mov	r0, r4
 80011d0:	4916      	ldr	r1, [pc, #88]	; (800122c <cmd_info+0x8c>)
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <cmd_info+0x90>)
 80011d4:	f000 ffe4 	bl	80021a0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 80011d8:	4620      	mov	r0, r4
 80011da:	4916      	ldr	r1, [pc, #88]	; (8001234 <cmd_info+0x94>)
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <cmd_info+0x98>)
 80011de:	f000 ffdf 	bl	80021a0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80011e2:	4620      	mov	r0, r4
 80011e4:	4915      	ldr	r1, [pc, #84]	; (800123c <cmd_info+0x9c>)
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <cmd_info+0xa0>)
 80011e8:	f000 ffda 	bl	80021a0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80011ec:	4620      	mov	r0, r4
 80011ee:	4915      	ldr	r1, [pc, #84]	; (8001244 <cmd_info+0xa4>)
 80011f0:	4a15      	ldr	r2, [pc, #84]	; (8001248 <cmd_info+0xa8>)
 80011f2:	f000 ffd5 	bl	80021a0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <cmd_info+0xac>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4620      	mov	r0, r4
 80011fc:	4914      	ldr	r1, [pc, #80]	; (8001250 <cmd_info+0xb0>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <cmd_info+0xb4>)
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <cmd_info+0xb8>)
 8001202:	f000 ffcd 	bl	80021a0 <chprintf>
#endif
#endif
}
 8001206:	b002      	add	sp, #8
 8001208:	bd10      	pop	{r4, pc}
 800120a:	bf00      	nop
 800120c:	080066cc 	.word	0x080066cc
 8001210:	080066d8 	.word	0x080066d8
 8001214:	080066e0 	.word	0x080066e0
 8001218:	080066f4 	.word	0x080066f4
 800121c:	080066fc 	.word	0x080066fc
 8001220:	08006710 	.word	0x08006710
 8001224:	08006758 	.word	0x08006758
 8001228:	0800676c 	.word	0x0800676c
 800122c:	08006778 	.word	0x08006778
 8001230:	0800678c 	.word	0x0800678c
 8001234:	08006798 	.word	0x08006798
 8001238:	080067ac 	.word	0x080067ac
 800123c:	080067c4 	.word	0x080067c4
 8001240:	080067d8 	.word	0x080067d8
 8001244:	08006804 	.word	0x08006804
 8001248:	08006818 	.word	0x08006818
 800124c:	08006868 	.word	0x08006868
 8001250:	08006840 	.word	0x08006840
 8001254:	08006858 	.word	0x08006858
 8001258:	08006864 	.word	0x08006864
 800125c:	00000000 	.word	0x00000000

08001260 <VectorA0>:
/**
 * @brief   TIM9 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
 8001260:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001262:	f002 fb25 	bl	80038b0 <_stats_increase_irq>
 8001266:	f002 fd73 	bl	8003d50 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD9);
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <VectorA0+0x1c>)
 800126c:	f7ff ff18 	bl	80010a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001270:	f002 fd56 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD9);

  OSAL_IRQ_EPILOGUE();
 8001278:	f001 bd3a 	b.w	8002cf0 <_port_irq_epilogue>
 800127c:	20002d60 	.word	0x20002d60

08001280 <VectorF8>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_CC_HANDLER) {
 8001280:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001282:	f002 fb15 	bl	80038b0 <_stats_increase_irq>
 8001286:	f002 fd63 	bl	8003d50 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <VectorF8+0x1c>)
 800128c:	f7ff ff08 	bl	80010a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001290:	f002 fd46 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 8001298:	f001 bd2a 	b.w	8002cf0 <_port_irq_epilogue>
 800129c:	2000da1c 	.word	0x2000da1c

080012a0 <VectorF0>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
 80012a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012a2:	f002 fb05 	bl	80038b0 <_stats_increase_irq>
 80012a6:	f002 fd53 	bl	8003d50 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <VectorF0+0x1c>)
 80012ac:	f7ff fef8 	bl	80010a0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012b0:	f002 fd36 	bl	8003d20 <_dbg_check_leave_isr>
}
 80012b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 80012b8:	f001 bd1a 	b.w	8002cf0 <_port_irq_epilogue>
 80012bc:	2000da1c 	.word	0x2000da1c

080012c0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80012c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012c2:	f002 faf5 	bl	80038b0 <_stats_increase_irq>
 80012c6:	f002 fd43 	bl	8003d50 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD4);
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <VectorB8+0x1c>)
 80012cc:	f7ff ff18 	bl	8001100 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012d0:	f002 fd26 	bl	8003d20 <_dbg_check_leave_isr>
}
 80012d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 80012d8:	f001 bd0a 	b.w	8002cf0 <_port_irq_epilogue>
 80012dc:	2000dbd8 	.word	0x2000dbd8

080012e0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80012e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012e2:	f002 fae5 	bl	80038b0 <_stats_increase_irq>
 80012e6:	f002 fd33 	bl	8003d50 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD3);
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <VectorB4+0x1c>)
 80012ec:	f7ff ff08 	bl	8001100 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012f0:	f002 fd16 	bl	8003d20 <_dbg_check_leave_isr>
}
 80012f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 80012f8:	f001 bcfa 	b.w	8002cf0 <_port_irq_epilogue>
 80012fc:	2000d14c 	.word	0x2000d14c

08001300 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001300:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001302:	f002 fad5 	bl	80038b0 <_stats_increase_irq>
 8001306:	f002 fd23 	bl	8003d50 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD2);
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <VectorB0+0x1c>)
 800130c:	f7ff fef8 	bl	8001100 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001310:	f002 fd06 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD2);

  OSAL_IRQ_EPILOGUE();
 8001318:	f001 bcea 	b.w	8002cf0 <_port_irq_epilogue>
 800131c:	2000da38 	.word	0x2000da38

08001320 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001320:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001322:	f002 fac5 	bl	80038b0 <_stats_increase_irq>
 8001326:	f002 fd13 	bl	8003d50 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD1);
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <VectorA4+0x1c>)
 800132c:	f7ff fee8 	bl	8001100 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001330:	f002 fcf6 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD1);

  OSAL_IRQ_EPILOGUE();
 8001338:	f001 bcda 	b.w	8002cf0 <_port_irq_epilogue>
 800133c:	2000bcb0 	.word	0x2000bcb0

08001340 <Vector110>:
/**
 * @brief   UART4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8001344:	4d7c      	ldr	r5, [pc, #496]	; (8001538 <Vector110+0x1f8>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8001346:	f002 fab3 	bl	80038b0 <_stats_increase_irq>
 800134a:	f002 fd01 	bl	8003d50 <_dbg_check_enter_isr>
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800134e:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001350:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8001354:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001356:	05df      	lsls	r7, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8001358:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800135a:	f100 8097 	bmi.w	800148c <Vector110+0x14c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800135e:	2320      	movs	r3, #32
 8001360:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001364:	f002 faf4 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001368:	f002 fd22 	bl	8003db0 <_dbg_check_lock_from_isr>
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800136c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001370:	d047      	beq.n	8001402 <Vector110+0xc2>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001372:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001538 <Vector110+0x1f8>
 8001376:	e007      	b.n	8001388 <Vector110+0x48>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8001378:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800137a:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 800137c:	d41d      	bmi.n	80013ba <Vector110+0x7a>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800137e:	6834      	ldr	r4, [r6, #0]
 8001380:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001382:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001386:	d03c      	beq.n	8001402 <Vector110+0xc2>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001388:	0720      	lsls	r0, r4, #28
 800138a:	d0f5      	beq.n	8001378 <Vector110+0x38>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800138c:	f014 0f08 	tst.w	r4, #8
 8001390:	bf0c      	ite	eq
 8001392:	2100      	moveq	r1, #0
 8001394:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8001396:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8001398:	bf48      	it	mi
 800139a:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800139e:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 80013a0:	bf48      	it	mi
 80013a2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80013a6:	0767      	lsls	r7, r4, #29
    sts |= SD_NOISE_ERROR;
 80013a8:	bf48      	it	mi
 80013aa:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80013ae:	4863      	ldr	r0, [pc, #396]	; (800153c <Vector110+0x1fc>)
 80013b0:	f001 fed6 	bl	8003160 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 80013b4:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80013b6:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013b8:	d5e1      	bpl.n	800137e <Vector110+0x3e>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 80013ba:	f002 fb69 	bl	8003a90 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 80013be:	f002 fb67 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 80013c2:	696b      	ldr	r3, [r5, #20]
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80013c4:	b38b      	cbz	r3, 800142a <Vector110+0xea>
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();
 80013c6:	f002 fb63 	bl	8003a90 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();
 80013ca:	f002 fb61 	bl	8003a90 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80013ce:	6a2b      	ldr	r3, [r5, #32]
 80013d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02e      	beq.n	8001434 <Vector110+0xf4>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80013d6:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80013d8:	1c59      	adds	r1, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80013da:	3201      	adds	r2, #1
 80013dc:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 80013de:	6229      	str	r1, [r5, #32]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80013e0:	701f      	strb	r7, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 80013e2:	6a2a      	ldr	r2, [r5, #32]
 80013e4:	69eb      	ldr	r3, [r5, #28]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d303      	bcc.n	80013f2 <Vector110+0xb2>
    iqp->q_wrptr = iqp->q_buffer;
 80013ea:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80013ee:	f8c8 3020 	str.w	r3, [r8, #32]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 80013f2:	4853      	ldr	r0, [pc, #332]	; (8001540 <Vector110+0x200>)
 80013f4:	f003 fd54 	bl	8004ea0 <chThdDequeueNextI.constprop.54>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80013f8:	6834      	ldr	r4, [r6, #0]
 80013fa:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013fc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001400:	d1c2      	bne.n	8001388 <Vector110+0x48>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001402:	f002 fcbd 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001406:	f002 fa8b 	bl	8003920 <_stats_stop_measure_crit_isr>
 800140a:	2300      	movs	r3, #0
 800140c:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001410:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001414:	d001      	beq.n	800141a <Vector110+0xda>
 8001416:	0622      	lsls	r2, r4, #24
 8001418:	d44f      	bmi.n	80014ba <Vector110+0x17a>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 800141a:	0663      	lsls	r3, r4, #25
 800141c:	d413      	bmi.n	8001446 <Vector110+0x106>

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 800141e:	f002 fc7f 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001422:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8001426:	f001 bc63 	b.w	8002cf0 <_port_irq_epilogue>
 800142a:	4844      	ldr	r0, [pc, #272]	; (800153c <Vector110+0x1fc>)
 800142c:	2104      	movs	r1, #4
 800142e:	f001 fe97 	bl	8003160 <chEvtBroadcastFlagsI>
 8001432:	e7c8      	b.n	80013c6 <Vector110+0x86>
 8001434:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8001438:	2a00      	cmp	r2, #0
 800143a:	d0cc      	beq.n	80013d6 <Vector110+0x96>
 800143c:	483f      	ldr	r0, [pc, #252]	; (800153c <Vector110+0x1fc>)
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	f001 fe8e 	bl	8003160 <chEvtBroadcastFlagsI>
 8001444:	e79b      	b.n	800137e <Vector110+0x3e>
 8001446:	2320      	movs	r3, #32
 8001448:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800144c:	f002 fa80 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001450:	f002 fcae 	bl	8003db0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8001454:	f002 fb1c 	bl	8003a90 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001458:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800145a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800145c:	4836      	ldr	r0, [pc, #216]	; (8001538 <Vector110+0x1f8>)
 800145e:	429a      	cmp	r2, r3
 8001460:	d053      	beq.n	800150a <Vector110+0x1ca>
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001462:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001466:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 800146a:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800146e:	60f3      	str	r3, [r6, #12]
    u->SR = ~USART_SR_TC;
 8001470:	6032      	str	r2, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001472:	f002 fc85 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001476:	f002 fa53 	bl	8003920 <_stats_stop_measure_crit_isr>
 800147a:	2300      	movs	r3, #0
 800147c:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8001480:	f002 fc4e 	bl	8003d20 <_dbg_check_leave_isr>
}
 8001484:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8001488:	f001 bc32 	b.w	8002cf0 <_port_irq_epilogue>
 800148c:	2320      	movs	r3, #32
 800148e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001492:	f002 fa5d 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001496:	f002 fc8b 	bl	8003db0 <_dbg_check_lock_from_isr>
 800149a:	1d28      	adds	r0, r5, #4
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	f001 fe5e 	bl	8003160 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 80014a4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80014a8:	6033      	str	r3, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80014aa:	f002 fc69 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80014ae:	f002 fa37 	bl	8003920 <_stats_stop_measure_crit_isr>
 80014b2:	2300      	movs	r3, #0
 80014b4:	f383 8811 	msr	BASEPRI, r3
 80014b8:	e751      	b.n	800135e <Vector110+0x1e>
 80014ba:	2320      	movs	r3, #32
 80014bc:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80014c0:	f002 fa46 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80014c4:	f002 fc74 	bl	8003db0 <_dbg_check_lock_from_isr>
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
  uint8_t b;

  chDbgCheckClassI();
 80014c8:	f002 fae2 	bl	8003a90 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80014cc:	f002 fae0 	bl	8003a90 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80014d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014d2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <Vector110+0x1f8>)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d01f      	beq.n	800151a <Vector110+0x1da>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80014da:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <Vector110+0x1f8>)
  b = *oqp->q_rdptr++;
 80014de:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80014e0:	3201      	adds	r2, #1
 80014e2:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80014e4:	64a8      	str	r0, [r5, #72]	; 0x48
 80014e6:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80014e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80014ea:	4298      	cmp	r0, r3
 80014ec:	d301      	bcc.n	80014f2 <Vector110+0x1b2>
    oqp->q_rdptr = oqp->q_buffer;
 80014ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80014f0:	648b      	str	r3, [r1, #72]	; 0x48
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <Vector110+0x204>)
 80014f4:	f003 fcd4 	bl	8004ea0 <chThdDequeueNextI.constprop.54>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80014f8:	6077      	str	r7, [r6, #4]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80014fa:	f002 fc41 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80014fe:	f002 fa0f 	bl	8003920 <_stats_stop_measure_crit_isr>
 8001502:	2300      	movs	r3, #0
 8001504:	f383 8811 	msr	BASEPRI, r3
 8001508:	e787      	b.n	800141a <Vector110+0xda>
 800150a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0a8      	beq.n	8001462 <Vector110+0x122>
 8001510:	3004      	adds	r0, #4
 8001512:	2110      	movs	r1, #16
 8001514:	f001 fe24 	bl	8003160 <chEvtBroadcastFlagsI>
 8001518:	e7a3      	b.n	8001462 <Vector110+0x122>
 800151a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800151c:	2a00      	cmp	r2, #0
 800151e:	d0dc      	beq.n	80014da <Vector110+0x19a>
 8001520:	3004      	adds	r0, #4
 8001522:	2108      	movs	r1, #8
 8001524:	f001 fe1c 	bl	8003160 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001528:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800152c:	ea09 0303 	and.w	r3, r9, r3
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	60f3      	str	r3, [r6, #12]
 8001536:	e7e0      	b.n	80014fa <Vector110+0x1ba>
 8001538:	20002da4 	.word	0x20002da4
 800153c:	20002da8 	.word	0x20002da8
 8001540:	20002db0 	.word	0x20002db0
 8001544:	20002dd4 	.word	0x20002dd4
	...

08001550 <spi_lld_serve_rx_interrupt.lto_priv.93>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001550:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001554:	b538      	push	{r3, r4, r5, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001556:	d13a      	bne.n	80015ce <spi_lld_serve_rx_interrupt.lto_priv.93+0x7e>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001558:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800155a:	680b      	ldr	r3, [r1, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f022 021f 	bic.w	r2, r2, #31
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	07d4      	lsls	r4, r2, #31
 8001568:	d4fc      	bmi.n	8001564 <spi_lld_serve_rx_interrupt.lto_priv.93+0x14>
 800156a:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800156c:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800156e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8001570:	6813      	ldr	r3, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001572:	213d      	movs	r1, #61	; 0x3d
 8001574:	40a9      	lsls	r1, r5
 8001576:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	f021 011f 	bic.w	r1, r1, #31
 800157e:	6019      	str	r1, [r3, #0]
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	07c9      	lsls	r1, r1, #31
 8001584:	d4fc      	bmi.n	8001580 <spi_lld_serve_rx_interrupt.lto_priv.93+0x30>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8001586:	6843      	ldr	r3, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8001588:	6851      	ldr	r1, [r2, #4]
 800158a:	4604      	mov	r4, r0
 800158c:	7a10      	ldrb	r0, [r2, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800158e:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8001590:	233d      	movs	r3, #61	; 0x3d
 8001592:	4083      	lsls	r3, r0
 8001594:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8001596:	b1fa      	cbz	r2, 80015d8 <spi_lld_serve_rx_interrupt.lto_priv.93+0x88>
 8001598:	2304      	movs	r3, #4
 800159a:	7023      	strb	r3, [r4, #0]
 800159c:	4620      	mov	r0, r4
 800159e:	4790      	blx	r2
 80015a0:	7823      	ldrb	r3, [r4, #0]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d018      	beq.n	80015d8 <spi_lld_serve_rx_interrupt.lto_priv.93+0x88>
 80015a6:	2320      	movs	r3, #32
 80015a8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80015ac:	f002 f9d0 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80015b0:	f002 fbfe 	bl	8003db0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80015b4:	f104 0008 	add.w	r0, r4, #8
 80015b8:	2100      	movs	r1, #0
 80015ba:	f002 fb71 	bl	8003ca0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80015be:	f002 fbdf 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80015c2:	f002 f9ad 	bl	8003920 <_stats_stop_measure_crit_isr>
 80015c6:	2300      	movs	r3, #0
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ce:	b672      	cpsid	i
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <spi_lld_serve_rx_interrupt.lto_priv.93+0x90>)
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <spi_lld_serve_rx_interrupt.lto_priv.93+0x94>)
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	e7fe      	b.n	80015d6 <spi_lld_serve_rx_interrupt.lto_priv.93+0x86>
 80015d8:	2302      	movs	r3, #2
 80015da:	7023      	strb	r3, [r4, #0]
 80015dc:	e7e3      	b.n	80015a6 <spi_lld_serve_rx_interrupt.lto_priv.93+0x56>
 80015de:	bf00      	nop
 80015e0:	2000d228 	.word	0x2000d228
 80015e4:	080066c0 	.word	0x080066c0
	...

080015f0 <VectorC0>:
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80015f2:	4c3d      	ldr	r4, [pc, #244]	; (80016e8 <VectorC0+0xf8>)
 80015f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015f6:	695e      	ldr	r6, [r3, #20]

  OSAL_IRQ_PROLOGUE();
 80015f8:	f002 f95a 	bl	80038b0 <_stats_increase_irq>

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80015fc:	b2b5      	uxth	r5, r6

  OSAL_IRQ_PROLOGUE();
 80015fe:	f002 fba7 	bl	8003d50 <_dbg_check_enter_isr>
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001602:	6b27      	ldr	r7, [r4, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001606:	683a      	ldr	r2, [r7, #0]
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001608:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
 800160c:	43db      	mvns	r3, r3
 800160e:	614b      	str	r3, [r1, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	f023 031f 	bic.w	r3, r3, #31
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	07d8      	lsls	r0, r3, #31
 800161c:	d4fc      	bmi.n	8001618 <VectorC0+0x28>
 800161e:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8001622:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001624:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001626:	6802      	ldr	r2, [r0, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001628:	233d      	movs	r3, #61	; 0x3d
 800162a:	fa03 f30e 	lsl.w	r3, r3, lr
 800162e:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f023 031f 	bic.w	r3, r3, #31
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	f013 0301 	ands.w	r3, r3, #1
 800163e:	d1fb      	bne.n	8001638 <VectorC0+0x48>
 8001640:	7a07      	ldrb	r7, [r0, #8]
 8001642:	6840      	ldr	r0, [r0, #4]
 8001644:	223d      	movs	r2, #61	; 0x3d
 8001646:	40ba      	lsls	r2, r7
 8001648:	6002      	str	r2, [r0, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800164a:	05ea      	lsls	r2, r5, #23
    i2cp->errors |= I2C_BUS_ERROR;
 800164c:	bf48      	it	mi
 800164e:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001650:	05af      	lsls	r7, r5, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8001652:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001654:	bf44      	itt	mi
 8001656:	f043 0302 	orrmi.w	r3, r3, #2
 800165a:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800165c:	0568      	lsls	r0, r5, #21
 800165e:	d50a      	bpl.n	8001676 <VectorC0+0x86>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001660:	684a      	ldr	r2, [r1, #4]
 8001662:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001666:	604a      	str	r2, [r1, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8001668:	680a      	ldr	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800166a:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800166e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001672:	600a      	str	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001674:	60a3      	str	r3, [r4, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8001676:	052a      	lsls	r2, r5, #20
    i2cp->errors |= I2C_OVERRUN;
 8001678:	bf44      	itt	mi
 800167a:	f043 0308 	orrmi.w	r3, r3, #8
 800167e:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8001680:	046f      	lsls	r7, r5, #17
    i2cp->errors |= I2C_TIMEOUT;
 8001682:	bf44      	itt	mi
 8001684:	f043 0320 	orrmi.w	r3, r3, #32
 8001688:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800168a:	04e8      	lsls	r0, r5, #19
 800168c:	d51d      	bpl.n	80016ca <VectorC0+0xda>
    i2cp->errors |= I2C_PEC_ERROR;
 800168e:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001692:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8001694:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001696:	d422      	bmi.n	80016de <VectorC0+0xee>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001698:	2320      	movs	r3, #32
 800169a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800169e:	f002 f957 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80016a2:	f002 fb85 	bl	8003db0 <_dbg_check_lock_from_isr>
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <VectorC0+0xfc>)
 80016a8:	f06f 0101 	mvn.w	r1, #1
 80016ac:	f002 faf8 	bl	8003ca0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80016b0:	f002 fb66 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80016b4:	f002 f934 	bl	8003920 <_stats_stop_measure_crit_isr>
 80016b8:	2300      	movs	r3, #0
 80016ba:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016be:	f002 fb2f 	bl	8003d20 <_dbg_check_leave_isr>
}
 80016c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016c6:	f001 bb13 	b.w	8002cf0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80016ca:	0432      	lsls	r2, r6, #16
 80016cc:	d407      	bmi.n	80016de <VectorC0+0xee>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e2      	bne.n	8001698 <VectorC0+0xa8>
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016d2:	f002 fb25 	bl	8003d20 <_dbg_check_leave_isr>
}
 80016d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016da:	f001 bb09 	b.w	8002cf0 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 80016de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e2:	60a3      	str	r3, [r4, #8]
 80016e4:	e7d8      	b.n	8001698 <VectorC0+0xa8>
 80016e6:	bf00      	nop
 80016e8:	2000dbf0 	.word	0x2000dbf0
 80016ec:	2000dc0c 	.word	0x2000dc0c

080016f0 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80016f2:	4d42      	ldr	r5, [pc, #264]	; (80017fc <VectorBC+0x10c>)
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 80016f4:	f002 f8dc 	bl	80038b0 <_stats_increase_irq>
 80016f8:	f002 fb2a 	bl	8003d50 <_dbg_check_enter_isr>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80016fc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <VectorBC+0x110>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 8001700:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8001702:	6966      	ldr	r6, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001704:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8001708:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800170c:	4293      	cmp	r3, r2
 800170e:	d050      	beq.n	80017b2 <VectorBC+0xc2>
 8001710:	d820      	bhi.n	8001754 <VectorBC+0x64>
 8001712:	3a07      	subs	r2, #7
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <VectorBC+0xaa>
 8001718:	3201      	adds	r2, #1
 800171a:	4293      	cmp	r3, r2
 800171c:	d110      	bne.n	8001740 <VectorBC+0x50>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800171e:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8001720:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001722:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8001726:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001728:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001738:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d958      	bls.n	80017f2 <VectorBC+0x102>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8001740:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 8001744:	bf18      	it	ne
 8001746:	69a3      	ldrne	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001748:	f002 faea 	bl	8003d20 <_dbg_check_leave_isr>
}
 800174c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001750:	f001 bace 	b.w	8002cf0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <VectorBC+0x114>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d014      	beq.n	8001784 <VectorBC+0x94>
 800175a:	3202      	adds	r2, #2
 800175c:	4293      	cmp	r3, r2
 800175e:	d1ef      	bne.n	8001740 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001760:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685f      	ldr	r7, [r3, #4]
 8001766:	b34f      	cbz	r7, 80017bc <VectorBC+0xcc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001768:	8c2a      	ldrh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800176a:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800176c:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001770:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001774:	842a      	strh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001776:	6023      	str	r3, [r4, #0]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001778:	f002 fad2 	bl	8003d20 <_dbg_check_leave_isr>
}
 800177c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001780:	f001 bab6 	b.w	8002cf0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001784:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001786:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800178c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800178e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e7d2      	b.n	8001740 <VectorBC+0x50>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800179a:	8c2b      	ldrh	r3, [r5, #32]
 800179c:	0a1a      	lsrs	r2, r3, #8
 800179e:	d00b      	beq.n	80017b8 <VectorBC+0xc8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017a8:	f002 0206 	and.w	r2, r2, #6
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6123      	str	r3, [r4, #16]
 80017b0:	e7c6      	b.n	8001740 <VectorBC+0x50>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80017b2:	8c2b      	ldrh	r3, [r5, #32]
 80017b4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80017b8:	6123      	str	r3, [r4, #16]
 80017ba:	e7c1      	b.n	8001740 <VectorBC+0x50>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017bc:	6863      	ldr	r3, [r4, #4]
 80017be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017c2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	2320      	movs	r3, #32
 80017ce:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80017d2:	f002 f8bd 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80017d6:	f002 faeb 	bl	8003db0 <_dbg_check_lock_from_isr>
 80017da:	f105 001c 	add.w	r0, r5, #28
 80017de:	4639      	mov	r1, r7
 80017e0:	f002 fa5e 	bl	8003ca0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80017e4:	f002 facc 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80017e8:	f002 f89a 	bl	8003920 <_stats_stop_measure_crit_isr>
 80017ec:	f387 8811 	msr	BASEPRI, r7
 80017f0:	e7a6      	b.n	8001740 <VectorBC+0x50>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	e7a1      	b.n	8001740 <VectorBC+0x50>
 80017fc:	2000dbf0 	.word	0x2000dbf0
 8001800:	00030008 	.word	0x00030008
 8001804:	00070082 	.word	0x00070082
	...

08001810 <i2c_lld_serve_rx_end_irq.lto_priv.96>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001810:	f011 0f0c 	tst.w	r1, #12
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001814:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001816:	d12f      	bne.n	8001878 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x68>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001818:	b570      	push	{r4, r5, r6, lr}
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800181a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800181c:	6829      	ldr	r1, [r5, #0]
 800181e:	680a      	ldr	r2, [r1, #0]
 8001820:	f022 021f 	bic.w	r2, r2, #31
 8001824:	600a      	str	r2, [r1, #0]
 8001826:	680a      	ldr	r2, [r1, #0]
 8001828:	f012 0401 	ands.w	r4, r2, #1
 800182c:	d1fb      	bne.n	8001826 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x16>
 800182e:	4606      	mov	r6, r0
 8001830:	7a28      	ldrb	r0, [r5, #8]
 8001832:	6869      	ldr	r1, [r5, #4]
 8001834:	223d      	movs	r2, #61	; 0x3d
 8001836:	4082      	lsls	r2, r0
 8001838:	600a      	str	r2, [r1, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001840:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	2320      	movs	r3, #32
 8001854:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001858:	f002 f87a 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800185c:	f002 faa8 	bl	8003db0 <_dbg_check_lock_from_isr>
 8001860:	f106 001c 	add.w	r0, r6, #28
 8001864:	4621      	mov	r1, r4
 8001866:	f002 fa1b 	bl	8003ca0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800186a:	f002 fa89 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800186e:	f002 f857 	bl	8003920 <_stats_stop_measure_crit_isr>
 8001872:	f384 8811 	msr	BASEPRI, r4
 8001876:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
 800187a:	4b02      	ldr	r3, [pc, #8]	; (8001884 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x74>)
 800187c:	4a02      	ldr	r2, [pc, #8]	; (8001888 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x78>)
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001880:	e7fe      	b.n	8001880 <i2c_lld_serve_rx_end_irq.lto_priv.96+0x70>
 8001882:	bf00      	nop
 8001884:	2000d228 	.word	0x2000d228
 8001888:	080066c0 	.word	0x080066c0
 800188c:	00000000 	.word	0x00000000

08001890 <Vector108>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001894:	4e38      	ldr	r6, [pc, #224]	; (8001978 <Vector108+0xe8>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8001896:	f002 f80b 	bl	80038b0 <_stats_increase_irq>
 800189a:	f002 fa59 	bl	8003d50 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800189e:	6933      	ldr	r3, [r6, #16]
 80018a0:	079b      	lsls	r3, r3, #30
 80018a2:	d405      	bmi.n	80018b0 <Vector108+0x20>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80018a4:	f002 fa3c 	bl	8003d20 <_dbg_check_leave_isr>
}
 80018a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80018ac:	f001 ba20 	b.w	8002cf0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80018b0:	2700      	movs	r7, #0
 80018b2:	6137      	str	r7, [r6, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80018b4:	f04f 0920 	mov.w	r9, #32
 80018b8:	f389 8811 	msr	BASEPRI, r9
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80018bc:	4d2f      	ldr	r5, [pc, #188]	; (800197c <Vector108+0xec>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80018be:	f002 f847 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80018c2:	f002 fa75 	bl	8003db0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80018c6:	f002 f8e3 	bl	8003a90 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80018ca:	f002 f8e1 	bl	8003a90 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80018ce:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80018d0:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80018d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80018d4:	68a3      	ldr	r3, [r4, #8]
 80018d6:	1a50      	subs	r0, r2, r1
 80018d8:	4298      	cmp	r0, r3
 80018da:	bf38      	it	cc
 80018dc:	f105 061c 	addcc.w	r6, r5, #28
 80018e0:	d325      	bcc.n	800192e <Vector108+0x9e>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80018e2:	46b8      	mov	r8, r7
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80018e4:	4637      	mov	r7, r6
 80018e6:	f105 061c 	add.w	r6, r5, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80018ea:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80018ec:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80018f0:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80018f2:	42b2      	cmp	r2, r6
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80018f4:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80018f6:	6056      	str	r6, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80018f8:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80018fa:	f8c4 800c 	str.w	r8, [r4, #12]
 80018fe:	bf08      	it	eq
 8001900:	f8c7 800c 	streq.w	r8, [r7, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001904:	f002 fa3c 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001908:	f002 f80a 	bl	8003920 <_stats_stop_measure_crit_isr>
 800190c:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001910:	6920      	ldr	r0, [r4, #16]
 8001912:	47d0      	blx	sl
 8001914:	f389 8811 	msr	BASEPRI, r9
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001918:	f002 f81a 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800191c:	f002 fa48 	bl	8003db0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001920:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001924:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001926:	68a3      	ldr	r3, [r4, #8]
 8001928:	1a50      	subs	r0, r2, r1
 800192a:	4283      	cmp	r3, r0
 800192c:	d9dd      	bls.n	80018ea <Vector108+0x5a>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800192e:	42b4      	cmp	r4, r6
 8001930:	d014      	beq.n	800195c <Vector108+0xcc>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8001932:	440b      	add	r3, r1
 8001934:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001936:	2b01      	cmp	r3, #1
 8001938:	bf98      	it	ls
 800193a:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 800193c:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800193e:	4620      	mov	r0, r4
 8001940:	f001 f9be 	bl	8002cc0 <stSetAlarm>
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <Vector108+0xe8>)

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8001946:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <Vector108+0xec>)
 800194c:	1a63      	subs	r3, r4, r1
 800194e:	1a52      	subs	r2, r2, r1
 8001950:	429a      	cmp	r2, r3
 8001952:	d903      	bls.n	800195c <Vector108+0xcc>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <Vector108+0xf0>)
 8001958:	62c3      	str	r3, [r0, #44]	; 0x2c
 800195a:	e7fe      	b.n	800195a <Vector108+0xca>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800195c:	f002 fa10 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001960:	f001 ffde 	bl	8003920 <_stats_stop_measure_crit_isr>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001964:	2300      	movs	r3, #0
 8001966:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800196a:	f002 f9d9 	bl	8003d20 <_dbg_check_leave_isr>
}
 800196e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001972:	f001 b9bd 	b.w	8002cf0 <_port_irq_epilogue>
 8001976:	bf00      	nop
 8001978:	40000c00 	.word	0x40000c00
 800197c:	2000d228 	.word	0x2000d228
 8001980:	080066b0 	.word	0x080066b0
	...

08001990 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001990:	492c      	ldr	r1, [pc, #176]	; (8001a44 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001994:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001998:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800199c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800199e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80019a0:	680b      	ldr	r3, [r1, #0]
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019a8:	680a      	ldr	r2, [r1, #0]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <__early_init+0xb4>)
 80019ac:	0790      	lsls	r0, r2, #30
 80019ae:	d5fb      	bpl.n	80019a8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f022 0203 	bic.w	r2, r2, #3
 80019b6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80019bc:	4619      	mov	r1, r3
 80019be:	688b      	ldr	r3, [r1, #8]
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <__early_init+0xb4>)
 80019c2:	f013 030c 	ands.w	r3, r3, #12
 80019c6:	d1fa      	bne.n	80019be <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80019ce:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80019d0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80019da:	6811      	ldr	r1, [r2, #0]
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <__early_init+0xb4>)
 80019de:	0389      	lsls	r1, r1, #14
 80019e0:	d5fb      	bpl.n	80019da <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80019e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80019ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80019ec:	4915      	ldr	r1, [pc, #84]	; (8001a44 <__early_init+0xb4>)
 80019ee:	0790      	lsls	r0, r2, #30
 80019f0:	d5fb      	bpl.n	80019ea <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <__early_init+0xbc>)
 80019f4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80019f6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001a00:	6853      	ldr	r3, [r2, #4]
 8001a02:	0459      	lsls	r1, r3, #17
 8001a04:	d5fc      	bpl.n	8001a00 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001a06:	490f      	ldr	r1, [pc, #60]	; (8001a44 <__early_init+0xb4>)
 8001a08:	680a      	ldr	r2, [r1, #0]
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <__early_init+0xb4>)
 8001a0c:	0192      	lsls	r2, r2, #6
 8001a0e:	d5fb      	bpl.n	8001a08 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001a12:	4910      	ldr	r1, [pc, #64]	; (8001a54 <__early_init+0xc4>)
 8001a14:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a16:	f240 7105 	movw	r1, #1797	; 0x705
 8001a1a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	f042 0202 	orr.w	r2, r2, #2
 8001a22:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a24:	461a      	mov	r2, r3
 8001a26:	6893      	ldr	r3, [r2, #8]
 8001a28:	4906      	ldr	r1, [pc, #24]	; (8001a44 <__early_init+0xb4>)
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d1f9      	bne.n	8001a26 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001a32:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	644b      	str	r3, [r1, #68]	; 0x44
 8001a3a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	664b      	str	r3, [r1, #100]	; 0x64
 8001a42:	4770      	bx	lr
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	07405408 	.word	0x07405408
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	38889400 	.word	0x38889400
	...

08001a60 <shell_thread.lto_priv.77>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <shell_thread.lto_priv.77+0x1e0>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8001a66:	6804      	ldr	r4, [r0, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a76      	ldr	r2, [pc, #472]	; (8001c44 <shell_thread.lto_priv.77+0x1e4>)
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8001a6c:	6847      	ldr	r7, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8001a6e:	4976      	ldr	r1, [pc, #472]	; (8001c48 <shell_thread.lto_priv.77+0x1e8>)
 8001a70:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001a72:	b099      	sub	sp, #100	; 0x64
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8001a74:	4620      	mov	r0, r4
 8001a76:	f000 fb93 	bl	80021a0 <chprintf>
 8001a7a:	ae08      	add	r6, sp, #32
  while (true) {
    chprintf(chp, "ch> ");
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4973      	ldr	r1, [pc, #460]	; (8001c4c <shell_thread.lto_priv.77+0x1ec>)
 8001a80:	f000 fb8e 	bl	80021a0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8001a84:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	4620      	mov	r0, r4
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f10d 0107 	add.w	r1, sp, #7
 8001a90:	2201      	movs	r2, #1
 8001a92:	4798      	blx	r3
 8001a94:	b380      	cbz	r0, 8001af8 <shell_thread.lto_priv.77+0x98>
      return true;
    if (c == 4) {
 8001a96:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001a9a:	2904      	cmp	r1, #4
 8001a9c:	d028      	beq.n	8001af0 <shell_thread.lto_priv.77+0x90>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8001a9e:	2908      	cmp	r1, #8
 8001aa0:	d012      	beq.n	8001ac8 <shell_thread.lto_priv.77+0x68>
 8001aa2:	297f      	cmp	r1, #127	; 0x7f
 8001aa4:	d010      	beq.n	8001ac8 <shell_thread.lto_priv.77+0x68>
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8001aa6:	290d      	cmp	r1, #13
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8001aa8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8001aac:	d039      	beq.n	8001b22 <shell_thread.lto_priv.77+0xc2>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8001aae:	291f      	cmp	r1, #31
 8001ab0:	d9e9      	bls.n	8001a86 <shell_thread.lto_priv.77+0x26>
      continue;
    if (p < line + size - 1) {
 8001ab2:	429d      	cmp	r5, r3
 8001ab4:	d2e7      	bcs.n	8001a86 <shell_thread.lto_priv.77+0x26>
      chSequentialStreamPut(chp, c);
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4798      	blx	r3
      *p++ = (char)c;
 8001abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ac2:	702b      	strb	r3, [r5, #0]
 8001ac4:	3501      	adds	r5, #1
 8001ac6:	e7de      	b.n	8001a86 <shell_thread.lto_priv.77+0x26>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8001ac8:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, 0x08);
 8001aca:	f04f 0108 	mov.w	r1, #8
 8001ace:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8001ad0:	d0d9      	beq.n	8001a86 <shell_thread.lto_priv.77+0x26>
        chSequentialStreamPut(chp, 0x08);
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	4620      	mov	r0, r4
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2120      	movs	r1, #32
 8001ae0:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x08);
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2108      	movs	r1, #8
        p--;
 8001aea:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, 0x08);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, 0x08);
 8001aec:	4798      	blx	r3
 8001aee:	e7ca      	b.n	8001a86 <shell_thread.lto_priv.77+0x26>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8001af0:	4620      	mov	r0, r4
 8001af2:	4957      	ldr	r1, [pc, #348]	; (8001c50 <shell_thread.lto_priv.77+0x1f0>)
 8001af4:	f000 fb54 	bl	80021a0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8001af8:	4620      	mov	r0, r4
 8001afa:	4956      	ldr	r1, [pc, #344]	; (8001c54 <shell_thread.lto_priv.77+0x1f4>)
 8001afc:	f000 fb50 	bl	80021a0 <chprintf>
 8001b00:	2320      	movs	r3, #32
 8001b02:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8001b06:	f001 ff2b 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001b0a:	f002 f9b1 	bl	8003e70 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4851      	ldr	r0, [pc, #324]	; (8001c58 <shell_thread.lto_priv.77+0x1f8>)
 8001b12:	f001 fb25 	bl	8003160 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f002 f8da 	bl	8003cd0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8001b1c:	b019      	add	sp, #100	; 0x64
 8001b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8001b22:	494e      	ldr	r1, [pc, #312]	; (8001c5c <shell_thread.lto_priv.77+0x1fc>)
 8001b24:	4620      	mov	r0, r4
 8001b26:	f000 fb3b 	bl	80021a0 <chprintf>
      *p = 0;
 8001b2a:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b2c:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8001b2e:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b30:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8001b32:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b34:	f003 f9d4 	bl	8004ee0 <_strtok.constprop.15>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b38:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b3a:	4681      	mov	r9, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f10d 080c 	add.w	r8, sp, #12
 8001b42:	f003 f9cd 	bl	8004ee0 <_strtok.constprop.15>
 8001b46:	b150      	cbz	r0, 8001b5e <shell_thread.lto_priv.77+0xfe>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001b48:	2d04      	cmp	r5, #4
 8001b4a:	d01d      	beq.n	8001b88 <shell_thread.lto_priv.77+0x128>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001b4c:	f848 0b04 	str.w	r0, [r8], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b50:	a902      	add	r1, sp, #8
 8001b52:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001b54:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b56:	f003 f9c3 	bl	8004ee0 <_strtok.constprop.15>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1f4      	bne.n	8001b48 <shell_thread.lto_priv.77+0xe8>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001b5e:	ab18      	add	r3, sp, #96	; 0x60
 8001b60:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001b64:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8001b68:	f1b9 0f00 	cmp.w	r9, #0
 8001b6c:	d086      	beq.n	8001a7c <shell_thread.lto_priv.77+0x1c>
      if (strcmp(cmd, "exit") == 0) {
 8001b6e:	4648      	mov	r0, r9
 8001b70:	493b      	ldr	r1, [pc, #236]	; (8001c60 <shell_thread.lto_priv.77+0x200>)
 8001b72:	f7ff f899 	bl	8000ca8 <strcmp>
 8001b76:	b970      	cbnz	r0, 8001b96 <shell_thread.lto_priv.77+0x136>
        if (n > 0) {
 8001b78:	2d00      	cmp	r5, #0
 8001b7a:	d0c1      	beq.n	8001b00 <shell_thread.lto_priv.77+0xa0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4939      	ldr	r1, [pc, #228]	; (8001c64 <shell_thread.lto_priv.77+0x204>)
 8001b80:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <shell_thread.lto_priv.77+0x200>)
 8001b82:	f000 fb0d 	bl	80021a0 <chprintf>
 8001b86:	e779      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4937      	ldr	r1, [pc, #220]	; (8001c68 <shell_thread.lto_priv.77+0x208>)
 8001b8c:	f000 fb08 	bl	80021a0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	9307      	str	r3, [sp, #28]
 8001b94:	e772      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8001b96:	4648      	mov	r0, r9
 8001b98:	4934      	ldr	r1, [pc, #208]	; (8001c6c <shell_thread.lto_priv.77+0x20c>)
 8001b9a:	f7ff f885 	bl	8000ca8 <strcmp>
 8001b9e:	b930      	cbnz	r0, 8001bae <shell_thread.lto_priv.77+0x14e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001ba0:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 8001ba2:	b1bd      	cbz	r5, 8001bd4 <shell_thread.lto_priv.77+0x174>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001ba4:	492f      	ldr	r1, [pc, #188]	; (8001c64 <shell_thread.lto_priv.77+0x204>)
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <shell_thread.lto_priv.77+0x20c>)
 8001ba8:	f000 fafa 	bl	80021a0 <chprintf>
 8001bac:	e766      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
 8001bae:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001c78 <shell_thread.lto_priv.77+0x218>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8001bb2:	482f      	ldr	r0, [pc, #188]	; (8001c70 <shell_thread.lto_priv.77+0x210>)
 8001bb4:	e002      	b.n	8001bbc <shell_thread.lto_priv.77+0x15c>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001bb6:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8001bba:	b348      	cbz	r0, 8001c10 <shell_thread.lto_priv.77+0x1b0>
    if (strcmp(scp->sc_name, name) == 0) {
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	f7ff f873 	bl	8000ca8 <strcmp>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d1f7      	bne.n	8001bb6 <shell_thread.lto_priv.77+0x156>
      scp->sc_function(chp, argc, argv);
 8001bc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	aa03      	add	r2, sp, #12
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4798      	blx	r3
 8001bd2:	e753      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8001bd4:	4927      	ldr	r1, [pc, #156]	; (8001c74 <shell_thread.lto_priv.77+0x214>)
 8001bd6:	4d28      	ldr	r5, [pc, #160]	; (8001c78 <shell_thread.lto_priv.77+0x218>)
 8001bd8:	f000 fae2 	bl	80021a0 <chprintf>
 8001bdc:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <shell_thread.lto_priv.77+0x210>)
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
    chprintf(chp, "%s ", scp->sc_name);
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <shell_thread.lto_priv.77+0x21c>)
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 fadd 	bl	80021a0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001be6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d1f7      	bne.n	8001bde <shell_thread.lto_priv.77+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8001bee:	b157      	cbz	r7, 8001c06 <shell_thread.lto_priv.77+0x1a6>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	b142      	cbz	r2, 8001c06 <shell_thread.lto_priv.77+0x1a6>
 8001bf4:	463d      	mov	r5, r7
    chprintf(chp, "%s ", scp->sc_name);
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4920      	ldr	r1, [pc, #128]	; (8001c7c <shell_thread.lto_priv.77+0x21c>)
 8001bfa:	f000 fad1 	bl	80021a0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001bfe:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d1f7      	bne.n	8001bf6 <shell_thread.lto_priv.77+0x196>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8001c06:	4620      	mov	r0, r4
 8001c08:	4914      	ldr	r1, [pc, #80]	; (8001c5c <shell_thread.lto_priv.77+0x1fc>)
 8001c0a:	f000 fac9 	bl	80021a0 <chprintf>
 8001c0e:	e735      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001c10:	b167      	cbz	r7, 8001c2c <shell_thread.lto_priv.77+0x1cc>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	b150      	cbz	r0, 8001c2c <shell_thread.lto_priv.77+0x1cc>
 8001c16:	46b8      	mov	r8, r7
 8001c18:	e002      	b.n	8001c20 <shell_thread.lto_priv.77+0x1c0>
 8001c1a:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8001c1e:	b128      	cbz	r0, 8001c2c <shell_thread.lto_priv.77+0x1cc>
    if (strcmp(scp->sc_name, name) == 0) {
 8001c20:	4649      	mov	r1, r9
 8001c22:	f7ff f841 	bl	8000ca8 <strcmp>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d1f7      	bne.n	8001c1a <shell_thread.lto_priv.77+0x1ba>
 8001c2a:	e7cc      	b.n	8001bc6 <shell_thread.lto_priv.77+0x166>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4913      	ldr	r1, [pc, #76]	; (8001c80 <shell_thread.lto_priv.77+0x220>)
 8001c32:	f000 fab5 	bl	80021a0 <chprintf>
        chprintf(chp, " ?\r\n");
 8001c36:	4620      	mov	r0, r4
 8001c38:	4912      	ldr	r1, [pc, #72]	; (8001c84 <shell_thread.lto_priv.77+0x224>)
 8001c3a:	f000 fab1 	bl	80021a0 <chprintf>
 8001c3e:	e71d      	b.n	8001a7c <shell_thread.lto_priv.77+0x1c>
 8001c40:	2000d228 	.word	0x2000d228
 8001c44:	08006874 	.word	0x08006874
 8001c48:	0800687c 	.word	0x0800687c
 8001c4c:	08006894 	.word	0x08006894
 8001c50:	0800689c 	.word	0x0800689c
 8001c54:	080068f0 	.word	0x080068f0
 8001c58:	20000890 	.word	0x20000890
 8001c5c:	08006814 	.word	0x08006814
 8001c60:	080068b8 	.word	0x080068b8
 8001c64:	080066cc 	.word	0x080066cc
 8001c68:	080068a0 	.word	0x080068a0
 8001c6c:	080068c0 	.word	0x080068c0
 8001c70:	080066d8 	.word	0x080066d8
 8001c74:	080068c8 	.word	0x080068c8
 8001c78:	08006910 	.word	0x08006910
 8001c7c:	080068e0 	.word	0x080068e0
 8001c80:	080068e4 	.word	0x080068e4
 8001c84:	080068e8 	.word	0x080068e8
	...

08001c90 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001c90:	2900      	cmp	r1, #0
 8001c92:	dd03      	ble.n	8001c9c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001c94:	4914      	ldr	r1, [pc, #80]	; (8001ce8 <cmd_systime+0x58>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <cmd_systime+0x5c>)
 8001c98:	f000 ba82 	b.w	80021a0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8001ca6:	f001 fe5b 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001caa:	f002 f8e1 	bl	8003e70 <_dbg_check_lock>
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <cmd_systime+0x60>)
 8001cb0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001cb2:	f002 f8cd 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001cb6:	f001 fe3b 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <cmd_systime+0x64>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	4299      	cmp	r1, r3
 8001cc0:	d004      	beq.n	8001ccc <cmd_systime+0x3c>
 8001cc2:	6998      	ldr	r0, [r3, #24]
 8001cc4:	688a      	ldr	r2, [r1, #8]
 8001cc6:	6881      	ldr	r1, [r0, #8]
 8001cc8:	4291      	cmp	r1, r2
 8001cca:	d309      	bcc.n	8001ce0 <cmd_systime+0x50>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8001cd2:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <cmd_systime+0x68>)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	462a      	mov	r2, r5
}
 8001cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8001cdc:	f000 ba60 	b.w	80021a0 <chprintf>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <cmd_systime+0x6c>)
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce6:	e7fe      	b.n	8001ce6 <cmd_systime+0x56>
 8001ce8:	080066cc 	.word	0x080066cc
 8001cec:	080068fc 	.word	0x080068fc
 8001cf0:	40000c00 	.word	0x40000c00
 8001cf4:	2000d228 	.word	0x2000d228
 8001cf8:	08006904 	.word	0x08006904
 8001cfc:	080066a0 	.word	0x080066a0

08001d00 <get.lto_priv.70>:

static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 8001d00:	6903      	ldr	r3, [r0, #16]
 8001d02:	68c1      	ldr	r1, [r0, #12]
 8001d04:	4299      	cmp	r1, r3
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}

static msg_t get(void *ip) {
 8001d06:	4602      	mov	r2, r0
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 8001d08:	d004      	beq.n	8001d14 <get.lto_priv.70+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 8001d0a:	6841      	ldr	r1, [r0, #4]
 8001d0c:	5cc8      	ldrb	r0, [r1, r3]
  msp->offset += 1;
 8001d0e:	3301      	adds	r3, #1
 8001d10:	6113      	str	r3, [r2, #16]
 8001d12:	4770      	bx	lr
static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
    return MSG_RESET;
 8001d14:	f06f 0001 	mvn.w	r0, #1
  b = *(msp->buffer + msp->offset);
  msp->offset += 1;
  return b;
}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <put.lto_priv.69>:
}

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 8001d20:	68c3      	ldr	r3, [r0, #12]
 8001d22:	6882      	ldr	r2, [r0, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d006      	beq.n	8001d36 <put.lto_priv.69+0x16>
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 8001d28:	6842      	ldr	r2, [r0, #4]
 8001d2a:	54d1      	strb	r1, [r2, r3]
  msp->eos += 1;
 8001d2c:	68c3      	ldr	r3, [r0, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60c3      	str	r3, [r0, #12]
  return MSG_OK;
 8001d32:	2000      	movs	r0, #0
 8001d34:	4770      	bx	lr

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
    return MSG_RESET;
 8001d36:	f06f 0001 	mvn.w	r0, #1
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}
 8001d3a:	4770      	bx	lr
 8001d3c:	0000      	movs	r0, r0
	...

08001d40 <Test_thread.lto_priv.71>:
  }
}

static THD_WORKING_AREA(Test_thread_wa, 64);
static THD_FUNCTION(Test_thread, p)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <Test_thread.lto_priv.71+0xb4>)
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 8001d44:	4c2c      	ldr	r4, [pc, #176]	; (8001df8 <Test_thread.lto_priv.71+0xb8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
  }
}

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);
 8001d48:	4d2c      	ldr	r5, [pc, #176]	; (8001dfc <Test_thread.lto_priv.71+0xbc>)
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <Test_thread.lto_priv.71+0xc0>)
 8001d4c:	619a      	str	r2, [r3, #24]
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  palSetPad(GPIOD,GPIOD_LED5);
 8001d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  palClearPad(GPIOD,GPIOD_LED3);
 8001d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
static THD_FUNCTION(Test_thread, p)
{
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 8001d5a:	8321      	strh	r1, [r4, #24]
  }
}

static THD_WORKING_AREA(Test_thread_wa, 64);
static THD_FUNCTION(Test_thread, p)
{
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	4628      	mov	r0, r5
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
  palSetPad(GPIOD,GPIOD_LED5);
 8001d60:	8322      	strh	r2, [r4, #24]
 8001d62:	4928      	ldr	r1, [pc, #160]	; (8001e04 <Test_thread.lto_priv.71+0xc4>)
  palClearPad(GPIOD,GPIOD_LED3);
 8001d64:	8363      	strh	r3, [r4, #26]
 8001d66:	f001 fa4b 	bl	8003200 <gptStart>

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 8001d6a:	68ea      	ldr	r2, [r5, #12]
  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <Test_thread.lto_priv.71+0xc8>)
 8001d6e:	4827      	ldr	r0, [pc, #156]	; (8001e0c <Test_thread.lto_priv.71+0xcc>)
  uint8_t started = 0;

  while (true)
  {
    palTogglePad(GPIOD,GPIOD_LED6);
    if(!started && palReadPad(GPIOA , 0))
 8001d70:	4e27      	ldr	r6, [pc, #156]	; (8001e10 <Test_thread.lto_priv.71+0xd0>)

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 8001d72:	2500      	movs	r5, #0
 8001d74:	6015      	str	r5, [r2, #0]
  RC_GPT.tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8001d76:	6355      	str	r5, [r2, #52]	; 0x34
  RC_GPT.tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001d78:	6395      	str	r5, [r2, #56]	; 0x38
  RC_GPT.tim->CCR[2] = 0;                  /* Comparator 2 disabled.       */
 8001d7a:	63d5      	str	r5, [r2, #60]	; 0x3c
  RC_GPT.tim->CCR[3] = 0;                  /* Comparator 2 disabled.       */
 8001d7c:	6415      	str	r5, [r2, #64]	; 0x40
  RC_GPT.tim->CNT    = 0;                  /* Counter reset to zero.       */
 8001d7e:	6255      	str	r5, [r2, #36]	; 0x24

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
 8001d80:	6991      	ldr	r1, [r2, #24]
 8001d82:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 8001d86:	f041 0142 	orr.w	r1, r1, #66	; 0x42
 8001d8a:	6191      	str	r1, [r2, #24]
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 8001d8c:	69d1      	ldr	r1, [r2, #28]
 8001d8e:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 8001d92:	f041 0141 	orr.w	r1, r1, #65	; 0x41
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001d96:	f243 3713 	movw	r7, #13075	; 0x3313

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 8001d9a:	61d1      	str	r1, [r2, #28]
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001d9c:	6217      	str	r7, [r2, #32]
                    STM32_TIM_CCER_CC2E |
                    STM32_TIM_CCER_CC3E | STM32_TIM_CCER_CC3P |
                    STM32_TIM_CCER_CC4E | STM32_TIM_CCER_CC4P;


  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);
 8001d9e:	6891      	ldr	r1, [r2, #8]
 8001da0:	f041 0164 	orr.w	r1, r1, #100	; 0x64
 8001da4:	6091      	str	r1, [r2, #8]


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	f041 0101 	orr.w	r1, r1, #1
 8001dac:	6011      	str	r1, [r2, #0]

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 8001dae:	223b      	movs	r2, #59	; 0x3b
 8001db0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001db4:	9500      	str	r5, [sp, #0]
 8001db6:	f002 f97b 	bl	80040b0 <chThdCreateStatic>

  palSetPad(GPIOD,GPIOD_LED4);
  palSetPad(GPIOD,GPIOD_LED5);
  palClearPad(GPIOD,GPIOD_LED3);

  rc_channel = rc_init();
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <Test_thread.lto_priv.71+0xd4>)
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <Test_thread.lto_priv.71+0xd8>)
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e006      	b.n	8001dd0 <Test_thread.lto_priv.71+0x90>
  uint8_t started = 0;

  while (true)
  {
    palTogglePad(GPIOD,GPIOD_LED6);
    if(!started && palReadPad(GPIOA , 0))
 8001dc2:	6933      	ldr	r3, [r6, #16]
 8001dc4:	07db      	lsls	r3, r3, #31
 8001dc6:	d40b      	bmi.n	8001de0 <Test_thread.lto_priv.71+0xa0>
                        Controller_thread, NULL);

      started = 1;
    }

    chThdSleepMilliseconds(200);
 8001dc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dcc:	f002 f940 	bl	8004050 <chThdSleep>
  rc_channel = rc_init();
  uint8_t started = 0;

  while (true)
  {
    palTogglePad(GPIOD,GPIOD_LED6);
 8001dd0:	6963      	ldr	r3, [r4, #20]
 8001dd2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8001dd6:	6163      	str	r3, [r4, #20]
    if(!started && palReadPad(GPIOA , 0))
 8001dd8:	2d00      	cmp	r5, #0
 8001dda:	d0f2      	beq.n	8001dc2 <Test_thread.lto_priv.71+0x82>
 8001ddc:	2501      	movs	r5, #1
 8001dde:	e7f3      	b.n	8001dc8 <Test_thread.lto_priv.71+0x88>
    {
      chThdCreateStatic(Controller_thread_wa, sizeof(Controller_thread_wa),
 8001de0:	9500      	str	r5, [sp, #0]
 8001de2:	480e      	ldr	r0, [pc, #56]	; (8001e1c <Test_thread.lto_priv.71+0xdc>)
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <Test_thread.lto_priv.71+0xe0>)
 8001de6:	f241 1170 	movw	r1, #4464	; 0x1170
 8001dea:	2242      	movs	r2, #66	; 0x42
 8001dec:	f002 f960 	bl	80040b0 <chThdCreateStatic>
        NORMALPRIO + 2,
                        Controller_thread, NULL);

      started = 1;
 8001df0:	2501      	movs	r5, #1
 8001df2:	e7e9      	b.n	8001dc8 <Test_thread.lto_priv.71+0x88>
 8001df4:	2000d228 	.word	0x2000d228
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	2000da38 	.word	0x2000da38
 8001e00:	08006970 	.word	0x08006970
 8001e04:	080069a0 	.word	0x080069a0
 8001e08:	08004d21 	.word	0x08004d21
 8001e0c:	20000898 	.word	0x20000898
 8001e10:	40020000 	.word	0x40020000
 8001e14:	2000ddbc 	.word	0x2000ddbc
 8001e18:	2000dbe8 	.word	0x2000dbe8
 8001e1c:	20000a68 	.word	0x20000a68
 8001e20:	080029b1 	.word	0x080029b1
	...

08001e30 <reads.lto_priv.68>:
  memcpy(msp->buffer + msp->eos, bp, n);
  msp->eos += n;
  return n;
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4605      	mov	r5, r0
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 8001e34:	4608      	mov	r0, r1
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 8001e36:	692b      	ldr	r3, [r5, #16]
 8001e38:	68ec      	ldr	r4, [r5, #12]
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 8001e3a:	6869      	ldr	r1, [r5, #4]
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 8001e3c:	1ae4      	subs	r4, r4, r3
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	bf28      	it	cs
 8001e42:	4614      	movcs	r4, r2
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 8001e44:	4419      	add	r1, r3
 8001e46:	4622      	mov	r2, r4
 8001e48:	f7fe fe8a 	bl	8000b60 <memcpy>
  msp->offset += n;
 8001e4c:	692b      	ldr	r3, [r5, #16]
 8001e4e:	4423      	add	r3, r4
 8001e50:	612b      	str	r3, [r5, #16]
  return n;
}
 8001e52:	4620      	mov	r0, r4
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
 8001e56:	bf00      	nop
	...

08001e60 <writes.lto_priv.67>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 8001e60:	b538      	push	{r3, r4, r5, lr}
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
 8001e62:	68c3      	ldr	r3, [r0, #12]
 8001e64:	6884      	ldr	r4, [r0, #8]
 8001e66:	1ae4      	subs	r4, r4, r3

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 8001e68:	4605      	mov	r5, r0
 8001e6a:	4294      	cmp	r4, r2
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
    n = msp->size - msp->eos;
  memcpy(msp->buffer + msp->eos, bp, n);
 8001e6c:	6840      	ldr	r0, [r0, #4]
 8001e6e:	bf28      	it	cs
 8001e70:	4614      	movcs	r4, r2
 8001e72:	4418      	add	r0, r3
 8001e74:	4622      	mov	r2, r4
 8001e76:	f7fe fe73 	bl	8000b60 <memcpy>
  msp->eos += n;
 8001e7a:	68eb      	ldr	r3, [r5, #12]
 8001e7c:	4423      	add	r3, r4
 8001e7e:	60eb      	str	r3, [r5, #12]
  return n;
}
 8001e80:	4620      	mov	r0, r4
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e90 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8001e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e94:	b087      	sub	sp, #28
 8001e96:	4615      	mov	r5, r2
 8001e98:	f10d 030d 	add.w	r3, sp, #13
 8001e9c:	aa03      	add	r2, sp, #12
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	4681      	mov	r9, r0
 8001ea2:	468a      	mov	sl, r1
 8001ea4:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001ea6:	f04f 0800 	mov.w	r8, #0
 8001eaa:	468b      	mov	fp, r1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001eac:	f89b 1000 	ldrb.w	r1, [fp]
 8001eb0:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8001eb4:	b179      	cbz	r1, 8001ed6 <chvprintf+0x46>
      return n;
    if (c != '%') {
 8001eb6:	2925      	cmp	r1, #37	; 0x25
 8001eb8:	d011      	beq.n	8001ede <chvprintf+0x4e>
      streamPut(chp, (uint8_t)c);
 8001eba:	f8d9 2000 	ldr.w	r2, [r9]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001ebe:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001ec0:	6892      	ldr	r2, [r2, #8]
 8001ec2:	4648      	mov	r0, r9
 8001ec4:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001ec6:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8001eca:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001ece:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d1ef      	bne.n	8001eb6 <chvprintf+0x26>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	b007      	add	sp, #28
 8001eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001ede:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8001ee2:	2a2d      	cmp	r2, #45	; 0x2d
 8001ee4:	bf03      	ittte	eq
 8001ee6:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8001eea:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8001eee:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8001ef2:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001ef6:	2a30      	cmp	r2, #48	; 0x30
 8001ef8:	bf03      	ittte	eq
 8001efa:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001efc:	3301      	addeq	r3, #1
      filler = '0';
 8001efe:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8001f00:	2720      	movne	r7, #32
 8001f02:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001f04:	2600      	movs	r6, #0
 8001f06:	e006      	b.n	8001f16 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001f08:	782b      	ldrb	r3, [r5, #0]
 8001f0a:	3504      	adds	r5, #4
 8001f0c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8001f10:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8001f14:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001f16:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8001f1e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8001f20:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001f24:	d9f2      	bls.n	8001f0c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8001f26:	2a2a      	cmp	r2, #42	; 0x2a
 8001f28:	d0ee      	beq.n	8001f08 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001f2a:	2a2e      	cmp	r2, #46	; 0x2e
 8001f2c:	f04f 0100 	mov.w	r1, #0
 8001f30:	d043      	beq.n	8001fba <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001f32:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001f36:	2b4c      	cmp	r3, #76	; 0x4c
 8001f38:	d04e      	beq.n	8001fd8 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001f3a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8001f3e:	2834      	cmp	r0, #52	; 0x34
 8001f40:	f200 80f7 	bhi.w	8002132 <chvprintf+0x2a2>
 8001f44:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001f48:	00f500ea 	.word	0x00f500ea
 8001f4c:	00f500f5 	.word	0x00f500f5
 8001f50:	00ea00f5 	.word	0x00ea00f5
 8001f54:	00f500f5 	.word	0x00f500f5
 8001f58:	00f500f5 	.word	0x00f500f5
 8001f5c:	00e800f5 	.word	0x00e800f5
 8001f60:	00f500f5 	.word	0x00f500f5
 8001f64:	00f500f5 	.word	0x00f500f5
 8001f68:	00dd00f5 	.word	0x00dd00f5
 8001f6c:	00f500f5 	.word	0x00f500f5
 8001f70:	00f500f2 	.word	0x00f500f2
 8001f74:	00f500f5 	.word	0x00f500f5
 8001f78:	00f500f5 	.word	0x00f500f5
 8001f7c:	00f500f5 	.word	0x00f500f5
 8001f80:	00f500f5 	.word	0x00f500f5
 8001f84:	00a100f5 	.word	0x00a100f5
 8001f88:	00f500ea 	.word	0x00f500ea
 8001f8c:	00f500f5 	.word	0x00f500f5
 8001f90:	00ea00f5 	.word	0x00ea00f5
 8001f94:	00f500f5 	.word	0x00f500f5
 8001f98:	00f500f5 	.word	0x00f500f5
 8001f9c:	00e800f5 	.word	0x00e800f5
 8001fa0:	00f500f5 	.word	0x00f500f5
 8001fa4:	007100f5 	.word	0x007100f5
 8001fa8:	00dd00f5 	.word	0x00dd00f5
 8001fac:	00f500f5 	.word	0x00f500f5
 8001fb0:	00f2      	.short	0x00f2
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8001fb2:	782b      	ldrb	r3, [r5, #0]
 8001fb4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8001fb6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8001fba:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 8001fbe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8001fc6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8001fca:	d9f4      	bls.n	8001fb6 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 8001fcc:	2a2a      	cmp	r2, #42	; 0x2a
 8001fce:	d0f0      	beq.n	8001fb2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001fd0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001fd4:	2b4c      	cmp	r3, #76	; 0x4c
 8001fd6:	d1b0      	bne.n	8001f3a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8001fd8:	f89b 3000 	ldrb.w	r3, [fp]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a8 	beq.w	8002132 <chvprintf+0x2a2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001fe2:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8001fe6:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001fea:	2a34      	cmp	r2, #52	; 0x34
 8001fec:	f200 80a0 	bhi.w	8002130 <chvprintf+0x2a0>
 8001ff0:	e8df f002 	tbb	[pc, r2]
 8001ff4:	9e9e9e94 	.word	0x9e9e9e94
 8001ff8:	9e9e949e 	.word	0x9e9e949e
 8001ffc:	929e9e9e 	.word	0x929e9e9e
 8002000:	9e9e9e9e 	.word	0x9e9e9e9e
 8002004:	9e9e879e 	.word	0x9e9e879e
 8002008:	9e9e9e9c 	.word	0x9e9e9e9c
 800200c:	9e9e9e9e 	.word	0x9e9e9e9e
 8002010:	4b9e9e9e 	.word	0x4b9e9e9e
 8002014:	9e9e9e94 	.word	0x9e9e9e94
 8002018:	9e9e949e 	.word	0x9e9e949e
 800201c:	929e9e9e 	.word	0x929e9e9e
 8002020:	1b9e9e9e 	.word	0x1b9e9e9e
 8002024:	9e9e879e 	.word	0x9e9e879e
 8002028:	9c          	.byte	0x9c
 8002029:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800202a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <chvprintf+0x308>)
 800202e:	2c00      	cmp	r4, #0
 8002030:	bf08      	it	eq
 8002032:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002034:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002036:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002038:	2900      	cmp	r1, #0
 800203a:	f000 8094 	beq.w	8002166 <chvprintf+0x2d6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8096 	beq.w	8002170 <chvprintf+0x2e0>
 8002044:	3901      	subs	r1, #1
 8002046:	4620      	mov	r0, r4
 8002048:	e001      	b.n	800204e <chvprintf+0x1be>
 800204a:	3901      	subs	r1, #1
 800204c:	d403      	bmi.n	8002056 <chvprintf+0x1c6>
 800204e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <chvprintf+0x1ba>
 8002056:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002058:	1a36      	subs	r6, r6, r0
 800205a:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800205c:	2720      	movs	r7, #32
 800205e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002062:	f1ba 0f00 	cmp.w	sl, #0
 8002066:	d01f      	beq.n	80020a8 <chvprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002068:	2b00      	cmp	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	da34      	bge.n	80020d8 <chvprintf+0x248>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800206e:	2e00      	cmp	r6, #0
 8002070:	f43f af1c 	beq.w	8001eac <chvprintf+0x1c>
 8002074:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8002076:	f8d9 3000 	ldr.w	r3, [r9]
 800207a:	4648      	mov	r0, r9
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4639      	mov	r1, r7
 8002080:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002082:	3c01      	subs	r4, #1
 8002084:	d1f7      	bne.n	8002076 <chvprintf+0x1e6>
 8002086:	44b0      	add	r8, r6
 8002088:	e710      	b.n	8001eac <chvprintf+0x1c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	3504      	adds	r5, #4
 8002094:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8002096:	2720      	movs	r7, #32
 8002098:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800209a:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800209c:	1a36      	subs	r6, r6, r0
 800209e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80020a2:	f1ba 0f00 	cmp.w	sl, #0
 80020a6:	d1df      	bne.n	8002068 <chvprintf+0x1d8>
 80020a8:	9300      	str	r3, [sp, #0]
      width = -width;
 80020aa:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 80020ae:	f1ba 0f00 	cmp.w	sl, #0
 80020b2:	d045      	beq.n	8002140 <chvprintf+0x2b0>
      if (*s == '-' && filler == '0') {
 80020b4:	7821      	ldrb	r1, [r4, #0]
 80020b6:	292d      	cmp	r1, #45	; 0x2d
 80020b8:	d047      	beq.n	800214a <chvprintf+0x2ba>
        streamPut(chp, (uint8_t)*s++);
        n++;
 80020ba:	4656      	mov	r6, sl
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80020bc:	f8d9 3000 	ldr.w	r3, [r9]
 80020c0:	4648      	mov	r0, r9
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4639      	mov	r1, r7
 80020c6:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80020c8:	3601      	adds	r6, #1
 80020ca:	d1f7      	bne.n	80020bc <chvprintf+0x22c>
    }
    while (--i >= 0) {
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	ebca 0808 	rsb	r8, sl, r8
 80020d4:	f6ff aeea 	blt.w	8001eac <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80020d8:	f8dd a000 	ldr.w	sl, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80020dc:	f8d9 3000 	ldr.w	r3, [r9]
 80020e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e4:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80020e6:	f10a 3aff 	add.w	sl, sl, #4294967295
      streamPut(chp, (uint8_t)*s++);
 80020ea:	4648      	mov	r0, r9
 80020ec:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80020ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 80020f2:	d1f3      	bne.n	80020dc <chvprintf+0x24c>
 80020f4:	9b00      	ldr	r3, [sp, #0]
 80020f6:	f108 0801 	add.w	r8, r8, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfa8      	it	ge
 80020fe:	4498      	addge	r8, r3
 8002100:	e7b5      	b.n	800206e <chvprintf+0x1de>
 8002102:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002104:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002106:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002108:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800210a:	f002 ff09 	bl	8004f20 <long_to_string_with_divisor.constprop.14>
 800210e:	ab03      	add	r3, sp, #12
 8002110:	1ac0      	subs	r0, r0, r3
 8002112:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002114:	ac03      	add	r4, sp, #12
 8002116:	e7c1      	b.n	800209c <chvprintf+0x20c>
 8002118:	2208      	movs	r2, #8
 800211a:	e7f3      	b.n	8002104 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800211c:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 800211e:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002120:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8002124:	db2e      	blt.n	8002184 <chvprintf+0x2f4>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002126:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002128:	220a      	movs	r2, #10
 800212a:	e7ee      	b.n	800210a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800212c:	2210      	movs	r2, #16
 800212e:	e7e9      	b.n	8002104 <chvprintf+0x274>
 8002130:	461a      	mov	r2, r3
 8002132:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002134:	f88d 200c 	strb.w	r2, [sp, #12]
 8002138:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800213a:	ac03      	add	r4, sp, #12
 800213c:	3b01      	subs	r3, #1
 800213e:	e7ad      	b.n	800209c <chvprintf+0x20c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002140:	9b00      	ldr	r3, [sp, #0]
 8002142:	2b00      	cmp	r3, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002144:	4656      	mov	r6, sl
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002146:	dac7      	bge.n	80020d8 <chvprintf+0x248>
 8002148:	e6b0      	b.n	8001eac <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800214a:	2f30      	cmp	r7, #48	; 0x30
 800214c:	d1b5      	bne.n	80020ba <chvprintf+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800214e:	f8d9 3000 	ldr.w	r3, [r9]
 8002152:	4648      	mov	r0, r9
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4798      	blx	r3
 8002158:	9b00      	ldr	r3, [sp, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	3401      	adds	r4, #1
        n++;
 800215e:	f108 0801 	add.w	r8, r8, #1
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	e7a9      	b.n	80020ba <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002166:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f af6b 	bne.w	8002046 <chvprintf+0x1b6>
 8002170:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002174:	f1ba 0f00 	cmp.w	sl, #0
 8002178:	d10b      	bne.n	8002192 <chvprintf+0x302>
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2720      	movs	r7, #32
 8002182:	e792      	b.n	80020aa <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002184:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002186:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002188:	f88d 300c 	strb.w	r3, [sp, #12]
 800218c:	f10d 000d 	add.w	r0, sp, #13
 8002190:	e7ca      	b.n	8002128 <chvprintf+0x298>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002192:	2720      	movs	r7, #32
 8002194:	e76b      	b.n	800206e <chvprintf+0x1de>
 8002196:	bf00      	nop
 8002198:	08006978 	.word	0x08006978
 800219c:	00000000 	.word	0x00000000

080021a0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80021a0:	b40e      	push	{r1, r2, r3}
 80021a2:	b500      	push	{lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	aa03      	add	r2, sp, #12
 80021a8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80021ac:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80021ae:	f7ff fe6f 	bl	8001e90 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80021b2:	b002      	add	sp, #8
 80021b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021b8:	b003      	add	sp, #12
 80021ba:	4770      	bx	lr
 80021bc:	0000      	movs	r0, r0
	...

080021c0 <MPU_thread.lto_priv.72>:
  }
}

static THD_WORKING_AREA(MPU_thread_wa, 32768);
static THD_FUNCTION(MPU_thread, p)
{
 80021c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80021c4:	4ca0      	ldr	r4, [pc, #640]	; (8002448 <MPU_thread.lto_priv.72+0x288>)
 80021c6:	4aa1      	ldr	r2, [pc, #644]	; (800244c <MPU_thread.lto_priv.72+0x28c>)
 80021c8:	69a3      	ldr	r3, [r4, #24]
 80021ca:	b087      	sub	sp, #28
 80021cc:	619a      	str	r2, [r3, #24]
  (void)p;
  chRegSetThreadName("MPU6050");
  chThdSleepMilliseconds(200);
 80021ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021d2:	f001 ff3d 	bl	8004050 <chThdSleep>
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {

  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 80021d6:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	2a01      	cmp	r2, #1
 80021de:	d905      	bls.n	80021ec <MPU_thread.lto_priv.72+0x2c>
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d003      	beq.n	80021ec <MPU_thread.lto_priv.72+0x2c>
 80021e4:	b672      	cpsid	i
 80021e6:	4b9b      	ldr	r3, [pc, #620]	; (8002454 <MPU_thread.lto_priv.72+0x294>)
 80021e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ea:	e7fe      	b.n	80021ea <MPU_thread.lto_priv.72+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80021ec:	2320      	movs	r3, #32
 80021ee:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80021f2:	f001 fbb5 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80021f6:	f001 fe3b 	bl	8003e70 <_dbg_check_lock>
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80021fa:	4b95      	ldr	r3, [pc, #596]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80021fc:	4994      	ldr	r1, [pc, #592]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80021fe:	781f      	ldrb	r7, [r3, #0]
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8002200:	4895      	ldr	r0, [pc, #596]	; (8002458 <MPU_thread.lto_priv.72+0x298>)
 8002202:	6058      	str	r0, [r3, #4]
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002204:	f240 4256 	movw	r2, #1110	; 0x456
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002208:	f240 4316 	movw	r3, #1046	; 0x416
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800220c:	2f01      	cmp	r7, #1
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800220e:	628a      	str	r2, [r1, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002210:	624b      	str	r3, [r1, #36]	; 0x24
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002212:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002214:	460e      	mov	r6, r1
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8002216:	d03d      	beq.n	8002294 <MPU_thread.lto_priv.72+0xd4>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002218:	4629      	mov	r1, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800221a:	4b8d      	ldr	r3, [pc, #564]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 800221c:	6842      	ldr	r2, [r0, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800221e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002222:	f8d6 8000 	ldr.w	r8, [r6]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8002226:	f8df e254 	ldr.w	lr, [pc, #596]	; 800247c <MPU_thread.lto_priv.72+0x2bc>
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800222a:	f8d3 a000 	ldr.w	sl, [r3]
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800222e:	7a07      	ldrb	r7, [r0, #8]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002230:	f105 0610 	add.w	r6, r5, #16
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8002234:	f102 3cff 	add.w	ip, r2, #4294967295
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002238:	f8c8 6008 	str.w	r6, [r8, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800223c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  dp->CR1 = 0;
 8002240:	2300      	movs	r3, #0
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002242:	f44f 6810 	mov.w	r8, #2304	; 0x900
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8002246:	45f4      	cmp	ip, lr
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002248:	f8ca 6008 	str.w	r6, [sl, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800224c:	f8c5 9000 	str.w	r9, [r5]
  dp->CR1 = 0;
 8002250:	602b      	str	r3, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002252:	f8c5 8004 	str.w	r8, [r5, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8002256:	d819      	bhi.n	800228c <MPU_thread.lto_priv.72+0xcc>
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002258:	f8d1 c004 	ldr.w	ip, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800225c:	f8df e220 	ldr.w	lr, [pc, #544]	; 8002480 <MPU_thread.lto_priv.72+0x2c0>
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002260:	f64f 76c0 	movw	r6, #65472	; 0xffc0
 8002264:	ea0c 0606 	and.w	r6, ip, r6
 8002268:	604e      	str	r6, [r1, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800226a:	684e      	ldr	r6, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800226c:	4572      	cmp	r2, lr
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800226e:	f046 062a 	orr.w	r6, r6, #42	; 0x2a
 8002272:	604e      	str	r6, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002274:	f240 834e 	bls.w	8002914 <MPU_thread.lto_priv.72+0x754>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8002278:	4e78      	ldr	r6, [pc, #480]	; (800245c <MPU_thread.lto_priv.72+0x29c>)
 800227a:	42b2      	cmp	r2, r6
 800227c:	dc69      	bgt.n	8002352 <MPU_thread.lto_priv.72+0x192>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 800227e:	1ebb      	subs	r3, r7, #2
 8002280:	2b01      	cmp	r3, #1
 8002282:	d94c      	bls.n	800231e <MPU_thread.lto_priv.72+0x15e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <MPU_thread.lto_priv.72+0x2a0>)
 8002288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800228a:	e7fe      	b.n	800228a <MPU_thread.lto_priv.72+0xca>
 800228c:	b672      	cpsid	i
 800228e:	4b74      	ldr	r3, [pc, #464]	; (8002460 <MPU_thread.lto_priv.72+0x2a0>)
 8002290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002292:	e7fe      	b.n	8002292 <MPU_thread.lto_priv.72+0xd2>

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002294:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8002484 <MPU_thread.lto_priv.72+0x2c4>
      b = dmaStreamAllocate(i2cp->dmarx,
 8002298:	6ac8      	ldr	r0, [r1, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 800229a:	f8d8 3020 	ldr.w	r3, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <MPU_thread.lto_priv.72+0x2a4>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80022a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a4:	f04f 0e00 	mov.w	lr, #0
 80022a8:	f8c8 3020 	str.w	r3, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80022ac:	2105      	movs	r1, #5

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80022ae:	f8c8 e020 	str.w	lr, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80022b2:	4633      	mov	r3, r6
 80022b4:	f000 fc9c 	bl	8002bf0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f040 830a 	bne.w	80028d2 <MPU_thread.lto_priv.72+0x712>
      b = dmaStreamAllocate(i2cp->dmatx,
 80022be:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80022c0:	4a69      	ldr	r2, [pc, #420]	; (8002468 <MPU_thread.lto_priv.72+0x2a8>)
 80022c2:	2105      	movs	r1, #5
 80022c4:	4633      	mov	r3, r6
 80022c6:	f000 fc93 	bl	8002bf0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 80022ca:	2800      	cmp	r0, #0
 80022cc:	f040 82fd 	bne.w	80028ca <MPU_thread.lto_priv.72+0x70a>
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80022d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80022d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80022d4:	f8d8 c040 	ldr.w	ip, [r8, #64]	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022d8:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8002488 <MPU_thread.lto_priv.72+0x2c8>
 80022dc:	6b71      	ldr	r1, [r6, #52]	; 0x34
 80022de:	6870      	ldr	r0, [r6, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80022e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80022e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e8:	f04f 0950 	mov.w	r9, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022ec:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80022f0:	f44c 1c00 	orr.w	ip, ip, #2097152	; 0x200000
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80022f4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80022f8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80022fc:	f8c8 c040 	str.w	ip, [r8, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002300:	6272      	str	r2, [r6, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002302:	f88e 931f 	strb.w	r9, [lr, #799]	; 0x31f
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002306:	62b3      	str	r3, [r6, #40]	; 0x28
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002308:	f8ce a180 	str.w	sl, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800230c:	f8ce a000 	str.w	sl, [lr]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002310:	f88e 9320 	strb.w	r9, [lr, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002314:	f8ce 7184 	str.w	r7, [lr, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002318:	f8ce 7004 	str.w	r7, [lr, #4]
 800231c:	e77d      	b.n	800221a <MPU_thread.lto_priv.72+0x5a>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 800231e:	2f02      	cmp	r7, #2
 8002320:	f000 82df 	beq.w	80028e2 <MPU_thread.lto_priv.72+0x722>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8002324:	2319      	movs	r3, #25
 8002326:	fb03 f202 	mul.w	r2, r3, r2
 800232a:	4e50      	ldr	r6, [pc, #320]	; (800246c <MPU_thread.lto_priv.72+0x2ac>)
 800232c:	fbb6 f3f2 	udiv	r3, r6, r2
 8002330:	fb02 f203 	mul.w	r2, r2, r3
 8002334:	1ab6      	subs	r6, r6, r2
 8002336:	2e00      	cmp	r6, #0
 8002338:	f040 82cf 	bne.w	80028da <MPU_thread.lto_priv.72+0x71a>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 800233c:	b29a      	uxth	r2, r3
      regCCR |= I2C_CCR_DUTY;
 800233e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8002342:	4313      	orrs	r3, r2
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800234c:	220d      	movs	r2, #13
      regCCR |= I2C_CCR_DUTY;
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 800234e:	b29b      	uxth	r3, r3

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002350:	620a      	str	r2, [r1, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8002352:	61cb      	str	r3, [r1, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8002354:	7802      	ldrb	r2, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8002356:	680b      	ldr	r3, [r1, #0]
  switch (opmode) {
 8002358:	2a02      	cmp	r2, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800235a:	b29b      	uxth	r3, r3
  switch (opmode) {
 800235c:	f000 82cd 	beq.w	80028fa <MPU_thread.lto_priv.72+0x73a>
 8002360:	2a03      	cmp	r2, #3
 8002362:	f000 82d0 	beq.w	8002906 <MPU_thread.lto_priv.72+0x746>
 8002366:	2a01      	cmp	r2, #1
 8002368:	d102      	bne.n	8002370 <MPU_thread.lto_priv.72+0x1b0>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800236a:	f023 030a 	bic.w	r3, r3, #10
 800236e:	b29b      	uxth	r3, r3
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8002370:	600b      	str	r3, [r1, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002372:	682b      	ldr	r3, [r5, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 8002374:	4a36      	ldr	r2, [pc, #216]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	2302      	movs	r3, #2
 800237e:	7013      	strb	r3, [r2, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002380:	f001 fd66 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002384:	f001 fad4 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <MPU_thread.lto_priv.72+0x288>)
 800238c:	42a2      	cmp	r2, r4
 800238e:	d005      	beq.n	800239c <MPU_thread.lto_priv.72+0x1dc>
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	6892      	ldr	r2, [r2, #8]
 8002394:	6889      	ldr	r1, [r1, #8]
 8002396:	4291      	cmp	r1, r2
 8002398:	f0c0 82b8 	bcc.w	800290c <MPU_thread.lto_priv.72+0x74c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800239c:	2500      	movs	r5, #0
 800239e:	f385 8811 	msr	BASEPRI, r5
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 80023a2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800248c <MPU_thread.lto_priv.72+0x2cc>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 80023a6:	4832      	ldr	r0, [pc, #200]	; (8002470 <MPU_thread.lto_priv.72+0x2b0>)
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000
 80023a8:	23c0      	movs	r3, #192	; 0xc0
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 80023aa:	246b      	movs	r4, #107	; 0x6b
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000
 80023ac:	f888 3001 	strb.w	r3, [r8, #1]
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 80023b0:	f888 4000 	strb.w	r4, [r8]
 80023b4:	f001 fd6c 	bl	8003e90 <chMtxLock>
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000

  i2cAcquireBus(MPU_USE_I2C);

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 80023b8:	462a      	mov	r2, r5
 80023ba:	462b      	mov	r3, r5
 80023bc:	2068      	movs	r0, #104	; 0x68
 80023be:	2102      	movs	r1, #2
 80023c0:	f003 f806 	bl	80053d0 <i2cMasterTransmitTimeout.constprop.39>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));

  if (status != MSG_OK) {
 80023c4:	4605      	mov	r5, r0
 80023c6:	b1d0      	cbz	r0, 80023fe <MPU_thread.lto_priv.72+0x23e>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80023c8:	f002 ff8a 	bl	80052e0 <chMtxUnlock.constprop.53>
    i2cReleaseBus(MPU_USE_I2C);
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <MPU_thread.lto_priv.72+0x2b4>)
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 80023d4:	7a1b      	ldrb	r3, [r3, #8]
 80023d6:	700b      	strb	r3, [r1, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 80023d8:	b113      	cbz	r3, 80023e0 <MPU_thread.lto_priv.72+0x220>
      g_i2cErrorInfo.i2c_error_counter++;
 80023da:	884b      	ldrh	r3, [r1, #2]
 80023dc:	3301      	adds	r3, #1
 80023de:	804b      	strh	r3, [r1, #2]
    }
    g_i2cErrorInfo.errorFlag |= 0x02;
 80023e0:	9a01      	ldr	r2, [sp, #4]
 80023e2:	7913      	ldrb	r3, [r2, #4]
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	7113      	strb	r3, [r2, #4]

  if(!mpu6050Init(MPU6050_I2C_ADDR_A0_LOW))
    while(true)
    {
      palTogglePad(GPIOD,GPIOD_LED3);
 80023ea:	4c23      	ldr	r4, [pc, #140]	; (8002478 <MPU_thread.lto_priv.72+0x2b8>)
 80023ec:	6963      	ldr	r3, [r4, #20]
 80023ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f2:	6163      	str	r3, [r4, #20]
      chThdSleepMilliseconds(200);
 80023f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023f8:	f001 fe2a 	bl	8004050 <chThdSleep>
 80023fc:	e7f6      	b.n	80023ec <MPU_thread.lto_priv.72+0x22c>
    return 0;
  }

  /* Wait 100 ms for the MPU6050 to reset */
  chThdSleepMilliseconds(100);
 80023fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002402:	f001 fe25 	bl	8004050 <chThdSleep>

  /* Clear the SLEEP flag, set the clock and start measuring. */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
  mpu6050TXData[1] = 0x03;         // Register value CLKSEL = PLL_Z;
 8002406:	2603      	movs	r6, #3

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 8002408:	2068      	movs	r0, #104	; 0x68
 800240a:	2102      	movs	r1, #2
 800240c:	462a      	mov	r2, r5
 800240e:	462b      	mov	r3, r5

  /* Wait 100 ms for the MPU6050 to reset */
  chThdSleepMilliseconds(100);

  /* Clear the SLEEP flag, set the clock and start measuring. */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 8002410:	f888 4000 	strb.w	r4, [r8]
  mpu6050TXData[1] = 0x03;         // Register value CLKSEL = PLL_Z;
 8002414:	f888 6001 	strb.w	r6, [r8, #1]

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 8002418:	f002 ffda 	bl	80053d0 <i2cMasterTransmitTimeout.constprop.39>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));

  if (status != MSG_OK) {
 800241c:	4604      	mov	r4, r0
 800241e:	2800      	cmp	r0, #0
 8002420:	d036      	beq.n	8002490 <MPU_thread.lto_priv.72+0x2d0>
 8002422:	f002 ff5d 	bl	80052e0 <chMtxUnlock.constprop.53>
    i2cReleaseBus(MPU_USE_I2C);
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MPU_thread.lto_priv.72+0x2b4>)
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	4619      	mov	r1, r3
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MPU_thread.lto_priv.72+0x290>)
 800242e:	7a1b      	ldrb	r3, [r3, #8]
 8002430:	700b      	strb	r3, [r1, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 8002432:	b113      	cbz	r3, 800243a <MPU_thread.lto_priv.72+0x27a>
      g_i2cErrorInfo.i2c_error_counter++;
 8002434:	884b      	ldrh	r3, [r1, #2]
 8002436:	3301      	adds	r3, #1
 8002438:	804b      	strh	r3, [r1, #2]
//      debugLog("E:mpu6050i-rst");
    }
    g_i2cErrorInfo.errorFlag |= 0x04;
 800243a:	9a01      	ldr	r2, [sp, #4]
 800243c:	7913      	ldrb	r3, [r2, #4]
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	7113      	strb	r3, [r2, #4]
 8002444:	e7d1      	b.n	80023ea <MPU_thread.lto_priv.72+0x22a>
 8002446:	bf00      	nop
 8002448:	2000d228 	.word	0x2000d228
 800244c:	08006980 	.word	0x08006980
 8002450:	2000dbf0 	.word	0x2000dbf0
 8002454:	080069c0 	.word	0x080069c0
 8002458:	080069b0 	.word	0x080069b0
 800245c:	00061a80 	.word	0x00061a80
 8002460:	08006940 	.word	0x08006940
 8002464:	08001811 	.word	0x08001811
 8002468:	08001151 	.word	0x08001151
 800246c:	0280de80 	.word	0x0280de80
 8002470:	2000dbfc 	.word	0x2000dbfc
 8002474:	20000a48 	.word	0x20000a48
 8002478:	40020c00 	.word	0x40020c00
 800247c:	003d08ff 	.word	0x003d08ff
 8002480:	000186a0 	.word	0x000186a0
 8002484:	40023800 	.word	0x40023800
 8002488:	e000e100 	.word	0xe000e100
 800248c:	2000d07c 	.word	0x2000d07c

  /* Configure the MPU6050 sensor        */
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
 8002490:	2719      	movs	r7, #25
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
 8002492:	260b      	movs	r6, #11
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
  mpu6050TXData[4] = 0x01;          // ACCEL_CONFIG register value AFS_SEL = +-4G
 8002494:	2501      	movs	r5, #1

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 5,
 8002496:	2068      	movs	r0, #104	; 0x68
 8002498:	2105      	movs	r1, #5
 800249a:	4622      	mov	r2, r4
 800249c:	4623      	mov	r3, r4

  /* Configure the MPU6050 sensor        */
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
 800249e:	f888 7000 	strb.w	r7, [r8]
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
 80024a2:	f888 4002 	strb.w	r4, [r8, #2]
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
 80024a6:	f888 4003 	strb.w	r4, [r8, #3]
  /* Configure the MPU6050 sensor        */
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
 80024aa:	f888 6001 	strb.w	r6, [r8, #1]
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
  mpu6050TXData[4] = 0x01;          // ACCEL_CONFIG register value AFS_SEL = +-4G
 80024ae:	f888 5004 	strb.w	r5, [r8, #4]

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 5,
 80024b2:	f002 ff8d 	bl	80053d0 <i2cMasterTransmitTimeout.constprop.39>
 80024b6:	4607      	mov	r7, r0
 80024b8:	f002 ff12 	bl	80052e0 <chMtxUnlock.constprop.53>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));


  i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
 80024bc:	2f00      	cmp	r7, #0
 80024be:	f040 81f5 	bne.w	80028ac <MPU_thread.lto_priv.72+0x6ec>
 * @param  fAddrLow - IMU address pin A0 is pulled low flag.
 */
void imuStructureInit(PIMUStruct pIMU, uint8_t fAddrHigh) {
  uint8_t i;
  /* Initialize to zero. */
  memset((void *)pIMU, 0, sizeof(IMUStruct));
 80024c2:	4dac      	ldr	r5, [pc, #688]	; (8002774 <MPU_thread.lto_priv.72+0x5b4>)
  memset(MPUFlash, 0, 24);
 80024c4:	4cac      	ldr	r4, [pc, #688]	; (8002778 <MPU_thread.lto_priv.72+0x5b8>)
 80024c6:	4bad      	ldr	r3, [pc, #692]	; (800277c <MPU_thread.lto_priv.72+0x5bc>)
 80024c8:	9301      	str	r3, [sp, #4]
 * @param  fAddrLow - IMU address pin A0 is pulled low flag.
 */
void imuStructureInit(PIMUStruct pIMU, uint8_t fAddrHigh) {
  uint8_t i;
  /* Initialize to zero. */
  memset((void *)pIMU, 0, sizeof(IMUStruct));
 80024ca:	4639      	mov	r1, r7
 80024cc:	2281      	movs	r2, #129	; 0x81
 80024ce:	4628      	mov	r0, r5
 80024d0:	f003 fe8e 	bl	80061f0 <memset>
  memset(MPUFlash, 0, 24);
 80024d4:	4620      	mov	r0, r4
 80024d6:	4639      	mov	r1, r7
 80024d8:	2218      	movs	r2, #24
 80024da:	f003 fe89 	bl	80061f0 <memset>

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
 80024de:	4621      	mov	r1, r4
 80024e0:	48a7      	ldr	r0, [pc, #668]	; (8002780 <MPU_thread.lto_priv.72+0x5c0>)
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 80024e2:	eddf 8aa8 	vldr	s17, [pc, #672]	; 8002784 <MPU_thread.lto_priv.72+0x5c4>
 80024e6:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 8002788 <MPU_thread.lto_priv.72+0x5c8>
  uint8_t i;
  /* Initialize to zero. */
  memset((void *)pIMU, 0, sizeof(IMUStruct));
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
 80024ea:	2218      	movs	r2, #24
 80024ec:	f002 fdc8 	bl	8005080 <flashRead>
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 80024f0:	4ba6      	ldr	r3, [pc, #664]	; (800278c <MPU_thread.lto_priv.72+0x5cc>)
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 80024f2:	6820      	ldr	r0, [r4, #0]
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 80024f4:	7819      	ldrb	r1, [r3, #0]
 80024f6:	785a      	ldrb	r2, [r3, #1]
 80024f8:	789b      	ldrb	r3, [r3, #2]
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 80024fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 80024fe:	6966      	ldr	r6, [r4, #20]
 8002500:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8002504:	f8d4 c010 	ldr.w	ip, [r4, #16]
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8002508:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800250c:	6328      	str	r0, [r5, #48]	; 0x30
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 800250e:	f002 020f 	and.w	r2, r2, #15
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	489e      	ldr	r0, [pc, #632]	; (8002790 <MPU_thread.lto_priv.72+0x5d0>)
 8002518:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 800251c:	f001 010f 	and.w	r1, r1, #15
    pIMU->addr = MPU6050_I2C_ADDR_A0_HIGH;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
 8002520:	2468      	movs	r4, #104	; 0x68
 8002522:	f885 407f 	strb.w	r4, [r5, #127]	; 0x7f
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8002526:	f885 107c 	strb.w	r1, [r5, #124]	; 0x7c
 800252a:	f885 207d 	strb.w	r2, [r5, #125]	; 0x7d
 800252e:	4b98      	ldr	r3, [pc, #608]	; (8002790 <MPU_thread.lto_priv.72+0x5d0>)

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 8002530:	646e      	str	r6, [r5, #68]	; 0x44
 8002532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8002536:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);
 800253a:	3619      	adds	r6, #25

    if(tick>chVTGetSystemTimeX())
 800253c:	42b2      	cmp	r2, r6
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 800253e:	f8c5 a03c 	str.w	sl, [r5, #60]	; 0x3c
 8002542:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8002546:	f8c5 e038 	str.w	lr, [r5, #56]	; 0x38
 800254a:	46b9      	mov	r9, r7
 800254c:	f0c0 80f4 	bcc.w	8002738 <MPU_thread.lto_priv.72+0x578>
 8002550:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  int16_t mpu6050Data[6];

  /* Set the start register address for bulk data transfer. */
  mpu6050TXData[0] = MPU6050_ACCEL_XOUT_H;
  i2cAcquireBus(MPU_USE_I2C);
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
 8002552:	4c90      	ldr	r4, [pc, #576]	; (8002794 <MPU_thread.lto_priv.72+0x5d4>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8002554:	4890      	ldr	r0, [pc, #576]	; (8002798 <MPU_thread.lto_priv.72+0x5d8>)
 8002556:	4f87      	ldr	r7, [pc, #540]	; (8002774 <MPU_thread.lto_priv.72+0x5b4>)
  msg_t status = MSG_OK;
  uint8_t id;
  int16_t mpu6050Data[6];

  /* Set the start register address for bulk data transfer. */
  mpu6050TXData[0] = MPU6050_ACCEL_XOUT_H;
 8002558:	233b      	movs	r3, #59	; 0x3b
 800255a:	f888 3000 	strb.w	r3, [r8]
 800255e:	f001 fc97 	bl	8003e90 <chMtxLock>
  i2cAcquireBus(MPU_USE_I2C);
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
 8002562:	4622      	mov	r2, r4
 8002564:	f895 007f 	ldrb.w	r0, [r5, #127]	; 0x7f
 8002568:	2101      	movs	r1, #1
 800256a:	230e      	movs	r3, #14
 800256c:	f002 ff30 	bl	80053d0 <i2cMasterTransmitTimeout.constprop.39>
 8002570:	4682      	mov	sl, r0
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002572:	f002 feb5 	bl	80052e0 <chMtxUnlock.constprop.53>
    mpu6050RXData, 14, MS2ST(MPU6050_READ_TIMEOUT_MS));
	i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
 8002576:	f1ba 0f00 	cmp.w	sl, #0
 800257a:	f040 8119 	bne.w	80027b0 <MPU_thread.lto_priv.72+0x5f0>
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 800257e:	f894 b000 	ldrb.w	fp, [r4]
 8002582:	7860      	ldrb	r0, [r4, #1]
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 8002584:	f894 a002 	ldrb.w	sl, [r4, #2]
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 8002588:	7962      	ldrb	r2, [r4, #5]
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 800258a:	78e1      	ldrb	r1, [r4, #3]
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 800258c:	f894 c004 	ldrb.w	ip, [r4, #4]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 8002590:	f894 e008 	ldrb.w	lr, [r4, #8]
 8002594:	7a63      	ldrb	r3, [r4, #9]
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 8002596:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 800259a:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 800259e:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 80025a2:	f8ad 000c 	strh.w	r0, [sp, #12]
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 80025a6:	7b22      	ldrb	r2, [r4, #12]
 80025a8:	7b60      	ldrb	r0, [r4, #13]
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 80025aa:	f8ad 100e 	strh.w	r1, [sp, #14]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
 80025ae:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
 80025b2:	f894 a00a 	ldrb.w	sl, [r4, #10]
 80025b6:	f894 b00b 	ldrb.w	fp, [r4, #11]
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 80025ba:	f8ad c010 	strh.w	ip, [sp, #16]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 80025be:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 80025c2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 80025c6:	f8ad 3012 	strh.w	r3, [sp, #18]
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 80025ca:	f8ad 2016 	strh.w	r2, [sp, #22]

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
 80025ce:	f001 0307 	and.w	r3, r1, #7
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 80025d2:	aa06      	add	r2, sp, #24
 80025d4:	eb02 0243 	add.w	r2, r2, r3, lsl #1

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
 80025d8:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
 80025dc:	f8ad a014 	strh.w	sl, [sp, #20]
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
 80025e0:	f011 0f08 	tst.w	r1, #8
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 80025e4:	4613      	mov	r3, r2
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 80025e6:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
 80025ea:	f000 80b6 	beq.w	800275a <MPU_thread.lto_priv.72+0x59a>
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 80025ee:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 80025f2:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 800279c <MPU_thread.lto_priv.72+0x5dc>
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 80025f6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80027a0 <MPU_thread.lto_priv.72+0x5e0>
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 80025fa:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 80025fe:	ee07 3a90 	vmov	s15, r3
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
 8002602:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 8002606:	495b      	ldr	r1, [pc, #364]	; (8002774 <MPU_thread.lto_priv.72+0x5b4>)
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002608:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
 8002610:	f002 0307 	and.w	r3, r2, #7
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
 8002614:	f012 0f08 	tst.w	r2, #8
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002618:	aa06      	add	r2, sp, #24
 800261a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800261e:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002622:	ee67 7a87 	vmul.f32	s15, s15, s14

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002626:	4613      	mov	r3, r2
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002628:	edc7 6a00 	vstr	s13, [r7]
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800262c:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002630:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
 8002634:	f000 8084 	beq.w	8002740 <MPU_thread.lto_priv.72+0x580>
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002638:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 800263c:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800279c <MPU_thread.lto_priv.72+0x5dc>
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002640:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80027a0 <MPU_thread.lto_priv.72+0x5e0>
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002644:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002648:	ee07 3a90 	vmov	s15, r3
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 800264c:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002650:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 8002658:	f002 0307 	and.w	r3, r2, #7
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
 800265c:	f012 0f08 	tst.w	r2, #8
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002660:	aa06      	add	r2, sp, #24
 8002662:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002666:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800266a:	ee67 7a87 	vmul.f32	s15, s15, s14
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800266e:	edc1 6a01 	vstr	s13, [r1, #4]
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002672:	edc1 7a04 	vstr	s15, [r1, #16]

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002676:	4613      	mov	r3, r2
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 8002678:	493e      	ldr	r1, [pc, #248]	; (8002774 <MPU_thread.lto_priv.72+0x5b4>)
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 800267a:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
 800267e:	f040 8105 	bne.w	800288c <MPU_thread.lto_priv.72+0x6cc>
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002682:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002686:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800279c <MPU_thread.lto_priv.72+0x5dc>
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800268a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80027a0 <MPU_thread.lto_priv.72+0x5e0>
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800268e:	43d2      	mvns	r2, r2
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002690:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002692:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002696:	ee07 3a90 	vmov	s15, r3
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800269a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 80026a2:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 80026a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <MPU_thread.lto_priv.72+0x5b4>)
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 80026ac:	ed9f 4a3d 	vldr	s8, [pc, #244]	; 80027a4 <MPU_thread.lto_priv.72+0x5e4>
 80026b0:	eddf 4a3d 	vldr	s9, [pc, #244]	; 80027a8 <MPU_thread.lto_priv.72+0x5e8>
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 80026b4:	edc1 6a02 	vstr	s13, [r1, #8]
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 80026b8:	edc1 7a05 	vstr	s15, [r1, #20]
 80026bc:	2200      	movs	r2, #0
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 80026be:	ed93 6a00 	vldr	s12, [r3]
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 80026c2:	ed93 7a03 	vldr	s14, [r3, #12]
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 80026c6:	ed93 5a15 	vldr	s10, [r3, #84]	; 0x54
 80026ca:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 80026ce:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 80026d2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 80026d6:	ee76 6a66 	vsub.f32	s13, s12, s13
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 80026da:	ee77 7a67 	vsub.f32	s15, s14, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 80026de:	ee25 6a28 	vmul.f32	s12, s10, s17
 80026e2:	ee25 7a84 	vmul.f32	s14, s11, s8
 80026e6:	eea6 6a88 	vfma.f32	s12, s13, s16
 80026ea:	3204      	adds	r2, #4
{
  uint8_t i;
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
 80026ec:	2a0c      	cmp	r2, #12
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 80026ee:	eea7 7aa4 	vfma.f32	s14, s15, s9
 80026f2:	f103 0304 	add.w	r3, r3, #4
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 80026f6:	ed43 6a01 	vstr	s13, [r3, #-4]
    pIMU->gyroData[i] -= pIMU->gyroBias[i];

    pIMU->accelFiltered[i] =
 80026fa:	ed83 6a14 	vstr	s12, [r3, #80]	; 0x50
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 80026fe:	edc3 7a02 	vstr	s15, [r3, #8]

    pIMU->accelFiltered[i] =
      lpfilter(0.15f, pIMU->accelData[i], pIMU->accelFiltered[i]);
    pIMU->gyroFiltered[i] =
 8002702:	ed83 7a08 	vstr	s14, [r3, #32]
{
  uint8_t i;
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
 8002706:	d1da      	bne.n	80026be <MPU_thread.lto_priv.72+0x4fe>
      lpfilter(0.15f, pIMU->accelData[i], pIMU->accelFiltered[i]);
    pIMU->gyroFiltered[i] =
      lpfilter(0.3f, pIMU->gyroData[i], pIMU->gyroFiltered[i]);
  }

  pIMU->theta_gyro -= pIMU->gyroFiltered[2]/(float)(MPU_FREQ);
 8002708:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 800270c:	eddf 7a27 	vldr	s15, [pc, #156]	; 80027ac <MPU_thread.lto_priv.72+0x5ec>
 8002710:	ed95 7a1c 	vldr	s14, [r5, #112]	; 0x70
 8002714:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	edc5 7a1c 	vstr	s15, [r5, #112]	; 0x70
    else
      tick=chVTGetSystemTimeX();

    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
 8002720:	f009 0307 	and.w	r3, r9, #7
 8002724:	2b07      	cmp	r3, #7
 8002726:	d051      	beq.n	80027cc <MPU_thread.lto_priv.72+0x60c>
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MPU_thread.lto_priv.72+0x5d0>)
 800272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);
 800272c:	3619      	adds	r6, #25

    if(tick>chVTGetSystemTimeX())
 800272e:	42b2      	cmp	r2, r6
    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
      mpu_calc_theta(&g_IMU1);

    count++;
 8002730:	f109 0901 	add.w	r9, r9, #1
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);

    if(tick>chVTGetSystemTimeX())
 8002734:	f4bf af0c 	bcs.w	8002550 <MPU_thread.lto_priv.72+0x390>
      chThdSleepUntil(tick);
 8002738:	4630      	mov	r0, r6
 800273a:	f001 fc59 	bl	8003ff0 <chThdSleepUntil>
 800273e:	e708      	b.n	8002552 <MPU_thread.lto_priv.72+0x392>
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002740:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002744:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800279c <MPU_thread.lto_priv.72+0x5dc>
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80027a0 <MPU_thread.lto_priv.72+0x5e0>
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800274c:	43d2      	mvns	r2, r2
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800274e:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002750:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	e778      	b.n	800264c <MPU_thread.lto_priv.72+0x48c>
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800275a:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800275e:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 800279c <MPU_thread.lto_priv.72+0x5dc>
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002762:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80027a0 <MPU_thread.lto_priv.72+0x5e0>
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8002766:	43d2      	mvns	r2, r2
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8002768:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 800276a:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	e746      	b.n	8002602 <MPU_thread.lto_priv.72+0x442>
 8002774:	2000bcc4 	.word	0x2000bcc4
 8002778:	20001bd8 	.word	0x20001bd8
 800277c:	20000a48 	.word	0x20000a48
 8002780:	08040000 	.word	0x08040000
 8002784:	3f59999a 	.word	0x3f59999a
 8002788:	3e19999a 	.word	0x3e19999a
 800278c:	20000800 	.word	0x20000800
 8002790:	40000c00 	.word	0x40000c00
 8002794:	20000a50 	.word	0x20000a50
 8002798:	2000dbfc 	.word	0x2000dbfc
 800279c:	3a1cf5c3 	.word	0x3a1cf5c3
 80027a0:	3bfa232d 	.word	0x3bfa232d
 80027a4:	3f333333 	.word	0x3f333333
 80027a8:	3e99999a 	.word	0x3e99999a
 80027ac:	43c80000 	.word	0x43c80000
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
    mpu6050RXData, 14, MS2ST(MPU6050_READ_TIMEOUT_MS));
	i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 80027b0:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <MPU_thread.lto_priv.72+0x7b0>)
 80027b2:	9a01      	ldr	r2, [sp, #4]
 80027b4:	7a1b      	ldrb	r3, [r3, #8]
 80027b6:	7013      	strb	r3, [r2, #0]
 80027b8:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <MPU_thread.lto_priv.72+0x7b4>)
    if (g_i2cErrorInfo.last_i2c_error) {
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0b0      	beq.n	8002720 <MPU_thread.lto_priv.72+0x560>
      g_i2cErrorInfo.i2c_error_counter++;
 80027be:	8853      	ldrh	r3, [r2, #2]
 80027c0:	3301      	adds	r3, #1
 80027c2:	8053      	strh	r3, [r2, #2]
    else
      tick=chVTGetSystemTimeX();

    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
 80027c4:	f009 0307 	and.w	r3, r9, #7
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d1ad      	bne.n	8002728 <MPU_thread.lto_priv.72+0x568>
}

#define RAD2DEC 180.0f / M_PI
void mpu_calc_theta(PIMUStruct pIMU)
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;
 80027cc:	ed95 7a16 	vldr	s14, [r5, #88]	; 0x58
 80027d0:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 80027d4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80027d8:	ee17 0a90 	vmov	r0, s15
 80027dc:	f7fd ff04 	bl	80005e8 <__aeabi_f2d>
 80027e0:	ec41 0b10 	vmov	d0, r0, r1
 80027e4:	f003 fd9c 	bl	8006320 <atan>
 80027e8:	2200      	movs	r2, #0
 80027ea:	ec51 0b10 	vmov	r0, r1, d0
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <MPU_thread.lto_priv.72+0x7b8>)
 80027f0:	f7fd ff4e 	bl	8000690 <__aeabi_dmul>
 80027f4:	a35c      	add	r3, pc, #368	; (adr r3, 8002968 <MPU_thread.lto_priv.72+0x7a8>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fe f873 	bl	80008e4 <__aeabi_ddiv>
 80027fe:	f7fe f95f 	bl	8000ac0 <__aeabi_d2f>

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
 8002802:	ed95 9a1d 	vldr	s18, [r5, #116]	; 0x74
}

#define RAD2DEC 180.0f / M_PI
void mpu_calc_theta(PIMUStruct pIMU)
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;
 8002806:	66e8      	str	r0, [r5, #108]	; 0x6c
 8002808:	ee07 0a90 	vmov	s15, r0

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
 800280c:	ee77 9ac9 	vsub.f32	s19, s15, s18
  float theta_prev = pIMU->theta;
  if(abs(d_accel) < 0.5f)
 8002810:	ee19 0a90 	vmov	r0, s19
 8002814:	f7fd fee8 	bl	80005e8 <__aeabi_f2d>
 8002818:	ec41 0b10 	vmov	d0, r0, r1
 800281c:	f003 fce0 	bl	80061e0 <abs>
 8002820:	ee07 0a90 	vmov	s15, r0
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800282c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d435      	bmi.n	80028a2 <MPU_thread.lto_priv.72+0x6e2>
    alpha = 0.6f;
  else if(abs(d_accel) < 2.0f)
 8002836:	eeb0 7a00 	vmov.f32	s14, #0
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800297c <MPU_thread.lto_priv.72+0x7bc>
 8002842:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002980 <MPU_thread.lto_priv.72+0x7c0>
 8002846:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8002984 <MPU_thread.lto_priv.72+0x7c4>
 800284a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002988 <MPU_thread.lto_priv.72+0x7c8>
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	bf58      	it	pl
 8002854:	eeb0 7a67 	vmovpl.f32	s14, s15
 8002858:	bf58      	it	pl
 800285a:	eeb0 6a66 	vmovpl.f32	s12, s13
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 800285e:	edd5 7a1c 	vldr	s15, [r5, #112]	; 0x70
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8002862:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800298c <MPU_thread.lto_priv.72+0x7cc>
 8002866:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002990 <MPU_thread.lto_priv.72+0x7d0>
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 800286e:	ee29 7a26 	vmul.f32	s14, s18, s13
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 8002872:	eee9 7a86 	vfma.f32	s15, s19, s12
  pIMU->theta_gyro = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	672b      	str	r3, [r5, #112]	; 0x70
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 800287a:	ee39 9a27 	vadd.f32	s18, s18, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 800287e:	eef0 7a47 	vmov.f32	s15, s14
 8002882:	eee9 7a25 	vfma.f32	s15, s18, s11
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
  pIMU->theta_gyro = 0;

  pIMU->theta = lpfilter(0.4f, pIMU->theta, theta_prev);
 8002886:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 800288a:	e74d      	b.n	8002728 <MPU_thread.lto_priv.72+0x568>

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 800288c:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002890:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8002994 <MPU_thread.lto_priv.72+0x7d4>
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8002894:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002998 <MPU_thread.lto_priv.72+0x7d8>
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8002898:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	e6fb      	b.n	800269a <MPU_thread.lto_priv.72+0x4da>
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
  float theta_prev = pIMU->theta;
  if(abs(d_accel) < 0.5f)
 80028a2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800299c <MPU_thread.lto_priv.72+0x7dc>
    alpha = 0.6f;
 80028a6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800298c <MPU_thread.lto_priv.72+0x7cc>
 80028aa:	e7d8      	b.n	800285e <MPU_thread.lto_priv.72+0x69e>


  i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <MPU_thread.lto_priv.72+0x7b0>)
 80028ae:	4a31      	ldr	r2, [pc, #196]	; (8002974 <MPU_thread.lto_priv.72+0x7b4>)
 80028b0:	7a1b      	ldrb	r3, [r3, #8]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	7013      	strb	r3, [r2, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 80028b6:	b113      	cbz	r3, 80028be <MPU_thread.lto_priv.72+0x6fe>
      g_i2cErrorInfo.i2c_error_counter++;
 80028b8:	8853      	ldrh	r3, [r2, #2]
 80028ba:	442b      	add	r3, r5
 80028bc:	8053      	strh	r3, [r2, #2]
     // debugLog("E:mpu6050i-cfg");
    }
    g_i2cErrorInfo.errorFlag |= 0x08;
 80028be:	9a01      	ldr	r2, [sp, #4]
 80028c0:	7913      	ldrb	r3, [r2, #4]
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	7113      	strb	r3, [r2, #4]
 80028c8:	e58f      	b.n	80023ea <MPU_thread.lto_priv.72+0x22a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ca:	b672      	cpsid	i
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <MPU_thread.lto_priv.72+0x7e0>)
 80028ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028d0:	e7fe      	b.n	80028d0 <MPU_thread.lto_priv.72+0x710>
 80028d2:	b672      	cpsid	i
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <MPU_thread.lto_priv.72+0x7e0>)
 80028d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028d8:	e7fe      	b.n	80028d8 <MPU_thread.lto_priv.72+0x718>
 80028da:	b672      	cpsid	i
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 80028de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028e0:	e7fe      	b.n	80028e0 <MPU_thread.lto_priv.72+0x720>
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 80028e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <MPU_thread.lto_priv.72+0x7e8>)
 80028e8:	fbb3 f6f2 	udiv	r6, r3, r2
 80028ec:	fb02 f206 	mul.w	r2, r2, r6
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d133      	bne.n	800295e <MPU_thread.lto_priv.72+0x79e>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80028f6:	b2b2      	uxth	r2, r6
 80028f8:	e523      	b.n	8002342 <MPU_thread.lto_priv.72+0x182>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80028fa:	f023 0308 	bic.w	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	e534      	b.n	8002370 <MPU_thread.lto_priv.72+0x1b0>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002906:	f043 030a 	orr.w	r3, r3, #10
 800290a:	e531      	b.n	8002370 <MPU_thread.lto_priv.72+0x1b0>
 800290c:	b672      	cpsid	i
 800290e:	4a27      	ldr	r2, [pc, #156]	; (80029ac <MPU_thread.lto_priv.72+0x7ec>)
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
 8002912:	e7fe      	b.n	8002912 <MPU_thread.lto_priv.72+0x752>
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
    /* Configure clock_div in standard mode.*/
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8002914:	2f01      	cmp	r7, #1
 8002916:	d003      	beq.n	8002920 <MPU_thread.lto_priv.72+0x760>
 8002918:	b672      	cpsid	i
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 800291c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800291e:	e7fe      	b.n	800291e <MPU_thread.lto_priv.72+0x75e>

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	4e21      	ldr	r6, [pc, #132]	; (80029a8 <MPU_thread.lto_priv.72+0x7e8>)
 8002924:	fbb6 f3f2 	udiv	r3, r6, r2
 8002928:	fb02 f203 	mul.w	r2, r2, r3
 800292c:	1ab6      	subs	r6, r6, r2
 800292e:	b996      	cbnz	r6, 8002956 <MPU_thread.lto_priv.72+0x796>
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8002930:	b29a      	uxth	r2, r3

    osalDbgAssert(clock_div >= 0x04,
 8002932:	2a03      	cmp	r2, #3
 8002934:	d90b      	bls.n	800294e <MPU_thread.lto_priv.72+0x78e>
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002936:	232b      	movs	r3, #43	; 0x2b

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8002938:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 800293c:	620b      	str	r3, [r1, #32]
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 800293e:	f3c2 030b 	ubfx	r3, r2, #0, #12

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8002942:	f4ff ad06 	bcc.w	8002352 <MPU_thread.lto_priv.72+0x192>
 8002946:	b672      	cpsid	i
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 800294a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800294c:	e7fe      	b.n	800294c <MPU_thread.lto_priv.72+0x78c>
 800294e:	b672      	cpsid	i
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 8002952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002954:	e7fe      	b.n	8002954 <MPU_thread.lto_priv.72+0x794>
 8002956:	b672      	cpsid	i
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 800295a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800295c:	e7fe      	b.n	800295c <MPU_thread.lto_priv.72+0x79c>
 800295e:	b672      	cpsid	i
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MPU_thread.lto_priv.72+0x7e4>)
 8002962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002964:	e7fe      	b.n	8002964 <MPU_thread.lto_priv.72+0x7a4>
 8002966:	bf00      	nop
 8002968:	60000000 	.word	0x60000000
 800296c:	400921fb 	.word	0x400921fb
 8002970:	2000dbf0 	.word	0x2000dbf0
 8002974:	20000a48 	.word	0x20000a48
 8002978:	40668000 	.word	0x40668000
 800297c:	3e4ccccd 	.word	0x3e4ccccd
 8002980:	3f4ccccd 	.word	0x3f4ccccd
 8002984:	3f733333 	.word	0x3f733333
 8002988:	3d4ccccd 	.word	0x3d4ccccd
 800298c:	3f19999a 	.word	0x3f19999a
 8002990:	3ecccccd 	.word	0x3ecccccd
 8002994:	3a1cf5c3 	.word	0x3a1cf5c3
 8002998:	3bfa232d 	.word	0x3bfa232d
 800299c:	3ecccccc 	.word	0x3ecccccc
 80029a0:	08006960 	.word	0x08006960
 80029a4:	08006940 	.word	0x08006940
 80029a8:	0280de80 	.word	0x0280de80
 80029ac:	08006e40 	.word	0x08006e40

080029b0 <Controller_thread>:
  //controller.int_max = (float)(parameters[4]);
}

static THD_WORKING_AREA(Controller_thread_wa, 4096);
static THD_FUNCTION(Controller_thread, p)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	4c71      	ldr	r4, [pc, #452]	; (8002b78 <Controller_thread+0x1c8>)
 80029b4:	4a71      	ldr	r2, [pc, #452]	; (8002b7c <Controller_thread+0x1cc>)
 80029b6:	69a3      	ldr	r3, [r4, #24]
static rc_channel_t* rc_channel;

void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);
 80029b8:	4871      	ldr	r0, [pc, #452]	; (8002b80 <Controller_thread+0x1d0>)
 80029ba:	619a      	str	r2, [r3, #24]
  //controller.int_max = (float)(parameters[4]);
}

static THD_WORKING_AREA(Controller_thread_wa, 4096);
static THD_FUNCTION(Controller_thread, p)
{
 80029bc:	b082      	sub	sp, #8
static rc_channel_t* rc_channel;

void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);
 80029be:	4669      	mov	r1, sp
 80029c0:	2208      	movs	r2, #8
 80029c2:	f002 fb5d 	bl	8005080 <flashRead>

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 80029c6:	eddd 7a00 	vldr	s15, [sp]
 80029ca:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002b84 <Controller_thread+0x1d4>
 80029ce:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8002bc4 <Controller_thread+0x214>
 80029d2:	4e6d      	ldr	r6, [pc, #436]	; (8002b88 <Controller_thread+0x1d8>)
 80029d4:	4d6d      	ldr	r5, [pc, #436]	; (8002b8c <Controller_thread+0x1dc>)
 80029d6:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002bc8 <Controller_thread+0x218>
 80029da:	4f6d      	ldr	r7, [pc, #436]	; (8002b90 <Controller_thread+0x1e0>)

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
    //error += speed_output;

    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 80029dc:	eddf 9a6d 	vldr	s19, [pc, #436]	; 8002b94 <Controller_thread+0x1e4>
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 80029e0:	eddf 8a6d 	vldr	s17, [pc, #436]	; 8002b98 <Controller_thread+0x1e8>
 80029e4:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 8002b9c <Controller_thread+0x1ec>
    float temp;

    if (motors[0].input > 0.0f)
      temp =  motors[0].input - DEAD_ZONE;
    else
      temp =  motors[0].input + DEAD_ZONE;
 80029e8:	ed9f 8a6d 	vldr	s16, [pc, #436]	; 8002ba0 <Controller_thread+0x1f0>
void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 80029ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 80029f0:	eddd 7a01 	vldr	s15, [sp, #4]
 80029f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 80029f8:	ee87 7a26 	vdiv.f32	s14, s14, s13
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 80029fc:	eec7 7aa6 	vdiv.f32	s15, s15, s13
void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 8002a00:	ed89 7a00 	vstr	s14, [r9]
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 8002a04:	edc9 7a01 	vstr	s15, [r9, #4]
    speed_output = controller.Kp_v * speed_error +
          controller.Ki_v * speed_error_int;

  //  tft_printf(5,2,"Error:%6d",(int16_t)(speed_output * 10000.0f));
*/
    float error =  g_IMU1.theta - BALANCE_POS, output;
 8002a08:	ed96 aa1d 	vldr	s20, [r6, #116]	; 0x74

    if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
 8002a0c:	eef2 7a0e 	vmov.f32	s15, #46	; 0x2e
 8002a10:	eeb4 aae7 	vcmpe.f32	s20, s15
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	dc5f      	bgt.n	8002ada <Controller_thread+0x12a>
 8002a1a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xae
 8002a1e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d458      	bmi.n	8002ada <Controller_thread+0x12a>
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a28:	f8d8 2000 	ldr.w	r2, [r8]
    //error += speed_output;

    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8002a2c:	edd9 6a01 	vldr	s13, [r9, #4]
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a30:	8893      	ldrh	r3, [r2, #4]
    //error += speed_output;

    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8002a32:	edd6 5a0b 	vldr	s11, [r6, #44]	; 0x2c
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
    //error += speed_output;

    output = controller.Kp_s * error -
 8002a36:	ed99 6a00 	vldr	s12, [r9]
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    //error += speed_output;

    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8002a42:	ee66 6aa5 	vmul.f32	s13, s13, s11
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a46:	ee77 7ae8 	vsub.f32	s15, s15, s17
    //error += speed_output;

    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8002a4a:	eec6 6aa9 	vdiv.f32	s13, s13, s19

    float temp;

    if (motors[0].input > 0.0f)
 8002a4e:	683b      	ldr	r3, [r7, #0]
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a50:	eec7 7a89 	vdiv.f32	s15, s15, s18
    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    float temp;

    if (motors[0].input > 0.0f)
 8002a54:	ed93 7a02 	vldr	s14, [r3, #8]
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
 8002a58:	ee77 7a8a 	vadd.f32	s15, s15, s20
    output = controller.Kp_s * error -
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    float temp;

    if (motors[0].input > 0.0f)
 8002a5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    }

    error += ((float)rc_channel[2] - 1500.0f)/100.0f;
    //error += speed_output;

    output = controller.Kp_s * error -
 8002a60:	eed6 6a27 	vfnms.f32	s13, s12, s15
             controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    float temp;

    if (motors[0].input > 0.0f)
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      temp =  motors[0].input - DEAD_ZONE;
 8002a68:	bfcc      	ite	gt
 8002a6a:	ee37 7a48 	vsubgt.f32	s14, s14, s16
    else
      temp =  motors[0].input + DEAD_ZONE;
 8002a6e:	ee37 7a08 	vaddle.f32	s14, s14, s16

    temp += output;
 8002a72:	ee77 7a26 	vadd.f32	s15, s14, s13

    if(temp > 0.5f)
 8002a76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8002a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	dc59      	bgt.n	8002b38 <Controller_thread+0x188>
      temp = 0.5f;
    else if(temp < -0.5f)
 8002a84:	eebe 7a00 	vmov.f32	s14, #224	; 0xe0
 8002a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	d44f      	bmi.n	8002b32 <Controller_thread+0x182>
      temp = -0.5f;


    if(temp > 0.0f)
 8002a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	bfd4      	ite	le
 8002a9c:	ee77 7ac8 	vsuble.f32	s15, s15, s16
 8002aa0:	ee77 7a88 	vaddgt.f32	s15, s15, s16
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    float diff = (float)(rc_channel[1] - 1500.0f)/15000.0f;
 8002aa4:	8852      	ldrh	r2, [r2, #2]
 8002aa6:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002ba4 <Controller_thread+0x1f4>
      motors[0].input = temp + DEAD_ZONE;
      motors[1].input = temp + DEAD_ZONE;
    }
    else
    {
      motors[0].input = temp - DEAD_ZONE;
 8002aaa:	edc3 7a02 	vstr	s15, [r3, #8]
      motors[1].input = temp - DEAD_ZONE;
    }

    float diff = (float)(rc_channel[1] - 1500.0f)/15000.0f;
 8002aae:	ee07 2a10 	vmov	s14, r2
 8002ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      motors[1].input = temp + DEAD_ZONE;
    }
    else
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
 8002ab6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    }

    float diff = (float)(rc_channel[1] - 1500.0f)/15000.0f;
 8002aba:	ee37 7a68 	vsub.f32	s14, s14, s17
    motors[0].input_diff = motors[0].input + diff;
    motors[1].input_diff = motors[1].input - diff;

    chThdSleepMilliseconds(20);
 8002abe:	20c8      	movs	r0, #200	; 0xc8
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    float diff = (float)(rc_channel[1] - 1500.0f)/15000.0f;
 8002ac0:	ee87 7a26 	vdiv.f32	s14, s14, s13
    motors[0].input_diff = motors[0].input + diff;
 8002ac4:	ee77 6a27 	vadd.f32	s13, s14, s15
    motors[1].input_diff = motors[1].input - diff;
 8002ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    float diff = (float)(rc_channel[1] - 1500.0f)/15000.0f;
    motors[0].input_diff = motors[0].input + diff;
 8002acc:	edc3 6a03 	vstr	s13, [r3, #12]
    motors[1].input_diff = motors[1].input - diff;
 8002ad0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

    chThdSleepMilliseconds(20);
 8002ad4:	f001 fabc 	bl	8004050 <chThdSleep>
 8002ad8:	e796      	b.n	8002a08 <Controller_thread+0x58>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002ada:	2320      	movs	r3, #32
 8002adc:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8002ae0:	f000 ff3e 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002ae4:	f001 f9c4 	bl	8003e70 <_dbg_check_lock>
void pwmStop(PWMDriver *pwmp) {

  osalDbgCheck(pwmp != NULL);

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8002ae8:	782b      	ldrb	r3, [r5, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <Controller_thread+0x1dc>)
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	2901      	cmp	r1, #1
 8002af0:	d903      	bls.n	8002afa <Controller_thread+0x14a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af2:	b672      	cpsid	i
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <Controller_thread+0x1f8>)
 8002af6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002af8:	e7fe      	b.n	8002af8 <Controller_thread+0x148>
 * @notapi
 */
void pwm_lld_stop(PWMDriver *pwmp) {

  /* If in ready state then disables the PWM clock.*/
  if (pwmp->state == PWM_READY) {
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d01f      	beq.n	8002b3e <Controller_thread+0x18e>
                "invalid state");
  pwm_lld_stop(pwmp);
  pwmp->enabled = 0;
 8002afe:	2200      	movs	r2, #0
  pwmp->state   = PWM_STOP;
 8002b00:	2301      	movs	r3, #1

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwm_lld_stop(pwmp);
  pwmp->enabled = 0;
 8002b02:	60ea      	str	r2, [r5, #12]
  pwmp->state   = PWM_STOP;
 8002b04:	702b      	strb	r3, [r5, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002b06:	f001 f9a3 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002b0a:	f000 ff11 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <Controller_thread+0x1c8>)
 8002b12:	42a2      	cmp	r2, r4
 8002b14:	d004      	beq.n	8002b20 <Controller_thread+0x170>
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	6892      	ldr	r2, [r2, #8]
 8002b1a:	6889      	ldr	r1, [r1, #8]
 8002b1c:	4291      	cmp	r1, r2
 8002b1e:	d327      	bcc.n	8002b70 <Controller_thread+0x1c0>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002b20:	2300      	movs	r3, #0
 8002b22:	f383 8811 	msr	BASEPRI, r3
    float error =  g_IMU1.theta - BALANCE_POS, output;

    if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED4);
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <Controller_thread+0x1fc>)
 8002b28:	6953      	ldr	r3, [r2, #20]
 8002b2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b2e:	6153      	str	r3, [r2, #20]
 8002b30:	e77a      	b.n	8002a28 <Controller_thread+0x78>

    temp += output;

    if(temp > 0.5f)
      temp = 0.5f;
    else if(temp < -0.5f)
 8002b32:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002bb0 <Controller_thread+0x200>
 8002b36:	e7b5      	b.n	8002aa4 <Controller_thread+0xf4>
    else
      temp =  motors[0].input + DEAD_ZONE;

    temp += output;

    if(temp > 0.5f)
 8002b38:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002bb4 <Controller_thread+0x204>
 8002b3c:	e7b2      	b.n	8002aa4 <Controller_thread+0xf4>
    pwmp->tim->CR1  = 0;                    /* Timer disabled.              */
 8002b3e:	6991      	ldr	r1, [r2, #24]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <Controller_thread+0x208>)
    if (&PWMD8 == pwmp) {
#if !defined(STM32_TIM8_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM8_UP_NUMBER);
      nvicDisableVector(STM32_TIM8_CC_NUMBER);
#endif
      rccDisableTIM8(FALSE);
 8002b42:	481e      	ldr	r0, [pc, #120]	; (8002bbc <Controller_thread+0x20c>)
 */
void pwm_lld_stop(PWMDriver *pwmp) {

  /* If in ready state then disables the PWM clock.*/
  if (pwmp->state == PWM_READY) {
    pwmp->tim->CR1  = 0;                    /* Timer disabled.              */
 8002b44:	2300      	movs	r3, #0
 8002b46:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8002b4a:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 8002b4e:	600b      	str	r3, [r1, #0]
    pwmp->tim->DIER = 0;                    /* All IRQs disabled.           */
 8002b50:	60cb      	str	r3, [r1, #12]
    pwmp->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 8002b52:	610b      	str	r3, [r1, #16]
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
    pwmp->tim->BDTR  = 0;
 8002b54:	644b      	str	r3, [r1, #68]	; 0x44
 8002b56:	f8c2 c084 	str.w	ip, [r2, #132]	; 0x84
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002b5a:	f882 332c 	strb.w	r3, [r2, #812]	; 0x32c
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002b5e:	f8c2 e084 	str.w	lr, [r2, #132]	; 0x84
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002b62:	f882 332e 	strb.w	r3, [r2, #814]	; 0x32e
    if (&PWMD8 == pwmp) {
#if !defined(STM32_TIM8_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM8_UP_NUMBER);
      nvicDisableVector(STM32_TIM8_CC_NUMBER);
#endif
      rccDisableTIM8(FALSE);
 8002b66:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	6443      	str	r3, [r0, #68]	; 0x44
 8002b6e:	e7c6      	b.n	8002afe <Controller_thread+0x14e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <Controller_thread+0x210>)
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b76:	e7fe      	b.n	8002b76 <Controller_thread+0x1c6>
 8002b78:	2000d228 	.word	0x2000d228
 8002b7c:	08006988 	.word	0x08006988
 8002b80:	08020000 	.word	0x08020000
 8002b84:	461c4000 	.word	0x461c4000
 8002b88:	2000bcc4 	.word	0x2000bcc4
 8002b8c:	2000da1c 	.word	0x2000da1c
 8002b90:	2000af90 	.word	0x2000af90
 8002b94:	43160000 	.word	0x43160000
 8002b98:	44bb8000 	.word	0x44bb8000
 8002b9c:	42c80000 	.word	0x42c80000
 8002ba0:	3de147ae 	.word	0x3de147ae
 8002ba4:	466a6000 	.word	0x466a6000
 8002ba8:	08006930 	.word	0x08006930
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	bf1c28f6 	.word	0xbf1c28f6
 8002bb4:	3f1c28f6 	.word	0x3f1c28f6
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	08006c30 	.word	0x08006c30
 8002bc4:	20000a60 	.word	0x20000a60
 8002bc8:	2000ddbc 	.word	0x2000ddbc
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8002bd0:	4a06      	ldr	r2, [pc, #24]	; (8002bec <SVC_Handler+0x1c>)
 8002bd2:	6853      	ldr	r3, [r2, #4]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002bda:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002bde:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002be0:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002be4:	2300      	movs	r3, #0
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	4770      	bx	lr
 8002bec:	e000ef30 	.word	0xe000ef30

08002bf0 <dmaStreamAllocate>:
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d054      	beq.n	8002c9e <dmaStreamAllocate+0xae>
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002bf8:	4f2b      	ldr	r7, [pc, #172]	; (8002ca8 <dmaStreamAllocate+0xb8>)
 8002bfa:	7a45      	ldrb	r5, [r0, #9]
 8002bfc:	683c      	ldr	r4, [r7, #0]
 8002bfe:	4698      	mov	r8, r3
 8002c00:	2301      	movs	r3, #1
 8002c02:	fa03 fe05 	lsl.w	lr, r3, r5
 8002c06:	ea1e 0f04 	tst.w	lr, r4
 8002c0a:	d13d      	bne.n	8002c88 <dmaStreamAllocate+0x98>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002c0c:	4e27      	ldr	r6, [pc, #156]	; (8002cac <dmaStreamAllocate+0xbc>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002c0e:	ea4e 0404 	orr.w	r4, lr, r4
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002c12:	eb06 0cc5 	add.w	ip, r6, r5, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002c16:	f014 0fff 	tst.w	r4, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002c1a:	603c      	str	r4, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002c1c:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002c20:	f8cc 8004 	str.w	r8, [ip, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8002c24:	d004      	beq.n	8002c30 <dmaStreamAllocate+0x40>
    rccEnableDMA1(false);
 8002c26:	4d22      	ldr	r5, [pc, #136]	; (8002cb0 <dmaStreamAllocate+0xc0>)
 8002c28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c2e:	632b      	str	r3, [r5, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8002c30:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 8002c34:	d12b      	bne.n	8002c8e <dmaStreamAllocate+0x9e>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002c36:	6804      	ldr	r4, [r0, #0]
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	f023 031f 	bic.w	r3, r3, #31
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f013 0301 	ands.w	r3, r3, #1
 8002c46:	d1fb      	bne.n	8002c40 <dmaStreamAllocate+0x50>
 8002c48:	7a07      	ldrb	r7, [r0, #8]
 8002c4a:	6846      	ldr	r6, [r0, #4]
 8002c4c:	253d      	movs	r5, #61	; 0x3d
 8002c4e:	40bd      	lsls	r5, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002c50:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002c52:	6035      	str	r5, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002c54:	6023      	str	r3, [r4, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002c56:	6167      	str	r7, [r4, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8002c58:	b1fa      	cbz	r2, 8002c9a <dmaStreamAllocate+0xaa>
    nvicEnableVector(dmastp->vector, priority);
 8002c5a:	7a80      	ldrb	r0, [r0, #10]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c5c:	0942      	lsrs	r2, r0, #5
 8002c5e:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c60:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 8002c64:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8002c68:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8002c6c:	0109      	lsls	r1, r1, #4
 8002c6e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c72:	f000 001f 	and.w	r0, r0, #31
 8002c76:	2401      	movs	r4, #1
 8002c78:	fa04 f000 	lsl.w	r0, r4, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c7c:	b2c9      	uxtb	r1, r1
 8002c7e:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c82:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c86:	6010      	str	r0, [r2, #0]
  }

  return false;
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 8002c8e:	4c08      	ldr	r4, [pc, #32]	; (8002cb0 <dmaStreamAllocate+0xc0>)
 8002c90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c96:	6323      	str	r3, [r4, #48]	; 0x30
 8002c98:	e7cd      	b.n	8002c36 <dmaStreamAllocate+0x46>
  dmaStreamDisable(dmastp);
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	e7f4      	b.n	8002c88 <dmaStreamAllocate+0x98>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9e:	b672      	cpsid	i
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <dmaStreamAllocate+0xc4>)
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <dmaStreamAllocate+0xc8>)
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca6:	e7fe      	b.n	8002ca6 <dmaStreamAllocate+0xb6>
 8002ca8:	2000ceb8 	.word	0x2000ceb8
 8002cac:	2000bc30 	.word	0x2000bc30
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	2000d228 	.word	0x2000d228
 8002cb8:	08006a20 	.word	0x08006a20
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <stSetAlarm+0x18>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002cc4:	0792      	lsls	r2, r2, #30
 8002cc6:	d501      	bpl.n	8002ccc <stSetAlarm+0xc>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002cc8:	6358      	str	r0, [r3, #52]	; 0x34
 8002cca:	4770      	bx	lr
 8002ccc:	b672      	cpsid	i
 8002cce:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <stSetAlarm+0x1c>)
 8002cd0:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <stSetAlarm+0x20>)
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd4:	e7fe      	b.n	8002cd4 <stSetAlarm+0x14>
 8002cd6:	bf00      	nop
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	2000d228 	.word	0x2000d228
 8002ce0:	080069d0 	.word	0x080069d0
	...

08002cf0 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <_port_irq_epilogue+0x50>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002cfe:	d102      	bne.n	8002d06 <_port_irq_epilogue+0x16>
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8002d06:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002d0a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002d10:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002d1a:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8002d1e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002d22:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <_port_irq_epilogue+0x58>)
 8002d28:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8002d2a:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002d2c:	6889      	ldr	r1, [r1, #8]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002d32:	bf8c      	ite	hi
 8002d34:	4a05      	ldrhi	r2, [pc, #20]	; (8002d4c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002d36:	4a06      	ldrls	r2, [pc, #24]	; (8002d50 <_port_irq_epilogue+0x60>)
 8002d38:	f843 2c50 	str.w	r2, [r3, #-80]
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00
 8002d44:	e000ef30 	.word	0xe000ef30
 8002d48:	2000d228 	.word	0x2000d228
 8002d4c:	08000301 	.word	0x08000301
 8002d50:	08000314 	.word	0x08000314
	...

08002d60 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002d60:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002d62:	f000 fda5 	bl	80038b0 <_stats_increase_irq>
 8002d66:	f000 fff3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002d6c:	4809      	ldr	r0, [pc, #36]	; (8002d94 <Vector158+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d6e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002d70:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d72:	0d89      	lsrs	r1, r1, #22
 8002d74:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002d78:	058c      	lsls	r4, r1, #22
 8002d7a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002d7c:	b10a      	cbz	r2, 8002d82 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002d7e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002d80:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002d82:	f000 ffcd 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d8a:	f7ff bfb1 	b.w	8002cf0 <_port_irq_epilogue>
 8002d8e:	bf00      	nop
 8002d90:	40026400 	.word	0x40026400
 8002d94:	2000bc30 	.word	0x2000bc30
	...

08002da0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002da0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002da2:	f000 fd85 	bl	80038b0 <_stats_increase_irq>
 8002da6:	f000 ffd3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <Vector154+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dae:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002db0:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002db2:	0c09      	lsrs	r1, r1, #16
 8002db4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8002db8:	040c      	lsls	r4, r1, #16
 8002dba:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8002dbc:	b10a      	cbz	r2, 8002dc2 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002dbe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002dc0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002dc2:	f000 ffad 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dca:	f7ff bf91 	b.w	8002cf0 <_port_irq_epilogue>
 8002dce:	bf00      	nop
 8002dd0:	40026400 	.word	0x40026400
 8002dd4:	2000bc30 	.word	0x2000bc30
	...

08002de0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002de0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002de2:	f000 fd65 	bl	80038b0 <_stats_increase_irq>
 8002de6:	f000 ffb3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002dec:	4809      	ldr	r0, [pc, #36]	; (8002e14 <Vector150+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002dee:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002df0:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002df2:	0989      	lsrs	r1, r1, #6
 8002df4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8002df8:	018c      	lsls	r4, r1, #6
 8002dfa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002dfc:	b10a      	cbz	r2, 8002e02 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002dfe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002e00:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002e02:	f000 ff8d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e0a:	f7ff bf71 	b.w	8002cf0 <_port_irq_epilogue>
 8002e0e:	bf00      	nop
 8002e10:	40026400 	.word	0x40026400
 8002e14:	2000bc30 	.word	0x2000bc30
	...

08002e20 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002e20:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002e22:	f000 fd45 	bl	80038b0 <_stats_increase_irq>
 8002e26:	f000 ff93 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002e2c:	4808      	ldr	r0, [pc, #32]	; (8002e50 <Vector130+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e2e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002e30:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e32:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002e36:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002e38:	b10a      	cbz	r2, 8002e3e <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002e3a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002e3c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002e3e:	f000 ff6f 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e46:	f7ff bf53 	b.w	8002cf0 <_port_irq_epilogue>
 8002e4a:	bf00      	nop
 8002e4c:	40026400 	.word	0x40026400
 8002e50:	2000bc30 	.word	0x2000bc30
	...

08002e60 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002e60:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002e62:	f000 fd25 	bl	80038b0 <_stats_increase_irq>
 8002e66:	f000 ff73 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002e6c:	4809      	ldr	r0, [pc, #36]	; (8002e94 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e6e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002e70:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e72:	0d89      	lsrs	r1, r1, #22
 8002e74:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002e78:	058c      	lsls	r4, r1, #22
 8002e7a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002e7c:	b10a      	cbz	r2, 8002e82 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002e7e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002e80:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002e82:	f000 ff4d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e8a:	f7ff bf31 	b.w	8002cf0 <_port_irq_epilogue>
 8002e8e:	bf00      	nop
 8002e90:	40026400 	.word	0x40026400
 8002e94:	2000bc30 	.word	0x2000bc30
	...

08002ea0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002ea0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002ea2:	f000 fd05 	bl	80038b0 <_stats_increase_irq>
 8002ea6:	f000 ff53 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002eac:	4809      	ldr	r0, [pc, #36]	; (8002ed4 <Vector128+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002eae:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002eb0:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002eb2:	0c09      	lsrs	r1, r1, #16
 8002eb4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002eb8:	040c      	lsls	r4, r1, #16
 8002eba:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002ebc:	b10a      	cbz	r2, 8002ec2 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002ebe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002ec0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002ec2:	f000 ff2d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002eca:	f7ff bf11 	b.w	8002cf0 <_port_irq_epilogue>
 8002ece:	bf00      	nop
 8002ed0:	40026400 	.word	0x40026400
 8002ed4:	2000bc30 	.word	0x2000bc30
	...

08002ee0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002ee0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002ee2:	f000 fce5 	bl	80038b0 <_stats_increase_irq>
 8002ee6:	f000 ff33 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <Vector124+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002eee:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002ef0:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ef2:	0989      	lsrs	r1, r1, #6
 8002ef4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8002ef8:	018c      	lsls	r4, r1, #6
 8002efa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002efc:	b10a      	cbz	r2, 8002f02 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002efe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002f00:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002f02:	f000 ff0d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f0a:	f7ff bef1 	b.w	8002cf0 <_port_irq_epilogue>
 8002f0e:	bf00      	nop
 8002f10:	40026400 	.word	0x40026400
 8002f14:	2000bc30 	.word	0x2000bc30
	...

08002f20 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002f20:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002f22:	f000 fcc5 	bl	80038b0 <_stats_increase_irq>
 8002f26:	f000 ff13 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002f2c:	4808      	ldr	r0, [pc, #32]	; (8002f50 <Vector120+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f2e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002f30:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f32:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002f36:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002f38:	b10a      	cbz	r2, 8002f3e <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002f3a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002f3c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002f3e:	f000 feef 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f46:	f7ff bed3 	b.w	8002cf0 <_port_irq_epilogue>
 8002f4a:	bf00      	nop
 8002f4c:	40026400 	.word	0x40026400
 8002f50:	2000bc30 	.word	0x2000bc30
	...

08002f60 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002f60:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002f62:	f000 fca5 	bl	80038b0 <_stats_increase_irq>
 8002f66:	f000 fef3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002f6c:	4809      	ldr	r0, [pc, #36]	; (8002f94 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f6e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002f70:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f72:	0d89      	lsrs	r1, r1, #22
 8002f74:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8002f78:	058c      	lsls	r4, r1, #22
 8002f7a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002f7c:	b10a      	cbz	r2, 8002f82 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002f7e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002f80:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002f82:	f000 fecd 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f8a:	f7ff beb1 	b.w	8002cf0 <_port_irq_epilogue>
 8002f8e:	bf00      	nop
 8002f90:	40026000 	.word	0x40026000
 8002f94:	2000bc30 	.word	0x2000bc30
	...

08002fa0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002fa0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002fa2:	f000 fc85 	bl	80038b0 <_stats_increase_irq>
 8002fa6:	f000 fed3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <Vector84+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002fae:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002fb0:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002fb2:	0c09      	lsrs	r1, r1, #16
 8002fb4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8002fb8:	040c      	lsls	r4, r1, #16
 8002fba:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002fbc:	b10a      	cbz	r2, 8002fc2 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002fbe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002fc0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002fc2:	f000 fead 	bl	8003d20 <_dbg_check_leave_isr>
}
 8002fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002fca:	f7ff be91 	b.w	8002cf0 <_port_irq_epilogue>
 8002fce:	bf00      	nop
 8002fd0:	40026000 	.word	0x40026000
 8002fd4:	2000bc30 	.word	0x2000bc30
	...

08002fe0 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002fe0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002fe2:	f000 fc65 	bl	80038b0 <_stats_increase_irq>
 8002fe6:	f000 feb3 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <Vector80+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002fee:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002ff0:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ff2:	0989      	lsrs	r1, r1, #6
 8002ff4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8002ff8:	018c      	lsls	r4, r1, #6
 8002ffa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002ffc:	b10a      	cbz	r2, 8003002 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002ffe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003000:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003002:	f000 fe8d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8003006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800300a:	f7ff be71 	b.w	8002cf0 <_port_irq_epilogue>
 800300e:	bf00      	nop
 8003010:	40026000 	.word	0x40026000
 8003014:	2000bc30 	.word	0x2000bc30
	...

08003020 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003020:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003022:	f000 fc45 	bl	80038b0 <_stats_increase_irq>
 8003026:	f000 fe93 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800302e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8003030:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003032:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8003036:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8003038:	b10a      	cbz	r2, 800303e <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800303a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800303c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800303e:	f000 fe6f 	bl	8003d20 <_dbg_check_leave_isr>
}
 8003042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8003046:	f7ff be53 	b.w	8002cf0 <_port_irq_epilogue>
 800304a:	bf00      	nop
 800304c:	40026000 	.word	0x40026000
 8003050:	2000bc30 	.word	0x2000bc30
	...

08003060 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003060:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003062:	f000 fc25 	bl	80038b0 <_stats_increase_irq>
 8003066:	f000 fe73 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <Vector78+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800306e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8003070:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003072:	0d89      	lsrs	r1, r1, #22
 8003074:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8003078:	058c      	lsls	r4, r1, #22
 800307a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800307c:	b10a      	cbz	r2, 8003082 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800307e:	69c0      	ldr	r0, [r0, #28]
 8003080:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003082:	f000 fe4d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8003086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800308a:	f7ff be31 	b.w	8002cf0 <_port_irq_epilogue>
 800308e:	bf00      	nop
 8003090:	40026000 	.word	0x40026000
 8003094:	2000bc30 	.word	0x2000bc30
	...

080030a0 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80030a0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80030a2:	f000 fc05 	bl	80038b0 <_stats_increase_irq>
 80030a6:	f000 fe53 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 80030ac:	4809      	ldr	r0, [pc, #36]	; (80030d4 <Vector74+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80030ae:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 80030b0:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80030b2:	0c09      	lsrs	r1, r1, #16
 80030b4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 80030b8:	040c      	lsls	r4, r1, #16
 80030ba:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80030bc:	b10a      	cbz	r2, 80030c2 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80030be:	6940      	ldr	r0, [r0, #20]
 80030c0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80030c2:	f000 fe2d 	bl	8003d20 <_dbg_check_leave_isr>
}
 80030c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80030ca:	f7ff be11 	b.w	8002cf0 <_port_irq_epilogue>
 80030ce:	bf00      	nop
 80030d0:	40026000 	.word	0x40026000
 80030d4:	2000bc30 	.word	0x2000bc30
	...

080030e0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80030e0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80030e2:	f000 fbe5 	bl	80038b0 <_stats_increase_irq>
 80030e6:	f000 fe33 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <Vector70+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80030ee:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 80030f0:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80030f2:	0989      	lsrs	r1, r1, #6
 80030f4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80030f8:	018c      	lsls	r4, r1, #6
 80030fa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80030fc:	b10a      	cbz	r2, 8003102 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80030fe:	68c0      	ldr	r0, [r0, #12]
 8003100:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003102:	f000 fe0d 	bl	8003d20 <_dbg_check_leave_isr>
}
 8003106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800310a:	f7ff bdf1 	b.w	8002cf0 <_port_irq_epilogue>
 800310e:	bf00      	nop
 8003110:	40026000 	.word	0x40026000
 8003114:	2000bc30 	.word	0x2000bc30
	...

08003120 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003120:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003122:	f000 fbc5 	bl	80038b0 <_stats_increase_irq>
 8003126:	f000 fe13 	bl	8003d50 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 800312c:	4a08      	ldr	r2, [pc, #32]	; (8003150 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8003134:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	b10b      	cbz	r3, 800313e <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800313a:	6850      	ldr	r0, [r2, #4]
 800313c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800313e:	f000 fdef 	bl	8003d20 <_dbg_check_leave_isr>
}
 8003142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8003146:	f7ff bdd3 	b.w	8002cf0 <_port_irq_epilogue>
 800314a:	bf00      	nop
 800314c:	40026000 	.word	0x40026000
 8003150:	2000bc30 	.word	0x2000bc30
	...

08003160 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003164:	4680      	mov	r8, r0
 8003166:	460e      	mov	r6, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8003168:	f000 fc92 	bl	8003a90 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800316c:	f1b8 0f00 	cmp.w	r8, #0
 8003170:	d039      	beq.n	80031e6 <chEvtBroadcastFlagsI+0x86>

  elp = esp->es_next;
 8003172:	f8d8 4000 	ldr.w	r4, [r8]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003176:	45a0      	cmp	r8, r4
 8003178:	d026      	beq.n	80031c8 <chEvtBroadcastFlagsI+0x68>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800317a:	2700      	movs	r7, #0
 800317c:	e002      	b.n	8003184 <chEvtBroadcastFlagsI+0x24>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 800317e:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003180:	45a0      	cmp	r8, r4
 8003182:	d021      	beq.n	80031c8 <chEvtBroadcastFlagsI+0x68>
  /*lint -restore*/
    elp->el_flags |= flags;
 8003184:	68e3      	ldr	r3, [r4, #12]
 8003186:	4333      	orrs	r3, r6
 8003188:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800318a:	b116      	cbz	r6, 8003192 <chEvtBroadcastFlagsI+0x32>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800318c:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800318e:	4213      	tst	r3, r2
 8003190:	d0f5      	beq.n	800317e <chEvtBroadcastFlagsI+0x1e>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8003192:	6865      	ldr	r5, [r4, #4]
 8003194:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 8003198:	f000 fc7a 	bl	8003a90 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800319c:	b1f5      	cbz	r5, 80031dc <chEvtBroadcastFlagsI+0x7c>

  tp->p_epending |= events;
 800319e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80031a0:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80031a4:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80031a8:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80031aa:	63ab      	str	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80031ac:	d00e      	beq.n	80031cc <chEvtBroadcastFlagsI+0x6c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80031ae:	2a0b      	cmp	r2, #11
 80031b0:	d1e5      	bne.n	800317e <chEvtBroadcastFlagsI+0x1e>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80031b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80031b4:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d1e1      	bne.n	800317e <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80031ba:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 fd47 	bl	8003c50 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 80031c2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80031c4:	45a0      	cmp	r8, r4
 80031c6:	d1dd      	bne.n	8003184 <chEvtBroadcastFlagsI+0x24>
 80031c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80031cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80031ce:	4213      	tst	r3, r2
 80031d0:	d0d5      	beq.n	800317e <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80031d2:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 fd3b 	bl	8003c50 <chSchReadyI>
 80031da:	e7f2      	b.n	80031c2 <chEvtBroadcastFlagsI+0x62>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <chEvtBroadcastFlagsI+0x90>)
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <chEvtBroadcastFlagsI+0x94>)
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031e4:	e7fe      	b.n	80031e4 <chEvtBroadcastFlagsI+0x84>
 80031e6:	b672      	cpsid	i
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <chEvtBroadcastFlagsI+0x90>)
 80031ea:	4a03      	ldr	r2, [pc, #12]	; (80031f8 <chEvtBroadcastFlagsI+0x98>)
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ee:	e7fe      	b.n	80031ee <chEvtBroadcastFlagsI+0x8e>
 80031f0:	2000d228 	.word	0x2000d228
 80031f4:	080069e0 	.word	0x080069e0
 80031f8:	08006a40 	.word	0x08006a40
 80031fc:	00000000 	.word	0x00000000

08003200 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((gptp != NULL) && (config != NULL));
 8003202:	b328      	cbz	r0, 8003250 <gptStart+0x50>
 8003204:	b321      	cbz	r1, 8003250 <gptStart+0x50>
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800320a:	2320      	movs	r3, #32
 800320c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003210:	f000 fba6 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003214:	f000 fe2c 	bl	8003e70 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 8003218:	7823      	ldrb	r3, [r4, #0]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	2a01      	cmp	r2, #1
 800321e:	d904      	bls.n	800322a <gptStart+0x2a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
 8003222:	4b55      	ldr	r3, [pc, #340]	; (8003378 <gptStart+0x178>)
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <gptStart+0x17c>)
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
 8003228:	e7fe      	b.n	8003228 <gptStart+0x28>
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 800322a:	2b01      	cmp	r3, #1
              "invalid state");
  gptp->config = config;
 800322c:	6065      	str	r5, [r4, #4]
 800322e:	d032      	beq.n	8003296 <gptStart+0x96>
 8003230:	462b      	mov	r3, r5
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8003232:	68a0      	ldr	r0, [r4, #8]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	fbb0 f2f1 	udiv	r2, r0, r1
 800323a:	3a01      	subs	r2, #1
 800323c:	b292      	uxth	r2, r2
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
 800323e:	fb02 1101 	mla	r1, r2, r1, r1
 8003242:	4288      	cmp	r0, r1
 8003244:	d009      	beq.n	800325a <gptStart+0x5a>
 8003246:	b672      	cpsid	i
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <gptStart+0x178>)
 800324a:	4a4d      	ldr	r2, [pc, #308]	; (8003380 <gptStart+0x180>)
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
 800324e:	e7fe      	b.n	800324e <gptStart+0x4e>
 8003250:	b672      	cpsid	i
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <gptStart+0x178>)
 8003254:	4a49      	ldr	r2, [pc, #292]	; (800337c <gptStart+0x17c>)
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
 8003258:	e7fe      	b.n	8003258 <gptStart+0x58>
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 800325a:	68d8      	ldr	r0, [r3, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 800325c:	68e1      	ldr	r1, [r4, #12]
  gptp->tim->CR2  = gptp->config->cr2;
 800325e:	689e      	ldr	r6, [r3, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8003260:	2500      	movs	r5, #0
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8003262:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 8003266:	2002      	movs	r0, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8003268:	600d      	str	r5, [r1, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 800326a:	604e      	str	r6, [r1, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 800326c:	628a      	str	r2, [r1, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 800326e:	610d      	str	r5, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8003270:	60cb      	str	r3, [r1, #12]
 8003272:	7020      	strb	r0, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003274:	f000 fdec 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003278:	f000 fb5a 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800327c:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <gptStart+0x178>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d004      	beq.n	800328e <gptStart+0x8e>
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	6892      	ldr	r2, [r2, #8]
 8003288:	6889      	ldr	r1, [r1, #8]
 800328a:	4291      	cmp	r1, r2
 800328c:	d311      	bcc.n	80032b2 <gptStart+0xb2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800328e:	2300      	movs	r3, #0
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <gptStart+0x184>)
 8003298:	429c      	cmp	r4, r3
 800329a:	d056      	beq.n	800334a <gptStart+0x14a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
 800329c:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <gptStart+0x188>)
 800329e:	429c      	cmp	r4, r3
 80032a0:	d03b      	beq.n	800331a <gptStart+0x11a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <gptStart+0x18c>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d020      	beq.n	80032ea <gptStart+0xea>
#endif
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 80032a8:	4b39      	ldr	r3, [pc, #228]	; (8003390 <gptStart+0x190>)
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d005      	beq.n	80032ba <gptStart+0xba>
 80032ae:	6863      	ldr	r3, [r4, #4]
 80032b0:	e7bf      	b.n	8003232 <gptStart+0x32>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b2:	b672      	cpsid	i
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <gptStart+0x194>)
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b8:	e7fe      	b.n	80032b8 <gptStart+0xb8>
      rccEnableTIM4(FALSE);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032bc:	4a37      	ldr	r2, [pc, #220]	; (800339c <gptStart+0x19c>)
 80032be:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80032c0:	4837      	ldr	r0, [pc, #220]	; (80033a0 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 80032c2:	f041 0104 	orr.w	r1, r1, #4
 80032c6:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM4();
 80032c8:	6a19      	ldr	r1, [r3, #32]
 80032ca:	2600      	movs	r6, #0
 80032cc:	f041 0104 	orr.w	r1, r1, #4
 80032d0:	2570      	movs	r5, #112	; 0x70
 80032d2:	6219      	str	r1, [r3, #32]
 80032d4:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032da:	f882 531e 	strb.w	r5, [r2, #798]	; 0x31e
 80032de:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032e0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032e4:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80032e6:	60a0      	str	r0, [r4, #8]
 80032e8:	e7a3      	b.n	8003232 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032ec:	4a2b      	ldr	r2, [pc, #172]	; (800339c <gptStart+0x19c>)
 80032ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80032f0:	482b      	ldr	r0, [pc, #172]	; (80033a0 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 80032f2:	f041 0102 	orr.w	r1, r1, #2
 80032f6:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 80032f8:	6a19      	ldr	r1, [r3, #32]
 80032fa:	2600      	movs	r6, #0
 80032fc:	f041 0102 	orr.w	r1, r1, #2
 8003300:	2570      	movs	r5, #112	; 0x70
 8003302:	6219      	str	r1, [r3, #32]
 8003304:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003306:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800330a:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 800330e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003310:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003314:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8003316:	60a0      	str	r0, [r4, #8]
 8003318:	e78b      	b.n	8003232 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <gptStart+0x19c>)
 800331e:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8003320:	481f      	ldr	r0, [pc, #124]	; (80033a0 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 8003322:	f041 0101 	orr.w	r1, r1, #1
 8003326:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 8003328:	6a19      	ldr	r1, [r3, #32]
 800332a:	2600      	movs	r6, #0
 800332c:	f041 0101 	orr.w	r1, r1, #1
 8003330:	2570      	movs	r5, #112	; 0x70
 8003332:	6219      	str	r1, [r3, #32]
 8003334:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003336:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800333a:	f882 531c 	strb.w	r5, [r2, #796]	; 0x31c
 800333e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003340:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003344:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8003346:	60a0      	str	r0, [r4, #8]
 8003348:	e773      	b.n	8003232 <gptStart+0x32>

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <gptStart+0x19c>)
 800334e:	6c59      	ldr	r1, [r3, #68]	; 0x44
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8003350:	4d14      	ldr	r5, [pc, #80]	; (80033a4 <gptStart+0x1a4>)

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 8003352:	f041 0101 	orr.w	r1, r1, #1
 8003356:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM1();
 8003358:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800335a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800335e:	2700      	movs	r7, #0
 8003360:	f041 0101 	orr.w	r1, r1, #1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003364:	2670      	movs	r6, #112	; 0x70
 8003366:	6259      	str	r1, [r3, #36]	; 0x24
 8003368:	625f      	str	r7, [r3, #36]	; 0x24
 800336a:	f882 6319 	strb.w	r6, [r2, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800336e:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003372:	6010      	str	r0, [r2, #0]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8003374:	60a5      	str	r5, [r4, #8]
 8003376:	e79a      	b.n	80032ae <gptStart+0xae>
 8003378:	2000d228 	.word	0x2000d228
 800337c:	08006aa0 	.word	0x08006aa0
 8003380:	080069f0 	.word	0x080069f0
 8003384:	2000bcb0 	.word	0x2000bcb0
 8003388:	2000da38 	.word	0x2000da38
 800338c:	2000d14c 	.word	0x2000d14c
 8003390:	2000dbd8 	.word	0x2000dbd8
 8003394:	08006a70 	.word	0x08006a70
 8003398:	40023800 	.word	0x40023800
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	0501bd00 	.word	0x0501bd00
 80033a4:	0a037a00 	.word	0x0a037a00
	...

080033b0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80033b0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80033b2:	2320      	movs	r3, #32
 80033b4:	4604      	mov	r4, r0
 80033b6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80033ba:	f000 fad1 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80033be:	f000 fd57 	bl	8003e70 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 80033c2:	f000 fb65 	bl	8003a90 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80033c6:	4812      	ldr	r0, [pc, #72]	; (8003410 <chCoreAlloc+0x60>)
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <chCoreAlloc+0x64>)
 80033ca:	6802      	ldr	r2, [r0, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80033ce:	1de3      	adds	r3, r4, #7
 80033d0:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80033d8:	bf9d      	ittte	ls
 80033da:	189b      	addls	r3, r3, r2
 80033dc:	6003      	strls	r3, [r0, #0]

  return p;
 80033de:	4614      	movls	r4, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80033e0:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80033e2:	f000 fd35 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80033e6:	f000 faa3 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <chCoreAlloc+0x68>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d004      	beq.n	80033fc <chCoreAlloc+0x4c>
 80033f2:	6999      	ldr	r1, [r3, #24]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	6889      	ldr	r1, [r1, #8]
 80033f8:	4291      	cmp	r1, r2
 80033fa:	d304      	bcc.n	8003406 <chCoreAlloc+0x56>
 80033fc:	2300      	movs	r3, #0
 80033fe:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8003402:	4620      	mov	r0, r4
 8003404:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003406:	b672      	cpsid	i
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <chCoreAlloc+0x6c>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
 800340c:	e7fe      	b.n	800340c <chCoreAlloc+0x5c>
 800340e:	bf00      	nop
 8003410:	20002d7c 	.word	0x20002d7c
 8003414:	20002da0 	.word	0x20002da0
 8003418:	2000d228 	.word	0x2000d228
 800341c:	08006a60 	.word	0x08006a60

08003420 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	b083      	sub	sp, #12
 8003426:	4683      	mov	fp, r0
 8003428:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800342a:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t w = 0;

  chDbgCheck(n > 0U);
 800342e:	4617      	mov	r7, r2
 8003430:	2a00      	cmp	r2, #0
 8003432:	d06e      	beq.n	8003512 <chOQWriteTimeout+0xf2>
 8003434:	4688      	mov	r8, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003436:	2620      	movs	r6, #32
 8003438:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800343c:	f000 fa90 	bl	8003960 <_stats_start_measure_crit_thd>
 8003440:	4c38      	ldr	r4, [pc, #224]	; (8003524 <chOQWriteTimeout+0x104>)
  _dbg_check_lock();
 8003442:	f000 fd15 	bl	8003e70 <_dbg_check_lock>
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 8003446:	2500      	movs	r5, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003448:	46a2      	mov	sl, r4
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 800344a:	f000 fb21 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 800344e:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8003452:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003454:	2b00      	cmp	r3, #0
 8003456:	d03e      	beq.n	80034d6 <chOQWriteTimeout+0xb6>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003458:	f8db 2014 	ldr.w	r2, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800345c:	f8db 3008 	ldr.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 8003460:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003462:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8003464:	f8cb 1014 	str.w	r1, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003468:	f8cb 3008 	str.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 800346c:	f898 3000 	ldrb.w	r3, [r8]
 8003470:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003472:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003476:	f8db 2014 	ldr.w	r2, [fp, #20]
 800347a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800347c:	bf24      	itt	cs
 800347e:	f8db 300c 	ldrcs.w	r3, [fp, #12]
 8003482:	f8cb 3014 	strcs.w	r3, [fp, #20]
    }

    if (nfy != NULL) {
 8003486:	f1b9 0f00 	cmp.w	r9, #0
 800348a:	d000      	beq.n	800348e <chOQWriteTimeout+0x6e>
      nfy(oqp);
 800348c:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800348e:	f000 fcdf 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003492:	f000 fa4d 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	4a22      	ldr	r2, [pc, #136]	; (8003524 <chOQWriteTimeout+0x104>)
 800349a:	42a3      	cmp	r3, r4
 800349c:	d005      	beq.n	80034aa <chOQWriteTimeout+0x8a>
 800349e:	f8da 1018 	ldr.w	r1, [sl, #24]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	6889      	ldr	r1, [r1, #8]
 80034a6:	4299      	cmp	r1, r3
 80034a8:	d32f      	bcc.n	800350a <chOQWriteTimeout+0xea>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80034b0:	3f01      	subs	r7, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80034b2:	f105 0501 	add.w	r5, r5, #1
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80034b6:	f108 0801 	add.w	r8, r8, #1
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80034ba:	d022      	beq.n	8003502 <chOQWriteTimeout+0xe2>
 80034bc:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80034c0:	f000 fa4e 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80034c4:	f000 fcd4 	bl	8003e70 <_dbg_check_lock>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80034c8:	f000 fae2 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 80034cc:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80034d0:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1c0      	bne.n	8003458 <chOQWriteTimeout+0x38>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80034d6:	4658      	mov	r0, fp
 80034d8:	9901      	ldr	r1, [sp, #4]
 80034da:	f000 fba1 	bl	8003c20 <chThdEnqueueTimeoutS>
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0b3      	beq.n	800344a <chOQWriteTimeout+0x2a>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80034e2:	f000 fcb5 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80034e6:	f000 fa23 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <chOQWriteTimeout+0x104>)
 80034ee:	42a2      	cmp	r2, r4
 80034f0:	d004      	beq.n	80034fc <chOQWriteTimeout+0xdc>
 80034f2:	6999      	ldr	r1, [r3, #24]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	6889      	ldr	r1, [r1, #8]
 80034f8:	4291      	cmp	r1, r2
 80034fa:	d30f      	bcc.n	800351c <chOQWriteTimeout+0xfc>
 80034fc:	2300      	movs	r3, #0
 80034fe:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8003502:	4628      	mov	r0, r5
 8003504:	b003      	add	sp, #12
 8003506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800350a:	b672      	cpsid	i
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <chOQWriteTimeout+0x108>)
 800350e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003510:	e7fe      	b.n	8003510 <chOQWriteTimeout+0xf0>
 8003512:	b672      	cpsid	i
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <chOQWriteTimeout+0x104>)
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <chOQWriteTimeout+0x10c>)
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
 800351a:	e7fe      	b.n	800351a <chOQWriteTimeout+0xfa>
 800351c:	b672      	cpsid	i
 800351e:	4a02      	ldr	r2, [pc, #8]	; (8003528 <chOQWriteTimeout+0x108>)
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
 8003522:	e7fe      	b.n	8003522 <chOQWriteTimeout+0x102>
 8003524:	2000d228 	.word	0x2000d228
 8003528:	08006a90 	.word	0x08006a90
 800352c:	08006a00 	.word	0x08006a00

08003530 <writet.lto_priv.91>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003530:	3030      	adds	r0, #48	; 0x30
 8003532:	f7ff bf75 	b.w	8003420 <chOQWriteTimeout>
 8003536:	bf00      	nop
	...

08003540 <write.lto_priv.85>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003540:	3030      	adds	r0, #48	; 0x30
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	f7ff bf6b 	b.w	8003420 <chOQWriteTimeout>
 800354a:	bf00      	nop
 800354c:	0000      	movs	r0, r0
	...

08003550 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4604      	mov	r4, r0
 8003554:	460f      	mov	r7, r1
 8003556:	4616      	mov	r6, r2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003558:	2320      	movs	r3, #32
 800355a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800355e:	f000 f9ff 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003562:	f000 fc85 	bl	8003e70 <_dbg_check_lock>
 8003566:	e003      	b.n	8003570 <chOQPutTimeout+0x20>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003568:	f000 fb5a 	bl	8003c20 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800356c:	1e05      	subs	r5, r0, #0
 800356e:	db28      	blt.n	80035c2 <chOQPutTimeout+0x72>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8003570:	f000 fa8e 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 8003574:	68a3      	ldr	r3, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003576:	4620      	mov	r0, r4
 8003578:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f4      	beq.n	8003568 <chOQPutTimeout+0x18>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800357e:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003580:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003582:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003584:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8003586:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003588:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800358a:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800358c:	6923      	ldr	r3, [r4, #16]
 800358e:	6962      	ldr	r2, [r4, #20]
 8003590:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003592:	bf24      	itt	cs
 8003594:	68e3      	ldrcs	r3, [r4, #12]
 8003596:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8003598:	69e3      	ldr	r3, [r4, #28]
 800359a:	b10b      	cbz	r3, 80035a0 <chOQPutTimeout+0x50>
    oqp->q_notify(oqp);
 800359c:	4620      	mov	r0, r4
 800359e:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80035a0:	f000 fc56 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80035a4:	f000 f9c4 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <chOQPutTimeout+0xa8>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d004      	beq.n	80035ba <chOQPutTimeout+0x6a>
 80035b0:	6999      	ldr	r1, [r3, #24]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	6889      	ldr	r1, [r1, #8]
 80035b6:	4291      	cmp	r1, r2
 80035b8:	d319      	bcc.n	80035ee <chOQPutTimeout+0x9e>
 80035ba:	2000      	movs	r0, #0
 80035bc:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80035c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80035c2:	f000 fc45 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80035c6:	f000 f9b3 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <chOQPutTimeout+0xa8>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d004      	beq.n	80035dc <chOQPutTimeout+0x8c>
 80035d2:	6999      	ldr	r1, [r3, #24]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	6889      	ldr	r1, [r1, #8]
 80035d8:	4291      	cmp	r1, r2
 80035da:	d304      	bcc.n	80035e6 <chOQPutTimeout+0x96>
 80035dc:	2300      	movs	r3, #0
 80035de:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80035e2:	4628      	mov	r0, r5
 80035e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e6:	b672      	cpsid	i
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <chOQPutTimeout+0xac>)
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ec:	e7fe      	b.n	80035ec <chOQPutTimeout+0x9c>
 80035ee:	b672      	cpsid	i
 80035f0:	4a02      	ldr	r2, [pc, #8]	; (80035fc <chOQPutTimeout+0xac>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f4:	e7fe      	b.n	80035f4 <chOQPutTimeout+0xa4>
 80035f6:	bf00      	nop
 80035f8:	2000d228 	.word	0x2000d228
 80035fc:	08006a90 	.word	0x08006a90

08003600 <putt.lto_priv.89>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003600:	3030      	adds	r0, #48	; 0x30
 8003602:	f7ff bfa5 	b.w	8003550 <chOQPutTimeout>
 8003606:	bf00      	nop
	...

08003610 <put.lto_priv.87>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003610:	3030      	adds	r0, #48	; 0x30
 8003612:	f04f 32ff 	mov.w	r2, #4294967295
 8003616:	f7ff bf9b 	b.w	8003550 <chOQPutTimeout>
 800361a:	bf00      	nop
 800361c:	0000      	movs	r0, r0
	...

08003620 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	b083      	sub	sp, #12
 8003626:	4699      	mov	r9, r3
  qnotify_t nfy = iqp->q_notify;
 8003628:	69c3      	ldr	r3, [r0, #28]
 800362a:	9301      	str	r3, [sp, #4]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800362c:	4682      	mov	sl, r0
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;

  chDbgCheck(n > 0U);
 800362e:	4614      	mov	r4, r2
 8003630:	2a00      	cmp	r2, #0
 8003632:	d065      	beq.n	8003700 <chIQReadTimeout+0xe0>
 8003634:	460e      	mov	r6, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003636:	f04f 0820 	mov.w	r8, #32
 800363a:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800363e:	f000 f98f 	bl	8003960 <_stats_start_measure_crit_thd>
 8003642:	4d36      	ldr	r5, [pc, #216]	; (800371c <chIQReadTimeout+0xfc>)
  _dbg_check_lock();
 8003644:	f000 fc14 	bl	8003e70 <_dbg_check_lock>
 8003648:	3c01      	subs	r4, #1
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 800364a:	2700      	movs	r7, #0
 800364c:	4434      	add	r4, r6

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800364e:	46ab      	mov	fp, r5

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	b133      	cbz	r3, 8003662 <chIQReadTimeout+0x42>
      nfy(iqp);
 8003654:	4650      	mov	r0, sl
 8003656:	4798      	blx	r3
 8003658:	e003      	b.n	8003662 <chIQReadTimeout+0x42>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800365a:	f000 fae1 	bl	8003c20 <chThdEnqueueTimeoutS>
 800365e:	2800      	cmp	r0, #0
 8003660:	d13a      	bne.n	80036d8 <chIQReadTimeout+0xb8>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 8003662:	f000 fa15 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 8003666:	f8da 3008 	ldr.w	r3, [sl, #8]
 800366a:	4650      	mov	r0, sl
 800366c:	4649      	mov	r1, r9
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f3      	beq.n	800365a <chIQReadTimeout+0x3a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8003672:	f8da 2018 	ldr.w	r2, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8003676:	f8da 3008 	ldr.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 800367a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800367c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800367e:	f8ca 1018 	str.w	r1, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8003682:	f8ca 3008 	str.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 8003686:	7813      	ldrb	r3, [r2, #0]
 8003688:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 800368a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800368e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003692:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8003694:	bf24      	itt	cs
 8003696:	f8da 300c 	ldrcs.w	r3, [sl, #12]
 800369a:	f8ca 3018 	strcs.w	r3, [sl, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800369e:	f000 fbd7 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80036a2:	f000 f945 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <chIQReadTimeout+0xfc>)
 80036aa:	42ab      	cmp	r3, r5
 80036ac:	d005      	beq.n	80036ba <chIQReadTimeout+0x9a>
 80036ae:	f8db 1018 	ldr.w	r1, [fp, #24]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	6889      	ldr	r1, [r1, #8]
 80036b6:	4299      	cmp	r1, r3
 80036b8:	d327      	bcc.n	800370a <chIQReadTimeout+0xea>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
    if (--n == 0U) {
 80036c0:	42a6      	cmp	r6, r4
    if (iqp->q_rdptr >= iqp->q_top) {
      iqp->q_rdptr = iqp->q_buffer;
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 80036c2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80036c6:	d017      	beq.n	80036f8 <chIQReadTimeout+0xd8>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80036c8:	3601      	adds	r6, #1
 80036ca:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80036ce:	f000 f947 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80036d2:	f000 fbcd 	bl	8003e70 <_dbg_check_lock>
 80036d6:	e7bb      	b.n	8003650 <chIQReadTimeout+0x30>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80036d8:	f000 fbba 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80036dc:	f000 f928 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80036e0:	682a      	ldr	r2, [r5, #0]
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <chIQReadTimeout+0xfc>)
 80036e4:	42aa      	cmp	r2, r5
 80036e6:	d004      	beq.n	80036f2 <chIQReadTimeout+0xd2>
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	6889      	ldr	r1, [r1, #8]
 80036ee:	4291      	cmp	r1, r2
 80036f0:	d30f      	bcc.n	8003712 <chIQReadTimeout+0xf2>
 80036f2:	2300      	movs	r3, #0
 80036f4:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    chSysLock();
  }
}
 80036f8:	4638      	mov	r0, r7
 80036fa:	b003      	add	sp, #12
 80036fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003700:	b672      	cpsid	i
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <chIQReadTimeout+0xfc>)
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <chIQReadTimeout+0x100>)
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
 8003708:	e7fe      	b.n	8003708 <chIQReadTimeout+0xe8>
 800370a:	b672      	cpsid	i
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <chIQReadTimeout+0x104>)
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003710:	e7fe      	b.n	8003710 <chIQReadTimeout+0xf0>
 8003712:	b672      	cpsid	i
 8003714:	4a03      	ldr	r2, [pc, #12]	; (8003724 <chIQReadTimeout+0x104>)
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
 8003718:	e7fe      	b.n	8003718 <chIQReadTimeout+0xf8>
 800371a:	bf00      	nop
 800371c:	2000d228 	.word	0x2000d228
 8003720:	08006a80 	.word	0x08006a80
 8003724:	08006a90 	.word	0x08006a90
	...

08003730 <readt.lto_priv.92>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003730:	300c      	adds	r0, #12
 8003732:	f7ff bf75 	b.w	8003620 <chIQReadTimeout>
 8003736:	bf00      	nop
	...

08003740 <read.lto_priv.86>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003740:	300c      	adds	r0, #12
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	f7ff bf6b 	b.w	8003620 <chIQReadTimeout>
 800374a:	bf00      	nop
 800374c:	0000      	movs	r0, r0
	...

08003750 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8003750:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003752:	2320      	movs	r3, #32
 8003754:	4604      	mov	r4, r0
 8003756:	460e      	mov	r6, r1
 8003758:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800375c:	f000 f900 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003760:	f000 fb86 	bl	8003e70 <_dbg_check_lock>
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8003764:	69e3      	ldr	r3, [r4, #28]
 8003766:	b133      	cbz	r3, 8003776 <chIQGetTimeout+0x26>
    iqp->q_notify(iqp);
 8003768:	4620      	mov	r0, r4
 800376a:	4798      	blx	r3
 800376c:	e003      	b.n	8003776 <chIQGetTimeout+0x26>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800376e:	f000 fa57 	bl	8003c20 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8003772:	1e05      	subs	r5, r0, #0
 8003774:	db25      	blt.n	80037c2 <chIQGetTimeout+0x72>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 8003776:	f000 f98b 	bl	8003a90 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 800377a:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800377c:	4620      	mov	r0, r4
 800377e:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f4      	beq.n	800376e <chIQGetTimeout+0x1e>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003784:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003786:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8003788:	6920      	ldr	r0, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800378a:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800378c:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800378e:	4282      	cmp	r2, r0
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003790:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003792:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8003794:	bf28      	it	cs
 8003796:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003798:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800379a:	bf28      	it	cs
 800379c:	61a3      	strcs	r3, [r4, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800379e:	f000 fb57 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80037a2:	f000 f8c5 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <chIQGetTimeout+0x9c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d004      	beq.n	80037b8 <chIQGetTimeout+0x68>
 80037ae:	6999      	ldr	r1, [r3, #24]
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	6889      	ldr	r1, [r1, #8]
 80037b4:	4291      	cmp	r1, r2
 80037b6:	d315      	bcc.n	80037e4 <chIQGetTimeout+0x94>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
 80037be:	4628      	mov	r0, r5
}
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80037c2:	f000 fb45 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80037c6:	f000 f8b3 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <chIQGetTimeout+0x9c>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d0f2      	beq.n	80037b8 <chIQGetTimeout+0x68>
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	6889      	ldr	r1, [r1, #8]
 80037d8:	4291      	cmp	r1, r2
 80037da:	d2ed      	bcs.n	80037b8 <chIQGetTimeout+0x68>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037dc:	b672      	cpsid	i
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <chIQGetTimeout+0xa0>)
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80037e2:	e7fe      	b.n	80037e2 <chIQGetTimeout+0x92>
 80037e4:	b672      	cpsid	i
 80037e6:	4a02      	ldr	r2, [pc, #8]	; (80037f0 <chIQGetTimeout+0xa0>)
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ea:	e7fe      	b.n	80037ea <chIQGetTimeout+0x9a>
 80037ec:	2000d228 	.word	0x2000d228
 80037f0:	08006a90 	.word	0x08006a90
	...

08003800 <gett.lto_priv.90>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003800:	300c      	adds	r0, #12
 8003802:	f7ff bfa5 	b.w	8003750 <chIQGetTimeout>
 8003806:	bf00      	nop
	...

08003810 <get.lto_priv.88>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003810:	300c      	adds	r0, #12
 8003812:	f04f 31ff 	mov.w	r1, #4294967295
 8003816:	f7ff bf9b 	b.w	8003750 <chIQGetTimeout>
 800381a:	bf00      	nop
 800381c:	0000      	movs	r0, r0
	...

08003820 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8003822:	6842      	ldr	r2, [r0, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8003826:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8003828:	608b      	str	r3, [r1, #8]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800382a:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800382c:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800382e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003832:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8003834:	18e4      	adds	r4, r4, r3
 8003836:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800383a:	4293      	cmp	r3, r2
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800383c:	6802      	ldr	r2, [r0, #0]

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800383e:	bf88      	it	hi
 8003840:	6043      	strhi	r3, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003842:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8003844:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003846:	e9c0 4504 	strd	r4, r5, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800384a:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800384c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 800384e:	bf38      	it	cc
 8003850:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8003852:	bc70      	pop	{r4, r5, r6}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e0001000 	.word	0xe0001000
 800385c:	00000000 	.word	0x00000000

08003860 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <_dbg_trace+0x30>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003862:	490c      	ldr	r1, [pc, #48]	; (8003894 <_dbg_trace+0x34>)
 8003864:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8003866:	b410      	push	{r4}
 8003868:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800386a:	6991      	ldr	r1, [r2, #24]
 800386c:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 800386e:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8003870:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003872:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8003874:	f890 1020 	ldrb.w	r1, [r0, #32]
 8003878:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800387a:	3310      	adds	r3, #16
 800387c:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 8003880:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8003882:	bf28      	it	cs
 8003884:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 8003888:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800388a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	2000d228 	.word	0x2000d228
 8003894:	40000c00 	.word	0x40000c00
	...

080038a0 <_idle_thread.lto_priv.82>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80038a0:	e7fe      	b.n	80038a0 <_idle_thread.lto_priv.82>
 80038a2:	bf00      	nop
	...

080038b0 <_stats_increase_irq>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80038b0:	2320      	movs	r3, #32
 80038b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <_stats_increase_irq+0x1c>)
 80038b8:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 80038bc:	3301      	adds	r3, #1
 80038be:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 80038c2:	2300      	movs	r3, #0
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	2000d228 	.word	0x2000d228

080038d0 <chTMStopMeasurementX>:
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80038d2:	4910      	ldr	r1, [pc, #64]	; (8003914 <chTMStopMeasurementX+0x44>)
 80038d4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80038d6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80038d8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80038da:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80038de:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80038e0:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80038e2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80038ea:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80038ec:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80038ee:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80038f0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80038f4:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80038f6:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80038fa:	bf88      	it	hi
 80038fc:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80038fe:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003900:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003902:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8003906:	bf38      	it	cc
 8003908:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800390a:	bcf0      	pop	{r4, r5, r6, r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e0001000 	.word	0xe0001000
 8003914:	2000d228 	.word	0x2000d228
	...

08003920 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <_stats_stop_measure_crit_isr+0x8>)
 8003922:	f7ff bfd5 	b.w	80038d0 <chTMStopMeasurementX>
 8003926:	bf00      	nop
 8003928:	2000d6f0 	.word	0x2000d6f0
 800392c:	00000000 	.word	0x00000000

08003930 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8003930:	4801      	ldr	r0, [pc, #4]	; (8003938 <_stats_stop_measure_crit_thd+0x8>)
 8003932:	f7ff bfcd 	b.w	80038d0 <chTMStopMeasurementX>
 8003936:	bf00      	nop
 8003938:	2000d6d8 	.word	0x2000d6d8
 800393c:	00000000 	.word	0x00000000

08003940 <chTMStartMeasurementX>:
 8003940:	4b01      	ldr	r3, [pc, #4]	; (8003948 <chTMStartMeasurementX+0x8>)
 8003942:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003944:	6083      	str	r3, [r0, #8]
 8003946:	4770      	bx	lr
 8003948:	e0001000 	.word	0xe0001000
 800394c:	00000000 	.word	0x00000000

08003950 <_stats_start_measure_crit_isr>:
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <_stats_start_measure_crit_isr+0x8>)
 8003952:	f7ff bff5 	b.w	8003940 <chTMStartMeasurementX>
 8003956:	bf00      	nop
 8003958:	2000d6f0 	.word	0x2000d6f0
 800395c:	00000000 	.word	0x00000000

08003960 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <_stats_start_measure_crit_thd+0x8>)
 8003962:	f7ff bfed 	b.w	8003940 <chTMStartMeasurementX>
 8003966:	bf00      	nop
 8003968:	2000d6d8 	.word	0x2000d6d8
 800396c:	00000000 	.word	0x00000000

08003970 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8003970:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp, *cp;

  otp = currp;
 8003972:	4d1b      	ldr	r5, [pc, #108]	; (80039e0 <chSchDoRescheduleAhead+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003974:	682a      	ldr	r2, [r5, #0]
 8003976:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 8003978:	6813      	ldr	r3, [r2, #0]
 800397a:	68a1      	ldr	r1, [r4, #8]
 800397c:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800397e:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8003980:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003982:	605d      	str	r5, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003984:	f882 6020 	strb.w	r6, [r2, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8003988:	61aa      	str	r2, [r5, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800398a:	f884 0020 	strb.w	r0, [r4, #32]
 800398e:	e000      	b.n	8003992 <chSchDoRescheduleAhead+0x22>
 8003990:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	428a      	cmp	r2, r1
 8003996:	d8fb      	bhi.n	8003990 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800399c:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800399e:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80039a0:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80039a2:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 80039a4:	f7ff ff5c 	bl	8003860 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80039a8:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
 80039ac:	69a9      	ldr	r1, [r5, #24]
 80039ae:	4e0c      	ldr	r6, [pc, #48]	; (80039e0 <chSchDoRescheduleAhead+0x70>)
 80039b0:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80039b2:	3148      	adds	r1, #72	; 0x48
 80039b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80039b8:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80039bc:	f7ff ff30 	bl	8003820 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80039c0:	f3ef 8309 	mrs	r3, PSP
 80039c4:	69e2      	ldr	r2, [r4, #28]
 80039c6:	3b64      	subs	r3, #100	; 0x64
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d805      	bhi.n	80039d8 <chSchDoRescheduleAhead+0x68>
 80039cc:	69b0      	ldr	r0, [r6, #24]
 80039ce:	4621      	mov	r1, r4
}
 80039d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80039d4:	f7fc bc7c 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d8:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80039da:	4b02      	ldr	r3, [pc, #8]	; (80039e4 <chSchDoRescheduleAhead+0x74>)
 80039dc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80039de:	e7fe      	b.n	80039de <chSchDoRescheduleAhead+0x6e>
 80039e0:	2000d228 	.word	0x2000d228
 80039e4:	08006af0 	.word	0x08006af0
	...

080039f0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80039f0:	f7ff bfbe 	b.w	8003970 <chSchDoRescheduleAhead>
	...

08003a00 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <chDbgCheckClassS+0x18>)
 8003a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a04:	b91a      	cbnz	r2, 8003a0e <chDbgCheckClassS+0xe>
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	dd00      	ble.n	8003a0e <chDbgCheckClassS+0xe>
 8003a0c:	4770      	bx	lr
 8003a0e:	b672      	cpsid	i
 8003a10:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <chDbgCheckClassS+0x1c>)
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a14:	e7fe      	b.n	8003a14 <chDbgCheckClassS+0x14>
 8003a16:	bf00      	nop
 8003a18:	2000d228 	.word	0x2000d228
 8003a1c:	08006b00 	.word	0x08006b00

08003a20 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003a20:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8003a22:	4c16      	ldr	r4, [pc, #88]	; (8003a7c <chSchGoSleepS+0x5c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003a24:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8003a26:	f7ff ffeb 	bl	8003a00 <chDbgCheckClassS>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003a2a:	6823      	ldr	r3, [r4, #0]

  otp = currp;
 8003a2c:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 8003a2e:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8003a30:	f885 6020 	strb.w	r6, [r5, #32]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003a34:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003a36:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8003a38:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003a3a:	f883 1020 	strb.w	r1, [r3, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003a3e:	6022      	str	r2, [r4, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8003a40:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8003a42:	f7ff ff0d 	bl	8003860 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8003a46:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 8003a4a:	69a1      	ldr	r1, [r4, #24]
 8003a4c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8003a4e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8003a52:	3148      	adds	r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8003a54:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8003a58:	f7ff fee2 	bl	8003820 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003a5c:	f3ef 8309 	mrs	r3, PSP
 8003a60:	69ea      	ldr	r2, [r5, #28]
 8003a62:	3b64      	subs	r3, #100	; 0x64
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d805      	bhi.n	8003a74 <chSchGoSleepS+0x54>
 8003a68:	69a0      	ldr	r0, [r4, #24]
 8003a6a:	4629      	mov	r1, r5
}
 8003a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8003a70:	f7fc bc2e 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a74:	b672      	cpsid	i
 8003a76:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <chSchGoSleepS+0x60>)
 8003a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a7a:	e7fe      	b.n	8003a7a <chSchGoSleepS+0x5a>
 8003a7c:	2000d228 	.word	0x2000d228
 8003a80:	08006af0 	.word	0x08006af0
	...

08003a90 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <chDbgCheckClassI+0x18>)
 8003a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	db03      	blt.n	8003aa0 <chDbgCheckClassI+0x10>
 8003a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	dd00      	ble.n	8003aa0 <chDbgCheckClassI+0x10>
 8003a9e:	4770      	bx	lr
 8003aa0:	b672      	cpsid	i
 8003aa2:	4a02      	ldr	r2, [pc, #8]	; (8003aac <chDbgCheckClassI+0x1c>)
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa6:	e7fe      	b.n	8003aa6 <chDbgCheckClassI+0x16>
 8003aa8:	2000d228 	.word	0x2000d228
 8003aac:	08006b08 	.word	0x08006b08

08003ab0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	4607      	mov	r7, r0

  chDbgCheckClassS();
 8003aba:	f7ff ffa1 	bl	8003a00 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 8003abe:	1c63      	adds	r3, r4, #1
 8003ac0:	d055      	beq.n	8003b6e <chSchGoSleepTimeoutS+0xbe>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8003ac2:	4e51      	ldr	r6, [pc, #324]	; (8003c08 <chSchGoSleepTimeoutS+0x158>)
 8003ac4:	f8d6 9018 	ldr.w	r9, [r6, #24]
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 8003ac8:	f7ff ffe2 	bl	8003a90 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8003acc:	b91c      	cbnz	r4, 8003ad6 <chSchGoSleepTimeoutS+0x26>
 8003ace:	b672      	cpsid	i
 8003ad0:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <chSchGoSleepTimeoutS+0x15c>)
 8003ad2:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003ad4:	e7fe      	b.n	8003ad4 <chSchGoSleepTimeoutS+0x24>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003ad6:	46b0      	mov	r8, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003ad8:	2c01      	cmp	r4, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003ada:	f858 5f1c 	ldr.w	r5, [r8, #28]!
 8003ade:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <chSchGoSleepTimeoutS+0x160>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8003ae0:	494c      	ldr	r1, [pc, #304]	; (8003c14 <chSchGoSleepTimeoutS+0x164>)
 8003ae2:	6a53      	ldr	r3, [r2, #36]	; 0x24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8003ae4:	f8cd 9014 	str.w	r9, [sp, #20]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003ae8:	bf08      	it	eq
 8003aea:	2402      	moveq	r4, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003aec:	4545      	cmp	r5, r8

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8003aee:	9104      	str	r1, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003af0:	d046      	beq.n	8003b80 <chSchGoSleepTimeoutS+0xd0>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8003af2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8003af4:	1a1b      	subs	r3, r3, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 8003af6:	18e4      	adds	r4, r4, r3
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8003af8:	68ab      	ldr	r3, [r5, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;

    if (delta < now - ch.vtlist.vt_lasttime) {
 8003afa:	d355      	bcc.n	8003ba8 <chSchGoSleepTimeoutS+0xf8>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 8003afc:	682d      	ldr	r5, [r5, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8003afe:	1ae4      	subs	r4, r4, r3
 8003b00:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8003b02:	429c      	cmp	r4, r3
 8003b04:	d904      	bls.n	8003b10 <chSchGoSleepTimeoutS+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 8003b06:	682d      	ldr	r5, [r5, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8003b08:	1ae4      	subs	r4, r4, r3
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8003b0a:	68ab      	ldr	r3, [r5, #8]
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	d3fa      	bcc.n	8003b06 <chSchGoSleepTimeoutS+0x56>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8003b10:	686b      	ldr	r3, [r5, #4]
 8003b12:	9302      	str	r3, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8003b14:	f10d 0904 	add.w	r9, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8003b18:	9501      	str	r5, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8003b1a:	f8c3 9000 	str.w	r9, [r3]
  p->vt_prev = vtp;
 8003b1e:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->vt_delta = delta
 8003b22:	9403      	str	r4, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8003b24:	68ab      	ldr	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8003b2a:	1b1b      	subs	r3, r3, r4
 8003b2c:	60ab      	str	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8003b2e:	6272      	str	r2, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8003b30:	4638      	mov	r0, r7
 8003b32:	f7ff ff75 	bl	8003a20 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8003b36:	f7ff ffab 	bl	8003a90 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8003b3a:	9b04      	ldr	r3, [sp, #16]
 8003b3c:	b1db      	cbz	r3, 8003b76 <chSchGoSleepTimeoutS+0xc6>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8003b3e:	f7ff ffa7 	bl	8003a90 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8003b42:	69f3      	ldr	r3, [r6, #28]
 8003b44:	4930      	ldr	r1, [pc, #192]	; (8003c08 <chSchGoSleepTimeoutS+0x158>)
 8003b46:	454b      	cmp	r3, r9
 8003b48:	d035      	beq.n	8003bb6 <chSchGoSleepTimeoutS+0x106>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8003b4a:	9a02      	ldr	r2, [sp, #8]
 8003b4c:	9b01      	ldr	r3, [sp, #4]
 8003b4e:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8003b50:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8003b52:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8003b54:	4543      	cmp	r3, r8
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8003b56:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8003b58:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8003b5a:	d00c      	beq.n	8003b76 <chSchGoSleepTimeoutS+0xc6>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8003b5c:	6899      	ldr	r1, [r3, #8]
 8003b5e:	9a03      	ldr	r2, [sp, #12]
 8003b60:	440a      	add	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8003b64:	69b3      	ldr	r3, [r6, #24]
 8003b66:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8003b68:	b007      	add	sp, #28
 8003b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003b6e:	4638      	mov	r0, r7
 8003b70:	f7ff ff56 	bl	8003a20 <chSchGoSleepS>
 8003b74:	4e24      	ldr	r6, [pc, #144]	; (8003c08 <chSchGoSleepTimeoutS+0x158>)
  }

  return currp->p_u.rdymsg;
 8003b76:	69b3      	ldr	r3, [r6, #24]
 8003b78:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8003b7a:	b007      	add	sp, #28
 8003b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 8003b80:	9403      	str	r4, [sp, #12]
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8003b82:	62b3      	str	r3, [r6, #40]	; 0x28
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8003b84:	68d1      	ldr	r1, [r2, #12]
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8003b86:	9501      	str	r5, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8003b88:	f10d 0904 	add.w	r9, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8003b8c:	f011 0102 	ands.w	r1, r1, #2
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003b90:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8003b92:	441c      	add	r4, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8003b94:	f8c6 901c 	str.w	r9, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8003b98:	f8c6 9020 	str.w	r9, [r6, #32]
 8003b9c:	d129      	bne.n	8003bf2 <chSchGoSleepTimeoutS+0x142>
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003b9e:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003ba0:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003ba2:	6111      	str	r1, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003ba4:	60d3      	str	r3, [r2, #12]
 8003ba6:	e7c3      	b.n	8003b30 <chSchGoSleepTimeoutS+0x80>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	d2aa      	bcs.n	8003b02 <chSchGoSleepTimeoutS+0x52>
 8003bac:	4420      	add	r0, r4
 8003bae:	f7ff f887 	bl	8002cc0 <stSetAlarm>
 8003bb2:	68ab      	ldr	r3, [r5, #8]
 8003bb4:	e7a5      	b.n	8003b02 <chSchGoSleepTimeoutS+0x52>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8003bb6:	9a01      	ldr	r2, [sp, #4]
 8003bb8:	61ca      	str	r2, [r1, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8003bba:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003bbc:	4542      	cmp	r2, r8
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003bbe:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_func = NULL;
 8003bc2:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003bc4:	d019      	beq.n	8003bfa <chSchGoSleepTimeoutS+0x14a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003bc6:	6893      	ldr	r3, [r2, #8]
 8003bc8:	9c03      	ldr	r4, [sp, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003bca:	4811      	ldr	r0, [pc, #68]	; (8003c10 <chSchGoSleepTimeoutS+0x160>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8003bcc:	6a89      	ldr	r1, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8003bce:	4423      	add	r3, r4
 8003bd0:	6093      	str	r3, [r2, #8]
 8003bd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8003bd4:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d9cd      	bls.n	8003b76 <chSchGoSleepTimeoutS+0xc6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8003bda:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	bf98      	it	ls
 8003be0:	2302      	movls	r3, #2
 8003be2:	4418      	add	r0, r3
 8003be4:	f7ff f86c 	bl	8002cc0 <stSetAlarm>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8003be8:	69b3      	ldr	r3, [r6, #24]
 8003bea:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8003bec:	b007      	add	sp, #28
 8003bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bf2:	b672      	cpsid	i
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <chSchGoSleepTimeoutS+0x168>)
 8003bf6:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003bf8:	e7fe      	b.n	8003bf8 <chSchGoSleepTimeoutS+0x148>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <chSchGoSleepTimeoutS+0x160>)
 8003bfc:	60d3      	str	r3, [r2, #12]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8003bfe:	69b3      	ldr	r3, [r6, #24]
 8003c00:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8003c02:	b007      	add	sp, #28
 8003c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c08:	2000d228 	.word	0x2000d228
 8003c0c:	08006bc0 	.word	0x08006bc0
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	08003de1 	.word	0x08003de1
 8003c18:	08006ab0 	.word	0x08006ab0
 8003c1c:	00000000 	.word	0x00000000

08003c20 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8003c20:	b169      	cbz	r1, 8003c3e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003c24:	b410      	push	{r4}
 8003c26:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003c28:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003c2a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003c2c:	2004      	movs	r0, #4
 8003c2e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8003c32:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8003c34:	6053      	str	r3, [r2, #4]
}
 8003c36:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003c3a:	f7ff bf39 	b.w	8003ab0 <chSchGoSleepTimeoutS>
}
 8003c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c42:	4770      	bx	lr
 8003c44:	2000d228 	.word	0x2000d228
	...

08003c50 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8003c54:	f7ff ff1c 	bl	8003a90 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8003c58:	b1cc      	cbz	r4, 8003c8e <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 8003c5a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003c5e:	b18b      	cbz	r3, 8003c84 <chSchReadyI+0x34>
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d00f      	beq.n	8003c84 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003c64:	2200      	movs	r2, #0
 8003c66:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <chSchReadyI+0x48>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003c6a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003c6e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	428a      	cmp	r2, r1
 8003c74:	d2fb      	bcs.n	8003c6e <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003c7a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8003c7c:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003c7e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003c80:	605c      	str	r4, [r3, #4]

  return tp;
}
 8003c82:	bd10      	pop	{r4, pc}
 8003c84:	b672      	cpsid	i
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <chSchReadyI+0x48>)
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <chSchReadyI+0x4c>)
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c8c:	e7fe      	b.n	8003c8c <chSchReadyI+0x3c>
 8003c8e:	b672      	cpsid	i
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <chSchReadyI+0x48>)
 8003c92:	4a02      	ldr	r2, [pc, #8]	; (8003c9c <chSchReadyI+0x4c>)
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c96:	e7fe      	b.n	8003c96 <chSchReadyI+0x46>
 8003c98:	2000d228 	.word	0x2000d228
 8003c9c:	08006ac0 	.word	0x08006ac0

08003ca0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8003ca0:	6803      	ldr	r3, [r0, #0]
 8003ca2:	b173      	cbz	r3, 8003cc2 <chThdResumeI+0x22>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8003ca4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003ca8:	2a03      	cmp	r2, #3
 8003caa:	d004      	beq.n	8003cb6 <chThdResumeI+0x16>
 8003cac:	b672      	cpsid	i
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <chThdResumeI+0x24>)
 8003cb0:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <chThdResumeI+0x28>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cb4:	e7fe      	b.n	8003cb4 <chThdResumeI+0x14>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8003cba:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8003cbc:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003cbe:	f7ff bfc7 	b.w	8003c50 <chSchReadyI>
 8003cc2:	4770      	bx	lr
 8003cc4:	2000d228 	.word	0x2000d228
 8003cc8:	08006c10 	.word	0x08006c10
 8003ccc:	00000000 	.word	0x00000000

08003cd0 <chThdExitS>:
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8003cd0:	4d10      	ldr	r5, [pc, #64]	; (8003d14 <chThdExitS+0x44>)
 8003cd2:	69ac      	ldr	r4, [r5, #24]
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8003cd4:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8003cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8003cd8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8003cda:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8003cde:	429e      	cmp	r6, r3
 8003ce0:	d007      	beq.n	8003cf2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ffb2 	bl	8003c50 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8003cec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8003cee:	42b3      	cmp	r3, r6
 8003cf0:	d1f7      	bne.n	8003ce2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8003cf2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003cf6:	079b      	lsls	r3, r3, #30
 8003cf8:	d104      	bne.n	8003d04 <chThdExitS+0x34>
    REG_REMOVE(tp);
 8003cfa:	6963      	ldr	r3, [r4, #20]
 8003cfc:	6922      	ldr	r2, [r4, #16]
 8003cfe:	611a      	str	r2, [r3, #16]
 8003d00:	6922      	ldr	r2, [r4, #16]
 8003d02:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8003d04:	200f      	movs	r0, #15
 8003d06:	f7ff fe8b 	bl	8003a20 <chSchGoSleepS>
 8003d0a:	b672      	cpsid	i
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <chThdExitS+0x48>)
 8003d0e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003d10:	e7fe      	b.n	8003d10 <chThdExitS+0x40>
 8003d12:	bf00      	nop
 8003d14:	2000d228 	.word	0x2000d228
 8003d18:	08006ad0 	.word	0x08006ad0
 8003d1c:	00000000 	.word	0x00000000

08003d20 <_dbg_check_leave_isr>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003d20:	2320      	movs	r3, #32
 8003d22:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_leave_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <_dbg_check_leave_isr+0x24>)
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	dd01      	ble.n	8003d32 <_dbg_check_leave_isr+0x12>
 8003d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d30:	b119      	cbz	r1, 8003d3a <_dbg_check_leave_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d32:	b672      	cpsid	i
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <_dbg_check_leave_isr+0x28>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d38:	e7fe      	b.n	8003d38 <_dbg_check_leave_isr+0x18>
    chSysHalt("SV#9");
  }
  ch.dbg.isr_cnt--;
 8003d3a:	3a01      	subs	r2, #1
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003d3e:	f381 8811 	msr	BASEPRI, r1
 8003d42:	4770      	bx	lr
 8003d44:	2000d228 	.word	0x2000d228
 8003d48:	08006b10 	.word	0x08006b10
 8003d4c:	00000000 	.word	0x00000000

08003d50 <_dbg_check_enter_isr>:
 8003d50:	2320      	movs	r3, #32
 8003d52:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_enter_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_dbg_check_enter_isr+0x24>)
 8003d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	db01      	blt.n	8003d62 <_dbg_check_enter_isr+0x12>
 8003d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d60:	b119      	cbz	r1, 8003d6a <_dbg_check_enter_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d62:	b672      	cpsid	i
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <_dbg_check_enter_isr+0x28>)
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d68:	e7fe      	b.n	8003d68 <_dbg_check_enter_isr+0x18>
    chSysHalt("SV#8");
  }
  ch.dbg.isr_cnt++;
 8003d6a:	3201      	adds	r2, #1
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003d6e:	f381 8811 	msr	BASEPRI, r1
 8003d72:	4770      	bx	lr
 8003d74:	2000d228 	.word	0x2000d228
 8003d78:	08006b18 	.word	0x08006b18
 8003d7c:	00000000 	.word	0x00000000

08003d80 <_dbg_check_unlock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <_dbg_check_unlock_from_isr+0x1c>)
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	dd05      	ble.n	8003d94 <_dbg_check_unlock_from_isr+0x14>
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	dd02      	ble.n	8003d94 <_dbg_check_unlock_from_isr+0x14>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
 8003d92:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d94:	b672      	cpsid	i
 8003d96:	4a02      	ldr	r2, [pc, #8]	; (8003da0 <_dbg_check_unlock_from_isr+0x20>)
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d9a:	e7fe      	b.n	8003d9a <_dbg_check_unlock_from_isr+0x1a>
 8003d9c:	2000d228 	.word	0x2000d228
 8003da0:	08006b20 	.word	0x08006b20
	...

08003db0 <_dbg_check_lock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <_dbg_check_lock_from_isr+0x1c>)
 8003db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	dd01      	ble.n	8003dbc <_dbg_check_lock_from_isr+0xc>
 8003db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dba:	b11a      	cbz	r2, 8003dc4 <_dbg_check_lock_from_isr+0x14>
 8003dbc:	b672      	cpsid	i
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <_dbg_check_lock_from_isr+0x20>)
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dc2:	e7fe      	b.n	8003dc2 <_dbg_check_lock_from_isr+0x12>
    chSysHalt("SV#6");
  }
  _dbg_enter_lock();
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000d228 	.word	0x2000d228
 8003dd0:	08006b28 	.word	0x08006b28
	...

08003de0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003de4:	2320      	movs	r3, #32
 8003de6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8003dea:	f7ff fdb1 	bl	8003950 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8003dee:	f7ff ffdf 	bl	8003db0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8003df2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003df6:	2b07      	cmp	r3, #7
 8003df8:	d810      	bhi.n	8003e1c <wakeup+0x3c>
 8003dfa:	e8df f003 	tbb	[pc, r3]
 8003dfe:	0f15      	.short	0x0f15
 8003e00:	040a1d0f 	.word	0x040a1d0f
 8003e04:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8003e06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8003e08:	f7ff fe42 	bl	8003a90 <chDbgCheckClassI>

  sp->s_cnt++;
 8003e0c:	68ab      	ldr	r3, [r5, #8]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003e12:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003e16:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff ff14 	bl	8003c50 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8003e28:	f7ff ffaa 	bl	8003d80 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8003e2c:	f7ff fd78 	bl	8003920 <_stats_stop_measure_crit_isr>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8003e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff ff03 	bl	8003c50 <chSchReadyI>
 8003e4a:	e7ed      	b.n	8003e28 <wakeup+0x48>
 8003e4c:	0000      	movs	r0, r0
	...

08003e50 <_dbg_check_unlock>:
 *
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <_dbg_check_unlock+0x18>)
 8003e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e54:	b922      	cbnz	r2, 8003e60 <_dbg_check_unlock+0x10>
 8003e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	dd01      	ble.n	8003e60 <_dbg_check_unlock+0x10>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e5e:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
 8003e62:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <_dbg_check_unlock+0x1c>)
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e66:	e7fe      	b.n	8003e66 <_dbg_check_unlock+0x16>
 8003e68:	2000d228 	.word	0x2000d228
 8003e6c:	08006b30 	.word	0x08006b30

08003e70 <_dbg_check_lock>:
 *
 * @notapi
 */
void _dbg_check_lock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <_dbg_check_lock+0x18>)
 8003e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e74:	b90a      	cbnz	r2, 8003e7a <_dbg_check_lock+0xa>
 8003e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e78:	b11a      	cbz	r2, 8003e82 <_dbg_check_lock+0x12>
 8003e7a:	b672      	cpsid	i
 8003e7c:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <_dbg_check_lock+0x1c>)
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e80:	e7fe      	b.n	8003e80 <_dbg_check_lock+0x10>
    chSysHalt("SV#4");
  }
  _dbg_enter_lock();
 8003e82:	2201      	movs	r2, #1
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
 8003e86:	4770      	bx	lr
 8003e88:	2000d228 	.word	0x2000d228
 8003e8c:	08006b38 	.word	0x08006b38

08003e90 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	4605      	mov	r5, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e94:	2320      	movs	r3, #32
 8003e96:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8003e9a:	4e47      	ldr	r6, [pc, #284]	; (8003fb8 <chMtxLock+0x128>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003e9c:	f7ff fd60 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003ea0:	f7ff ffe6 	bl	8003e70 <_dbg_check_lock>
 8003ea4:	69b4      	ldr	r4, [r6, #24]

  chDbgCheckClassS();
 8003ea6:	f7ff fdab 	bl	8003a00 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	d046      	beq.n	8003f3c <chMtxLock+0xac>

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8003eae:	68a8      	ldr	r0, [r5, #8]
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d04e      	beq.n	8003f52 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8003eb4:	68a2      	ldr	r2, [r4, #8]
 8003eb6:	6883      	ldr	r3, [r0, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d907      	bls.n	8003ecc <chMtxLock+0x3c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8003ebc:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8003ec0:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d05e      	beq.n	8003f84 <chMtxLock+0xf4>
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d024      	beq.n	8003f14 <chMtxLock+0x84>
 8003eca:	b1c3      	cbz	r3, 8003efe <chMtxLock+0x6e>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003ecc:	462b      	mov	r3, r5
 8003ece:	e003      	b.n	8003ed8 <chMtxLock+0x48>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003ed0:	6899      	ldr	r1, [r3, #8]
 8003ed2:	68a2      	ldr	r2, [r4, #8]
 8003ed4:	4291      	cmp	r1, r2
 8003ed6:	d302      	bcc.n	8003ede <chMtxLock+0x4e>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003ed8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003eda:	429d      	cmp	r5, r3
 8003edc:	d1f8      	bne.n	8003ed0 <chMtxLock+0x40>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003ee2:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8003ee4:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003ee6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003ee8:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8003eea:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8003eec:	f7ff fd98 	bl	8003a20 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8003ef0:	68ab      	ldr	r3, [r5, #8]
 8003ef2:	429c      	cmp	r4, r3
 8003ef4:	d026      	beq.n	8003f44 <chMtxLock+0xb4>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef6:	b672      	cpsid	i
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <chMtxLock+0x12c>)
 8003efa:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003efc:	e7fe      	b.n	8003efc <chMtxLock+0x6c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003efe:	e890 000c 	ldmia.w	r0, {r2, r3}
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
 8003f02:	2101      	movs	r1, #1
 8003f04:	f880 1020 	strb.w	r1, [r0, #32]
 8003f08:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003f0a:	6802      	ldr	r2, [r0, #0]
 8003f0c:	6053      	str	r3, [r2, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8003f0e:	f7ff fe9f 	bl	8003c50 <chSchReadyI>
 8003f12:	e7db      	b.n	8003ecc <chMtxLock+0x3c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003f14:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003f18:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003f1a:	6807      	ldr	r7, [r0, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8003f1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003f1e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003f20:	460b      	mov	r3, r1
 8003f22:	e002      	b.n	8003f2a <chMtxLock+0x9a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003f24:	689f      	ldr	r7, [r3, #8]
 8003f26:	4297      	cmp	r7, r2
 8003f28:	d302      	bcc.n	8003f30 <chMtxLock+0xa0>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003f2a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	d1f9      	bne.n	8003f24 <chMtxLock+0x94>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003f34:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003f36:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8003f38:	6058      	str	r0, [r3, #4]
 8003f3a:	e7c7      	b.n	8003ecc <chMtxLock+0x3c>
 8003f3c:	b672      	cpsid	i
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <chMtxLock+0x12c>)
 8003f40:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003f42:	e7fe      	b.n	8003f42 <chMtxLock+0xb2>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
      chDbgAssert(ctp->p_mtxlist == mp, "not owned");
 8003f44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f46:	429d      	cmp	r5, r3
 8003f48:	d007      	beq.n	8003f5a <chMtxLock+0xca>
 8003f4a:	b672      	cpsid	i
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <chMtxLock+0x12c>)
 8003f4e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003f50:	e7fe      	b.n	8003f50 <chMtxLock+0xc0>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8003f52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f54:	60eb      	str	r3, [r5, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8003f56:	60ac      	str	r4, [r5, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 8003f58:	63e5      	str	r5, [r4, #60]	; 0x3c
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003f5a:	f7ff ff79 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003f5e:	f7ff fce7 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003f62:	6832      	ldr	r2, [r6, #0]
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <chMtxLock+0x128>)
 8003f66:	42b2      	cmp	r2, r6
 8003f68:	d004      	beq.n	8003f74 <chMtxLock+0xe4>
 8003f6a:	6999      	ldr	r1, [r3, #24]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	6889      	ldr	r1, [r1, #8]
 8003f70:	4291      	cmp	r1, r2
 8003f72:	d303      	bcc.n	8003f7c <chMtxLock+0xec>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003f74:	2300      	movs	r3, #0
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7c:	b672      	cpsid	i
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <chMtxLock+0x130>)
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f82:	e7fe      	b.n	8003f82 <chMtxLock+0xf2>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8003f84:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003f88:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8003f8a:	6807      	ldr	r7, [r0, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8003f8c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003f8e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003f90:	460b      	mov	r3, r1
 8003f92:	e002      	b.n	8003f9a <chMtxLock+0x10a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003f94:	689f      	ldr	r7, [r3, #8]
 8003f96:	4297      	cmp	r7, r2
 8003f98:	d302      	bcc.n	8003fa0 <chMtxLock+0x110>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8003f9a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	d1f9      	bne.n	8003f94 <chMtxLock+0x104>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003fa4:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003fa6:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8003fa8:	6058      	str	r0, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8003faa:	6888      	ldr	r0, [r1, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8003fac:	68a2      	ldr	r2, [r4, #8]
 8003fae:	6883      	ldr	r3, [r0, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d883      	bhi.n	8003ebc <chMtxLock+0x2c>
 8003fb4:	e78a      	b.n	8003ecc <chMtxLock+0x3c>
 8003fb6:	bf00      	nop
 8003fb8:	2000d228 	.word	0x2000d228
 8003fbc:	08006bd0 	.word	0x08006bd0
 8003fc0:	08006e30 	.word	0x08006e30
	...

08003fd0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8003fd0:	b508      	push	{r3, lr}
 8003fd2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003fda:	f7ff fcc1 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003fde:	f7ff ff47 	bl	8003e70 <_dbg_check_lock>

  chSysLock();
  chThdExitS(msg);
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7ff fe74 	bl	8003cd0 <chThdExitS>
	...

08003ff0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003ffa:	f7ff fcb1 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003ffe:	f7ff ff37 	bl	8003e70 <_dbg_check_lock>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <chThdSleepUntil+0x4c>)
 8004004:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 8004006:	1a61      	subs	r1, r4, r1
 8004008:	d002      	beq.n	8004010 <chThdSleepUntil+0x20>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800400a:	2008      	movs	r0, #8
 800400c:	f7ff fd50 	bl	8003ab0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004010:	f7ff ff1e 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004014:	f7ff fc8c 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <chThdSleepUntil+0x50>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d004      	beq.n	800402a <chThdSleepUntil+0x3a>
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	6889      	ldr	r1, [r1, #8]
 8004026:	4291      	cmp	r1, r2
 8004028:	d303      	bcc.n	8004032 <chThdSleepUntil+0x42>
 800402a:	2300      	movs	r3, #0
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004032:	b672      	cpsid	i
 8004034:	4a03      	ldr	r2, [pc, #12]	; (8004044 <chThdSleepUntil+0x54>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
 8004038:	e7fe      	b.n	8004038 <chThdSleepUntil+0x48>
 800403a:	bf00      	nop
 800403c:	40000c00 	.word	0x40000c00
 8004040:	2000d228 	.word	0x2000d228
 8004044:	08006be0 	.word	0x08006be0
	...

08004050 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8004050:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004052:	2320      	movs	r3, #32
 8004054:	4604      	mov	r4, r0
 8004056:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800405a:	f7ff fc81 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800405e:	f7ff ff07 	bl	8003e70 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8004062:	b1a4      	cbz	r4, 800408e <chThdSleep+0x3e>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8004064:	4621      	mov	r1, r4
 8004066:	2008      	movs	r0, #8
 8004068:	f7ff fd22 	bl	8003ab0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800406c:	f7ff fef0 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004070:	f7ff fc5e 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <chThdSleep+0x50>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d004      	beq.n	8004086 <chThdSleep+0x36>
 800407c:	6999      	ldr	r1, [r3, #24]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	6889      	ldr	r1, [r1, #8]
 8004082:	4291      	cmp	r1, r2
 8004084:	d308      	bcc.n	8004098 <chThdSleep+0x48>
 8004086:	2300      	movs	r3, #0
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800408e:	b672      	cpsid	i
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <chThdSleep+0x50>)
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <chThdSleep+0x54>)
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
 8004096:	e7fe      	b.n	8004096 <chThdSleep+0x46>
 8004098:	b672      	cpsid	i
 800409a:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <chThdSleep+0x58>)
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
 800409e:	e7fe      	b.n	800409e <chThdSleep+0x4e>
 80040a0:	2000d228 	.word	0x2000d228
 80040a4:	08006c00 	.word	0x08006c00
 80040a8:	08006be0 	.word	0x08006be0
 80040ac:	00000000 	.word	0x00000000

080040b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	4617      	mov	r7, r2
 80040b6:	4698      	mov	r8, r3
 80040b8:	b083      	sub	sp, #12
 80040ba:	4604      	mov	r4, r0
 80040bc:	468a      	mov	sl, r1
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 80040be:	f100 0560 	add.w	r5, r0, #96	; 0x60
 80040c2:	4603      	mov	r3, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f803 2b01 	strb.w	r2, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80040ca:	429d      	cmp	r5, r3
 80040cc:	d1fb      	bne.n	80040c6 <chThdCreateStatic+0x16>
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 80040ce:	eb04 020a 	add.w	r2, r4, sl
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80040d2:	4295      	cmp	r5, r2
 80040d4:	d205      	bcs.n	80040e2 <chThdCreateStatic+0x32>
 80040d6:	462b      	mov	r3, r5
    *startp++ = v;
 80040d8:	2155      	movs	r1, #85	; 0x55
 80040da:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80040de:	4293      	cmp	r3, r2
 80040e0:	d1fb      	bne.n	80040da <chThdCreateStatic+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80040e2:	2320      	movs	r3, #32
 80040e4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80040e8:	f7ff fc3a 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80040ec:	f7ff fec0 	bl	8003e70 <_dbg_check_lock>
                       tprio_t prio, tfunc_t pf, void *arg) {
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 80040f0:	f7ff fcce 	bl	8003a90 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 80040f4:	2c00      	cmp	r4, #0
 80040f6:	f000 8083 	beq.w	8004200 <chThdCreateStatic+0x150>
 80040fa:	f5ba 7fb8 	cmp.w	sl, #368	; 0x170
 80040fe:	d37f      	bcc.n	8004200 <chThdCreateStatic+0x150>
 8004100:	2f7f      	cmp	r7, #127	; 0x7f
 8004102:	d87d      	bhi.n	8004200 <chThdCreateStatic+0x150>
 8004104:	f1b8 0f00 	cmp.w	r8, #0
 8004108:	d07a      	beq.n	8004200 <chThdCreateStatic+0x150>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800410a:	4e49      	ldr	r6, [pc, #292]	; (8004230 <chThdCreateStatic+0x180>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800410c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004244 <chThdCreateStatic+0x194>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004110:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004112:	f1aa 0164 	sub.w	r1, sl, #100	; 0x64
 8004116:	4421      	add	r1, r4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8004118:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800411c:	9201      	str	r2, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800411e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004120:	60e1      	str	r1, [r4, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004122:	2000      	movs	r0, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004124:	f8c1 8040 	str.w	r8, [r1, #64]	; 0x40
 8004128:	644a      	str	r2, [r1, #68]	; 0x44
 800412a:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800412e:	9a01      	ldr	r2, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004130:	6163      	str	r3, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004132:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8004136:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800413a:	f04f 0a02 	mov.w	sl, #2
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800413e:	f04f 3bff 	mov.w	fp, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004142:	f04f 0800 	mov.w	r8, #0
 8004146:	f04f 0900 	mov.w	r9, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800414a:	60a7      	str	r7, [r4, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800414c:	6126      	str	r6, [r4, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800414e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8004152:	63e0      	str	r0, [r4, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004154:	63a0      	str	r0, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004156:	61a0      	str	r0, [r4, #24]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004158:	6427      	str	r7, [r4, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800415a:	f884 a020 	strb.w	sl, [r4, #32]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800415e:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004162:	611c      	str	r4, [r3, #16]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004164:	64e0      	str	r0, [r4, #76]	; 0x4c
  tmp->last       = (rtcnt_t)0;
 8004166:	6520      	str	r0, [r4, #80]	; 0x50
  tmp->n          = (ucnt_t)0;
 8004168:	6560      	str	r0, [r4, #84]	; 0x54
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 800416a:	61e5      	str	r5, [r4, #28]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800416c:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004170:	62e2      	str	r2, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8004172:	6322      	str	r2, [r4, #48]	; 0x30
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004174:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004178:	e9c4 8916 	strd	r8, r9, [r4, #88]	; 0x58
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800417c:	6174      	str	r4, [r6, #20]
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {

  chDbgCheckClassS();
 800417e:	f7ff fc3f 	bl	8003a00 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004182:	6833      	ldr	r3, [r6, #0]
 8004184:	69b0      	ldr	r0, [r6, #24]
 8004186:	42b3      	cmp	r3, r6
 8004188:	d04f      	beq.n	800422a <chThdCreateStatic+0x17a>
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	6883      	ldr	r3, [r0, #8]
 800418e:	4293      	cmp	r3, r2
 8004190:	d347      	bcc.n	8004222 <chThdCreateStatic+0x172>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8004192:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8004194:	429f      	cmp	r7, r3
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8004196:	6262      	str	r2, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8004198:	d93f      	bls.n	800421a <chThdCreateStatic+0x16a>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 800419a:	f7ff fd59 	bl	8003c50 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800419e:	2301      	movs	r3, #1
 80041a0:	f884 3020 	strb.w	r3, [r4, #32]
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 80041a4:	4605      	mov	r5, r0
    setcurrp(ntp);
 80041a6:	61b4      	str	r4, [r6, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80041a8:	f7ff fb5a 	bl	8003860 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80041ac:	f8d6 34ac 	ldr.w	r3, [r6, #1196]	; 0x4ac
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80041b0:	4f1f      	ldr	r7, [pc, #124]	; (8004230 <chThdCreateStatic+0x180>)
 80041b2:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80041b4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80041b8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80041bc:	f8c6 34ac 	str.w	r3, [r6, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80041c0:	f7ff fb2e 	bl	8003820 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80041c4:	f3ef 8309 	mrs	r3, PSP
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80041c8:	69ea      	ldr	r2, [r5, #28]
 80041ca:	3b64      	subs	r3, #100	; 0x64
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d820      	bhi.n	8004212 <chThdCreateStatic+0x162>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7fc f87c 	bl	80002d0 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80041d8:	f7ff fe3a 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80041dc:	f7ff fba8 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80041e0:	6832      	ldr	r2, [r6, #0]
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <chThdCreateStatic+0x180>)
 80041e4:	42b2      	cmp	r2, r6
 80041e6:	d004      	beq.n	80041f2 <chThdCreateStatic+0x142>
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	6889      	ldr	r1, [r1, #8]
 80041ee:	4291      	cmp	r1, r2
 80041f0:	d30b      	bcc.n	800420a <chThdCreateStatic+0x15a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80041f2:	2300      	movs	r3, #0
 80041f4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
  chSysUnlock();

  return tp;
}
 80041f8:	4620      	mov	r0, r4
 80041fa:	b003      	add	sp, #12
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <chThdCreateStatic+0x180>)
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <chThdCreateStatic+0x184>)
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
 8004208:	e7fe      	b.n	8004208 <chThdCreateStatic+0x158>
 800420a:	b672      	cpsid	i
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <chThdCreateStatic+0x188>)
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004210:	e7fe      	b.n	8004210 <chThdCreateStatic+0x160>
 8004212:	b672      	cpsid	i
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <chThdCreateStatic+0x18c>)
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004218:	e7fe      	b.n	8004218 <chThdCreateStatic+0x168>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff fd18 	bl	8003c50 <chSchReadyI>
 8004220:	e7da      	b.n	80041d8 <chThdCreateStatic+0x128>
 8004222:	b672      	cpsid	i
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <chThdCreateStatic+0x190>)
 8004226:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004228:	e7fe      	b.n	8004228 <chThdCreateStatic+0x178>
 800422a:	6883      	ldr	r3, [r0, #8]
 800422c:	e7b1      	b.n	8004192 <chThdCreateStatic+0xe2>
 800422e:	bf00      	nop
 8004230:	2000d228 	.word	0x2000d228
 8004234:	08006ae0 	.word	0x08006ae0
 8004238:	08006be0 	.word	0x08006be0
 800423c:	08006af0 	.word	0x08006af0
 8004240:	08006bf0 	.word	0x08006bf0
 8004244:	080002e9 	.word	0x080002e9
	...

08004250 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8004250:	e7fe      	b.n	8004250 <BusFault_Handler>
 8004252:	bf00      	nop
	...

08004260 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004260:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8004262:	4e11      	ldr	r6, [pc, #68]	; (80042a8 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004264:	2500      	movs	r5, #0
 8004266:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800426a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800426e:	42a3      	cmp	r3, r4
 8004270:	d20d      	bcs.n	800428e <__init_ram_areas+0x2e>
 8004272:	3904      	subs	r1, #4
 8004274:	461a      	mov	r2, r3
      *p = *tp;
 8004276:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800427a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800427e:	42a2      	cmp	r2, r4
 8004280:	d3f9      	bcc.n	8004276 <__init_ram_areas+0x16>
 8004282:	43da      	mvns	r2, r3
 8004284:	4414      	add	r4, r2
 8004286:	f024 0403 	bic.w	r4, r4, #3
 800428a:	3404      	adds	r4, #4
 800428c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800428e:	68f2      	ldr	r2, [r6, #12]
 8004290:	4293      	cmp	r3, r2
 8004292:	d203      	bcs.n	800429c <__init_ram_areas+0x3c>
      *p = 0;
 8004294:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004298:	4293      	cmp	r3, r2
 800429a:	d3fb      	bcc.n	8004294 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800429c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800429e:	42be      	cmp	r6, r7
 80042a0:	d3e3      	bcc.n	800426a <__init_ram_areas+0xa>
#endif
}
 80042a2:	bcf0      	pop	{r4, r5, r6, r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	08006b40 	.word	0x08006b40
 80042ac:	00000000 	.word	0x00000000

080042b0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80042b0:	e7fe      	b.n	80042b0 <__default_exit>
 80042b2:	bf00      	nop
	...

080042c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
	...

080042d0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
	...

080042e0 <cmd_print>:
static THD_WORKING_AREA(Shell_thread_wa, 1024);
//static THD_WORKING_AREA(Controller_thread_wa, 4096);

//static Control_Param controller;

static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4c10      	ldr	r4, [pc, #64]	; (8004324 <cmd_print+0x44>)
 80042e4:	ed2d 8b02 	vpush	{d8}
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
      (int32_t)(g_IMU1.accelBias[i] * 100),
 80042e8:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8004328 <cmd_print+0x48>
static THD_WORKING_AREA(Shell_thread_wa, 1024);
//static THD_WORKING_AREA(Controller_thread_wa, 4096);

//static Control_Param controller;

static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
 80042ec:	4606      	mov	r6, r0
 80042ee:	f104 050c 	add.w	r5, r4, #12
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
      (int32_t)(g_IMU1.accelBias[i] * 100),
 80042f2:	ecb4 7a01 	vldmia	r4!, {s14}
static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
 80042f6:	490d      	ldr	r1, [pc, #52]	; (800432c <cmd_print+0x4c>)
      (int32_t)(g_IMU1.accelBias[i] * 100),
      (int32_t)(g_IMU1.gyroBias[i] * 100));
 80042f8:	edd4 7a02 	vldr	s15, [r4, #8]
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
      (int32_t)(g_IMU1.accelBias[i] * 100),
 80042fc:	ee27 7a08 	vmul.f32	s14, s14, s16
      (int32_t)(g_IMU1.gyroBias[i] * 100));
 8004300:	ee67 7a88 	vmul.f32	s15, s15, s16
static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
 8004304:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800430c:	ee17 2a10 	vmov	r2, s14
 8004310:	ee17 3a90 	vmov	r3, s15
 8004314:	4630      	mov	r0, r6
 8004316:	f7fd ff43 	bl	80021a0 <chprintf>

static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  uint8_t i;
  for (i = 0; i < 3U; i++)
 800431a:	42ac      	cmp	r4, r5
 800431c:	d1e9      	bne.n	80042f2 <cmd_print+0x12>
    chprintf(chp,"Accl:%4d   Gyro:%4d\n",
      (int32_t)(g_IMU1.accelBias[i] * 100),
      (int32_t)(g_IMU1.gyroBias[i] * 100));
}
 800431e:	ecbd 8b02 	vpop	{d8}
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	2000bcf4 	.word	0x2000bcf4
 8004328:	42c80000 	.word	0x42c80000
 800432c:	08006dd0 	.word	0x08006dd0

08004330 <tft_write_data>:
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 8004330:	b510      	push	{r4, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	ac02      	add	r4, sp, #8
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <tft_write_data+0x24>)
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 8004338:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 800433c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004340:	831a      	strh	r2, [r3, #24]

  spiSelect(TFT_SPI);
 8004342:	f001 f90d 	bl	8005560 <spiSelect.constprop.25>
  spiSend(TFT_SPI, 1, &data);
 8004346:	4620      	mov	r0, r4
 8004348:	f001 f97a 	bl	8005640 <spiSend.constprop.21>
  spiUnselect(TFT_SPI);
 800434c:	f001 f940 	bl	80055d0 <spiUnselect.constprop.23>
}
 8004350:	b002      	add	sp, #8
 8004352:	bd10      	pop	{r4, pc}
 8004354:	40021000 	.word	0x40021000
	...

08004360 <tft_write_command>:
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 8004360:	b510      	push	{r4, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	ac02      	add	r4, sp, #8
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <tft_write_command+0x24>)
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 8004368:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 800436c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004370:	835a      	strh	r2, [r3, #26]

  spiSelect(TFT_SPI);
 8004372:	f001 f8f5 	bl	8005560 <spiSelect.constprop.25>
  spiSend(TFT_SPI, 1, &command);
 8004376:	4620      	mov	r0, r4
 8004378:	f001 f962 	bl	8005640 <spiSend.constprop.21>
  spiUnselect(TFT_SPI);
 800437c:	f001 f928 	bl	80055d0 <spiUnselect.constprop.23>
}
 8004380:	b002      	add	sp, #8
 8004382:	bd10      	pop	{r4, pc}
 8004384:	40021000 	.word	0x40021000
	...

08004390 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8004390:	4bd7      	ldr	r3, [pc, #860]	; (80046f0 <main+0x360>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004392:	4cd8      	ldr	r4, [pc, #864]	; (80046f4 <main+0x364>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	f04f 31ff 	mov.w	r1, #4294967295
 800439a:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 800439c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80043a0:	6119      	str	r1, [r3, #16]
 80043a2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80043a4:	6958      	ldr	r0, [r3, #20]
 80043a6:	6159      	str	r1, [r3, #20]
 80043a8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80043aa:	6a18      	ldr	r0, [r3, #32]
 80043ac:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80043b0:	6218      	str	r0, [r3, #32]
 80043b2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80043b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80043b6:	6259      	str	r1, [r3, #36]	; 0x24
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80043ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80043c0:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80043c8:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80043ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80043cc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80043d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043d4:	b08b      	sub	sp, #44	; 0x2c
 80043d6:	d003      	beq.n	80043e0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80043d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80043dc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80043de:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80043e0:	48c4      	ldr	r0, [pc, #784]	; (80046f4 <main+0x364>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 80043e2:	4cc5      	ldr	r4, [pc, #788]	; (80046f8 <main+0x368>)
 80043e4:	6843      	ldr	r3, [r0, #4]
 80043e6:	4ec5      	ldr	r6, [pc, #788]	; (80046fc <main+0x36c>)
 80043e8:	4dc5      	ldr	r5, [pc, #788]	; (8004700 <main+0x370>)
 80043ea:	2100      	movs	r1, #0
 80043ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f0:	6043      	str	r3, [r0, #4]
 80043f2:	460a      	mov	r2, r1
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80043f4:	460b      	mov	r3, r1
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 80043f6:	6021      	str	r1, [r4, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 80043f8:	58b0      	ldr	r0, [r6, r2]
 80043fa:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 80043fc:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004400:	3301      	adds	r3, #1
 8004402:	2b10      	cmp	r3, #16
 8004404:	f102 020c 	add.w	r2, r2, #12
    _stm32_dma_streams[i].stream->CR = 0U;
 8004408:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800440c:	d1f4      	bne.n	80043f8 <main+0x68>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800440e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800472c <main+0x39c>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004412:	4abc      	ldr	r2, [pc, #752]	; (8004704 <main+0x374>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004414:	4fb6      	ldr	r7, [pc, #728]	; (80046f0 <main+0x360>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004416:	f8df c318 	ldr.w	ip, [pc, #792]	; 8004730 <main+0x3a0>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800441a:	f8df b318 	ldr.w	fp, [pc, #792]	; 8004734 <main+0x3a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800441e:	f8df e318 	ldr.w	lr, [pc, #792]	; 8004738 <main+0x3a8>
 8004422:	48b9      	ldr	r0, [pc, #740]	; (8004708 <main+0x378>)
 8004424:	f8df a314 	ldr.w	sl, [pc, #788]	; 800473c <main+0x3ac>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8004428:	49b8      	ldr	r1, [pc, #736]	; (800470c <main+0x37c>)
 800442a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8004740 <main+0x3b0>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800442e:	4db8      	ldr	r5, [pc, #736]	; (8004710 <main+0x380>)
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004430:	f04f 36ff 	mov.w	r6, #4294967295
 8004434:	f8c8 6008 	str.w	r6, [r8, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004438:	f8c8 600c 	str.w	r6, [r8, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800443c:	6096      	str	r6, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 800443e:	60d6      	str	r6, [r2, #12]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004446:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 800444a:	633a      	str	r2, [r7, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800444c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800444e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004452:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 8004456:	653a      	str	r2, [r7, #80]	; 0x50
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8004458:	f46f 42a8 	mvn.w	r2, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800445c:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004460:	f8cc 2008 	str.w	r2, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8004464:	f8cc b00c 	str.w	fp, [ip, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004468:	f10b 5baa 	add.w	fp, fp, #356515840	; 0x15400000
 800446c:	f50b 3b88 	add.w	fp, fp, #69632	; 0x11000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004470:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8004474:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004478:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800447c:	f8cc b020 	str.w	fp, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8004480:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8004744 <main+0x3b4>
 8004484:	f8cc b024 	str.w	fp, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004488:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8004748 <main+0x3b8>
 800448c:	f8cc b000 	str.w	fp, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004490:	f44f 7c10 	mov.w	ip, #576	; 0x240
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004494:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 800474c <main+0x3bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004498:	f8ce c004 	str.w	ip, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800449c:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 80044a0:	f8ce b00c 	str.w	fp, [lr, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80044a4:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 8004750 <main+0x3c0>
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80044a8:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 80044ac:	f8ce b020 	str.w	fp, [lr, #32]
  gpiop->AFRH    = config->afrh;
 80044b0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8004754 <main+0x3c4>
 80044b4:	f8ce b024 	str.w	fp, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80044b8:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8004758 <main+0x3c8>
 80044bc:	f8ce b000 	str.w	fp, [lr]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80044c0:	f8df b298 	ldr.w	fp, [pc, #664]	; 800475c <main+0x3cc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80044c4:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80044c6:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80044c8:	f8c0 b00c 	str.w	fp, [r0, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80044cc:	f04f 5b4c 	mov.w	fp, #855638016	; 0x33000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80044d0:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80044d2:	f8c0 b020 	str.w	fp, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80044d6:	f648 0b33 	movw	fp, #34867	; 0x8833
 80044da:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80044de:	f8df b280 	ldr.w	fp, [pc, #640]	; 8004760 <main+0x3d0>
 80044e2:	f8c0 b000 	str.w	fp, [r0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80044e6:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8004764 <main+0x3d4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80044ea:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80044ee:	f8ca 6008 	str.w	r6, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 80044f2:	f8ca b00c 	str.w	fp, [sl, #12]
  gpiop->ODR     = config->odr;
 80044f6:	f640 7bff 	movw	fp, #4095	; 0xfff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80044fa:	f5a8 4898 	sub.w	r8, r8, #19456	; 0x4c00
 80044fe:	f8df c268 	ldr.w	ip, [pc, #616]	; 8004768 <main+0x3d8>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004502:	f8ca b014 	str.w	fp, [sl, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004506:	f50e 5ec0 	add.w	lr, lr, #6144	; 0x1800
 800450a:	f500 50c0 	add.w	r0, r0, #6144	; 0x1800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800450e:	f8df b25c 	ldr.w	fp, [pc, #604]	; 800476c <main+0x3dc>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004512:	f8ca 4020 	str.w	r4, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8004516:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800451a:	f8ca b000 	str.w	fp, [sl]
 800451e:	f8df a250 	ldr.w	sl, [pc, #592]	; 8004770 <main+0x3e0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004522:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004526:	f8c9 6008 	str.w	r6, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 800452a:	f8c9 400c 	str.w	r4, [r9, #12]
  gpiop->ODR     = config->odr;
 800452e:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8004532:	f8c9 4020 	str.w	r4, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8004536:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800453a:	f8c9 a000 	str.w	sl, [r9]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800453e:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004542:	f8c8 6008 	str.w	r6, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8004546:	f8c8 400c 	str.w	r4, [r8, #12]
  gpiop->ODR     = config->odr;
 800454a:	f8c8 2014 	str.w	r2, [r8, #20]
  gpiop->AFRL    = config->afrl;
 800454e:	f8c8 4020 	str.w	r4, [r8, #32]
  gpiop->AFRH    = config->afrh;
 8004552:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004556:	f8c8 4000 	str.w	r4, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800455a:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800455e:	f8cc 6008 	str.w	r6, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8004562:	f8cc 400c 	str.w	r4, [ip, #12]
  gpiop->ODR     = config->odr;
 8004566:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800456a:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800456e:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004572:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004576:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800457a:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800457e:	f8ce 400c 	str.w	r4, [lr, #12]
  gpiop->ODR     = config->odr;
 8004582:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8004586:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800458a:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800458e:	f8ce 4000 	str.w	r4, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004592:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004594:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004596:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8004598:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800459a:	6204      	str	r4, [r0, #32]
  i2cp->config = NULL;
 800459c:	604c      	str	r4, [r1, #4]
  gpiop->AFRH    = config->afrh;
 800459e:	6244      	str	r4, [r0, #36]	; 0x24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80045a0:	614c      	str	r4, [r1, #20]
  gpiop->MODER   = config->moder;
 80045a2:	6004      	str	r4, [r0, #0]

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80045a4:	4855      	ldr	r0, [pc, #340]	; (80046fc <main+0x36c>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80045a6:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <main+0x384>)
 80045a8:	634a      	str	r2, [r1, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80045aa:	4602      	mov	r2, r0
 80045ac:	3248      	adds	r2, #72	; 0x48
 80045ae:	630a      	str	r2, [r1, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80045b0:	f101 020c 	add.w	r2, r1, #12
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80045b4:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004774 <main+0x3e4>
 80045b8:	60ca      	str	r2, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 80045ba:	610a      	str	r2, [r1, #16]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80045bc:	2201      	movs	r2, #1
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80045be:	700a      	strb	r2, [r1, #0]
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 80045c0:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8004778 <main+0x3e8>

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80045c4:	62c8      	str	r0, [r1, #44]	; 0x2c
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80045c6:	61cc      	str	r4, [r1, #28]
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80045c8:	4953      	ldr	r1, [pc, #332]	; (8004718 <main+0x388>)
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80045ca:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800477c <main+0x3ec>
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 80045ce:	f8cb 100c 	str.w	r1, [fp, #12]
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 80045d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045d6:	f8c9 100c 	str.w	r1, [r9, #12]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80045da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 80045de:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004780 <main+0x3f0>
 80045e2:	f8ca 100c 	str.w	r1, [sl, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80045e6:	484d      	ldr	r0, [pc, #308]	; (800471c <main+0x38c>)
 80045e8:	494d      	ldr	r1, [pc, #308]	; (8004720 <main+0x390>)
 80045ea:	f8df e198 	ldr.w	lr, [pc, #408]	; 8004784 <main+0x3f4>
 80045ee:	f88b 2000 	strb.w	r2, [fp]
 80045f2:	f889 2000 	strb.w	r2, [r9]
 80045f6:	46a8      	mov	r8, r5
  gptp->config = NULL;
 80045f8:	f8cb 4004 	str.w	r4, [fp, #4]
 80045fc:	f8c9 4004 	str.w	r4, [r9, #4]

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
  PWMD8.tim = STM32_TIM8;
 8004600:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004788 <main+0x3f8>
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8004604:	f88a 2000 	strb.w	r2, [sl]
#endif

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8004608:	f04f 0906 	mov.w	r9, #6
 800460c:	f88c 2000 	strb.w	r2, [ip]
 8004610:	60c8      	str	r0, [r1, #12]
 8004612:	f88c 9010 	strb.w	r9, [ip, #16]
  PWMD8.tim = STM32_TIM8;
 8004616:	f8cc b018 	str.w	fp, [ip, #24]
  gptp->config = NULL;
 800461a:	f8ca 4004 	str.w	r4, [sl, #4]

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
  PWMD9.tim = STM32_TIM9;
 800461e:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8004622:	f04f 0a02 	mov.w	sl, #2
  pwmp->config   = NULL;
 8004626:	f8cc 4004 	str.w	r4, [ip, #4]
  pwmp->enabled  = 0;
 800462a:	f8cc 400c 	str.w	r4, [ip, #12]
 800462e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800478c <main+0x3fc>
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004632:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8004790 <main+0x400>
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8004636:	700a      	strb	r2, [r1, #0]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8004638:	f88e 2000 	strb.w	r2, [lr]
 800463c:	f88e a010 	strb.w	sl, [lr, #16]
  gptp->config = NULL;
 8004640:	604c      	str	r4, [r1, #4]
  pwmp->config   = NULL;
 8004642:	f8ce 4004 	str.w	r4, [lr, #4]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8004646:	4937      	ldr	r1, [pc, #220]	; (8004724 <main+0x394>)
  pwmp->enabled  = 0;
 8004648:	f8ce 400c 	str.w	r4, [lr, #12]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800464c:	f105 0a74 	add.w	sl, r5, #116	; 0x74
  PWMD9.tim = STM32_TIM9;
 8004650:	f8ce 0018 	str.w	r0, [lr, #24]
 8004654:	f848 9b04 	str.w	r9, [r8], #4
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8004658:	4828      	ldr	r0, [pc, #160]	; (80046fc <main+0x36c>)
  oqp->q_notify  = onfy;
 800465a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8004794 <main+0x404>
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800465e:	f8ac 6000 	strh.w	r6, [ip]
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
  SD4.usart = UART4;
 8004662:	f8df e134 	ldr.w	lr, [pc, #308]	; 8004798 <main+0x408>
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004666:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800466a:	f105 0c0c 	add.w	ip, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800466e:	f105 0a54 	add.w	sl, r5, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8004672:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8004676:	f105 0964 	add.w	r9, r5, #100	; 0x64

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 800467a:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800467e:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8004682:	f8c5 8004 	str.w	r8, [r5, #4]
 8004686:	f105 0e30 	add.w	lr, r5, #48	; 0x30
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 800468a:	f100 0824 	add.w	r8, r0, #36	; 0x24
 800468e:	f8c5 c00c 	str.w	ip, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 8004692:	f8c5 c010 	str.w	ip, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8004696:	f8c5 a018 	str.w	sl, [r5, #24]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800469a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800479c <main+0x40c>
  iqp->q_rdptr   = bp;
 800469e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80046a2:	f8c5 a020 	str.w	sl, [r5, #32]
  iqp->q_top     = bp + size;
 80046a6:	f8c5 901c 	str.w	r9, [r5, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80046aa:	f101 0a0c 	add.w	sl, r1, #12
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80046ae:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80046b2:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80046b6:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80046ba:	481b      	ldr	r0, [pc, #108]	; (8004728 <main+0x398>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80046bc:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80047a0 <main+0x410>
 80046c0:	700a      	strb	r2, [r1, #0]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80046c2:	722a      	strb	r2, [r5, #8]
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80046c4:	61c8      	str	r0, [r1, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 80046c6:	f8c1 8020 	str.w	r8, [r1, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 80046ca:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80046ce:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 80046d2:	f8c1 a00c 	str.w	sl, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 80046d6:	f8c1 a010 	str.w	sl, [r1, #16]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80046da:	616c      	str	r4, [r5, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80046dc:	f8c5 e030 	str.w	lr, [r5, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80046e0:	63ab      	str	r3, [r5, #56]	; 0x38
  tqp->p_prev = (thread_t *)tqp;
 80046e2:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  spip->config = NULL;
 80046e6:	604c      	str	r4, [r1, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80046e8:	608c      	str	r4, [r1, #8]
 80046ea:	614c      	str	r4, [r1, #20]
 80046ec:	e05a      	b.n	80047a4 <main+0x414>
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	2000ceb8 	.word	0x2000ceb8
 80046fc:	08006cb0 	.word	0x08006cb0
 8004700:	2000bc30 	.word	0x2000bc30
 8004704:	40026400 	.word	0x40026400
 8004708:	40020800 	.word	0x40020800
 800470c:	2000dbf0 	.word	0x2000dbf0
 8004710:	20002da4 	.word	0x20002da4
 8004714:	40005400 	.word	0x40005400
 8004718:	40010000 	.word	0x40010000
 800471c:	40000800 	.word	0x40000800
 8004720:	2000dbd8 	.word	0x2000dbd8
 8004724:	2000d04c 	.word	0x2000d04c
 8004728:	40003800 	.word	0x40003800
 800472c:	40026000 	.word	0x40026000
 8004730:	40020000 	.word	0x40020000
 8004734:	40150000 	.word	0x40150000
 8004738:	40020400 	.word	0x40020400
 800473c:	40020c00 	.word	0x40020c00
 8004740:	40021000 	.word	0x40021000
 8004744:	000aa770 	.word	0x000aa770
 8004748:	2aa8aaa8 	.word	0x2aa8aaa8
 800474c:	55514015 	.word	0x55514015
 8004750:	22220000 	.word	0x22220000
 8004754:	55550044 	.word	0x55550044
 8004758:	aa0aaa80 	.word	0xaa0aaa80
 800475c:	54400554 	.word	0x54400554
 8004760:	02aaa001 	.word	0x02aaa001
 8004764:	aa555055 	.word	0xaa555055
 8004768:	40021800 	.word	0x40021800
 800476c:	55000100 	.word	0x55000100
 8004770:	50082840 	.word	0x50082840
 8004774:	2000bcb0 	.word	0x2000bcb0
 8004778:	2000da38 	.word	0x2000da38
 800477c:	2000d14c 	.word	0x2000d14c
 8004780:	2000da1c 	.word	0x2000da1c
 8004784:	20002d60 	.word	0x20002d60
 8004788:	40010400 	.word	0x40010400
 800478c:	08006c50 	.word	0x08006c50
 8004790:	2000bcc0 	.word	0x2000bcc0
 8004794:	08001091 	.word	0x08001091
 8004798:	40004c00 	.word	0x40004c00
 800479c:	00010016 	.word	0x00010016
 80047a0:	00010046 	.word	0x00010046
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80047a4:	62ac      	str	r4, [r5, #40]	; 0x28
  iqp->q_link    = link;
 80047a6:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80047a8:	652d      	str	r5, [r5, #80]	; 0x50
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80047aa:	f8c1 902c 	str.w	r9, [r1, #44]	; 0x2c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80047ae:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80047b2:	f8df b384 	ldr.w	fp, [pc, #900]	; 8004b38 <main+0x7a8>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80047b6:	49c3      	ldr	r1, [pc, #780]	; (8004ac4 <main+0x734>)
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80047b8:	f8df e380 	ldr.w	lr, [pc, #896]	; 8004b3c <main+0x7ac>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80047bc:	f8df 9380 	ldr.w	r9, [pc, #896]	; 8004b40 <main+0x7b0>
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80047c0:	f8df a380 	ldr.w	sl, [pc, #896]	; 8004b44 <main+0x7b4>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80047c4:	48c0      	ldr	r0, [pc, #768]	; (8004ac8 <main+0x738>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80047c6:	f8df c380 	ldr.w	ip, [pc, #896]	; 8004b48 <main+0x7b8>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80047ca:	f048 0808 	orr.w	r8, r8, #8
 80047ce:	f8c7 8040 	str.w	r8, [r7, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80047d2:	f8db 8008 	ldr.w	r8, [fp, #8]
 80047d6:	f048 0808 	orr.w	r8, r8, #8
 80047da:	f8cb 8008 	str.w	r8, [fp, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80047de:	f242 08cf 	movw	r8, #8399	; 0x20cf
 80047e2:	f8c1 8028 	str.w	r8, [r1, #40]	; 0x28
 80047e6:	f04f 0b80 	mov.w	fp, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047ea:	f44f 2880 	mov.w	r8, #262144	; 0x40000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80047ee:	62ce      	str	r6, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80047f0:	618c      	str	r4, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80047f2:	634c      	str	r4, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80047f4:	60cc      	str	r4, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 80047f6:	604c      	str	r4, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80047f8:	614a      	str	r2, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80047fa:	600a      	str	r2, [r1, #0]
 80047fc:	9203      	str	r2, [sp, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80047fe:	f889 b332 	strb.w	fp, [r9, #818]	; 0x332
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004802:	f8c9 8184 	str.w	r8, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004806:	f8c9 8004 	str.w	r8, [r9, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800480a:	f8ce 4008 	str.w	r4, [lr, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800480e:	f8de b00c 	ldr.w	fp, [lr, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004812:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8004afc <main+0x76c>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8004816:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800481a:	ea0b 0101 	and.w	r1, fp, r1
  reg_value  =  (reg_value                                   |
 800481e:	ea41 0a0a 	orr.w	sl, r1, sl
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8004822:	f8ce a00c 	str.w	sl, [lr, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004826:	68c1      	ldr	r1, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8004828:	f8c8 8004 	str.w	r8, [r8, #4]
 800482c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004830:	60c1      	str	r1, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004832:	f8dc 0000 	ldr.w	r0, [ip]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8004836:	f8c8 4008 	str.w	r4, [r8, #8]
 800483a:	4310      	orrs	r0, r2
 800483c:	f8cc 0000 	str.w	r0, [ip]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8004840:	f108 011c 	add.w	r1, r8, #28
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004844:	f88e 301f 	strb.w	r3, [lr, #31]
 8004848:	f04f 0a00 	mov.w	sl, #0
 800484c:	f04f 0b00 	mov.w	fp, #0
 8004850:	f04f 0320 	mov.w	r3, #32
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004854:	a804      	add	r0, sp, #16
 8004856:	f88e 3022 	strb.w	r3, [lr, #34]	; 0x22
 800485a:	f8c8 101c 	str.w	r1, [r8, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800485e:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8004862:	f8c8 8010 	str.w	r8, [r8, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004866:	f8c8 8000 	str.w	r8, [r8]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800486a:	f8c8 8014 	str.w	r8, [r8, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800486e:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8004872:	f8c8 1020 	str.w	r1, [r8, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004876:	9604      	str	r6, [sp, #16]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8004878:	f8c8 44a0 	str.w	r4, [r8, #1184]	; 0x4a0
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800487c:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 800487e:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8004880:	9407      	str	r4, [sp, #28]
  tmp->cumulative = (rttime_t)0;
 8004882:	e9cd ab08 	strd	sl, fp, [sp, #32]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8004886:	f7ff f85b 	bl	8003940 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800488a:	a804      	add	r0, sp, #16
 800488c:	f7ff f820 	bl	80038d0 <chTMStopMeasurementX>

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004890:	f508 6e98 	add.w	lr, r8, #1216	; 0x4c0
 8004894:	e9ce ab00 	strd	sl, fp, [lr]
 8004898:	f508 6e9b 	add.w	lr, r8, #1240	; 0x4d8
 800489c:	e9ce ab00 	strd	sl, fp, [lr]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80048a0:	488a      	ldr	r0, [pc, #552]	; (8004acc <main+0x73c>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80048a2:	498b      	ldr	r1, [pc, #556]	; (8004ad0 <main+0x740>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80048a4:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <main+0x744>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80048a6:	f8d8 c014 	ldr.w	ip, [r8, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80048aa:	9a03      	ldr	r2, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80048ac:	f8c8 64b0 	str.w	r6, [r8, #1200]	; 0x4b0
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80048b0:	f108 0e40 	add.w	lr, r8, #64	; 0x40
 80048b4:	f8c8 e03c 	str.w	lr, [r8, #60]	; 0x3c
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80048b8:	f8df e290 	ldr.w	lr, [pc, #656]	; 8004b4c <main+0x7bc>
 80048bc:	f8c8 64c8 	str.w	r6, [r8, #1224]	; 0x4c8
 80048c0:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80048c4:	f021 0107 	bic.w	r1, r1, #7
 80048c8:	9102      	str	r1, [sp, #8]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80048ca:	f8ce 0000 	str.w	r0, [lr]
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
  chTMStopMeasurementX(&tm);
  ch.tm.offset = tm.last;
 80048ce:	9906      	ldr	r1, [sp, #24]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80048d0:	4881      	ldr	r0, [pc, #516]	; (8004ad8 <main+0x748>)
 80048d2:	f8c8 14a0 	str.w	r1, [r8, #1184]	; 0x4a0
 80048d6:	9902      	ldr	r1, [sp, #8]
 80048d8:	6001      	str	r1, [r0, #0]
 80048da:	f103 0010 	add.w	r0, r3, #16
 80048de:	497f      	ldr	r1, [pc, #508]	; (8004adc <main+0x74c>)
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	6118      	str	r0, [r3, #16]
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80048e4:	2140      	movs	r1, #64	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 80048e6:	6158      	str	r0, [r3, #20]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80048e8:	f508 6088 	add.w	r0, r8, #1088	; 0x440
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80048ec:	f888 2462 	strb.w	r2, [r8, #1122]	; 0x462
  default_heap.h_free.h.u.next = NULL;
 80048f0:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 80048f2:	60dc      	str	r4, [r3, #12]
 80048f4:	619c      	str	r4, [r3, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80048f6:	f508 6e8d 	add.w	lr, r8, #1128	; 0x468

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 80048fa:	4b79      	ldr	r3, [pc, #484]	; (8004ae0 <main+0x750>)
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 80048fc:	f8c8 44a8 	str.w	r4, [r8, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8004900:	f8c8 44ac 	str.w	r4, [r8, #1196]	; 0x4ac
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004904:	f8c8 44b4 	str.w	r4, [r8, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 8004908:	f8c8 44b8 	str.w	r4, [r8, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 800490c:	f8c8 44bc 	str.w	r4, [r8, #1212]	; 0x4bc
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004910:	f8c8 44cc 	str.w	r4, [r8, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 8004914:	f8c8 44d0 	str.w	r4, [r8, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 8004918:	f8c8 44d4 	str.w	r4, [r8, #1236]	; 0x4d4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800491c:	f888 4461 	strb.w	r4, [r8, #1121]	; 0x461
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8004920:	f8c8 447c 	str.w	r4, [r8, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004924:	f8c8 4478 	str.w	r4, [r8, #1144]	; 0x478
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004928:	f8c8 4458 	str.w	r4, [r8, #1112]	; 0x458
  REG_INSERT(tp);
 800492c:	f8c8 8450 	str.w	r8, [r8, #1104]	; 0x450
 8004930:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004934:	f8c8 1448 	str.w	r1, [r8, #1096]	; 0x448
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004938:	f8c8 1480 	str.w	r1, [r8, #1152]	; 0x480
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800493c:	f8c8 c454 	str.w	ip, [r8, #1108]	; 0x454
  tmp->cumulative = (rttime_t)0;
 8004940:	f508 6193 	add.w	r1, r8, #1176	; 0x498
 8004944:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004948:	f8c8 6488 	str.w	r6, [r8, #1160]	; 0x488
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800494c:	f208 466c 	addw	r6, r8, #1132	; 0x46c
 8004950:	f8c8 0014 	str.w	r0, [r8, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8004954:	f8c8 0018 	str.w	r0, [r8, #24]

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8004958:	f8c8 345c 	str.w	r3, [r8, #1116]	; 0x45c
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 800495c:	f508 6091 	add.w	r0, r8, #1160	; 0x488
  tmp->worst      = (rtcnt_t)0;
 8004960:	f8c8 448c 	str.w	r4, [r8, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 8004964:	f8c8 4490 	str.w	r4, [r8, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 8004968:	f8c8 4494 	str.w	r4, [r8, #1172]	; 0x494
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800496c:	f888 2460 	strb.w	r2, [r8, #1120]	; 0x460
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8004970:	f8c8 e468 	str.w	lr, [r8, #1128]	; 0x468
  tmp->cumulative = (rttime_t)0;
 8004974:	e9c1 ab00 	strd	sl, fp, [r1]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004978:	f8c8 646c 	str.w	r6, [r8, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 800497c:	f8c8 6470 	str.w	r6, [r8, #1136]	; 0x470
 8004980:	9202      	str	r2, [sp, #8]
  currp->p_stklimit = &__main_thread_stack_base__;
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 8004982:	f7fe ffdd 	bl	8003940 <chTMStartMeasurementX>
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004986:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800498a:	b91b      	cbnz	r3, 8004994 <main+0x604>
 800498c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8004990:	9a02      	ldr	r2, [sp, #8]
 8004992:	b123      	cbz	r3, 800499e <main+0x60e>
 8004994:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8004996:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <main+0x754>)
 8004998:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 800499c:	e7fe      	b.n	800499c <main+0x60c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800499e:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80049a2:	b662      	cpsie	i
 80049a4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80049a8:	484f      	ldr	r0, [pc, #316]	; (8004ae8 <main+0x758>)
 80049aa:	6188      	str	r0, [r1, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	f508 609c 	add.w	r0, r8, #1248	; 0x4e0
 80049b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80049b6:	4b4d      	ldr	r3, [pc, #308]	; (8004aec <main+0x75c>)
 80049b8:	f7ff fb7a 	bl	80040b0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80049bc:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <main+0x760>)
 80049be:	6183      	str	r3, [r0, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80049c0:	2320      	movs	r3, #32
 80049c2:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80049c6:	f7fe ffcb 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80049ca:	f7ff fa51 	bl	8003e70 <_dbg_check_lock>
void sdStart(SerialDriver *sdp, const SerialConfig *config) {

  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80049ce:	7a2b      	ldrb	r3, [r5, #8]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	2a01      	cmp	r2, #1
 80049d4:	d904      	bls.n	80049e0 <main+0x650>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049d6:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <main+0x764>)
 80049da:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 80049de:	e7fe      	b.n	80049de <main+0x64e>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10c      	bne.n	80049fe <main+0x66e>
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
 80049e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80049e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80049ea:	21c0      	movs	r1, #192	; 0xc0
 80049ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f0:	643b      	str	r3, [r7, #64]	; 0x40
 80049f2:	f889 1334 	strb.w	r1, [r9, #820]	; 0x334
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80049f6:	f8c9 2184 	str.w	r2, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80049fa:	f8c9 2004 	str.w	r2, [r9, #4]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 80049fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004a00:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <main+0x768>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d056      	beq.n	8004ab4 <main+0x724>
 8004a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d052      	beq.n	8004ab4 <main+0x724>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8004a0e:	f241 1217 	movw	r2, #4375	; 0x1117
 8004a12:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a14:	f242 102c 	movw	r0, #8492	; 0x212c
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a18:	f244 0240 	movw	r2, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8004a1c:	2100      	movs	r1, #0
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a1e:	2401      	movs	r4, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a20:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a22:	615c      	str	r4, [r3, #20]
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8004a24:	2202      	movs	r2, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a26:	60d8      	str	r0, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8004a28:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8004a2a:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	722a      	strb	r2, [r5, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004a30:	f7ff fa0e 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004a34:	f7fe ff7c 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004a38:	f8d8 2000 	ldr.w	r2, [r8]
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <main+0x76c>)
 8004a3e:	4542      	cmp	r2, r8
 8004a40:	d004      	beq.n	8004a4c <main+0x6bc>
 8004a42:	6999      	ldr	r1, [r3, #24]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	6889      	ldr	r1, [r1, #8]
 8004a48:	4291      	cmp	r1, r2
 8004a4a:	d337      	bcc.n	8004abc <main+0x72c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	f384 8811 	msr	BASEPRI, r4
};

void shellStart(void)
{
  sdStart(BLE, NULL);
  motors = getMotors();
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <main+0x770>)
 * @api
 */
thread_t *shellCreateStatic(const ShellConfig *scp, void *wsp,
                            size_t size, tprio_t prio) {

  return chThdCreateStatic(wsp, size, prio, shell_thread, (void *)scp);
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <main+0x774>)
 8004a56:	492c      	ldr	r1, [pc, #176]	; (8004b08 <main+0x778>)
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	482c      	ldr	r0, [pc, #176]	; (8004b0c <main+0x77c>)
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <main+0x780>)
 8004a60:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	f7ff fb23 	bl	80040b0 <chThdCreateStatic>
  halInit();
  chSysInit();

  shellStart();

  chThdCreateStatic(Test_thread_wa, sizeof(Test_thread_wa),
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <main+0x784>)
 8004a6c:	9400      	str	r4, [sp, #0]
 8004a6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004a72:	2240      	movs	r2, #64	; 0x40
 8004a74:	4828      	ldr	r0, [pc, #160]	; (8004b18 <main+0x788>)
 8004a76:	f7ff fb1b 	bl	80040b0 <chThdCreateStatic>
  NORMALPRIO,
                    Test_thread, NULL);

  chThdCreateStatic(MPU_thread_wa, sizeof(MPU_thread_wa),
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <main+0x78c>)
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	f248 1170 	movw	r1, #33136	; 0x8170
 8004a82:	2245      	movs	r2, #69	; 0x45
 8004a84:	4826      	ldr	r0, [pc, #152]	; (8004b20 <main+0x790>)
 8004a86:	f7ff fb13 	bl	80040b0 <chThdCreateStatic>
  NORMALPRIO + 5,
                    MPU_thread, NULL);

  chThdCreateStatic(TFT_thread_wa, sizeof(TFT_thread_wa),
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <main+0x794>)
 8004a8c:	9400      	str	r4, [sp, #0]
 8004a8e:	f241 1170 	movw	r1, #4464	; 0x1170
 8004a92:	223b      	movs	r2, #59	; 0x3b
 8004a94:	4824      	ldr	r0, [pc, #144]	; (8004b28 <main+0x798>)
 8004a96:	f7ff fb0b 	bl	80040b0 <chThdCreateStatic>
  NORMALPRIO - 5,
                    TFT_thread, NULL);

  chThdCreateStatic(Motor_thread_wa, sizeof(Motor_thread_wa),
 8004a9a:	9400      	str	r4, [sp, #0]
 8004a9c:	4823      	ldr	r0, [pc, #140]	; (8004b2c <main+0x79c>)
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <main+0x7a0>)
 8004aa0:	f241 1170 	movw	r1, #4464	; 0x1170
 8004aa4:	2241      	movs	r2, #65	; 0x41
 8004aa6:	f7ff fb03 	bl	80040b0 <chThdCreateStatic>
  NORMALPRIO + 1,
                    Motor_thread, NULL);

  while (true) {
    //chprintf(chp,"Serial OK\n");
    chThdSleepMilliseconds(500);
 8004aaa:	f241 3088 	movw	r0, #5000	; 0x1388
 8004aae:	f7ff facf 	bl	8004050 <chThdSleep>
 8004ab2:	e7fa      	b.n	8004aaa <main+0x71a>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8004ab4:	f242 222e 	movw	r2, #8750	; 0x222e
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	e7ab      	b.n	8004a14 <main+0x684>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004abc:	b672      	cpsid	i
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <main+0x7a4>)
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ac2:	e7fe      	b.n	8004ac2 <main+0x732>
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	e000edf0 	.word	0xe000edf0
 8004acc:	2000ddc7 	.word	0x2000ddc7
 8004ad0:	20020000 	.word	0x20020000
 8004ad4:	20002d80 	.word	0x20002d80
 8004ad8:	20002da0 	.word	0x20002da0
 8004adc:	080033b1 	.word	0x080033b1
 8004ae0:	20000400 	.word	0x20000400
 8004ae4:	08006de8 	.word	0x08006de8
 8004ae8:	08006d80 	.word	0x08006d80
 8004aec:	080038a1 	.word	0x080038a1
 8004af0:	08006df0 	.word	0x08006df0
 8004af4:	08006d70 	.word	0x08006d70
 8004af8:	40011000 	.word	0x40011000
 8004afc:	2000d228 	.word	0x2000d228
 8004b00:	2000b148 	.word	0x2000b148
 8004b04:	08006dc0 	.word	0x08006dc0
 8004b08:	20000824 	.word	0x20000824
 8004b0c:	2000b150 	.word	0x2000b150
 8004b10:	08001a61 	.word	0x08001a61
 8004b14:	08001d41 	.word	0x08001d41
 8004b18:	2000af98 	.word	0x2000af98
 8004b1c:	080021c1 	.word	0x080021c1
 8004b20:	20002e20 	.word	0x20002e20
 8004b24:	08005711 	.word	0x08005711
 8004b28:	2000bd48 	.word	0x2000bd48
 8004b2c:	20001bf0 	.word	0x20001bf0
 8004b30:	08004b51 	.word	0x08004b51
 8004b34:	08006da0 	.word	0x08006da0
 8004b38:	e0042000 	.word	0xe0042000
 8004b3c:	e000ed00 	.word	0xe000ed00
 8004b40:	e000e100 	.word	0xe000e100
 8004b44:	05fa0300 	.word	0x05fa0300
 8004b48:	e0001000 	.word	0xe0001000
 8004b4c:	20002d7c 	.word	0x20002d7c

08004b50 <Motor_thread>:
  }
}

static THD_WORKING_AREA(Motor_thread_wa, 4096);
static THD_FUNCTION(Motor_thread, p)
{
 8004b50:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8004b52:	4d4e      	ldr	r5, [pc, #312]	; (8004c8c <Motor_thread+0x13c>)
 8004b54:	494e      	ldr	r1, [pc, #312]	; (8004c90 <Motor_thread+0x140>)
 8004b56:	69ab      	ldr	r3, [r5, #24]
  (void)p;
  chRegSetThreadName("Motor Control");

  motors = getMotors();
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <Motor_thread+0x144>)
 8004b5a:	6199      	str	r1, [r3, #24]
  }
}

static THD_WORKING_AREA(Motor_thread_wa, 4096);
static THD_FUNCTION(Motor_thread, p)
{
 8004b5c:	b082      	sub	sp, #8
  return motors;
}

inline void motor_init(void)
{
  chThdCreateStatic(Hall_thread_wa, sizeof(Hall_thread_wa),
 8004b5e:	2400      	movs	r4, #0
  (void)p;
  chRegSetThreadName("Motor Control");

  motors = getMotors();
 8004b60:	494d      	ldr	r1, [pc, #308]	; (8004c98 <Motor_thread+0x148>)
 8004b62:	9400      	str	r4, [sp, #0]
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <Motor_thread+0x14c>)
 8004b66:	6011      	str	r1, [r2, #0]
 8004b68:	484d      	ldr	r0, [pc, #308]	; (8004ca0 <Motor_thread+0x150>)
 8004b6a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8004b6e:	2245      	movs	r2, #69	; 0x45
 8004b70:	f7ff fa9e 	bl	80040b0 <chThdCreateStatic>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004b74:	2320      	movs	r3, #32
 8004b76:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8004b7a:	f7fe fef1 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004b7e:	f7ff f977 	bl	8003e70 <_dbg_check_lock>
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {

  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <Motor_thread+0x154>)
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	1e51      	subs	r1, r2, #1
 8004b88:	2901      	cmp	r1, #1
 8004b8a:	d903      	bls.n	8004b94 <Motor_thread+0x44>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8c:	b672      	cpsid	i
 8004b8e:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <Motor_thread+0x158>)
 8004b90:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004b92:	e7fe      	b.n	8004b92 <Motor_thread+0x42>
                "invalid state");
  pwmp->config = config;
 8004b94:	4945      	ldr	r1, [pc, #276]	; (8004cac <Motor_thread+0x15c>)
 8004b96:	6059      	str	r1, [r3, #4]
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004b98:	2a01      	cmp	r2, #1
  pwmp->period = config->period;
 8004b9a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004b9e:	6099      	str	r1, [r3, #8]
 8004ba0:	d019      	beq.n	8004bd6 <Motor_thread+0x86>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	6014      	str	r4, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8004ba6:	6354      	str	r4, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8004ba8:	6394      	str	r4, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8004baa:	63d4      	str	r4, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8004bac:	6414      	str	r4, [r2, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8004bae:	6254      	str	r4, [r2, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004bb0:	6958      	ldr	r0, [r3, #20]
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <Motor_thread+0x160>)
 8004bb4:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <Motor_thread+0x154>)
 8004bb6:	fba3 1300 	umull	r1, r3, r3, r0
 8004bba:	0e5b      	lsrs	r3, r3, #25
 8004bbc:	1e5c      	subs	r4, r3, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 8004bbe:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004bc2:	d204      	bcs.n	8004bce <Motor_thread+0x7e>
 8004bc4:	493b      	ldr	r1, [pc, #236]	; (8004cb4 <Motor_thread+0x164>)
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4298      	cmp	r0, r3
 8004bcc:	d028      	beq.n	8004c20 <Motor_thread+0xd0>
 8004bce:	b672      	cpsid	i
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <Motor_thread+0x168>)
 8004bd2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004bd4:	e7fe      	b.n	8004bd4 <Motor_thread+0x84>
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8004bd6:	4939      	ldr	r1, [pc, #228]	; (8004cbc <Motor_thread+0x16c>)
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8004bd8:	4f39      	ldr	r7, [pc, #228]	; (8004cc0 <Motor_thread+0x170>)
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8004bda:	6c48      	ldr	r0, [r1, #68]	; 0x44
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004bdc:	699e      	ldr	r6, [r3, #24]
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8004bde:	615f      	str	r7, [r3, #20]
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8004be0:	f040 0002 	orr.w	r0, r0, #2
 8004be4:	6448      	str	r0, [r1, #68]	; 0x44
      rccResetTIM8();
 8004be6:	6a48      	ldr	r0, [r1, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004be8:	4a36      	ldr	r2, [pc, #216]	; (8004cc4 <Motor_thread+0x174>)
 8004bea:	f04f 0c70 	mov.w	ip, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004bee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8004bf2:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004bf6:	f646 0768 	movw	r7, #26728	; 0x6868
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
      rccResetTIM8();
 8004bfa:	f040 0002 	orr.w	r0, r0, #2
 8004bfe:	6248      	str	r0, [r1, #36]	; 0x24
 8004c00:	624c      	str	r4, [r1, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004c02:	f882 c32c 	strb.w	ip, [r2, #812]	; 0x32c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004c06:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004c0a:	f8c2 8004 	str.w	r8, [r2, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004c0e:	f882 c32e 	strb.w	ip, [r2, #814]	; 0x32e
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004c12:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004c16:	f8c2 e004 	str.w	lr, [r2, #4]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004c1a:	61b7      	str	r7, [r6, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8004c1c:	61f7      	str	r7, [r6, #28]
 8004c1e:	e7c7      	b.n	8004bb0 <Motor_thread+0x60>
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004c20:	6891      	ldr	r1, [r2, #8]
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004c22:	6993      	ldr	r3, [r2, #24]
  pwmp->tim->ARR  = pwmp->period - 1;
 8004c24:	1e48      	subs	r0, r1, #1
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004c26:	f241 1c11 	movw	ip, #4369	; 0x1111
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004c2a:	2100      	movs	r1, #0
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004c2c:	f04f 0e01 	mov.w	lr, #1
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8004c30:	f44f 4700 	mov.w	r7, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004c34:	2685      	movs	r6, #133	; 0x85
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004c36:	629c      	str	r4, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8004c38:	62d8      	str	r0, [r3, #44]	; 0x2c
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8004c3a:	2402      	movs	r4, #2
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004c3c:	6059      	str	r1, [r3, #4]
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004c3e:	f8c3 c020 	str.w	ip, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004c42:	f8c3 e014 	str.w	lr, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004c46:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004c48:	60d9      	str	r1, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8004c4a:	645f      	str	r7, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004c4c:	601e      	str	r6, [r3, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8004c4e:	60d1      	str	r1, [r2, #12]
  pwmp->state = PWM_READY;
 8004c50:	7014      	strb	r4, [r2, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004c52:	f7ff f8fd 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004c56:	f7fe fe6b 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004c5a:	682a      	ldr	r2, [r5, #0]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <Motor_thread+0x13c>)
 8004c5e:	42aa      	cmp	r2, r5
 8004c60:	d004      	beq.n	8004c6c <Motor_thread+0x11c>
 8004c62:	6999      	ldr	r1, [r3, #24]
 8004c64:	6892      	ldr	r2, [r2, #8]
 8004c66:	6889      	ldr	r1, [r1, #8]
 8004c68:	4291      	cmp	r1, r2
 8004c6a:	d30a      	bcc.n	8004c82 <Motor_thread+0x132>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f383 8811 	msr	BASEPRI, r3
  NORMALPRIO + 5,
                    Hall_thread, NULL);

  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);
  motor_pwmUpdate();
 8004c72:	f000 fa35 	bl	80050e0 <motor_pwmUpdate>
  motor_init();
  while(true)
  {
    motor_pwmUpdate();
 8004c76:	f000 fa33 	bl	80050e0 <motor_pwmUpdate>
    chThdSleepMilliseconds(20);
 8004c7a:	20c8      	movs	r0, #200	; 0xc8
 8004c7c:	f7ff f9e8 	bl	8004050 <chThdSleep>
 8004c80:	e7f9      	b.n	8004c76 <Motor_thread+0x126>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c82:	b672      	cpsid	i
 8004c84:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <Motor_thread+0x178>)
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c88:	e7fe      	b.n	8004c88 <Motor_thread+0x138>
 8004c8a:	bf00      	nop
 8004c8c:	2000d228 	.word	0x2000d228
 8004c90:	08006df8 	.word	0x08006df8
 8004c94:	2000af90 	.word	0x2000af90
 8004c98:	20000824 	.word	0x20000824
 8004c9c:	08004db1 	.word	0x08004db1
 8004ca0:	2000b6c0 	.word	0x2000b6c0
 8004ca4:	2000da1c 	.word	0x2000da1c
 8004ca8:	08006c20 	.word	0x08006c20
 8004cac:	08006c70 	.word	0x08006c70
 8004cb0:	6642d929 	.word	0x6642d929
 8004cb4:	0501bd00 	.word	0x0501bd00
 8004cb8:	08006c40 	.word	0x08006c40
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	0a037a00 	.word	0x0a037a00
 8004cc4:	e000e100 	.word	0xe000e100
 8004cc8:	08006c30 	.word	0x08006c30
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <Hall_update>:
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 8004cd0:	6803      	ldr	r3, [r0, #0]

  Hall->count += ((Hall->reverse)?
 8004cd2:	7942      	ldrb	r2, [r0, #5]
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 8004cd4:	68d9      	ldr	r1, [r3, #12]
 8004cd6:	6a4b      	ldr	r3, [r1, #36]	; 0x24

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
 8004cd8:	b410      	push	{r4}
  uint16_t count = Hall->Timer->tim->CNT;
 8004cda:	b29b      	uxth	r3, r3

  Hall->count += ((Hall->reverse)?
 8004cdc:	6884      	ldr	r4, [r0, #8]
 8004cde:	b1a2      	cbz	r2, 8004d0a <Hall_update+0x3a>
 8004ce0:	8982      	ldrh	r2, [r0, #12]
 8004ce2:	1a9a      	subs	r2, r3, r2
 8004ce4:	4422      	add	r2, r4
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
 8004ce6:	f24f 542f 	movw	r4, #62767	; 0xf52f
 8004cea:	42a3      	cmp	r3, r4

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 8004cec:	6082      	str	r2, [r0, #8]
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;
 8004cee:	8183      	strh	r3, [r0, #12]

  if(count > HALL_UPPER_LIMIT)
 8004cf0:	d80e      	bhi.n	8004d10 <Hall_update+0x40>
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
  }
  else if (count < HALL_LOWER_LIMIT)
 8004cf2:	f640 22ce 	movw	r2, #2766	; 0xace
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d804      	bhi.n	8004d04 <Hall_update+0x34>
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
 8004cfa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004cfe:	3330      	adds	r3, #48	; 0x30
 8004d00:	624b      	str	r3, [r1, #36]	; 0x24
    Hall->count_prev += HALL_RANGE;
 8004d02:	8183      	strh	r3, [r0, #12]
  }
}
 8004d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d08:	4770      	bx	lr

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 8004d0a:	8982      	ldrh	r2, [r0, #12]
 8004d0c:	1ad2      	subs	r2, r2, r3
 8004d0e:	e7e9      	b.n	8004ce4 <Hall_update+0x14>

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
 8004d10:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8004d14:	3b30      	subs	r3, #48	; 0x30
 8004d16:	624b      	str	r3, [r1, #36]	; 0x24
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 8004d18:	f85d 4b04 	ldr.w	r4, [sp], #4
  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
 8004d1c:	8183      	strh	r3, [r0, #12]
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 8004d1e:	4770      	bx	lr

08004d20 <RC_thread.lto_priv.100>:
  rc_channel[2] = RC_GPT.tim->CCR[3];
}

static THD_WORKING_AREA(RC_thread_wa, 64);
static THD_FUNCTION(RC_thread, p)
{
 8004d20:	b508      	push	{r3, lr}
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <RC_thread.lto_priv.100+0x28>)
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <RC_thread.lto_priv.100+0x2c>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	4d09      	ldr	r5, [pc, #36]	; (8004d50 <RC_thread.lto_priv.100+0x30>)
 8004d2a:	4c0a      	ldr	r4, [pc, #40]	; (8004d54 <RC_thread.lto_priv.100+0x34>)
 8004d2c:	619a      	str	r2, [r3, #24]
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004d2e:	68eb      	ldr	r3, [r5, #12]
  chRegSetThreadName("Radio control");

  while (true)
  {
    rc_update();
    chThdSleepMilliseconds(200);
 8004d30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
  rc_channel[1] = RC_GPT.tim->CCR[2];
 8004d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  rc_channel[2] = RC_GPT.tim->CCR[3];
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  0
};

static void rc_update(void)
{
  rc_channel[0] = RC_GPT.tim->CCR[0];
 8004d3a:	8021      	strh	r1, [r4, #0]
  rc_channel[1] = RC_GPT.tim->CCR[2];
 8004d3c:	8062      	strh	r2, [r4, #2]
  rc_channel[2] = RC_GPT.tim->CCR[3];
 8004d3e:	80a3      	strh	r3, [r4, #4]
  chRegSetThreadName("Radio control");

  while (true)
  {
    rc_update();
    chThdSleepMilliseconds(200);
 8004d40:	f7ff f986 	bl	8004050 <chThdSleep>
 8004d44:	e7f3      	b.n	8004d2e <RC_thread.lto_priv.100+0xe>
 8004d46:	bf00      	nop
 8004d48:	2000d228 	.word	0x2000d228
 8004d4c:	08006eb0 	.word	0x08006eb0
 8004d50:	2000da38 	.word	0x2000da38
 8004d54:	2000dbe8 	.word	0x2000dbe8
	...

08004d60 <Hall_init>:
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 8004d60:	b538      	push	{r3, r4, r5, lr}
  GPTDriver* Hall_GPT = Hall->Timer;
 8004d62:	6805      	ldr	r5, [r0, #0]

  gptStart(Hall_GPT, &hall_cfg);
 8004d64:	4911      	ldr	r1, [pc, #68]	; (8004dac <Hall_init+0x4c>)
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 8004d66:	4604      	mov	r4, r0
  GPTDriver* Hall_GPT = Hall->Timer;

  gptStart(Hall_GPT, &hall_cfg);
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7fe fa49 	bl	8003200 <gptStart>

  if (HALL_USE_CHANNEL1_2)
  {
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(1);
 8004d6e:	68eb      	ldr	r3, [r5, #12]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC2S(1);
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7e:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC1F(8);
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d86:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC2F(8);
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d8e:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 8004d90:	689a      	ldr	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 8004d92:	f647 71ff 	movw	r1, #32767	; 0x7fff
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 8004d96:	f042 0203 	orr.w	r2, r2, #3
 8004d9a:	609a      	str	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 8004d9c:	6259      	str	r1, [r3, #36]	; 0x24
  Hall->count_prev = HALL_INITIAL_VALUE;

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 8004d9e:	681a      	ldr	r2, [r3, #0]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
  Hall->count_prev = HALL_INITIAL_VALUE;
 8004da0:	81a1      	strh	r1, [r4, #12]

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	08006ea0 	.word	0x08006ea0

08004db0 <Hall_thread.lto_priv.84>:
 8004db0:	4b30      	ldr	r3, [pc, #192]	; (8004e74 <Hall_thread.lto_priv.84+0xc4>)
 8004db2:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <Hall_thread.lto_priv.84+0xc8>)
 8004db4:	699b      	ldr	r3, [r3, #24]
static THD_FUNCTION(Hall_thread, p)
{
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 8004db6:	4831      	ldr	r0, [pc, #196]	; (8004e7c <Hall_thread.lto_priv.84+0xcc>)
 8004db8:	4e31      	ldr	r6, [pc, #196]	; (8004e80 <Hall_thread.lto_priv.84+0xd0>)
 8004dba:	4d32      	ldr	r5, [pc, #200]	; (8004e84 <Hall_thread.lto_priv.84+0xd4>)
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
}

static THD_FUNCTION(Hall_thread, p)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	619a      	str	r2, [r3, #24]
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 8004dc0:	f7ff ffce 	bl	8004d60 <Hall_init>
  Hall_init(hall_encoder + 1);
 8004dc4:	4830      	ldr	r0, [pc, #192]	; (8004e88 <Hall_thread.lto_priv.84+0xd8>)
 8004dc6:	f7ff ffcb 	bl	8004d60 <Hall_init>
 8004dca:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004dcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  uint32_t count,tick = chVTGetSystemTimeX();

  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);
 8004dce:	37c8      	adds	r7, #200	; 0xc8

    if(tick>chVTGetSystemTimeX())
 8004dd0:	42bb      	cmp	r3, r7
 8004dd2:	f105 042a 	add.w	r4, r5, #42	; 0x2a
 8004dd6:	d349      	bcc.n	8004e6c <Hall_thread.lto_priv.84+0xbc>
 8004dd8:	6a77      	ldr	r7, [r6, #36]	; 0x24
    else
      tick=chVTGetSystemTimeX();

    uint16_t prev[NUM_OF_MOTOR];

    prev[0] = motors[0].Hall_Encoder->count;
 8004dda:	682a      	ldr	r2, [r5, #0]
    prev[1] = motors[1].Hall_Encoder->count;
 8004ddc:	6b6b      	ldr	r3, [r5, #52]	; 0x34

    Hall_update(hall_encoder);
 8004dde:	4827      	ldr	r0, [pc, #156]	; (8004e7c <Hall_thread.lto_priv.84+0xcc>)
    else
      tick=chVTGetSystemTimeX();

    uint16_t prev[NUM_OF_MOTOR];

    prev[0] = motors[0].Hall_Encoder->count;
 8004de0:	f8b2 a008 	ldrh.w	sl, [r2, #8]
    prev[1] = motors[1].Hall_Encoder->count;
 8004de4:	f8b3 9008 	ldrh.w	r9, [r3, #8]

    Hall_update(hall_encoder);
 8004de8:	f7ff ff72 	bl	8004cd0 <Hall_update>
    Hall_update(hall_encoder + 1);
 8004dec:	4826      	ldr	r0, [pc, #152]	; (8004e88 <Hall_thread.lto_priv.84+0xd8>)
 8004dee:	f7ff ff6f 	bl	8004cd0 <Hall_update>

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <Hall_thread.lto_priv.84+0xdc>)
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8004df4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004df6:	6829      	ldr	r1, [r5, #0]
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8004df8:	6898      	ldr	r0, [r3, #8]
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004dfa:	6889      	ldr	r1, [r1, #8]
    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
      prev[1];

    uint8_t i;

    temp[0] = 0.0f;
 8004dfc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004e90 <Hall_thread.lto_priv.84+0xe0>
 8004e00:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <Hall_thread.lto_priv.84+0xe4>)
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004e02:	fba2 e208 	umull	lr, r2, r2, r8
 8004e06:	08d2      	lsrs	r2, r2, #3
 8004e08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e0c:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
 8004e10:	f102 0e0c 	add.w	lr, r2, #12
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8004e14:	3226      	adds	r2, #38	; 0x26
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004e16:	ebca 0a01 	rsb	sl, sl, r1
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8004e1a:	ebc9 0900 	rsb	r9, r9, r0
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8004e1e:	f825 a01e 	strh.w	sl, [r5, lr, lsl #1]
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8004e22:	f825 9012 	strh.w	r9, [r5, r2, lsl #1]
      prev[1];

    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;
 8004e26:	eeb0 6a66 	vmov.f32	s12, s13

    for (i = 0; i < SPEED_COUNT; i++) {
      temp[0] += (float)motors[0].speedRaw[i];
 8004e2a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8004e2e:	ee07 2a10 	vmov	s14, r2
      temp[1] += (float)motors[1].speedRaw[i];
 8004e32:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004e34:	ee07 2a90 	vmov	s15, r2

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
      temp[0] += (float)motors[0].speedRaw[i];
 8004e38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      temp[1] += (float)motors[1].speedRaw[i];
 8004e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
 8004e40:	42a3      	cmp	r3, r4
      temp[0] += (float)motors[0].speedRaw[i];
 8004e42:	ee76 6a87 	vadd.f32	s13, s13, s14
      temp[1] += (float)motors[1].speedRaw[i];
 8004e46:	ee36 6a27 	vadd.f32	s12, s12, s15
    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
 8004e4a:	d1ee      	bne.n	8004e2a <Hall_thread.lto_priv.84+0x7a>
      temp[0] += (float)motors[0].speedRaw[i];
      temp[1] += (float)motors[1].speedRaw[i];
    }

    temp[0] /= (float)SPEED_COUNT;
 8004e4c:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 8004e50:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8004e54:	6a73      	ldr	r3, [r6, #36]	; 0x24
  uint32_t count,tick = chVTGetSystemTimeX();

  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);
 8004e56:	37c8      	adds	r7, #200	; 0xc8

    if(tick>chVTGetSystemTimeX())
 8004e58:	42bb      	cmp	r3, r7
    motors[0].speed = temp[0];
    motors[1].speed = temp[1];
  //  motors[0].speed_filtered = 0.3f*motors[0].speed + 0.7f*motors[0].speed_filtered;
  //  motors[1].speed_filtered = 0.3f*motors[1].speed + 0.7f*motors[1].speed_filtered;

    count++;
 8004e5a:	f108 0801 	add.w	r8, r8, #1
      temp[0] += (float)motors[0].speedRaw[i];
      temp[1] += (float)motors[1].speedRaw[i];
    }

    temp[0] /= (float)SPEED_COUNT;
    temp[1] /= (float)SPEED_COUNT;
 8004e5e:	ee86 6a27 	vdiv.f32	s12, s12, s15

    motors[0].speed = temp[0];
 8004e62:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
    motors[1].speed = temp[1];
 8004e66:	ed85 6a18 	vstr	s12, [r5, #96]	; 0x60
  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);

    if(tick>chVTGetSystemTimeX())
 8004e6a:	d2b5      	bcs.n	8004dd8 <Hall_thread.lto_priv.84+0x28>
      chThdSleepUntil(tick);
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff f8bf 	bl	8003ff0 <chThdSleepUntil>
 8004e72:	e7b2      	b.n	8004dda <Hall_thread.lto_priv.84+0x2a>
 8004e74:	2000d228 	.word	0x2000d228
 8004e78:	08006ec0 	.word	0x08006ec0
 8004e7c:	20000804 	.word	0x20000804
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	20000824 	.word	0x20000824
 8004e88:	20000814 	.word	0x20000814
 8004e8c:	cccccccd 	.word	0xcccccccd
 8004e90:	00000000 	.word	0x00000000
 8004e94:	2000083a 	.word	0x2000083a
	...

08004ea0 <chThdDequeueNextI.constprop.54>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004ea0:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	d010      	beq.n	8004ec8 <chThdDequeueNextI.constprop.54+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	6002      	str	r2, [r0, #0]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 8004eaa:	f893 1020 	ldrb.w	r1, [r3, #32]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004eae:	6050      	str	r0, [r2, #4]
 8004eb0:	2904      	cmp	r1, #4
 8004eb2:	d004      	beq.n	8004ebe <chThdDequeueNextI.constprop.54+0x1e>
 8004eb4:	b672      	cpsid	i
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <chThdDequeueNextI.constprop.54+0x2c>)
 8004eb8:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <chThdDequeueNextI.constprop.54+0x30>)
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ebc:	e7fe      	b.n	8004ebc <chThdDequeueNextI.constprop.54+0x1c>

  tp->p_u.rdymsg = msg;
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe bec4 	b.w	8003c50 <chSchReadyI>
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	2000d228 	.word	0x2000d228
 8004ed0:	08006e80 	.word	0x08006e80
	...

08004ee0 <_strtok.constprop.15>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	460d      	mov	r5, r1
  char *token;
  if (str)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	b190      	cbz	r0, 8004f0e <_strtok.constprop.15+0x2e>
    *saveptr = str;
 8004ee8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8004eea:	4620      	mov	r0, r4
 8004eec:	490b      	ldr	r1, [pc, #44]	; (8004f1c <_strtok.constprop.15+0x3c>)
 8004eee:	f001 f9f7 	bl	80062e0 <strspn>
 8004ef2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4909      	ldr	r1, [pc, #36]	; (8004f1c <_strtok.constprop.15+0x3c>)
 8004ef8:	f001 f9ca 	bl	8006290 <strpbrk>
  if (*saveptr)
 8004efc:	b160      	cbz	r0, 8004f18 <_strtok.constprop.15+0x38>
    *(*saveptr)++ = '\0';
 8004efe:	1c42      	adds	r2, r0, #1
 8004f00:	2300      	movs	r3, #0
 8004f02:	602a      	str	r2, [r5, #0]
 8004f04:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8004f06:	7823      	ldrb	r3, [r4, #0]
 8004f08:	b123      	cbz	r3, 8004f14 <_strtok.constprop.15+0x34>
 8004f0a:	4620      	mov	r0, r4
}
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8004f0e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	d1ea      	bne.n	8004eea <_strtok.constprop.15+0xa>
    return NULL;
 8004f14:	2000      	movs	r0, #0
 8004f16:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8004f18:	6028      	str	r0, [r5, #0]
 8004f1a:	e7f4      	b.n	8004f06 <_strtok.constprop.15+0x26>
 8004f1c:	08006ecc 	.word	0x08006ecc

08004f20 <long_to_string_with_divisor.constprop.14>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8004f20:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004f22:	f100 070b 	add.w	r7, r0, #11
 8004f26:	463c      	mov	r4, r7
 8004f28:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8004f2a:	fbb1 f6f2 	udiv	r6, r1, r2
 8004f2e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8004f32:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8004f36:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8004f38:	bfc8      	it	gt
 8004f3a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8004f44:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8004f48:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	d1ed      	bne.n	8004f2a <long_to_string_with_divisor.constprop.14+0xa>

  i = (int)(p + MAX_FILLER - q);
 8004f4e:	1b3a      	subs	r2, r7, r4
 8004f50:	4402      	add	r2, r0
 8004f52:	e001      	b.n	8004f58 <long_to_string_with_divisor.constprop.14+0x38>
 8004f54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8004f58:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8004f5c:	4290      	cmp	r0, r2
 8004f5e:	d1f9      	bne.n	8004f54 <long_to_string_with_divisor.constprop.14+0x34>

  return p;
}
 8004f60:	bcf0      	pop	{r4, r5, r6, r7}
 8004f62:	4770      	bx	lr
	...

08004f70 <tft_printf.constprop.9>:
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8004f70:	b40c      	push	{r2, r3}
 8004f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f76:	b0c6      	sub	sp, #280	; 0x118
 8004f78:	aa4e      	add	r2, sp, #312	; 0x138
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8004f7a:	ac06      	add	r4, sp, #24
 8004f7c:	f852 3b04 	ldr.w	r3, [r2], #4
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8004f80:	4f36      	ldr	r7, [pc, #216]	; (800505c <tft_printf.constprop.9+0xec>)
	va_list arglist;

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
 8004f82:	9200      	str	r2, [sp, #0]
  msp->buffer = buffer;
  msp->size   = size;
  msp->eos    = eos;
 8004f84:	2600      	movs	r6, #0
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8004f86:	460d      	mov	r5, r1

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
 8004f88:	a801      	add	r0, sp, #4
 8004f8a:	4619      	mov	r1, r3
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
  msp->size   = size;
 8004f8c:	23ff      	movs	r3, #255	; 0xff
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8004f8e:	9701      	str	r7, [sp, #4]
  msp->buffer = buffer;
  msp->size   = size;
 8004f90:	9303      	str	r3, [sp, #12]
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8004f92:	9402      	str	r4, [sp, #8]
  msp->size   = size;
  msp->eos    = eos;
 8004f94:	9604      	str	r6, [sp, #16]
  msp->offset = 0;
 8004f96:	9605      	str	r6, [sp, #20]
 8004f98:	f7fc ff7a 	bl	8001e90 <chvprintf>
  va_end(arglist);

  if (ms.eos < 255)
 8004f9c:	9b04      	ldr	r3, [sp, #16]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004f9e:	4930      	ldr	r1, [pc, #192]	; (8005060 <tft_printf.constprop.9+0xf0>)
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <tft_printf.constprop.9+0xf4>)
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8004fa2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8005074 <tft_printf.constprop.9+0x104>
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004fa6:	4f30      	ldr	r7, [pc, #192]	; (8005068 <tft_printf.constprop.9+0xf8>)
 8004fa8:	f8b1 9000 	ldrh.w	r9, [r1]
 8004fac:	f8b2 8000 	ldrh.w	r8, [r2]
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
  va_end(arglist);

  if (ms.eos < 255)
 8004fb0:	2bfe      	cmp	r3, #254	; 0xfe
      buf[ms.eos] = 0;
 8004fb2:	bf98      	it	ls
 8004fb4:	54e6      	strbls	r6, [r4, r3]
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <tft_printf.constprop.9+0xfc>)
 8004fb8:	4e2d      	ldr	r6, [pc, #180]	; (8005070 <tft_printf.constprop.9+0x100>)
 8004fba:	f8b3 c000 	ldrh.w	ip, [r3]
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	2105      	movs	r1, #5
 8004fc2:	2400      	movs	r4, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8004fc4:	7813      	ldrb	r3, [r2, #0]
 8004fc6:	b33b      	cbz	r3, 8005018 <tft_printf.constprop.9+0xa8>
		if (*fp == '[' && *(fp - 1) != '\\') {
 8004fc8:	2b5b      	cmp	r3, #91	; 0x5b
 8004fca:	d02c      	beq.n	8005026 <tft_printf.constprop.9+0xb6>
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8004fcc:	2b5d      	cmp	r3, #93	; 0x5d
 8004fce:	d031      	beq.n	8005034 <tft_printf.constprop.9+0xc4>
			is_special = 0;
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
 8004fd0:	2b0d      	cmp	r3, #13
 8004fd2:	d026      	beq.n	8005022 <tft_printf.constprop.9+0xb2>
 8004fd4:	2b0a      	cmp	r3, #10
 8004fd6:	d024      	beq.n	8005022 <tft_printf.constprop.9+0xb2>
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
 8004fd8:	2914      	cmp	r1, #20
 8004fda:	d822      	bhi.n	8005022 <tft_printf.constprop.9+0xb2>
 8004fdc:	2d0a      	cmp	r5, #10
 8004fde:	d820      	bhi.n	8005022 <tft_printf.constprop.9+0xb2>
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8004fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8004fe2:	d032      	beq.n	800504a <tft_printf.constprop.9+0xda>
        fp++;
      }
			text[x][y] = *fp++;
 8004fe4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8004fe8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	46ca      	movne	sl, r9
 8004ff2:	46c2      	moveq	sl, r8
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8004ff4:	2914      	cmp	r1, #20
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8004ff6:	f102 0201 	add.w	r2, r2, #1
 8004ffa:	f80e 3000 	strb.w	r3, [lr, r0]
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8004ffe:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8005002:	f827 a010 	strh.w	sl, [r7, r0, lsl #1]
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8005006:	d01c      	beq.n	8005042 <tft_printf.constprop.9+0xd2>
				x = 0;
				y++;
			} else {
				x++;
 8005008:	3101      	adds	r1, #1
 800500a:	b2c9      	uxtb	r1, r1
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 800500c:	7813      	ldrb	r3, [r2, #0]
				y++;
			} else {
				x++;
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
 800500e:	2d0a      	cmp	r5, #10
 8005010:	bf28      	it	cs
 8005012:	2500      	movcs	r5, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1d7      	bne.n	8004fc8 <tft_printf.constprop.9+0x58>
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
		}
	}
}
 8005018:	b046      	add	sp, #280	; 0x118
 800501a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501e:	b002      	add	sp, #8
 8005020:	4770      	bx	lr
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
 8005022:	3201      	adds	r2, #1
 8005024:	e7ce      	b.n	8004fc4 <tft_printf.constprop.9+0x54>
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
 8005026:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800502a:	285c      	cmp	r0, #92	; 0x5c
 800502c:	d0d4      	beq.n	8004fd8 <tft_printf.constprop.9+0x68>
			is_special = 1;
			fp++;
 800502e:	3201      	adds	r2, #1

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
 8005030:	2401      	movs	r4, #1
 8005032:	e7c7      	b.n	8004fc4 <tft_printf.constprop.9+0x54>
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8005034:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8005038:	285c      	cmp	r0, #92	; 0x5c
 800503a:	d0cd      	beq.n	8004fd8 <tft_printf.constprop.9+0x68>
			is_special = 0;
			fp++;
 800503c:	3201      	adds	r2, #1
	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
			is_special = 0;
 800503e:	2400      	movs	r4, #0
 8005040:	e7c0      	b.n	8004fc4 <tft_printf.constprop.9+0x54>
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
				y++;
 8005042:	3501      	adds	r5, #1
 8005044:	b2ed      	uxtb	r5, r5
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
 8005046:	2100      	movs	r1, #0
 8005048:	e7e0      	b.n	800500c <tft_printf.constprop.9+0x9c>
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 800504a:	7850      	ldrb	r0, [r2, #1]
 800504c:	285b      	cmp	r0, #91	; 0x5b
 800504e:	d001      	beq.n	8005054 <tft_printf.constprop.9+0xe4>
 8005050:	285d      	cmp	r0, #93	; 0x5d
 8005052:	d1c7      	bne.n	8004fe4 <tft_printf.constprop.9+0x74>
        fp++;
 8005054:	3201      	adds	r2, #1
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8005056:	4603      	mov	r3, r0
 8005058:	e7c4      	b.n	8004fe4 <tft_printf.constprop.9+0x74>
 800505a:	bf00      	nop
 800505c:	08006ed0 	.word	0x08006ed0
 8005060:	2000dbee 	.word	0x2000dbee
 8005064:	2000d224 	.word	0x2000d224
 8005068:	2000da48 	.word	0x2000da48
 800506c:	2000da18 	.word	0x2000da18
 8005070:	2000cebc 	.word	0x2000cebc
 8005074:	2000d084 	.word	0x2000d084
	...

08005080 <flashRead>:
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <flashRead+0x4c>)
    /* Lock flash again */
    flashLock();
}

void flashRead(flashaddr_t address, char* buffer, size_t size)
{
 8005082:	b430      	push	{r4, r5}
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8005084:	691c      	ldr	r4, [r3, #16]
 8005086:	2c00      	cmp	r4, #0
 8005088:	db17      	blt.n	80050ba <flashRead+0x3a>
void flashRead(flashaddr_t address, char* buffer, size_t size)
{
    if(flashUnlock() == CH_FAILED)
        return;

    flashWaitWhileBusy();
 800508a:	4c10      	ldr	r4, [pc, #64]	; (80050cc <flashRead+0x4c>)
 800508c:	68e3      	ldr	r3, [r4, #12]
 800508e:	03db      	lsls	r3, r3, #15
 8005090:	d4fc      	bmi.n	800508c <flashRead+0xc>

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
 8005092:	2a03      	cmp	r2, #3
 8005094:	d90a      	bls.n	80050ac <flashRead+0x2c>
 8005096:	3a04      	subs	r2, #4
 8005098:	f022 0203 	bic.w	r2, r2, #3
 800509c:	1d03      	adds	r3, r0, #4
 800509e:	441a      	add	r2, r3
    return CH_SUCCESS;
}

flashdata_t flashReadData(flashaddr_t address)
{
  return *(flashdata_t*)address;
 80050a0:	f850 3b04 	ldr.w	r3, [r0], #4

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
    {
        *flashbuffer = flashReadData(address);
 80050a4:	f841 3b04 	str.w	r3, [r1], #4

    flashWaitWhileBusy();

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
 80050a8:	4290      	cmp	r0, r2
 80050aa:	d1f9      	bne.n	80050a0 <flashRead+0x20>
        address += sizeof(flashdata_t);
        flashbuffer++;
        size -= sizeof(flashdata_t);
    }

    flashLock();
 80050ac:	4a07      	ldr	r2, [pc, #28]	; (80050cc <flashRead+0x4c>)
 80050ae:	6913      	ldr	r3, [r2, #16]
 80050b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	6113      	str	r3, [r2, #16]
}
 80050b6:	bc30      	pop	{r4, r5}
 80050b8:	4770      	bx	lr
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 80050ba:	4d05      	ldr	r5, [pc, #20]	; (80050d0 <flashRead+0x50>)
    FLASH->KEYR = 0xCDEF89AB;
 80050bc:	4c05      	ldr	r4, [pc, #20]	; (80050d4 <flashRead+0x54>)
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 80050be:	605d      	str	r5, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 80050c0:	605c      	str	r4, [r3, #4]

    /* Check if unlock was successful */
    if (FLASH->CR & FLASH_CR_LOCK)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dae0      	bge.n	800508a <flashRead+0xa>
 80050c8:	e7f5      	b.n	80050b6 <flashRead+0x36>
 80050ca:	bf00      	nop
 80050cc:	40023c00 	.word	0x40023c00
 80050d0:	45670123 	.word	0x45670123
 80050d4:	cdef89ab 	.word	0xcdef89ab
	...

080050e0 <motor_pwmUpdate>:
  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);
  motor_pwmUpdate();
}

void motor_pwmUpdate(void)
{
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 80050e2:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <motor_pwmUpdate+0x108>)
 80050e4:	799a      	ldrb	r2, [r3, #6]
 80050e6:	ed93 7a03 	vldr	s14, [r3, #12]
  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);
  motor_pwmUpdate();
}

void motor_pwmUpdate(void)
{
 80050ea:	b083      	sub	sp, #12
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 80050ec:	b10a      	cbz	r2, 80050f2 <motor_pwmUpdate+0x12>
 80050ee:	eeb1 7a47 	vneg.f32	s14, s14
 80050f2:	4a3d      	ldr	r2, [pc, #244]	; (80051e8 <motor_pwmUpdate+0x108>)
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 80050f4:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
  motor_pwmUpdate();
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 80050f8:	ed83 7a04 	vstr	s14, [r3, #16]
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 80050fc:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 8005100:	b109      	cbz	r1, 8005106 <motor_pwmUpdate+0x26>
 8005102:	eef1 7a67 	vneg.f32	s15, s15

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8005106:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 800510e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8005112:	dd66      	ble.n	80051e2 <motor_pwmUpdate+0x102>
 8005114:	eddf 6a35 	vldr	s13, [pc, #212]	; 80051ec <motor_pwmUpdate+0x10c>
 8005118:	ee67 6a26 	vmul.f32	s13, s14, s13
 800511c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005120:	edcd 6a01 	vstr	s13, [sp, #4]
 8005124:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005128:	4617      	mov	r7, r2
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 800512a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
 8005132:	829a      	strh	r2, [r3, #20]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8005134:	d449      	bmi.n	80051ca <motor_pwmUpdate+0xea>
 8005136:	f04f 0e00 	mov.w	lr, #0
 800513a:	4672      	mov	r2, lr

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 800513c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
 8005144:	82da      	strh	r2, [r3, #22]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8005146:	dd3d      	ble.n	80051c4 <motor_pwmUpdate+0xe4>
 8005148:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80051ec <motor_pwmUpdate+0x10c>
 800514c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005150:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005154:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005158:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800515c:	4616      	mov	r6, r2
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 800515e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
 8005166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 800516a:	d41f      	bmi.n	80051ac <motor_pwmUpdate+0xcc>
 800516c:	2500      	movs	r5, #0
 800516e:	462a      	mov	r2, r5

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8005170:	491f      	ldr	r1, [pc, #124]	; (80051f0 <motor_pwmUpdate+0x110>)
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8005172:	7958      	ldrb	r0, [r3, #5]
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8005174:	791c      	ldrb	r4, [r3, #4]
 8005176:	6989      	ldr	r1, [r1, #24]
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
 8005178:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 800517c:	340c      	adds	r4, #12
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 800517e:	f100 020c 	add.w	r2, r0, #12
 8005182:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8005186:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800518a:	6047      	str	r7, [r0, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 800518c:	f8c2 e004 	str.w	lr, [r2, #4]

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8005190:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005194:	320c      	adds	r2, #12
 8005196:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800519a:	6056      	str	r6, [r2, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 800519c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051a0:	330c      	adds	r3, #12
 80051a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80051a6:	604d      	str	r5, [r1, #4]
}
 80051a8:	b003      	add	sp, #12
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 80051ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80051ec <motor_pwmUpdate+0x10c>
 80051b0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80051b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b8:	edcd 7a01 	vstr	s15, [sp, #4]
 80051bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80051c0:	4615      	mov	r5, r2
 80051c2:	e7d5      	b.n	8005170 <motor_pwmUpdate+0x90>
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 80051c4:	2600      	movs	r6, #0
 80051c6:	4632      	mov	r2, r6
 80051c8:	e7c9      	b.n	800515e <motor_pwmUpdate+0x7e>
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 80051ca:	eddf 6a08 	vldr	s13, [pc, #32]	; 80051ec <motor_pwmUpdate+0x10c>
 80051ce:	ee27 7a66 	vnmul.f32	s14, s14, s13
 80051d2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80051d6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80051da:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80051de:	4696      	mov	lr, r2
 80051e0:	e7ac      	b.n	800513c <motor_pwmUpdate+0x5c>
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 80051e2:	2700      	movs	r7, #0
 80051e4:	463a      	mov	r2, r7
 80051e6:	e7a0      	b.n	800512a <motor_pwmUpdate+0x4a>
 80051e8:	20000824 	.word	0x20000824
 80051ec:	457a0000 	.word	0x457a0000
 80051f0:	2000da1c 	.word	0x2000da1c
	...

08005200 <tft_char_is_changed>:
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 8005200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8005204:	0086      	lsls	r6, r0, #2
 8005206:	1833      	adds	r3, r6, r0
 8005208:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 800520c:	4602      	mov	r2, r0
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 800520e:	4c18      	ldr	r4, [pc, #96]	; (8005270 <tft_char_is_changed+0x70>)
 8005210:	4818      	ldr	r0, [pc, #96]	; (8005274 <tft_char_is_changed+0x74>)
 8005212:	5cc5      	ldrb	r5, [r0, r3]
 8005214:	5ce0      	ldrb	r0, [r4, r3]
 8005216:	42a8      	cmp	r0, r5
 8005218:	d013      	beq.n	8005242 <tft_char_is_changed+0x42>
 800521a:	4f17      	ldr	r7, [pc, #92]	; (8005278 <tft_char_is_changed+0x78>)
 800521c:	4817      	ldr	r0, [pc, #92]	; (800527c <tft_char_is_changed+0x7c>)
 800521e:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8005222:	f8df c060 	ldr.w	ip, [pc, #96]	; 8005284 <tft_char_is_changed+0x84>
 8005226:	4f16      	ldr	r7, [pc, #88]	; (8005280 <tft_char_is_changed+0x80>)
 8005228:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800522c:	2001      	movs	r0, #1
	text_prev[x][y] = text[x][y];
 800522e:	4432      	add	r2, r6
 8005230:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005234:	5465      	strb	r5, [r4, r1]
	text_color_prev[x][y] = text_color[x][y];
 8005236:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
	bg_color_prev[x][y] = bg_color[x][y];
 800523a:	f82c 8011 	strh.w	r8, [ip, r1, lsl #1]
	return re;
}
 800523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8005242:	4f0f      	ldr	r7, [pc, #60]	; (8005280 <tft_char_is_changed+0x80>)
 8005244:	f8df e030 	ldr.w	lr, [pc, #48]	; 8005278 <tft_char_is_changed+0x78>
 8005248:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 800524c:	f83e e013 	ldrh.w	lr, [lr, r3, lsl #1]
 8005250:	f8df c030 	ldr.w	ip, [pc, #48]	; 8005284 <tft_char_is_changed+0x84>
 8005254:	4570      	cmp	r0, lr
 8005256:	4809      	ldr	r0, [pc, #36]	; (800527c <tft_char_is_changed+0x7c>)
 8005258:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800525c:	d001      	beq.n	8005262 <tft_char_is_changed+0x62>
 800525e:	2001      	movs	r0, #1
 8005260:	e7e5      	b.n	800522e <tft_char_is_changed+0x2e>
 8005262:	f83c 0013 	ldrh.w	r0, [ip, r3, lsl #1]
 8005266:	ebb0 0008 	subs.w	r0, r0, r8
 800526a:	bf18      	it	ne
 800526c:	2001      	movne	r0, #1
 800526e:	e7de      	b.n	800522e <tft_char_is_changed+0x2e>
 8005270:	2000d15c 	.word	0x2000d15c
 8005274:	2000d084 	.word	0x2000d084
 8005278:	2000da48 	.word	0x2000da48
 800527c:	2000cebc 	.word	0x2000cebc
 8005280:	2000d888 	.word	0x2000d888
 8005284:	2000dc28 	.word	0x2000dc28
	...

08005290 <tft_set_char_pos>:
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	4607      	mov	r7, r0
	tft_write_command(0x2a);		// Column addr set
 8005294:	202a      	movs	r0, #42	; 0x2a
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8005296:	460d      	mov	r5, r1
 8005298:	4616      	mov	r6, r2
 800529a:	461c      	mov	r4, r3
	tft_write_command(0x2a);		// Column addr set
 800529c:	f7ff f860 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7ff f845 	bl	8004330 <tft_write_data>
	tft_write_data(x1); 			//X START
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7ff f842 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7ff f83f 	bl	8004330 <tft_write_data>
	tft_write_data(x2); 			//X END
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff f83c 	bl	8004330 <tft_write_data>

	tft_write_command(0x2b);		//Row addr set
 80052b8:	202b      	movs	r0, #43	; 0x2b
 80052ba:	f7ff f851 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 80052be:	2000      	movs	r0, #0
 80052c0:	f7ff f836 	bl	8004330 <tft_write_data>
	tft_write_data(y1);			//Y START
 80052c4:	4628      	mov	r0, r5
 80052c6:	f7ff f833 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7ff f830 	bl	8004330 <tft_write_data>
	tft_write_data(y2);		//Y END
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7ff f82d 	bl	8004330 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 80052d6:	202c      	movs	r0, #44	; 0x2c
}
 80052d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tft_write_data(0x00);
	tft_write_data(y1);			//Y START
	tft_write_data(0x00);
	tft_write_data(y2);		//Y END

	tft_write_command(0x2c); 		// write to RAM
 80052dc:	f7ff b840 	b.w	8004360 <tft_write_command>

080052e0 <chMtxUnlock.constprop.53>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  thread_t *ctp = currp;
 80052e4:	4c35      	ldr	r4, [pc, #212]	; (80053bc <chMtxUnlock.constprop.53+0xdc>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80052e6:	2320      	movs	r3, #32
 80052e8:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80052ec:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80052f0:	f7fe fb36 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80052f4:	f7fe fdbc 	bl	8003e70 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->p_mtxlist != NULL, "owned mutexes list empty");
 80052f8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80052fc:	b133      	cbz	r3, 800530c <chMtxUnlock.constprop.53+0x2c>
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp, "ownership failure");
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	4590      	cmp	r8, r2
 8005302:	d007      	beq.n	8005314 <chMtxUnlock.constprop.53+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005304:	b672      	cpsid	i
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <chMtxUnlock.constprop.53+0xe0>)
 8005308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800530a:	e7fe      	b.n	800530a <chMtxUnlock.constprop.53+0x2a>
 800530c:	b672      	cpsid	i
 800530e:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <chMtxUnlock.constprop.53+0xe0>)
 8005310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005312:	e7fe      	b.n	8005312 <chMtxUnlock.constprop.53+0x32>
  chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->m_cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");
 8005314:	4d2b      	ldr	r5, [pc, #172]	; (80053c4 <chMtxUnlock.constprop.53+0xe4>)
 8005316:	f105 090c 	add.w	r9, r5, #12
 800531a:	454b      	cmp	r3, r9
 800531c:	d003      	beq.n	8005326 <chMtxUnlock.constprop.53+0x46>
 800531e:	b672      	cpsid	i
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <chMtxUnlock.constprop.53+0xe0>)
 8005322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005324:	e7fe      	b.n	8005324 <chMtxUnlock.constprop.53+0x44>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8005326:	69ae      	ldr	r6, [r5, #24]
 8005328:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 800532c:	f7fe fb68 	bl	8003a00 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005330:	68ef      	ldr	r7, [r5, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8005332:	454f      	cmp	r7, r9
 8005334:	d03a      	beq.n	80053ac <chMtxUnlock.constprop.53+0xcc>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8005336:	f8d8 a040 	ldr.w	sl, [r8, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800533a:	b15e      	cbz	r6, 8005354 <chMtxUnlock.constprop.53+0x74>
 800533c:	f7fe fb60 	bl	8003a00 <chDbgCheckClassS>
 8005340:	6833      	ldr	r3, [r6, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8005342:	429e      	cmp	r6, r3
 8005344:	d003      	beq.n	800534e <chMtxUnlock.constprop.53+0x6e>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	459a      	cmp	sl, r3
 800534a:	bf38      	it	cc
 800534c:	469a      	movcc	sl, r3
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 800534e:	68f6      	ldr	r6, [r6, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8005350:	2e00      	cmp	r6, #0
 8005352:	d1f3      	bne.n	800533c <chMtxUnlock.constprop.53+0x5c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005354:	683b      	ldr	r3, [r7, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8005356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8005358:	f8c8 a008 	str.w	sl, [r8, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800535c:	4638      	mov	r0, r7
 800535e:	60eb      	str	r3, [r5, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005360:	f8c3 9004 	str.w	r9, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8005364:	61aa      	str	r2, [r5, #24]
      tp->p_mtxlist = mp;
 8005366:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800536a:	616f      	str	r7, [r5, #20]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800536c:	f7fe fc70 	bl	8003c50 <chSchReadyI>
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();
 8005370:	f7fe fb46 	bl	8003a00 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8005374:	f7fe fb8c 	bl	8003a90 <chDbgCheckClassI>

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8005378:	69a2      	ldr	r2, [r4, #24]
 800537a:	6823      	ldr	r3, [r4, #0]

  if (chSchIsRescRequiredI()) {
 800537c:	6892      	ldr	r2, [r2, #8]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	d201      	bcs.n	8005388 <chMtxUnlock.constprop.53+0xa8>
    chSchDoRescheduleAhead();
 8005384:	f7fe faf4 	bl	8003970 <chSchDoRescheduleAhead>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005388:	f7fe fd62 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800538c:	f7fe fad0 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <chMtxUnlock.constprop.53+0xdc>)
 8005394:	42a2      	cmp	r2, r4
 8005396:	d004      	beq.n	80053a2 <chMtxUnlock.constprop.53+0xc2>
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	6892      	ldr	r2, [r2, #8]
 800539c:	6889      	ldr	r1, [r1, #8]
 800539e:	4291      	cmp	r1, r2
 80053a0:	d307      	bcc.n	80053b2 <chMtxUnlock.constprop.53+0xd2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80053a2:	2300      	movs	r3, #0
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      chSchRescheduleS();
    }
    else {
      mp->m_owner = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	616b      	str	r3, [r5, #20]
 80053b0:	e7ea      	b.n	8005388 <chMtxUnlock.constprop.53+0xa8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053b2:	b672      	cpsid	i
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <chMtxUnlock.constprop.53+0xe8>)
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80053b8:	e7fe      	b.n	80053b8 <chMtxUnlock.constprop.53+0xd8>
 80053ba:	bf00      	nop
 80053bc:	2000d228 	.word	0x2000d228
 80053c0:	08006ef0 	.word	0x08006ef0
 80053c4:	2000dbf0 	.word	0x2000dbf0
 80053c8:	08006e30 	.word	0x08006e30
 80053cc:	00000000 	.word	0x00000000

080053d0 <i2cMasterTransmitTimeout.constprop.39>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 80053d4:	b158      	cbz	r0, 80053ee <i2cMasterTransmitTimeout.constprop.39+0x1e>
 80053d6:	b151      	cbz	r1, 80053ee <i2cMasterTransmitTimeout.constprop.39+0x1e>
 80053d8:	b103      	cbz	r3, 80053dc <i2cMasterTransmitTimeout.constprop.39+0xc>
 80053da:	b142      	cbz	r2, 80053ee <i2cMasterTransmitTimeout.constprop.39+0x1e>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 80053dc:	4c57      	ldr	r4, [pc, #348]	; (800553c <i2cMasterTransmitTimeout.constprop.39+0x16c>)
 80053de:	7825      	ldrb	r5, [r4, #0]
 80053e0:	2d02      	cmp	r5, #2
 80053e2:	d009      	beq.n	80053f8 <i2cMasterTransmitTimeout.constprop.39+0x28>
 80053e4:	b672      	cpsid	i
 80053e6:	4b56      	ldr	r3, [pc, #344]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80053e8:	4a56      	ldr	r2, [pc, #344]	; (8005544 <i2cMasterTransmitTimeout.constprop.39+0x174>)
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ec:	e7fe      	b.n	80053ec <i2cMasterTransmitTimeout.constprop.39+0x1c>
 80053ee:	b672      	cpsid	i
 80053f0:	4b53      	ldr	r3, [pc, #332]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80053f2:	4a54      	ldr	r2, [pc, #336]	; (8005544 <i2cMasterTransmitTimeout.constprop.39+0x174>)
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053f6:	e7fe      	b.n	80053f6 <i2cMasterTransmitTimeout.constprop.39+0x26>
 80053f8:	4698      	mov	r8, r3
 80053fa:	4606      	mov	r6, r0
 80053fc:	4691      	mov	r9, r2
 80053fe:	468a      	mov	sl, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005400:	2320      	movs	r3, #32
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	4d4e      	ldr	r5, [pc, #312]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005408:	f7fe faaa 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800540c:	f7fe fd30 	bl	8003e70 <_dbg_check_lock>

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8005410:	0070      	lsls	r0, r6, #1

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8005412:	2303      	movs	r3, #3
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8005414:	2200      	movs	r2, #0
  i2cp->state = I2C_ACTIVE_TX;
 8005416:	7023      	strb	r3, [r4, #0]
 8005418:	8420      	strh	r0, [r4, #32]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800541a:	60a2      	str	r2, [r4, #8]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 800541c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800541e:	f7fe fd17 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005422:	f7fe fa85 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	42ab      	cmp	r3, r5
 800542a:	d004      	beq.n	8005436 <i2cMasterTransmitTimeout.constprop.39+0x66>
 800542c:	69aa      	ldr	r2, [r5, #24]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	6892      	ldr	r2, [r2, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	d356      	bcc.n	80054e4 <i2cMasterTransmitTimeout.constprop.39+0x114>
 8005436:	2300      	movs	r3, #0
 8005438:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800543c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800543e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8005440:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8005446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8005448:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8005558 <i2cMasterTransmitTimeout.constprop.39+0x188>
 800544c:	4f3e      	ldr	r7, [pc, #248]	; (8005548 <i2cMasterTransmitTimeout.constprop.39+0x178>)

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800544e:	600a      	str	r2, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8005450:	f8c1 e00c 	str.w	lr, [r1, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8005454:	f8c1 a004 	str.w	sl, [r1, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005458:	6018      	str	r0, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800545a:	f8c3 900c 	str.w	r9, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800545e:	f8c3 8004 	str.w	r8, [r3, #4]
 8005462:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
 8005466:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>
 800546a:	f04f 0820 	mov.w	r8, #32
 800546e:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005472:	f7fe fa75 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005476:	f7fe fcfb 	bl	8003e70 <_dbg_check_lock>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 800547a:	69b3      	ldr	r3, [r6, #24]
 800547c:	0799      	lsls	r1, r3, #30
 800547e:	d402      	bmi.n	8005486 <i2cMasterTransmitTimeout.constprop.39+0xb6>
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	059a      	lsls	r2, r3, #22
 8005484:	d532      	bpl.n	80054ec <i2cMasterTransmitTimeout.constprop.39+0x11c>
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8005488:	ebca 0303 	rsb	r3, sl, r3
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 800548c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005490:	d211      	bcs.n	80054b6 <i2cMasterTransmitTimeout.constprop.39+0xe6>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005492:	f7fe fcdd 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005496:	f7fe fa4b 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800549a:	682a      	ldr	r2, [r5, #0]
 800549c:	4928      	ldr	r1, [pc, #160]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 800549e:	42aa      	cmp	r2, r5
 80054a0:	d005      	beq.n	80054ae <i2cMasterTransmitTimeout.constprop.39+0xde>
 80054a2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80054a6:	6892      	ldr	r2, [r2, #8]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d33d      	bcc.n	800552a <i2cMasterTransmitTimeout.constprop.39+0x15a>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	e7db      	b.n	800546e <i2cMasterTransmitTimeout.constprop.39+0x9e>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 80054b6:	2305      	movs	r3, #5
 80054b8:	7023      	strb	r3, [r4, #0]
 80054ba:	f04f 36ff 	mov.w	r6, #4294967295
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80054be:	f7fe fcc7 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80054c2:	f7fe fa35 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80054c6:	682a      	ldr	r2, [r5, #0]
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80054ca:	42aa      	cmp	r2, r5
 80054cc:	d004      	beq.n	80054d8 <i2cMasterTransmitTimeout.constprop.39+0x108>
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	6892      	ldr	r2, [r2, #8]
 80054d2:	6889      	ldr	r1, [r1, #8]
 80054d4:	4291      	cmp	r1, r2
 80054d6:	d32c      	bcc.n	8005532 <i2cMasterTransmitTimeout.constprop.39+0x162>
 80054d8:	2300      	movs	r3, #0
 80054da:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 80054de:	4630      	mov	r0, r6
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054e4:	b672      	cpsid	i
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <i2cMasterTransmitTimeout.constprop.39+0x17c>)
 80054e8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80054ea:	e7fe      	b.n	80054ea <i2cMasterTransmitTimeout.constprop.39+0x11a>

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80054ec:	6873      	ldr	r3, [r6, #4]
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 80054ee:	69e0      	ldr	r0, [r4, #28]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80054f0:	69aa      	ldr	r2, [r5, #24]
 80054f2:	4913      	ldr	r1, [pc, #76]	; (8005540 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80054f4:	4f11      	ldr	r7, [pc, #68]	; (800553c <i2cMasterTransmitTimeout.constprop.39+0x16c>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6073      	str	r3, [r6, #4]
  dp->CR1 |= I2C_CR1_START;
 80054fc:	6833      	ldr	r3, [r6, #0]
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	b118      	cbz	r0, 800550e <i2cMasterTransmitTimeout.constprop.39+0x13e>
 8005506:	b672      	cpsid	i
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <i2cMasterTransmitTimeout.constprop.39+0x180>)
 800550a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800550c:	e7fe      	b.n	800550c <i2cMasterTransmitTimeout.constprop.39+0x13c>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 800550e:	463b      	mov	r3, r7
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005510:	2003      	movs	r0, #3

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8005512:	f843 2f1c 	str.w	r2, [r3, #28]!
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005516:	210a      	movs	r1, #10
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 8005518:	6253      	str	r3, [r2, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800551a:	f7fe fac9 	bl	8003ab0 <chSchGoSleepTimeoutS>
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	4606      	mov	r6, r0
 8005522:	d0c8      	beq.n	80054b6 <i2cMasterTransmitTimeout.constprop.39+0xe6>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8005524:	2302      	movs	r3, #2
 8005526:	703b      	strb	r3, [r7, #0]
 8005528:	e7c9      	b.n	80054be <i2cMasterTransmitTimeout.constprop.39+0xee>
 800552a:	b672      	cpsid	i
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <i2cMasterTransmitTimeout.constprop.39+0x17c>)
 800552e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005530:	e7fe      	b.n	8005530 <i2cMasterTransmitTimeout.constprop.39+0x160>
 8005532:	b672      	cpsid	i
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <i2cMasterTransmitTimeout.constprop.39+0x184>)
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
 8005538:	e7fe      	b.n	8005538 <i2cMasterTransmitTimeout.constprop.39+0x168>
 800553a:	bf00      	nop
 800553c:	2000dbf0 	.word	0x2000dbf0
 8005540:	2000d228 	.word	0x2000d228
 8005544:	08006e60 	.word	0x08006e60
 8005548:	40000c00 	.word	0x40000c00
 800554c:	08006e50 	.word	0x08006e50
 8005550:	08006f00 	.word	0x08006f00
 8005554:	08006e40 	.word	0x08006e40
 8005558:	2000d07c 	.word	0x2000d07c
 800555c:	00000000 	.word	0x00000000

08005560 <spiSelect.constprop.25>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8005560:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005562:	2320      	movs	r3, #32
 8005564:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005568:	f7fe f9fa 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800556c:	f7fe fc80 	bl	8003e70 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <spiSelect.constprop.25+0x5c>)
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	2a02      	cmp	r2, #2
 8005576:	d004      	beq.n	8005582 <spiSelect.constprop.25+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005578:	b672      	cpsid	i
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <spiSelect.constprop.25+0x60>)
 800557c:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <spiSelect.constprop.25+0x64>)
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005580:	e7fe      	b.n	8005580 <spiSelect.constprop.25+0x20>
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	8919      	ldrh	r1, [r3, #8]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	2301      	movs	r3, #1
 800558a:	408b      	lsls	r3, r1
 800558c:	b29b      	uxth	r3, r3
 800558e:	8353      	strh	r3, [r2, #26]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005590:	f7fe fc5e 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005594:	f7fe f9cc 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <spiSelect.constprop.25+0x60>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d004      	beq.n	80055aa <spiSelect.constprop.25+0x4a>
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	6889      	ldr	r1, [r1, #8]
 80055a6:	4291      	cmp	r1, r2
 80055a8:	d303      	bcc.n	80055b2 <spiSelect.constprop.25+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80055aa:	2300      	movs	r3, #0
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055b2:	b672      	cpsid	i
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <spiSelect.constprop.25+0x68>)
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80055b8:	e7fe      	b.n	80055b8 <spiSelect.constprop.25+0x58>
 80055ba:	bf00      	nop
 80055bc:	2000d04c 	.word	0x2000d04c
 80055c0:	2000d228 	.word	0x2000d228
 80055c4:	08006f30 	.word	0x08006f30
 80055c8:	08006f20 	.word	0x08006f20
 80055cc:	00000000 	.word	0x00000000

080055d0 <spiUnselect.constprop.23>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 80055d0:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80055d2:	2320      	movs	r3, #32
 80055d4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80055d8:	f7fe f9c2 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80055dc:	f7fe fc48 	bl	8003e70 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80055e0:	4b12      	ldr	r3, [pc, #72]	; (800562c <spiUnselect.constprop.23+0x5c>)
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	2a02      	cmp	r2, #2
 80055e6:	d004      	beq.n	80055f2 <spiUnselect.constprop.23+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055e8:	b672      	cpsid	i
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <spiUnselect.constprop.23+0x60>)
 80055ec:	4a11      	ldr	r2, [pc, #68]	; (8005634 <spiUnselect.constprop.23+0x64>)
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80055f0:	e7fe      	b.n	80055f0 <spiUnselect.constprop.23+0x20>
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	8919      	ldrh	r1, [r3, #8]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	2301      	movs	r3, #1
 80055fa:	408b      	lsls	r3, r1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8313      	strh	r3, [r2, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005600:	f7fe fc26 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8005604:	f7fe f994 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <spiUnselect.constprop.23+0x60>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d004      	beq.n	800561a <spiUnselect.constprop.23+0x4a>
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	6889      	ldr	r1, [r1, #8]
 8005616:	4291      	cmp	r1, r2
 8005618:	d303      	bcc.n	8005622 <spiUnselect.constprop.23+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800561a:	2300      	movs	r3, #0
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005622:	b672      	cpsid	i
 8005624:	4a04      	ldr	r2, [pc, #16]	; (8005638 <spiUnselect.constprop.23+0x68>)
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
 8005628:	e7fe      	b.n	8005628 <spiUnselect.constprop.23+0x58>
 800562a:	bf00      	nop
 800562c:	2000d04c 	.word	0x2000d04c
 8005630:	2000d228 	.word	0x2000d228
 8005634:	08006e10 	.word	0x08006e10
 8005638:	08006f20 	.word	0x08006f20
 800563c:	00000000 	.word	0x00000000

08005640 <spiSend.constprop.21>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8005642:	b1c0      	cbz	r0, 8005676 <spiSend.constprop.21+0x36>
 8005644:	4606      	mov	r6, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005646:	2320      	movs	r3, #32
 8005648:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800564c:	f7fe f988 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005650:	f7fe fc0e 	bl	8003e70 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8005654:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <spiSend.constprop.21+0xb8>)
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	2a02      	cmp	r2, #2
 800565a:	d004      	beq.n	8005666 <spiSend.constprop.21+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800565c:	b672      	cpsid	i
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <spiSend.constprop.21+0xbc>)
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <spiSend.constprop.21+0xc0>)
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
 8005664:	e7fe      	b.n	8005664 <spiSend.constprop.21+0x24>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	b14a      	cbz	r2, 8005680 <spiSend.constprop.21+0x40>
 800566c:	b672      	cpsid	i
 800566e:	4b23      	ldr	r3, [pc, #140]	; (80056fc <spiSend.constprop.21+0xbc>)
 8005670:	4a23      	ldr	r2, [pc, #140]	; (8005700 <spiSend.constprop.21+0xc0>)
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
 8005674:	e7fe      	b.n	8005674 <spiSend.constprop.21+0x34>
 8005676:	b672      	cpsid	i
 8005678:	4b20      	ldr	r3, [pc, #128]	; (80056fc <spiSend.constprop.21+0xbc>)
 800567a:	4a21      	ldr	r2, [pc, #132]	; (8005700 <spiSend.constprop.21+0xc0>)
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c
 800567e:	e7fe      	b.n	800567e <spiSend.constprop.21+0x3e>
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8005680:	6a19      	ldr	r1, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8005684:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005686:	6adc      	ldr	r4, [r3, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005688:	6812      	ldr	r2, [r2, #0]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800568a:	481e      	ldr	r0, [pc, #120]	; (8005704 <spiSend.constprop.21+0xc4>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800568c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800568e:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005690:	2501      	movs	r5, #1
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005692:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  spiStartSendI(spip, n, txbuf);
 8005696:	2003      	movs	r0, #3
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005698:	604d      	str	r5, [r1, #4]
 800569a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800569c:	600f      	str	r7, [r1, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800569e:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80056a0:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80056a2:	6014      	str	r4, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 80056a4:	680d      	ldr	r5, [r1, #0]
 80056a6:	4c15      	ldr	r4, [pc, #84]	; (80056fc <spiSend.constprop.21+0xbc>)
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 80056a8:	689f      	ldr	r7, [r3, #8]
 80056aa:	69a6      	ldr	r6, [r4, #24]
 80056ac:	f045 0501 	orr.w	r5, r5, #1
 80056b0:	600d      	str	r5, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 80056b2:	6811      	ldr	r1, [r2, #0]
 80056b4:	f041 0101 	orr.w	r1, r1, #1
 80056b8:	6011      	str	r1, [r2, #0]
 80056ba:	b11f      	cbz	r7, 80056c4 <spiSend.constprop.21+0x84>
 80056bc:	b672      	cpsid	i
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <spiSend.constprop.21+0xc8>)
 80056c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056c2:	e7fe      	b.n	80056c2 <spiSend.constprop.21+0x82>

  *trp = tp;
 80056c4:	f843 6f08 	str.w	r6, [r3, #8]!
  tp->p_u.wttrp = trp;
 80056c8:	6273      	str	r3, [r6, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80056ca:	f7fe f9a9 	bl	8003a20 <chSchGoSleepS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80056ce:	f7fe fbbf 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80056d2:	f7fe f92d 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	42a3      	cmp	r3, r4
 80056da:	d004      	beq.n	80056e6 <spiSend.constprop.21+0xa6>
 80056dc:	69a2      	ldr	r2, [r4, #24]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	6892      	ldr	r2, [r2, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d303      	bcc.n	80056ee <spiSend.constprop.21+0xae>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80056e6:	2300      	movs	r3, #0
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056ee:	b672      	cpsid	i
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <spiSend.constprop.21+0xcc>)
 80056f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f4:	e7fe      	b.n	80056f4 <spiSend.constprop.21+0xb4>
 80056f6:	bf00      	nop
 80056f8:	2000d04c 	.word	0x2000d04c
 80056fc:	2000d228 	.word	0x2000d228
 8005700:	08006e20 	.word	0x08006e20
 8005704:	2000da1a 	.word	0x2000da1a
 8005708:	08006ee0 	.word	0x08006ee0
 800570c:	08006f20 	.word	0x08006f20

08005710 <TFT_thread.lto_priv.73>:
  }
}

static THD_WORKING_AREA(TFT_thread_wa, 4096);
static THD_FUNCTION(TFT_thread, p)
{
 8005710:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005714:	4d0f      	ldr	r5, [pc, #60]	; (8005754 <TFT_thread.lto_priv.73+0x44>)
  * @retval None
  */
void tft_init(uint8_t orientation, uint16_t in_bg_color,
  uint16_t in_text_color, uint16_t in_text_color_sp)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <TFT_thread.lto_priv.73+0x48>)
 8005718:	69aa      	ldr	r2, [r5, #24]
 800571a:	4910      	ldr	r1, [pc, #64]	; (800575c <TFT_thread.lto_priv.73+0x4c>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800571c:	4c10      	ldr	r4, [pc, #64]	; (8005760 <TFT_thread.lto_priv.73+0x50>)
 800571e:	6191      	str	r1, [r2, #24]
 8005720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005724:	831a      	strh	r2, [r3, #24]
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	4620      	mov	r0, r4
 800572a:	f7fe fbb1 	bl	8003e90 <chMtxLock>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800572e:	2320      	movs	r3, #32
 8005730:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8005734:	f7fe f914 	bl	8003960 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8005738:	f7fe fb9a 	bl	8003e70 <_dbg_check_lock>
void spiStart(SPIDriver *spip, const SPIConfig *config) {

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800573c:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
 8005740:	1e53      	subs	r3, r2, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	f1a4 040c 	sub.w	r4, r4, #12
 8005748:	d90e      	bls.n	8005768 <TFT_thread.lto_priv.73+0x58>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800574a:	b672      	cpsid	i
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <TFT_thread.lto_priv.73+0x54>)
 800574e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005750:	e7fe      	b.n	8005750 <TFT_thread.lto_priv.73+0x40>
 8005752:	bf00      	nop
 8005754:	2000d228 	.word	0x2000d228
 8005758:	40020400 	.word	0x40020400
 800575c:	08007f50 	.word	0x08007f50
 8005760:	2000d058 	.word	0x2000d058
 8005764:	08007f90 	.word	0x08007f90
                "invalid state");
  spip->config = config;
 8005768:	4be4      	ldr	r3, [pc, #912]	; (8005afc <TFT_thread.lto_priv.73+0x3ec>)
 800576a:	6063      	str	r3, [r4, #4]
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 800576c:	2a01      	cmp	r2, #1
 800576e:	f000 8216 	beq.w	8005b9e <TFT_thread.lto_priv.73+0x48e>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8005772:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8005774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8005776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8005778:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800577a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800577e:	bf48      	it	mi
 8005780:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8005784:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005788:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800578a:	bf48      	it	mi
 800578c:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8005790:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005792:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8005794:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8005798:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800579a:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800579c:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800579e:	6019      	str	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80057a0:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a8:	601a      	str	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80057ae:	f7fe fb4f 	bl	8003e50 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80057b2:	f7fe f8bd 	bl	8003930 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80057b6:	682a      	ldr	r2, [r5, #0]
 80057b8:	4bd1      	ldr	r3, [pc, #836]	; (8005b00 <TFT_thread.lto_priv.73+0x3f0>)
 80057ba:	42aa      	cmp	r2, r5
 80057bc:	d005      	beq.n	80057ca <TFT_thread.lto_priv.73+0xba>
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	6889      	ldr	r1, [r1, #8]
 80057c4:	4291      	cmp	r1, r2
 80057c6:	f0c0 8207 	bcc.w	8005bd8 <TFT_thread.lto_priv.73+0x4c8>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80057ca:	2400      	movs	r4, #0
 80057cc:	f384 8811 	msr	BASEPRI, r4
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 80057d0:	4dcc      	ldr	r5, [pc, #816]	; (8005b04 <TFT_thread.lto_priv.73+0x3f4>)
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 80057d2:	4ecd      	ldr	r6, [pc, #820]	; (8005b08 <TFT_thread.lto_priv.73+0x3f8>)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 80057d4:	696b      	ldr	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 80057d6:	f44f 4780 	mov.w	r7, #16384	; 0x4000
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 80057da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057de:	616b      	str	r3, [r5, #20]
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 80057e0:	200a      	movs	r0, #10
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 80057e2:	8377      	strh	r7, [r6, #26]
	chThdSleepMilliseconds(1);
 80057e4:	f7fe fc34 	bl	8004050 <chThdSleep>
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 80057e8:	200a      	movs	r0, #10
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
 80057ea:	8337      	strh	r7, [r6, #24]
	chThdSleepMilliseconds(1);
 80057ec:	f7fe fc30 	bl	8004050 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED4);

  tft_reset();

  palTogglePad(GPIOD,GPIOD_LED5);
 80057f0:	696b      	ldr	r3, [r5, #20]
 80057f2:	407b      	eors	r3, r7
 80057f4:	616b      	str	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_config(void)
{
	tft_write_command(0x01);   //Sofeware setting
 80057f6:	2001      	movs	r0, #1
 80057f8:	f7fe fdb2 	bl	8004360 <tft_write_command>
	//chThdSleepMilliseconds(0);
	tft_write_command(0x11);//Sleep out
 80057fc:	2011      	movs	r0, #17
 80057fe:	f7fe fdaf 	bl	8004360 <tft_write_command>
	chThdSleepMilliseconds(120);
 8005802:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8005806:	f7fe fc23 	bl	8004050 <chThdSleep>

	//ST7735R Frame Rate
	tft_write_command(0xB1);
 800580a:	20b1      	movs	r0, #177	; 0xb1
 800580c:	f7fe fda8 	bl	8004360 <tft_write_command>
	tft_write_data(0x01);
 8005810:	2001      	movs	r0, #1
 8005812:	f7fe fd8d 	bl	8004330 <tft_write_data>
	tft_write_data(0x2C);
 8005816:	202c      	movs	r0, #44	; 0x2c
 8005818:	f7fe fd8a 	bl	8004330 <tft_write_data>
	tft_write_data(0x2D);
 800581c:	202d      	movs	r0, #45	; 0x2d
 800581e:	f7fe fd87 	bl	8004330 <tft_write_data>
	tft_write_command(0xB2);
 8005822:	20b2      	movs	r0, #178	; 0xb2
 8005824:	f7fe fd9c 	bl	8004360 <tft_write_command>
	tft_write_data(0x01);
 8005828:	2001      	movs	r0, #1
 800582a:	f7fe fd81 	bl	8004330 <tft_write_data>
	tft_write_data(0x2C);
 800582e:	202c      	movs	r0, #44	; 0x2c
 8005830:	f7fe fd7e 	bl	8004330 <tft_write_data>
	tft_write_data(0x2D);
 8005834:	202d      	movs	r0, #45	; 0x2d
 8005836:	f7fe fd7b 	bl	8004330 <tft_write_data>
	tft_write_command(0xB3);
 800583a:	20b3      	movs	r0, #179	; 0xb3
 800583c:	f7fe fd90 	bl	8004360 <tft_write_command>
	tft_write_data(0x01);
 8005840:	2001      	movs	r0, #1
 8005842:	f7fe fd75 	bl	8004330 <tft_write_data>
	tft_write_data(0x2C);
 8005846:	202c      	movs	r0, #44	; 0x2c
 8005848:	f7fe fd72 	bl	8004330 <tft_write_data>
	tft_write_data(0x2D);
 800584c:	202d      	movs	r0, #45	; 0x2d
 800584e:	f7fe fd6f 	bl	8004330 <tft_write_data>
	tft_write_data(0x01);
 8005852:	2001      	movs	r0, #1
 8005854:	f7fe fd6c 	bl	8004330 <tft_write_data>
	tft_write_data(0x2C);
 8005858:	202c      	movs	r0, #44	; 0x2c
 800585a:	f7fe fd69 	bl	8004330 <tft_write_data>
	tft_write_data(0x2D);
 800585e:	202d      	movs	r0, #45	; 0x2d
 8005860:	f7fe fd66 	bl	8004330 <tft_write_data>
	//------------------------------------End ST7735R Frame Rate-----------------------------------------//
	tft_write_command(0xB4);//Column inversion
 8005864:	20b4      	movs	r0, #180	; 0xb4
 8005866:	f7fe fd7b 	bl	8004360 <tft_write_command>
	tft_write_data(0x07);
 800586a:	2007      	movs	r0, #7
 800586c:	f7fe fd60 	bl	8004330 <tft_write_data>
	//------------------------------------ST7735R Power Sequence-----------------------------------------//
	tft_write_command(0xC0);
 8005870:	20c0      	movs	r0, #192	; 0xc0
 8005872:	f7fe fd75 	bl	8004360 <tft_write_command>
	tft_write_data(0xA2);
 8005876:	20a2      	movs	r0, #162	; 0xa2
 8005878:	f7fe fd5a 	bl	8004330 <tft_write_data>
	tft_write_data(0x02);
 800587c:	2002      	movs	r0, #2
 800587e:	f7fe fd57 	bl	8004330 <tft_write_data>
	tft_write_data(0x84);
 8005882:	2084      	movs	r0, #132	; 0x84
 8005884:	f7fe fd54 	bl	8004330 <tft_write_data>
	tft_write_command(0xC1);
 8005888:	20c1      	movs	r0, #193	; 0xc1
 800588a:	f7fe fd69 	bl	8004360 <tft_write_command>
	tft_write_data(0xC5);
 800588e:	20c5      	movs	r0, #197	; 0xc5
 8005890:	f7fe fd4e 	bl	8004330 <tft_write_data>
	tft_write_command(0xC2);
 8005894:	20c2      	movs	r0, #194	; 0xc2
 8005896:	f7fe fd63 	bl	8004360 <tft_write_command>
	tft_write_data(0x0A);
 800589a:	200a      	movs	r0, #10
 800589c:	f7fe fd48 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80058a0:	4620      	mov	r0, r4
 80058a2:	f7fe fd45 	bl	8004330 <tft_write_data>
	tft_write_command(0xC3);
 80058a6:	20c3      	movs	r0, #195	; 0xc3
 80058a8:	f7fe fd5a 	bl	8004360 <tft_write_command>
	tft_write_data(0x8A);
 80058ac:	208a      	movs	r0, #138	; 0x8a
 80058ae:	f7fe fd3f 	bl	8004330 <tft_write_data>
	tft_write_data(0x2A);
 80058b2:	202a      	movs	r0, #42	; 0x2a
 80058b4:	f7fe fd3c 	bl	8004330 <tft_write_data>
	tft_write_command(0xC4);
 80058b8:	20c4      	movs	r0, #196	; 0xc4
 80058ba:	f7fe fd51 	bl	8004360 <tft_write_command>
	tft_write_data(0x8A);
 80058be:	208a      	movs	r0, #138	; 0x8a
 80058c0:	f7fe fd36 	bl	8004330 <tft_write_data>
	tft_write_data(0xEE);
 80058c4:	20ee      	movs	r0, #238	; 0xee
 80058c6:	f7fe fd33 	bl	8004330 <tft_write_data>
	//---------------------------------End ST7735R Power Sequence-------------------------------------//
	tft_write_command(0xC5);//VCOM
 80058ca:	20c5      	movs	r0, #197	; 0xc5
 80058cc:	f7fe fd48 	bl	8004360 <tft_write_command>
	tft_write_data(0x0E);
 80058d0:	200e      	movs	r0, #14
 80058d2:	f7fe fd2d 	bl	8004330 <tft_write_data>
	tft_write_command(0x36);//MX, MY, RGB mode
 80058d6:	2036      	movs	r0, #54	; 0x36
 80058d8:	f7fe fd42 	bl	8004360 <tft_write_command>
	tft_write_data(0xC8);
 80058dc:	20c8      	movs	r0, #200	; 0xc8
 80058de:	f7fe fd27 	bl	8004330 <tft_write_data>
	//------------------------------------ST7735R Gamma Sequence-----------------------------------------//
	tft_write_command(0xe0);
 80058e2:	20e0      	movs	r0, #224	; 0xe0
 80058e4:	f7fe fd3c 	bl	8004360 <tft_write_command>
	tft_write_data(0x02);
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7fe fd21 	bl	8004330 <tft_write_data>
	tft_write_data(0x1c);
 80058ee:	201c      	movs	r0, #28
 80058f0:	f7fe fd1e 	bl	8004330 <tft_write_data>
	tft_write_data(0x07);
 80058f4:	2007      	movs	r0, #7
 80058f6:	f7fe fd1b 	bl	8004330 <tft_write_data>
	tft_write_data(0x12);
 80058fa:	2012      	movs	r0, #18
 80058fc:	f7fe fd18 	bl	8004330 <tft_write_data>
	tft_write_data(0x37);
 8005900:	2037      	movs	r0, #55	; 0x37
 8005902:	f7fe fd15 	bl	8004330 <tft_write_data>
	tft_write_data(0x32);
 8005906:	2032      	movs	r0, #50	; 0x32
 8005908:	f7fe fd12 	bl	8004330 <tft_write_data>
	tft_write_data(0x29);
 800590c:	2029      	movs	r0, #41	; 0x29
 800590e:	f7fe fd0f 	bl	8004330 <tft_write_data>
	tft_write_data(0x2d);
 8005912:	202d      	movs	r0, #45	; 0x2d
 8005914:	f7fe fd0c 	bl	8004330 <tft_write_data>
	tft_write_data(0x29);
 8005918:	2029      	movs	r0, #41	; 0x29
 800591a:	f7fe fd09 	bl	8004330 <tft_write_data>
	tft_write_data(0x25);
 800591e:	2025      	movs	r0, #37	; 0x25
 8005920:	f7fe fd06 	bl	8004330 <tft_write_data>
	tft_write_data(0x2b);
 8005924:	202b      	movs	r0, #43	; 0x2b
 8005926:	f7fe fd03 	bl	8004330 <tft_write_data>
	tft_write_data(0x39);
 800592a:	2039      	movs	r0, #57	; 0x39
 800592c:	f7fe fd00 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 8005930:	4620      	mov	r0, r4
 8005932:	f7fe fcfd 	bl	8004330 <tft_write_data>
	tft_write_data(0x01);
 8005936:	2001      	movs	r0, #1
 8005938:	f7fe fcfa 	bl	8004330 <tft_write_data>
	tft_write_data(0x03);
 800593c:	2003      	movs	r0, #3
 800593e:	f7fe fcf7 	bl	8004330 <tft_write_data>
	tft_write_data(0x10);
 8005942:	2010      	movs	r0, #16
 8005944:	f7fe fcf4 	bl	8004330 <tft_write_data>
	tft_write_command(0xe1);
 8005948:	20e1      	movs	r0, #225	; 0xe1
 800594a:	f7fe fd09 	bl	8004360 <tft_write_command>
	tft_write_data(0x03);
 800594e:	2003      	movs	r0, #3
 8005950:	f7fe fcee 	bl	8004330 <tft_write_data>
	tft_write_data(0x1d);
 8005954:	201d      	movs	r0, #29
 8005956:	f7fe fceb 	bl	8004330 <tft_write_data>
	tft_write_data(0x07);
 800595a:	2007      	movs	r0, #7
 800595c:	f7fe fce8 	bl	8004330 <tft_write_data>
	tft_write_data(0x06);
 8005960:	2006      	movs	r0, #6
 8005962:	f7fe fce5 	bl	8004330 <tft_write_data>
	tft_write_data(0x2e);
 8005966:	202e      	movs	r0, #46	; 0x2e
 8005968:	f7fe fce2 	bl	8004330 <tft_write_data>
	tft_write_data(0x2c);
 800596c:	202c      	movs	r0, #44	; 0x2c
 800596e:	f7fe fcdf 	bl	8004330 <tft_write_data>
	tft_write_data(0x29);
 8005972:	2029      	movs	r0, #41	; 0x29
 8005974:	f7fe fcdc 	bl	8004330 <tft_write_data>
	tft_write_data(0x2d);
 8005978:	202d      	movs	r0, #45	; 0x2d
 800597a:	f7fe fcd9 	bl	8004330 <tft_write_data>
	tft_write_data(0x2e);
 800597e:	202e      	movs	r0, #46	; 0x2e
 8005980:	f7fe fcd6 	bl	8004330 <tft_write_data>
	tft_write_data(0x2e);
 8005984:	202e      	movs	r0, #46	; 0x2e
 8005986:	f7fe fcd3 	bl	8004330 <tft_write_data>
	tft_write_data(0x37);
 800598a:	2037      	movs	r0, #55	; 0x37
 800598c:	f7fe fcd0 	bl	8004330 <tft_write_data>
	tft_write_data(0x3f);
 8005990:	203f      	movs	r0, #63	; 0x3f
 8005992:	f7fe fccd 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 8005996:	4620      	mov	r0, r4
 8005998:	f7fe fcca 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 800599c:	4620      	mov	r0, r4
 800599e:	f7fe fcc7 	bl	8004330 <tft_write_data>
	tft_write_data(0x02);
 80059a2:	2002      	movs	r0, #2
 80059a4:	f7fe fcc4 	bl	8004330 <tft_write_data>
	tft_write_data(0x10);
 80059a8:	2010      	movs	r0, #16
 80059aa:	f7fe fcc1 	bl	8004330 <tft_write_data>
	tft_write_command(0x2A);
 80059ae:	202a      	movs	r0, #42	; 0x2a
 80059b0:	f7fe fcd6 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7fe fcbb 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7fe fcb8 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7fe fcb5 	bl	8004330 <tft_write_data>
	tft_write_data(0x7f);
 80059c6:	207f      	movs	r0, #127	; 0x7f
 80059c8:	f7fe fcb2 	bl	8004330 <tft_write_data>

	tft_write_command(0x2B);
 80059cc:	202b      	movs	r0, #43	; 0x2b
 80059ce:	f7fe fcc7 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7fe fcac 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80059d8:	4620      	mov	r0, r4
 80059da:	f7fe fca9 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 80059de:	4620      	mov	r0, r4
 80059e0:	f7fe fca6 	bl	8004330 <tft_write_data>
	tft_write_data(0x9f);
 80059e4:	209f      	movs	r0, #159	; 0x9f
 80059e6:	f7fe fca3 	bl	8004330 <tft_write_data>
	//------------------------------------End ST7735R Gamma Sequence-----------------------------------------//

	tft_write_command(0x3A);
 80059ea:	203a      	movs	r0, #58	; 0x3a
 80059ec:	f7fe fcb8 	bl	8004360 <tft_write_command>
	tft_write_data(0x05);
 80059f0:	2005      	movs	r0, #5
 80059f2:	f7fe fc9d 	bl	8004330 <tft_write_data>
	tft_write_command(0x29);//Display on
 80059f6:	2029      	movs	r0, #41	; 0x29
 80059f8:	f7fe fcb2 	bl	8004360 <tft_write_command>

	chThdSleepMilliseconds(10);
 80059fc:	2064      	movs	r0, #100	; 0x64
 80059fe:	f7fe fb27 	bl	8004050 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED5);

  tft_config();

  palTogglePad(GPIOD,GPIOD_LED6);
 8005a02:	696b      	ldr	r3, [r5, #20]
 8005a04:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8005a08:	616b      	str	r3, [r5, #20]

  tft_write_command(0x2C);
 8005a0a:	202c      	movs	r0, #44	; 0x2c
 8005a0c:	f7fe fca8 	bl	8004360 <tft_write_command>
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 8005a10:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <TFT_thread.lto_priv.73+0x3fc>)
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 8005a12:	493f      	ldr	r1, [pc, #252]	; (8005b10 <TFT_thread.lto_priv.73+0x400>)
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 8005a14:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <TFT_thread.lto_priv.73+0x404>)
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 8005a16:	8014      	strh	r4, [r2, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 8005a18:	202a      	movs	r0, #42	; 0x2a
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 8005a1a:	f64f 4251 	movw	r2, #64593	; 0xfc51
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 8005a1e:	800c      	strh	r4, [r1, #0]
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 8005a20:	801a      	strh	r2, [r3, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 8005a22:	f7fe fc9d 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7fe fc82 	bl	8004330 <tft_write_data>
	tft_write_data(0x00); 				// X START
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7fe fc7f 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7fe fc7c 	bl	8004330 <tft_write_data>
	tft_write_data(0x7f); 			// X END
 8005a38:	207f      	movs	r0, #127	; 0x7f
 8005a3a:	f7fe fc79 	bl	8004330 <tft_write_data>

	tft_write_command(0x2b);		// Row addr set
 8005a3e:	202b      	movs	r0, #43	; 0x2b
 8005a40:	f7fe fc8e 	bl	8004360 <tft_write_command>
	tft_write_data(0x00);
 8005a44:	4620      	mov	r0, r4
 8005a46:	f7fe fc73 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);				// Y START
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7fe fc70 	bl	8004330 <tft_write_data>
	tft_write_data(0x00);
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7fe fc6d 	bl	8004330 <tft_write_data>
	tft_write_data(0x9f);			// Y END
 8005a56:	209f      	movs	r0, #159	; 0x9f
 8005a58:	f7fe fc6a 	bl	8004330 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 8005a5c:	202c      	movs	r0, #44	; 0x2c
 8005a5e:	f7fe fc7f 	bl	8004360 <tft_write_command>
 8005a62:	f44f 44a0 	mov.w	r4, #20480	; 0x5000

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
		tft_write_data(color >> 8);
 8005a66:	20fc      	movs	r0, #252	; 0xfc
 8005a68:	3c01      	subs	r4, #1
 8005a6a:	f7fe fc61 	bl	8004330 <tft_write_data>
 8005a6e:	b2a4      	uxth	r4, r4
		tft_write_data(color);
 8005a70:	2051      	movs	r0, #81	; 0x51
 8005a72:	f7fe fc5d 	bl	8004330 <tft_write_data>
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d1f5      	bne.n	8005a66 <TFT_thread.lto_priv.73+0x356>

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 8005a7a:	4927      	ldr	r1, [pc, #156]	; (8005b18 <TFT_thread.lto_priv.73+0x408>)
 8005a7c:	4d27      	ldr	r5, [pc, #156]	; (8005b1c <TFT_thread.lto_priv.73+0x40c>)
 8005a7e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8005b3c <TFT_thread.lto_priv.73+0x42c>
 8005a82:	2201      	movs	r2, #1
 8005a84:	4623      	mov	r3, r4
 8005a86:	4620      	mov	r0, r4
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 8005a88:	4626      	mov	r6, r4

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 8005a8a:	700a      	strb	r2, [r1, #0]


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
			text[x][y] = ' ';
 8005a8c:	f04f 0a20 	mov.w	sl, #32
			text_color[x][y] = in_text_color;
			bg_color[x][y] = in_bg_color;
 8005a90:	f64f 4951 	movw	r9, #64593	; 0xfc51
 8005a94:	4c22      	ldr	r4, [pc, #136]	; (8005b20 <TFT_thread.lto_priv.73+0x410>)
 8005a96:	1e41      	subs	r1, r0, #1
 8005a98:	eb05 0c01 	add.w	ip, r5, r1
 8005a9c:	4421      	add	r1, r4
 8005a9e:	4c21      	ldr	r4, [pc, #132]	; (8005b24 <TFT_thread.lto_priv.73+0x414>)
 8005aa0:	9101      	str	r1, [sp, #4]
 8005aa2:	1e9a      	subs	r2, r3, #2
 8005aa4:	eb04 0e02 	add.w	lr, r4, r2
 8005aa8:	491f      	ldr	r1, [pc, #124]	; (8005b28 <TFT_thread.lto_priv.73+0x418>)
 8005aaa:	4c20      	ldr	r4, [pc, #128]	; (8005b2c <TFT_thread.lto_priv.73+0x41c>)
 8005aac:	18a7      	adds	r7, r4, r2
 8005aae:	eb0b 0402 	add.w	r4, fp, r2
 8005ab2:	440a      	add	r2, r1
 8005ab4:	9901      	ldr	r1, [sp, #4]
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	f108 0801 	add.w	r8, r8, #1
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 8005abe:	f1b8 0f0a 	cmp.w	r8, #10
			text[x][y] = ' ';
 8005ac2:	f80c af01 	strb.w	sl, [ip, #1]!
			text_color[x][y] = in_text_color;
 8005ac6:	f82e 6f02 	strh.w	r6, [lr, #2]!
			bg_color[x][y] = in_bg_color;
 8005aca:	f827 9f02 	strh.w	r9, [r7, #2]!

			text_prev[x][y] = ' ';
 8005ace:	f801 af01 	strb.w	sl, [r1, #1]!
			text_color_prev[x][y] = in_text_color;
 8005ad2:	f824 6f02 	strh.w	r6, [r4, #2]!
			bg_color_prev[x][y] = in_bg_color;
 8005ad6:	f822 9f02 	strh.w	r9, [r2, #2]!
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 8005ada:	d1ee      	bne.n	8005aba <TFT_thread.lto_priv.73+0x3aa>
 8005adc:	300a      	adds	r0, #10
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
 8005ade:	28c8      	cmp	r0, #200	; 0xc8
 8005ae0:	f103 0314 	add.w	r3, r3, #20
 8005ae4:	d1d6      	bne.n	8005a94 <TFT_thread.lto_priv.73+0x384>
 8005ae6:	f8df a058 	ldr.w	sl, [pc, #88]	; 8005b40 <TFT_thread.lto_priv.73+0x430>

  //uint32_t count = 0;
  while(true)
  {
    //if(count%80 < 8)
    tft_printf(5,1,"Theta:%6d",(int16_t)(g_IMU1.theta * 100.0f));
 8005aea:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8005b30 <TFT_thread.lto_priv.73+0x420>
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <TFT_thread.lto_priv.73+0x424>)
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <TFT_thread.lto_priv.73+0x428>)
 8005af2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005af6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005afa:	e023      	b.n	8005b44 <TFT_thread.lto_priv.73+0x434>
 8005afc:	08007f80 	.word	0x08007f80
 8005b00:	2000d228 	.word	0x2000d228
 8005b04:	40020c00 	.word	0x40020c00
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	2000d224 	.word	0x2000d224
 8005b10:	2000dbee 	.word	0x2000dbee
 8005b14:	2000da18 	.word	0x2000da18
 8005b18:	2000ddb8 	.word	0x2000ddb8
 8005b1c:	2000d084 	.word	0x2000d084
 8005b20:	2000d15c 	.word	0x2000d15c
 8005b24:	2000da48 	.word	0x2000da48
 8005b28:	2000dc28 	.word	0x2000dc28
 8005b2c:	2000cebc 	.word	0x2000cebc
 8005b30:	42c80000 	.word	0x42c80000
 8005b34:	2000bcc4 	.word	0x2000bcc4
 8005b38:	08007f5c 	.word	0x08007f5c
 8005b3c:	2000d888 	.word	0x2000d888
 8005b40:	08006f50 	.word	0x08006f50
 8005b44:	2005      	movs	r0, #5
 8005b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	edcd 7a01 	vstr	s15, [sp, #4]
 8005b50:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005b54:	f7ff fa0c 	bl	8004f70 <tft_printf.constprop.9>
    tft_printf(5,5,"RC1:%5d", rc_channel[0]);
 8005b58:	4bb6      	ldr	r3, [pc, #728]	; (8005e34 <TFT_thread.lto_priv.73+0x724>)
 8005b5a:	4ab7      	ldr	r2, [pc, #732]	; (8005e38 <TFT_thread.lto_priv.73+0x728>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2005      	movs	r0, #5
 8005b60:	4601      	mov	r1, r0
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	f7ff fa04 	bl	8004f70 <tft_printf.constprop.9>
    tft_printf(5,6,"RC2:%5d", rc_channel[1]);
 8005b68:	4bb2      	ldr	r3, [pc, #712]	; (8005e34 <TFT_thread.lto_priv.73+0x724>)
 8005b6a:	4ab4      	ldr	r2, [pc, #720]	; (8005e3c <TFT_thread.lto_priv.73+0x72c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2005      	movs	r0, #5
 8005b70:	885b      	ldrh	r3, [r3, #2]
 8005b72:	2106      	movs	r1, #6
 8005b74:	f7ff f9fc 	bl	8004f70 <tft_printf.constprop.9>
    tft_printf(5,7,"RC3:%5d", rc_channel[2]);
 8005b78:	4bae      	ldr	r3, [pc, #696]	; (8005e34 <TFT_thread.lto_priv.73+0x724>)
 8005b7a:	4ab1      	ldr	r2, [pc, #708]	; (8005e40 <TFT_thread.lto_priv.73+0x730>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2005      	movs	r0, #5
 8005b80:	889b      	ldrh	r3, [r3, #4]
 8005b82:	2107      	movs	r1, #7
 8005b84:	f7ff f9f4 	bl	8004f70 <tft_printf.constprop.9>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8005b88:	4bae      	ldr	r3, [pc, #696]	; (8005e44 <TFT_thread.lto_priv.73+0x734>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	f200 82a3 	bhi.w	80060d8 <TFT_thread.lto_priv.73+0x9c8>
 8005b92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b96:	01f8      	.short	0x01f8
 8005b98:	00be016b 	.word	0x00be016b
 8005b9c:	002d      	.short	0x002d
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8005b9e:	6a20      	ldr	r0, [r4, #32]
 8005ba0:	4aa9      	ldr	r2, [pc, #676]	; (8005e48 <TFT_thread.lto_priv.73+0x738>)
 8005ba2:	210a      	movs	r1, #10
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	f7fd f823 	bl	8002bf0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8005baa:	b9e8      	cbnz	r0, 8005be8 <TFT_thread.lto_priv.73+0x4d8>
      b = dmaStreamAllocate(spip->dmatx,
 8005bac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bae:	4aa7      	ldr	r2, [pc, #668]	; (8005e4c <TFT_thread.lto_priv.73+0x73c>)
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	f7fd f81c 	bl	8002bf0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8005bb8:	b990      	cbnz	r0, 8005be0 <TFT_thread.lto_priv.73+0x4d0>
      rccEnableSPI2(FALSE);
 8005bba:	48a5      	ldr	r0, [pc, #660]	; (8005e50 <TFT_thread.lto_priv.73+0x740>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8005bbc:	6a26      	ldr	r6, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8005bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8005bc0:	6c01      	ldr	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8005bc2:	69e2      	ldr	r2, [r4, #28]
 8005bc4:	6837      	ldr	r7, [r6, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8005bc6:	681e      	ldr	r6, [r3, #0]
 8005bc8:	6863      	ldr	r3, [r4, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8005bca:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8005bcc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005bd0:	6401      	str	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8005bd2:	60ba      	str	r2, [r7, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8005bd4:	60b2      	str	r2, [r6, #8]
 8005bd6:	e5cc      	b.n	8005772 <TFT_thread.lto_priv.73+0x62>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bd8:	b672      	cpsid	i
 8005bda:	4a9e      	ldr	r2, [pc, #632]	; (8005e54 <TFT_thread.lto_priv.73+0x744>)
 8005bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bde:	e7fe      	b.n	8005bde <TFT_thread.lto_priv.73+0x4ce>
 8005be0:	b672      	cpsid	i
 8005be2:	4b9d      	ldr	r3, [pc, #628]	; (8005e58 <TFT_thread.lto_priv.73+0x748>)
 8005be4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005be6:	e7fe      	b.n	8005be6 <TFT_thread.lto_priv.73+0x4d6>
 8005be8:	b672      	cpsid	i
 8005bea:	4b9b      	ldr	r3, [pc, #620]	; (8005e58 <TFT_thread.lto_priv.73+0x748>)
 8005bec:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005bee:	e7fe      	b.n	8005bee <TFT_thread.lto_priv.73+0x4de>
 8005bf0:	2313      	movs	r3, #19
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9304      	str	r3, [sp, #16]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8005bf8:	9b04      	ldr	r3, [sp, #16]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005bfa:	9907      	ldr	r1, [sp, #28]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8005bfc:	3307      	adds	r3, #7
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	9306      	str	r3, [sp, #24]
 8005c02:	b2cb      	uxtb	r3, r1
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005c04:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005c08:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8005c0a:	2300      	movs	r3, #0
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005c0c:	ea4f 064c 	mov.w	r6, ip, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8005c10:	9301      	str	r3, [sp, #4]
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
 8005c12:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8005c16:	9803      	ldr	r0, [sp, #12]
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f7ff faf1 	bl	8005200 <tft_char_is_changed>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f000 82a8 	beq.w	8006174 <TFT_thread.lto_priv.73+0xa64>
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 8005c24:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
 8005c28:	f109 0b01 	add.w	fp, r9, #1
 8005c2c:	f1bb 0f07 	cmp.w	fp, #7
 8005c30:	f300 82b9 	bgt.w	80061a6 <TFT_thread.lto_priv.73+0xa96>
 8005c34:	2401      	movs	r4, #1
 8005c36:	46a0      	mov	r8, r4
 8005c38:	9602      	str	r6, [sp, #8]
 8005c3a:	4626      	mov	r6, r4
 8005c3c:	464c      	mov	r4, r9
 8005c3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005c42:	e008      	b.n	8005c56 <TFT_thread.lto_priv.73+0x546>
 8005c44:	fa1f f883 	uxth.w	r8, r3
 8005c48:	fa0f f688 	sxth.w	r6, r8
 8005c4c:	eb06 0b04 	add.w	fp, r6, r4
 8005c50:	f1bb 0f07 	cmp.w	fp, #7
 8005c54:	dc09      	bgt.n	8005c6a <TFT_thread.lto_priv.73+0x55a>
 8005c56:	eb07 0108 	add.w	r1, r7, r8
 8005c5a:	b2c9      	uxtb	r1, r1
 8005c5c:	4648      	mov	r0, r9
 8005c5e:	f7ff facf 	bl	8005200 <tft_char_is_changed>
 8005c62:	f108 0301 	add.w	r3, r8, #1
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d1ec      	bne.n	8005c44 <TFT_thread.lto_priv.73+0x534>
 8005c6a:	4634      	mov	r4, r6
 8005c6c:	fa1f f388 	uxth.w	r3, r8
 8005c70:	9e02      	ldr	r6, [sp, #8]
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	0124      	lsls	r4, r4, #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8005c76:	9f01      	ldr	r7, [sp, #4]
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	9904      	ldr	r1, [sp, #16]
 8005c7c:	ea4f 120b 	mov.w	r2, fp, lsl #4
 8005c80:	0138      	lsls	r0, r7, #4
 8005c82:	3a01      	subs	r2, #1
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8005c8a:	b2bf      	uxth	r7, r7
 8005c8c:	9701      	str	r7, [sp, #4]
 8005c8e:	f7ff faff 	bl	8005290 <tft_set_char_pos>
 8005c92:	2307      	movs	r3, #7
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	46b3      	mov	fp, r6
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	f340 825d 	ble.w	8006158 <TFT_thread.lto_priv.73+0xa48>
 8005c9e:	9b02      	ldr	r3, [sp, #8]
 8005ca0:	2780      	movs	r7, #128	; 0x80
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	411f      	asrs	r7, r3
 8005ca6:	4630      	mov	r0, r6
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005ca8:	f04f 0810 	mov.w	r8, #16
 8005cac:	e01a      	b.n	8005ce4 <TFT_thread.lto_priv.73+0x5d4>
 8005cae:	b21b      	sxth	r3, r3
 8005cb0:	fb18 3300 	smlabb	r3, r8, r0, r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8005cba:	423b      	tst	r3, r7
 8005cbc:	bf15      	itete	ne
 8005cbe:	4b67      	ldrne	r3, [pc, #412]	; (8005e5c <TFT_thread.lto_priv.73+0x74c>)
 8005cc0:	4b67      	ldreq	r3, [pc, #412]	; (8005e60 <TFT_thread.lto_priv.73+0x750>)
 8005cc2:	f833 9011 	ldrhne.w	r9, [r3, r1, lsl #1]
 8005cc6:	f833 9012 	ldrheq.w	r9, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 8005cca:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005cce:	f7fe fb2f 	bl	8004330 <tft_write_data>
 8005cd2:	b2b6      	uxth	r6, r6
								tft_write_data(clr);
 8005cd4:	fa5f f089 	uxtb.w	r0, r9
 8005cd8:	f7fe fb2a 	bl	8004330 <tft_write_data>
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8005cdc:	b230      	sxth	r0, r6
 8005cde:	42a0      	cmp	r0, r4
 8005ce0:	f280 823a 	bge.w	8006158 <TFT_thread.lto_priv.73+0xa48>
								y2 = y+py/CHAR_HEIGHT;
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	9901      	ldr	r1, [sp, #4]
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005ce8:	4b5e      	ldr	r3, [pc, #376]	; (8005e64 <TFT_thread.lto_priv.73+0x754>)
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
 8005cea:	4602      	mov	r2, r0
 8005cec:	bfb8      	it	lt
 8005cee:	f100 020f 	addlt.w	r2, r0, #15
 8005cf2:	eb01 1222 	add.w	r2, r1, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005cf6:	b212      	sxth	r2, r2
 8005cf8:	4003      	ands	r3, r0
 8005cfa:	eb0b 0002 	add.w	r0, fp, r2
 8005cfe:	4601      	mov	r1, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	5c28      	ldrb	r0, [r5, r0]
 8005d04:	460a      	mov	r2, r1
 8005d06:	dad2      	bge.n	8005cae <TFT_thread.lto_priv.73+0x59e>
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f063 030f 	orn	r3, r3, #15
 8005d0e:	3301      	adds	r3, #1
 8005d10:	e7cd      	b.n	8005cae <TFT_thread.lto_priv.73+0x59e>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8005d12:	2300      	movs	r3, #0
 8005d14:	f04f 0b09 	mov.w	fp, #9
 8005d18:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	330f      	adds	r3, #15
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	fa5f f38b 	uxtb.w	r3, fp
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	260f      	movs	r6, #15
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
 8005d2a:	b2f7      	uxtb	r7, r6
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	9902      	ldr	r1, [sp, #8]
 8005d30:	f7ff fa66 	bl	8005200 <tft_char_is_changed>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f000 81fb 	beq.w	8006130 <TFT_thread.lto_priv.73+0xa20>
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 8005d3a:	b234      	sxth	r4, r6
 8005d3c:	2c00      	cmp	r4, #0
 8005d3e:	f340 823b 	ble.w	80061b8 <TFT_thread.lto_priv.73+0xaa8>
 8005d42:	f04f 0901 	mov.w	r9, #1
 8005d46:	9601      	str	r6, [sp, #4]
 8005d48:	46c8      	mov	r8, r9
 8005d4a:	4626      	mov	r6, r4
 8005d4c:	9c02      	ldr	r4, [sp, #8]
 8005d4e:	e007      	b.n	8005d60 <TFT_thread.lto_priv.73+0x650>
 8005d50:	fa1f f883 	uxth.w	r8, r3
 8005d54:	fa0f f988 	sxth.w	r9, r8
 8005d58:	ebc9 0306 	rsb	r3, r9, r6
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db09      	blt.n	8005d74 <TFT_thread.lto_priv.73+0x664>
 8005d60:	ebc8 0007 	rsb	r0, r8, r7
 8005d64:	b2c0      	uxtb	r0, r0
 8005d66:	4621      	mov	r1, r4
 8005d68:	f7ff fa4a 	bl	8005200 <tft_char_is_changed>
 8005d6c:	f108 0301 	add.w	r3, r8, #1
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d1ed      	bne.n	8005d50 <TFT_thread.lto_priv.73+0x640>
 8005d74:	4634      	mov	r4, r6
 8005d76:	fa1f f388 	uxth.w	r3, r8
 8005d7a:	9e01      	ldr	r6, [sp, #4]
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 8005d82:	f1c4 040f 	rsb	r4, r4, #15
 8005d86:	eb04 0209 	add.w	r2, r4, r9
 8005d8a:	00d2      	lsls	r2, r2, #3
 8005d8c:	00e0      	lsls	r0, r4, #3
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	b2b4      	uxth	r4, r6
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	9b05      	ldr	r3, [sp, #20]
 8005d9c:	9401      	str	r4, [sp, #4]
 8005d9e:	f7ff fa77 	bl	8005290 <tft_set_char_pos>
 8005da2:	240f      	movs	r4, #15
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8005da4:	2f00      	cmp	r7, #0
 8005da6:	f340 81ba 	ble.w	800611e <TFT_thread.lto_priv.73+0xa0e>
 8005daa:	f04f 0900 	mov.w	r9, #0
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005dae:	2680      	movs	r6, #128	; 0x80
 8005db0:	4649      	mov	r1, r9
 8005db2:	e01f      	b.n	8005df4 <TFT_thread.lto_priv.73+0x6e4>
 8005db4:	b212      	sxth	r2, r2
 8005db6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8005dba:	f1c2 0207 	rsb	r2, r2, #7
 8005dbe:	fa46 f202 	asr.w	r2, r6, r2
 8005dc2:	4202      	tst	r2, r0
 8005dc4:	bf15      	itete	ne
 8005dc6:	4b25      	ldrne	r3, [pc, #148]	; (8005e5c <TFT_thread.lto_priv.73+0x74c>)
 8005dc8:	4a25      	ldreq	r2, [pc, #148]	; (8005e60 <TFT_thread.lto_priv.73+0x750>)
 8005dca:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8005dce:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8005dd2:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8005dd6:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8005dda:	f7fe faa9 	bl	8004330 <tft_write_data>
 8005dde:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8005de2:	fa5f f088 	uxtb.w	r0, r8
 8005de6:	f7fe faa3 	bl	8004330 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8005dea:	fa0f f189 	sxth.w	r1, r9
 8005dee:	42b9      	cmp	r1, r7
 8005df0:	f280 8195 	bge.w	800611e <TFT_thread.lto_priv.73+0xa0e>
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005df4:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <TFT_thread.lto_priv.73+0x758>)
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8005df6:	2900      	cmp	r1, #0
 8005df8:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005dfa:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8005dfe:	bfb8      	it	lt
 8005e00:	1dcb      	addlt	r3, r1, #7
 8005e02:	9901      	ldr	r1, [sp, #4]
 8005e04:	eba1 03e3 	sub.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8005e0e:	eb0e 0003 	add.w	r0, lr, r3
 8005e12:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8005e16:	4601      	mov	r1, r0
 8005e18:	5c28      	ldrb	r0, [r5, r0]
 8005e1a:	f04f 0e10 	mov.w	lr, #16
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8005e24:	460b      	mov	r3, r1
 8005e26:	dac5      	bge.n	8005db4 <TFT_thread.lto_priv.73+0x6a4>
 8005e28:	3a01      	subs	r2, #1
 8005e2a:	f062 0207 	orn	r2, r2, #7
 8005e2e:	3201      	adds	r2, #1
 8005e30:	e7c0      	b.n	8005db4 <TFT_thread.lto_priv.73+0x6a4>
 8005e32:	bf00      	nop
 8005e34:	2000ddbc 	.word	0x2000ddbc
 8005e38:	08007f68 	.word	0x08007f68
 8005e3c:	08007f70 	.word	0x08007f70
 8005e40:	08007f78 	.word	0x08007f78
 8005e44:	2000ddb8 	.word	0x2000ddb8
 8005e48:	08001551 	.word	0x08001551
 8005e4c:	08001131 	.word	0x08001131
 8005e50:	40023800 	.word	0x40023800
 8005e54:	08006f20 	.word	0x08006f20
 8005e58:	08006f40 	.word	0x08006f40
 8005e5c:	2000da48 	.word	0x2000da48
 8005e60:	2000cebc 	.word	0x2000cebc
 8005e64:	8000000f 	.word	0x8000000f
 8005e68:	80000007 	.word	0x80000007
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005e78:	9302      	str	r3, [sp, #8]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	9306      	str	r3, [sp, #24]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8005e80:	2407      	movs	r4, #7
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
 8005e82:	b2e6      	uxtb	r6, r4
 8005e84:	4631      	mov	r1, r6
 8005e86:	9802      	ldr	r0, [sp, #8]
 8005e88:	f7ff f9ba 	bl	8005200 <tft_char_is_changed>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f000 8132 	beq.w	80060f6 <TFT_thread.lto_priv.73+0x9e6>
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 8005e92:	b227      	sxth	r7, r4
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	f340 818a 	ble.w	80061ae <TFT_thread.lto_priv.73+0xa9e>
 8005e9a:	f04f 0b01 	mov.w	fp, #1
 8005e9e:	46d8      	mov	r8, fp
 8005ea0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005ea4:	e007      	b.n	8005eb6 <TFT_thread.lto_priv.73+0x7a6>
 8005ea6:	fa1f f883 	uxth.w	r8, r3
 8005eaa:	fa0f fb88 	sxth.w	fp, r8
 8005eae:	ebcb 0307 	rsb	r3, fp, r7
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	db09      	blt.n	8005eca <TFT_thread.lto_priv.73+0x7ba>
 8005eb6:	ebc8 0106 	rsb	r1, r8, r6
 8005eba:	b2c9      	uxtb	r1, r1
 8005ebc:	4648      	mov	r0, r9
 8005ebe:	f7ff f99f 	bl	8005200 <tft_char_is_changed>
 8005ec2:	f108 0301 	add.w	r3, r8, #1
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d1ed      	bne.n	8005ea6 <TFT_thread.lto_priv.73+0x796>
 8005eca:	fa1f f388 	uxth.w	r3, r8
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	ea4f 160b 	mov.w	r6, fp, lsl #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8005ed4:	f1c7 0707 	rsb	r7, r7, #7
 8005ed8:	eb07 020b 	add.w	r2, r7, fp
 8005edc:	0112      	lsls	r2, r2, #4
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0138      	lsls	r0, r7, #4
 8005ee2:	9906      	ldr	r1, [sp, #24]
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8005eec:	f7ff f9d0 	bl	8005290 <tft_set_char_pos>
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	b2a4      	uxth	r4, r4
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8005efa:	ea4f 0b41 	mov.w	fp, r1, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8005efe:	9301      	str	r3, [sp, #4]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	f340 80ee 	ble.w	80060e2 <TFT_thread.lto_priv.73+0x9d2>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	4649      	mov	r1, r9
 8005f10:	fa42 f703 	asr.w	r7, r2, r3
 8005f14:	e01f      	b.n	8005f56 <TFT_thread.lto_priv.73+0x846>
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8005f16:	b21b      	sxth	r3, r3
 8005f18:	ebc3 1300 	rsb	r3, r3, r0, lsl #4
 8005f1c:	48ab      	ldr	r0, [pc, #684]	; (80061cc <TFT_thread.lto_priv.73+0xabc>)
 8005f1e:	4403      	add	r3, r0
 8005f20:	f109 0901 	add.w	r9, r9, #1
 8005f24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f28:	423b      	tst	r3, r7
 8005f2a:	bf15      	itete	ne
 8005f2c:	4ba8      	ldrne	r3, [pc, #672]	; (80061d0 <TFT_thread.lto_priv.73+0xac0>)
 8005f2e:	4ba9      	ldreq	r3, [pc, #676]	; (80061d4 <TFT_thread.lto_priv.73+0xac4>)
 8005f30:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8005f34:	f833 8012 	ldrheq.w	r8, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 8005f38:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8005f3c:	f7fe f9f8 	bl	8004330 <tft_write_data>
 8005f40:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8005f44:	fa5f f088 	uxtb.w	r0, r8
 8005f48:	f7fe f9f2 	bl	8004330 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8005f4c:	fa0f f189 	sxth.w	r1, r9
 8005f50:	42b1      	cmp	r1, r6
 8005f52:	f280 80c6 	bge.w	80060e2 <TFT_thread.lto_priv.73+0x9d2>
								y2 = y-py/CHAR_HEIGHT;
 8005f56:	2900      	cmp	r1, #0
 8005f58:	460a      	mov	r2, r1
 8005f5a:	bfb8      	it	lt
 8005f5c:	f101 020f 	addlt.w	r2, r1, #15
 8005f60:	eba4 1222 	sub.w	r2, r4, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8005f64:	b212      	sxth	r2, r2
 8005f66:	eb0b 0002 	add.w	r0, fp, r2
 8005f6a:	4b9b      	ldr	r3, [pc, #620]	; (80061d8 <TFT_thread.lto_priv.73+0xac8>)
 8005f6c:	400b      	ands	r3, r1
 8005f6e:	4601      	mov	r1, r0
 8005f70:	5c28      	ldrb	r0, [r5, r0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f100 0001 	add.w	r0, r0, #1
 8005f78:	460a      	mov	r2, r1
 8005f7a:	dacc      	bge.n	8005f16 <TFT_thread.lto_priv.73+0x806>
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f063 030f 	orn	r3, r3, #15
 8005f82:	3301      	adds	r3, #1
 8005f84:	e7c7      	b.n	8005f16 <TFT_thread.lto_priv.73+0x806>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8005f86:	230f      	movs	r3, #15
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	f04f 0b00 	mov.w	fp, #0
 8005f8e:	fa5f f38b 	uxtb.w	r3, fp
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	9305      	str	r3, [sp, #20]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9301      	str	r3, [sp, #4]

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
 8005f9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8005fa2:	9902      	ldr	r1, [sp, #8]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff f92b 	bl	8005200 <tft_char_is_changed>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f000 8082 	beq.w	80060b4 <TFT_thread.lto_priv.73+0x9a4>
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 8005fb0:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8005fb4:	f108 0901 	add.w	r9, r8, #1
 8005fb8:	f1b9 0f0f 	cmp.w	r9, #15
 8005fbc:	f300 8101 	bgt.w	80061c2 <TFT_thread.lto_priv.73+0xab2>
 8005fc0:	2601      	movs	r6, #1
 8005fc2:	4637      	mov	r7, r6
 8005fc4:	f8cd b010 	str.w	fp, [sp, #16]
 8005fc8:	46b3      	mov	fp, r6
 8005fca:	4646      	mov	r6, r8
 8005fcc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005fd0:	e007      	b.n	8005fe2 <TFT_thread.lto_priv.73+0x8d2>
 8005fd2:	b29f      	uxth	r7, r3
 8005fd4:	fa0f fb87 	sxth.w	fp, r7
 8005fd8:	eb0b 0906 	add.w	r9, fp, r6
 8005fdc:	f1b9 0f0f 	cmp.w	r9, #15
 8005fe0:	dc07      	bgt.n	8005ff2 <TFT_thread.lto_priv.73+0x8e2>
 8005fe2:	19e0      	adds	r0, r4, r7
 8005fe4:	b2c0      	uxtb	r0, r0
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	f7ff f90a 	bl	8005200 <tft_char_is_changed>
 8005fec:	1c7b      	adds	r3, r7, #1
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1ef      	bne.n	8005fd2 <TFT_thread.lto_priv.73+0x8c2>
 8005ff2:	465e      	mov	r6, fp
 8005ff4:	b2bb      	uxth	r3, r7
 8005ff6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	00f6      	lsls	r6, r6, #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8005ffe:	9c01      	ldr	r4, [sp, #4]
 8006000:	9905      	ldr	r1, [sp, #20]
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006008:	00e0      	lsls	r0, r4, #3
 800600a:	3a01      	subs	r2, #1
 800600c:	b2a4      	uxth	r4, r4
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006014:	9401      	str	r4, [sp, #4]
 8006016:	f7ff f93b 	bl	8005290 <tft_set_char_pos>
 800601a:	2400      	movs	r4, #0
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 800601c:	2e00      	cmp	r6, #0
 800601e:	dd40      	ble.n	80060a2 <TFT_thread.lto_priv.73+0x992>
 8006020:	f04f 0900 	mov.w	r9, #0
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006024:	2780      	movs	r7, #128	; 0x80
 8006026:	4649      	mov	r1, r9
 8006028:	e01c      	b.n	8006064 <TFT_thread.lto_priv.73+0x954>
 800602a:	f81a 0000 	ldrb.w	r0, [sl, r0]
 800602e:	b212      	sxth	r2, r2
 8006030:	fa47 f202 	asr.w	r2, r7, r2
 8006034:	4202      	tst	r2, r0
 8006036:	bf15      	itete	ne
 8006038:	4b65      	ldrne	r3, [pc, #404]	; (80061d0 <TFT_thread.lto_priv.73+0xac0>)
 800603a:	4a66      	ldreq	r2, [pc, #408]	; (80061d4 <TFT_thread.lto_priv.73+0xac4>)
 800603c:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8006040:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8006044:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8006048:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800604c:	f7fe f970 	bl	8004330 <tft_write_data>
 8006050:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8006054:	fa5f f088 	uxtb.w	r0, r8
 8006058:	f7fe f96a 	bl	8004330 <tft_write_data>
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 800605c:	fa0f f189 	sxth.w	r1, r9
 8006060:	42b1      	cmp	r1, r6
 8006062:	da1e      	bge.n	80060a2 <TFT_thread.lto_priv.73+0x992>
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006064:	4a5d      	ldr	r2, [pc, #372]	; (80061dc <TFT_thread.lto_priv.73+0xacc>)
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 8006066:	2900      	cmp	r1, #0
 8006068:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 800606a:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 800606e:	bfb8      	it	lt
 8006070:	1dcb      	addlt	r3, r1, #7
 8006072:	9901      	ldr	r1, [sp, #4]
 8006074:	eb01 03e3 	add.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006078:	b21b      	sxth	r3, r3
 800607a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800607e:	eb0e 0003 	add.w	r0, lr, r3
 8006082:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8006086:	4601      	mov	r1, r0
 8006088:	5c28      	ldrb	r0, [r5, r0]
 800608a:	f04f 0e10 	mov.w	lr, #16
 800608e:	2a00      	cmp	r2, #0
 8006090:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8006094:	460b      	mov	r3, r1
 8006096:	dac8      	bge.n	800602a <TFT_thread.lto_priv.73+0x91a>
 8006098:	3a01      	subs	r2, #1
 800609a:	f062 0207 	orn	r2, r2, #7
 800609e:	3201      	adds	r2, #1
 80060a0:	e7c3      	b.n	800602a <TFT_thread.lto_priv.73+0x91a>
 80060a2:	3401      	adds	r4, #1
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 80060a4:	2c10      	cmp	r4, #16
 80060a6:	d1b9      	bne.n	800601c <TFT_thread.lto_priv.73+0x90c>
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	1e5f      	subs	r7, r3, #1
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x += char_n-1;
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	443b      	add	r3, r7
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	9301      	str	r3, [sp, #4]
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
 80060b4:	9f01      	ldr	r7, [sp, #4]
 80060b6:	3701      	adds	r7, #1
 80060b8:	b2bb      	uxth	r3, r7
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	b21b      	sxth	r3, r3
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	f77f af6d 	ble.w	8005f9e <TFT_thread.lto_priv.73+0x88e>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	f10b 0b01 	add.w	fp, fp, #1
 80060ca:	3310      	adds	r3, #16
 80060cc:	b2db      	uxtb	r3, r3
	if (!tft_enabled)
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
 80060ce:	f1bb 0f0a 	cmp.w	fp, #10
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	f47f af5b 	bne.w	8005f8e <TFT_thread.lto_priv.73+0x87e>
    tft_update();

    //count++;
    chThdSleepMilliseconds(100);
 80060d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060dc:	f7fd ffb8 	bl	8004050 <chThdSleep>
 80060e0:	e505      	b.n	8005aee <TFT_thread.lto_priv.73+0x3de>
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	3301      	adds	r3, #1
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	f47f af09 	bne.w	8005f00 <TFT_thread.lto_priv.73+0x7f0>
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y -= char_n-1;
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	3401      	adds	r4, #1
 80060f2:	1ae4      	subs	r4, r4, r3
 80060f4:	b2a4      	uxth	r4, r4
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
 80060f6:	3c01      	subs	r4, #1
 80060f8:	b2a4      	uxth	r4, r4
 80060fa:	0422      	lsls	r2, r4, #16
 80060fc:	f57f aec1 	bpl.w	8005e82 <TFT_thread.lto_priv.73+0x772>
 8006100:	9b05      	ldr	r3, [sp, #20]
 8006102:	9a03      	ldr	r2, [sp, #12]
 8006104:	3308      	adds	r3, #8
 8006106:	3201      	adds	r2, #1
 8006108:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
 800610a:	2a14      	cmp	r2, #20
 800610c:	9203      	str	r2, [sp, #12]
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	f47f aeb0 	bne.w	8005e74 <TFT_thread.lto_priv.73+0x764>
 8006114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006118:	f7fd ff9a 	bl	8004050 <chThdSleep>
 800611c:	e4e7      	b.n	8005aee <TFT_thread.lto_priv.73+0x3de>
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 800611e:	f114 34ff 	adds.w	r4, r4, #4294967295
 8006122:	f4bf ae3f 	bcs.w	8005da4 <TFT_thread.lto_priv.73+0x694>
 8006126:	9e01      	ldr	r6, [sp, #4]
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x -= char_n-1;
 8006128:	9b04      	ldr	r3, [sp, #16]
 800612a:	3601      	adds	r6, #1
 800612c:	1af6      	subs	r6, r6, r3
 800612e:	b2b6      	uxth	r6, r6
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
 8006130:	3e01      	subs	r6, #1
 8006132:	b2b6      	uxth	r6, r6
 8006134:	0433      	lsls	r3, r6, #16
 8006136:	f57f adf8 	bpl.w	8005d2a <TFT_thread.lto_priv.73+0x61a>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006140:	3310      	adds	r3, #16
 8006142:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
 8006144:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006148:	9303      	str	r3, [sp, #12]
 800614a:	f47f ade6 	bne.w	8005d1a <TFT_thread.lto_priv.73+0x60a>
 800614e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006152:	f7fd ff7d 	bl	8004050 <chThdSleep>
 8006156:	e4ca      	b.n	8005aee <TFT_thread.lto_priv.73+0x3de>
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	3b01      	subs	r3, #1
 800615c:	9302      	str	r3, [sp, #8]
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 800615e:	3301      	adds	r3, #1
 8006160:	f47f ad9a 	bne.w	8005c98 <TFT_thread.lto_priv.73+0x588>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	f103 38ff 	add.w	r8, r3, #4294967295
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y += char_n-1;
 800616a:	9b05      	ldr	r3, [sp, #20]
 800616c:	4443      	add	r3, r8
 800616e:	b29b      	uxth	r3, r3
 8006170:	465e      	mov	r6, fp
 8006172:	9301      	str	r3, [sp, #4]
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	f103 0801 	add.w	r8, r3, #1
 800617a:	fa1f f388 	uxth.w	r3, r8
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	b21b      	sxth	r3, r3
 8006182:	2b07      	cmp	r3, #7
 8006184:	f77f ad45 	ble.w	8005c12 <TFT_thread.lto_priv.73+0x502>
 8006188:	9b04      	ldr	r3, [sp, #16]
 800618a:	9a07      	ldr	r2, [sp, #28]
 800618c:	3308      	adds	r3, #8
 800618e:	3a01      	subs	r2, #1
 8006190:	9207      	str	r2, [sp, #28]
 8006192:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
 8006194:	3201      	adds	r2, #1
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	f47f ad2e 	bne.w	8005bf8 <TFT_thread.lto_priv.73+0x4e8>
 800619c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061a0:	f7fd ff56 	bl	8004050 <chThdSleep>
 80061a4:	e4a3      	b.n	8005aee <TFT_thread.lto_priv.73+0x3de>
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 80061a6:	2301      	movs	r3, #1
 80061a8:	2410      	movs	r4, #16
 80061aa:	9305      	str	r3, [sp, #20]
 80061ac:	e563      	b.n	8005c76 <TFT_thread.lto_priv.73+0x566>
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 80061ae:	2301      	movs	r3, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	469b      	mov	fp, r3
 80061b4:	2610      	movs	r6, #16
 80061b6:	e68d      	b.n	8005ed4 <TFT_thread.lto_priv.73+0x7c4>
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 80061b8:	2301      	movs	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	4699      	mov	r9, r3
 80061be:	2708      	movs	r7, #8
 80061c0:	e5df      	b.n	8005d82 <TFT_thread.lto_priv.73+0x672>
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 80061c2:	2301      	movs	r3, #1
 80061c4:	2608      	movs	r6, #8
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	e719      	b.n	8005ffe <TFT_thread.lto_priv.73+0x8ee>
 80061ca:	bf00      	nop
 80061cc:	08006f50 	.word	0x08006f50
 80061d0:	2000da48 	.word	0x2000da48
 80061d4:	2000cebc 	.word	0x2000cebc
 80061d8:	8000000f 	.word	0x8000000f
 80061dc:	80000007 	.word	0x80000007

080061e0 <abs>:
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bfb8      	it	lt
 80061e4:	4240      	neglt	r0, r0
 80061e6:	4770      	bx	lr
	...

080061f0 <memset>:
 80061f0:	b470      	push	{r4, r5, r6}
 80061f2:	0784      	lsls	r4, r0, #30
 80061f4:	d046      	beq.n	8006284 <memset+0x94>
 80061f6:	1e54      	subs	r4, r2, #1
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	d041      	beq.n	8006280 <memset+0x90>
 80061fc:	b2cd      	uxtb	r5, r1
 80061fe:	4603      	mov	r3, r0
 8006200:	e002      	b.n	8006208 <memset+0x18>
 8006202:	1e62      	subs	r2, r4, #1
 8006204:	b3e4      	cbz	r4, 8006280 <memset+0x90>
 8006206:	4614      	mov	r4, r2
 8006208:	f803 5b01 	strb.w	r5, [r3], #1
 800620c:	079a      	lsls	r2, r3, #30
 800620e:	d1f8      	bne.n	8006202 <memset+0x12>
 8006210:	2c03      	cmp	r4, #3
 8006212:	d92e      	bls.n	8006272 <memset+0x82>
 8006214:	b2cd      	uxtb	r5, r1
 8006216:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800621a:	2c0f      	cmp	r4, #15
 800621c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006220:	d919      	bls.n	8006256 <memset+0x66>
 8006222:	f103 0210 	add.w	r2, r3, #16
 8006226:	4626      	mov	r6, r4
 8006228:	3e10      	subs	r6, #16
 800622a:	2e0f      	cmp	r6, #15
 800622c:	f842 5c10 	str.w	r5, [r2, #-16]
 8006230:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006234:	f842 5c08 	str.w	r5, [r2, #-8]
 8006238:	f842 5c04 	str.w	r5, [r2, #-4]
 800623c:	f102 0210 	add.w	r2, r2, #16
 8006240:	d8f2      	bhi.n	8006228 <memset+0x38>
 8006242:	f1a4 0210 	sub.w	r2, r4, #16
 8006246:	f022 020f 	bic.w	r2, r2, #15
 800624a:	f004 040f 	and.w	r4, r4, #15
 800624e:	3210      	adds	r2, #16
 8006250:	2c03      	cmp	r4, #3
 8006252:	4413      	add	r3, r2
 8006254:	d90d      	bls.n	8006272 <memset+0x82>
 8006256:	461e      	mov	r6, r3
 8006258:	4622      	mov	r2, r4
 800625a:	3a04      	subs	r2, #4
 800625c:	2a03      	cmp	r2, #3
 800625e:	f846 5b04 	str.w	r5, [r6], #4
 8006262:	d8fa      	bhi.n	800625a <memset+0x6a>
 8006264:	1f22      	subs	r2, r4, #4
 8006266:	f022 0203 	bic.w	r2, r2, #3
 800626a:	3204      	adds	r2, #4
 800626c:	4413      	add	r3, r2
 800626e:	f004 0403 	and.w	r4, r4, #3
 8006272:	b12c      	cbz	r4, 8006280 <memset+0x90>
 8006274:	b2c9      	uxtb	r1, r1
 8006276:	441c      	add	r4, r3
 8006278:	f803 1b01 	strb.w	r1, [r3], #1
 800627c:	42a3      	cmp	r3, r4
 800627e:	d1fb      	bne.n	8006278 <memset+0x88>
 8006280:	bc70      	pop	{r4, r5, r6}
 8006282:	4770      	bx	lr
 8006284:	4614      	mov	r4, r2
 8006286:	4603      	mov	r3, r0
 8006288:	e7c2      	b.n	8006210 <memset+0x20>
 800628a:	bf00      	nop
 800628c:	0000      	movs	r0, r0
	...

08006290 <strpbrk>:
 8006290:	b430      	push	{r4, r5}
 8006292:	7804      	ldrb	r4, [r0, #0]
 8006294:	b1ec      	cbz	r4, 80062d2 <strpbrk+0x42>
 8006296:	780d      	ldrb	r5, [r1, #0]
 8006298:	b1ad      	cbz	r5, 80062c6 <strpbrk+0x36>
 800629a:	42ac      	cmp	r4, r5
 800629c:	d00e      	beq.n	80062bc <strpbrk+0x2c>
 800629e:	460a      	mov	r2, r1
 80062a0:	e001      	b.n	80062a6 <strpbrk+0x16>
 80062a2:	429c      	cmp	r4, r3
 80062a4:	d009      	beq.n	80062ba <strpbrk+0x2a>
 80062a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f9      	bne.n	80062a2 <strpbrk+0x12>
 80062ae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80062b2:	2c00      	cmp	r4, #0
 80062b4:	d1f0      	bne.n	8006298 <strpbrk+0x8>
 80062b6:	7815      	ldrb	r5, [r2, #0]
 80062b8:	e000      	b.n	80062bc <strpbrk+0x2c>
 80062ba:	4625      	mov	r5, r4
 80062bc:	2d00      	cmp	r5, #0
 80062be:	bf08      	it	eq
 80062c0:	2000      	moveq	r0, #0
 80062c2:	bc30      	pop	{r4, r5}
 80062c4:	4770      	bx	lr
 80062c6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80062ca:	460a      	mov	r2, r1
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	d1e3      	bne.n	8006298 <strpbrk+0x8>
 80062d0:	e7f1      	b.n	80062b6 <strpbrk+0x26>
 80062d2:	4620      	mov	r0, r4
 80062d4:	bc30      	pop	{r4, r5}
 80062d6:	4770      	bx	lr
	...

080062e0 <strspn>:
 80062e0:	b470      	push	{r4, r5, r6}
 80062e2:	7804      	ldrb	r4, [r0, #0]
 80062e4:	b1a4      	cbz	r4, 8006310 <strspn+0x30>
 80062e6:	780e      	ldrb	r6, [r1, #0]
 80062e8:	4605      	mov	r5, r0
 80062ea:	b14e      	cbz	r6, 8006300 <strspn+0x20>
 80062ec:	42b4      	cmp	r4, r6
 80062ee:	d00a      	beq.n	8006306 <strspn+0x26>
 80062f0:	460a      	mov	r2, r1
 80062f2:	e001      	b.n	80062f8 <strspn+0x18>
 80062f4:	429c      	cmp	r4, r3
 80062f6:	d006      	beq.n	8006306 <strspn+0x26>
 80062f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f9      	bne.n	80062f4 <strspn+0x14>
 8006300:	1a28      	subs	r0, r5, r0
 8006302:	bc70      	pop	{r4, r5, r6}
 8006304:	4770      	bx	lr
 8006306:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800630a:	2c00      	cmp	r4, #0
 800630c:	d1ed      	bne.n	80062ea <strspn+0xa>
 800630e:	e7f7      	b.n	8006300 <strspn+0x20>
 8006310:	4620      	mov	r0, r4
 8006312:	e7f6      	b.n	8006302 <strspn+0x22>
	...

08006320 <atan>:
 8006320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	ec55 4b10 	vmov	r4, r5, d0
 8006328:	4bcd      	ldr	r3, [pc, #820]	; (8006660 <atan+0x340>)
 800632a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800632e:	429e      	cmp	r6, r3
 8006330:	46ab      	mov	fp, r5
 8006332:	dd10      	ble.n	8006356 <atan+0x36>
 8006334:	4bcb      	ldr	r3, [pc, #812]	; (8006664 <atan+0x344>)
 8006336:	429e      	cmp	r6, r3
 8006338:	f300 80b2 	bgt.w	80064a0 <atan+0x180>
 800633c:	f000 80ad 	beq.w	800649a <atan+0x17a>
 8006340:	f1bb 0f00 	cmp.w	fp, #0
 8006344:	f340 80f6 	ble.w	8006534 <atan+0x214>
 8006348:	a5a9      	add	r5, pc, #676	; (adr r5, 80065f0 <atan+0x2d0>)
 800634a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800634e:	ec45 4b10 	vmov	d0, r4, r5
 8006352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	4bc4      	ldr	r3, [pc, #784]	; (8006668 <atan+0x348>)
 8006358:	429e      	cmp	r6, r3
 800635a:	f300 80c0 	bgt.w	80064de <atan+0x1be>
 800635e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006362:	429e      	cmp	r6, r3
 8006364:	f340 80a8 	ble.w	80064b8 <atan+0x198>
 8006368:	f04f 3aff 	mov.w	sl, #4294967295
 800636c:	4622      	mov	r2, r4
 800636e:	462b      	mov	r3, r5
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7fa f98c 	bl	8000690 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	f7fa f986 	bl	8000690 <__aeabi_dmul>
 8006384:	a39c      	add	r3, pc, #624	; (adr r3, 80065f8 <atan+0x2d8>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	f7fa f97f 	bl	8000690 <__aeabi_dmul>
 8006392:	a39b      	add	r3, pc, #620	; (adr r3, 8006600 <atan+0x2e0>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7f9 ffc8 	bl	800032c <__adddf3>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	f7fa f976 	bl	8000690 <__aeabi_dmul>
 80063a4:	a398      	add	r3, pc, #608	; (adr r3, 8006608 <atan+0x2e8>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7f9 ffbf 	bl	800032c <__adddf3>
 80063ae:	4632      	mov	r2, r6
 80063b0:	463b      	mov	r3, r7
 80063b2:	f7fa f96d 	bl	8000690 <__aeabi_dmul>
 80063b6:	a396      	add	r3, pc, #600	; (adr r3, 8006610 <atan+0x2f0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7f9 ffb6 	bl	800032c <__adddf3>
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	f7fa f964 	bl	8000690 <__aeabi_dmul>
 80063c8:	a393      	add	r3, pc, #588	; (adr r3, 8006618 <atan+0x2f8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7f9 ffad 	bl	800032c <__adddf3>
 80063d2:	4632      	mov	r2, r6
 80063d4:	463b      	mov	r3, r7
 80063d6:	f7fa f95b 	bl	8000690 <__aeabi_dmul>
 80063da:	a391      	add	r3, pc, #580	; (adr r3, 8006620 <atan+0x300>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7f9 ffa4 	bl	800032c <__adddf3>
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	f7fa f952 	bl	8000690 <__aeabi_dmul>
 80063ec:	a38e      	add	r3, pc, #568	; (adr r3, 8006628 <atan+0x308>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	4680      	mov	r8, r0
 80063f4:	4689      	mov	r9, r1
 80063f6:	4630      	mov	r0, r6
 80063f8:	4639      	mov	r1, r7
 80063fa:	f7fa f949 	bl	8000690 <__aeabi_dmul>
 80063fe:	a38c      	add	r3, pc, #560	; (adr r3, 8006630 <atan+0x310>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7f9 ff90 	bl	8000328 <__aeabi_dsub>
 8006408:	4632      	mov	r2, r6
 800640a:	463b      	mov	r3, r7
 800640c:	f7fa f940 	bl	8000690 <__aeabi_dmul>
 8006410:	a389      	add	r3, pc, #548	; (adr r3, 8006638 <atan+0x318>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 ff87 	bl	8000328 <__aeabi_dsub>
 800641a:	4632      	mov	r2, r6
 800641c:	463b      	mov	r3, r7
 800641e:	f7fa f937 	bl	8000690 <__aeabi_dmul>
 8006422:	a387      	add	r3, pc, #540	; (adr r3, 8006640 <atan+0x320>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7f9 ff7e 	bl	8000328 <__aeabi_dsub>
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	f7fa f92e 	bl	8000690 <__aeabi_dmul>
 8006434:	a384      	add	r3, pc, #528	; (adr r3, 8006648 <atan+0x328>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 ff75 	bl	8000328 <__aeabi_dsub>
 800643e:	4632      	mov	r2, r6
 8006440:	463b      	mov	r3, r7
 8006442:	f7fa f925 	bl	8000690 <__aeabi_dmul>
 8006446:	f1ba 3fff 	cmp.w	sl, #4294967295
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	d079      	beq.n	8006544 <atan+0x224>
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 ff6a 	bl	800032c <__adddf3>
 8006458:	4622      	mov	r2, r4
 800645a:	462b      	mov	r3, r5
 800645c:	f7fa f918 	bl	8000690 <__aeabi_dmul>
 8006460:	4e82      	ldr	r6, [pc, #520]	; (800666c <atan+0x34c>)
 8006462:	4b83      	ldr	r3, [pc, #524]	; (8006670 <atan+0x350>)
 8006464:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006468:	4456      	add	r6, sl
 800646a:	449a      	add	sl, r3
 800646c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006470:	f7f9 ff5a 	bl	8000328 <__aeabi_dsub>
 8006474:	4622      	mov	r2, r4
 8006476:	462b      	mov	r3, r5
 8006478:	f7f9 ff56 	bl	8000328 <__aeabi_dsub>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006484:	f7f9 ff50 	bl	8000328 <__aeabi_dsub>
 8006488:	f1bb 0f00 	cmp.w	fp, #0
 800648c:	db56      	blt.n	800653c <atan+0x21c>
 800648e:	4604      	mov	r4, r0
 8006490:	460d      	mov	r5, r1
 8006492:	ec45 4b10 	vmov	d0, r4, r5
 8006496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	2c00      	cmp	r4, #0
 800649c:	f43f af50 	beq.w	8006340 <atan+0x20>
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	4622      	mov	r2, r4
 80064a6:	462b      	mov	r3, r5
 80064a8:	f7f9 ff40 	bl	800032c <__adddf3>
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	ec45 4b10 	vmov	d0, r4, r5
 80064b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	a365      	add	r3, pc, #404	; (adr r3, 8006650 <atan+0x330>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	ee10 0a10 	vmov	r0, s0
 80064c2:	4629      	mov	r1, r5
 80064c4:	f7f9 ff32 	bl	800032c <__adddf3>
 80064c8:	2200      	movs	r2, #0
 80064ca:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <atan+0x354>)
 80064cc:	f7fa fdd6 	bl	800107c <__aeabi_dcmpgt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f43f af49 	beq.w	8006368 <atan+0x48>
 80064d6:	ec45 4b10 	vmov	d0, r4, r5
 80064da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	f000 f8d7 	bl	8006690 <fabs>
 80064e2:	4b65      	ldr	r3, [pc, #404]	; (8006678 <atan+0x358>)
 80064e4:	429e      	cmp	r6, r3
 80064e6:	ec55 4b10 	vmov	r4, r5, d0
 80064ea:	dc3c      	bgt.n	8006566 <atan+0x246>
 80064ec:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80064f0:	429e      	cmp	r6, r3
 80064f2:	ee10 0a10 	vmov	r0, s0
 80064f6:	4629      	mov	r1, r5
 80064f8:	dc62      	bgt.n	80065c0 <atan+0x2a0>
 80064fa:	ee10 2a10 	vmov	r2, s0
 80064fe:	462b      	mov	r3, r5
 8006500:	f7f9 ff14 	bl	800032c <__adddf3>
 8006504:	2200      	movs	r2, #0
 8006506:	4b5b      	ldr	r3, [pc, #364]	; (8006674 <atan+0x354>)
 8006508:	f7f9 ff0e 	bl	8000328 <__aeabi_dsub>
 800650c:	2200      	movs	r2, #0
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800651a:	f7f9 ff07 	bl	800032c <__adddf3>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4630      	mov	r0, r6
 8006524:	4639      	mov	r1, r7
 8006526:	f7fa f9dd 	bl	80008e4 <__aeabi_ddiv>
 800652a:	f04f 0a00 	mov.w	sl, #0
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	e71b      	b.n	800636c <atan+0x4c>
 8006534:	a548      	add	r5, pc, #288	; (adr r5, 8006658 <atan+0x338>)
 8006536:	e9d5 4500 	ldrd	r4, r5, [r5]
 800653a:	e7b9      	b.n	80064b0 <atan+0x190>
 800653c:	4604      	mov	r4, r0
 800653e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006542:	e7b5      	b.n	80064b0 <atan+0x190>
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7f9 fef0 	bl	800032c <__adddf3>
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	f7fa f89e 	bl	8000690 <__aeabi_dmul>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4620      	mov	r0, r4
 800655a:	4629      	mov	r1, r5
 800655c:	f7f9 fee4 	bl	8000328 <__aeabi_dsub>
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	e7a4      	b.n	80064b0 <atan+0x190>
 8006566:	4b45      	ldr	r3, [pc, #276]	; (800667c <atan+0x35c>)
 8006568:	429e      	cmp	r6, r3
 800656a:	dc1d      	bgt.n	80065a8 <atan+0x288>
 800656c:	ee10 0a10 	vmov	r0, s0
 8006570:	4629      	mov	r1, r5
 8006572:	2200      	movs	r2, #0
 8006574:	4b42      	ldr	r3, [pc, #264]	; (8006680 <atan+0x360>)
 8006576:	f7f9 fed7 	bl	8000328 <__aeabi_dsub>
 800657a:	2200      	movs	r2, #0
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <atan+0x360>)
 8006586:	f7fa f883 	bl	8000690 <__aeabi_dmul>
 800658a:	2200      	movs	r2, #0
 800658c:	4b39      	ldr	r3, [pc, #228]	; (8006674 <atan+0x354>)
 800658e:	f7f9 fecd 	bl	800032c <__adddf3>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7fa f9a3 	bl	80008e4 <__aeabi_ddiv>
 800659e:	f04f 0a02 	mov.w	sl, #2
 80065a2:	4604      	mov	r4, r0
 80065a4:	460d      	mov	r5, r1
 80065a6:	e6e1      	b.n	800636c <atan+0x4c>
 80065a8:	462b      	mov	r3, r5
 80065aa:	ee10 2a10 	vmov	r2, s0
 80065ae:	2000      	movs	r0, #0
 80065b0:	4934      	ldr	r1, [pc, #208]	; (8006684 <atan+0x364>)
 80065b2:	f7fa f997 	bl	80008e4 <__aeabi_ddiv>
 80065b6:	f04f 0a03 	mov.w	sl, #3
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	e6d5      	b.n	800636c <atan+0x4c>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b2c      	ldr	r3, [pc, #176]	; (8006674 <atan+0x354>)
 80065c4:	f7f9 feb0 	bl	8000328 <__aeabi_dsub>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	4b28      	ldr	r3, [pc, #160]	; (8006674 <atan+0x354>)
 80065d4:	f7f9 feaa 	bl	800032c <__adddf3>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7fa f980 	bl	80008e4 <__aeabi_ddiv>
 80065e4:	f04f 0a01 	mov.w	sl, #1
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	e6be      	b.n	800636c <atan+0x4c>
 80065ee:	bf00      	nop
 80065f0:	54442d18 	.word	0x54442d18
 80065f4:	3ff921fb 	.word	0x3ff921fb
 80065f8:	e322da11 	.word	0xe322da11
 80065fc:	3f90ad3a 	.word	0x3f90ad3a
 8006600:	24760deb 	.word	0x24760deb
 8006604:	3fa97b4b 	.word	0x3fa97b4b
 8006608:	a0d03d51 	.word	0xa0d03d51
 800660c:	3fb10d66 	.word	0x3fb10d66
 8006610:	c54c206e 	.word	0xc54c206e
 8006614:	3fb745cd 	.word	0x3fb745cd
 8006618:	920083ff 	.word	0x920083ff
 800661c:	3fc24924 	.word	0x3fc24924
 8006620:	5555550d 	.word	0x5555550d
 8006624:	3fd55555 	.word	0x3fd55555
 8006628:	2c6a6c2f 	.word	0x2c6a6c2f
 800662c:	bfa2b444 	.word	0xbfa2b444
 8006630:	52defd9a 	.word	0x52defd9a
 8006634:	3fadde2d 	.word	0x3fadde2d
 8006638:	af749a6d 	.word	0xaf749a6d
 800663c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006640:	fe231671 	.word	0xfe231671
 8006644:	3fbc71c6 	.word	0x3fbc71c6
 8006648:	9998ebc4 	.word	0x9998ebc4
 800664c:	3fc99999 	.word	0x3fc99999
 8006650:	8800759c 	.word	0x8800759c
 8006654:	7e37e43c 	.word	0x7e37e43c
 8006658:	54442d18 	.word	0x54442d18
 800665c:	bff921fb 	.word	0xbff921fb
 8006660:	440fffff 	.word	0x440fffff
 8006664:	7ff00000 	.word	0x7ff00000
 8006668:	3fdbffff 	.word	0x3fdbffff
 800666c:	08007fc0 	.word	0x08007fc0
 8006670:	08007fa0 	.word	0x08007fa0
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	3ff2ffff 	.word	0x3ff2ffff
 800667c:	40037fff 	.word	0x40037fff
 8006680:	3ff80000 	.word	0x3ff80000
 8006684:	bff00000 	.word	0xbff00000
	...

08006690 <fabs>:
 8006690:	ec53 2b10 	vmov	r2, r3, d0
 8006694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006698:	ec43 2b10 	vmov	d0, r2, r3
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop

080066a0 <__func__.6282>:
 80066a0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

080066b0 <__func__.6057>:
 80066b0:	6863 5456 6f44 6954 6b63 0049 0000 0000     chVTDoTickI.....
 80066c0:	4d44 2041 6166 6c69 7275 0065 7355 6761     DMA failure.Usag
 80066d0:	3a65 2520 0d73 000a 6e69 6f66 0000 0000     e: %s...info....
 80066e0:	654b 6e72 6c65 203a 2020 2020 2020 7325     Kernel:       %s
 80066f0:	0a0d 0000 2e33 2e31 0035 0000 6f43 706d     ....3.1.5...Comp
 8006700:	6c69 7265 203a 2020 2020 7325 0a0d 0000     iler:     %s....
 8006710:	4347 2043 2e34 2e39 2033 3032 3531 3530     GCC 4.9.3 201505
 8006720:	3932 2820 6572 656c 7361 2965 5b20 5241     29 (release) [AR
 8006730:	2f4d 6d65 6562 6464 6465 342d 395f 622d     M/embedded-4_9-b
 8006740:	6172 636e 2068 6572 6976 6973 6e6f 3220     ranch revision 2
 8006750:	3732 3739 5d37 0000 7241 6863 7469 6365     27977]..Architec
 8006760:	7574 6572 203a 7325 0a0d 0000 5241 764d     ture: %s....ARMv
 8006770:	4537 4d2d 0000 0000 6f43 6572 5620 7261     7E-M....Core Var
 8006780:	6169 746e 203a 7325 0a0d 0000 6f43 7472     iant: %s....Cort
 8006790:	7865 4d2d 4634 0000 6f50 7472 4920 666e     ex-M4F..Port Inf
 80067a0:	3a6f 2020 2020 7325 0a0d 0000 6441 6176     o:    %s....Adva
 80067b0:	636e 6465 6b20 7265 656e 206c 6f6d 6564     nced kernel mode
 80067c0:	0000 0000 6c50 7461 6f66 6d72 203a 2020     ....Platform:   
 80067d0:	2020 7325 0a0d 0000 5453 334d 4632 3034       %s....STM32F40
 80067e0:	2037 6948 6867 5020 7265 6f66 6d72 6e61     7 High Performan
 80067f0:	6563 7720 7469 2068 5344 2050 6e61 2064     ce with DSP and 
 8006800:	5046 0055 6f42 7261 3a64 2020 2020 2020     FPU.Board:      
 8006810:	2020 7325 0a0d 0000 5453 694d 7263 656f       %s....STMicroe
 8006820:	656c 7463 6f72 696e 7363 5320 4d54 3233     lectronics STM32
 8006830:	3446 442d 7369 6f63 6576 7972 0000 0000     F4-Discovery....
 8006840:	7542 6c69 2064 6974 656d 203a 2020 7325     Build time:   %s
 8006850:	7325 7325 0a0d 0000 7041 2072 3332 3220     %s%s....Apr 23 2
 8006860:	3130 0037 2d20 0020 3931 313a 3a37 3830     017. - .19:17:08
 8006870:	0000 0000 6873 6c65 006c 0000 0a0d 6843     ....shell.....Ch
 8006880:	6269 4f69 2f53 5452 5320 6568 6c6c 0a0d     ibiOS/RT Shell..
 8006890:	0000 0000 6863 203e 0000 0000 445e 0000     ....ch> ....^D..
 80068a0:	6f74 206f 616d 796e 6120 6772 6d75 6e65     too many argumen
 80068b0:	7374 0a0d 0000 0000 7865 7469 0000 0000     ts......exit....
 80068c0:	6568 706c 0000 0000 6f43 6d6d 6e61 7364     help....Commands
 80068d0:	203a 6568 706c 6520 6978 2074 0000 0000     : help exit ....
 80068e0:	7325 0020 7325 0000 3f20 0a0d 0000 0000     %s .%s.. ?......
 80068f0:	0a0d 6f6c 6f67 7475 0000 0000 7973 7473     ..logout....syst
 8006900:	6d69 0065 6c25 0d75 000a 0000 0000 0000     ime.%lu.........

08006910 <local_commands>:
 8006910:	66d8 0800 11a1 0800 68fc 0800 1c91 0800     .f.......h......
	...

08006930 <__func__.7544>:
 8006930:	7770 536d 6f74 0070 0000 0000 0000 0000     pwmStop.........

08006940 <__func__.7549>:
 8006940:	3269 5f63 6c6c 5f64 6573 5f74 6c63 636f     i2c_lld_set_cloc
 8006950:	006b 0000 0000 0000 0000 0000 0000 0000     k...............

08006960 <__func__.7614>:
 8006960:	3269 5f63 6c6c 5f64 7473 7261 0074 0000     i2c_lld_start...
 8006970:	6554 7473 0000 0000 6e28 6c75 296c 0000     Test....(null)..
 8006980:	504d 3655 3530 0030 6f43 746e 6f72 6c6c     MPU6050.Controll
 8006990:	7265 0000 0000 0000 0000 0000 0000 0000     er..............

080069a0 <RC_cfg>:
 80069a0:	4240 000f 0000 0000 0000 0000 0000 0000     @B..............

080069b0 <i2cfg>:
 80069b0:	0001 0000 0d40 0003 0002 0000 0000 0000     ....@...........

080069c0 <__func__.7540>:
 80069c0:	3269 5363 6174 7472 0000 0000 0000 0000     i2cStart........

080069d0 <__func__.7543>:
 80069d0:	7473 6553 4174 616c 6d72 0000 0000 0000     stSetAlarm......

080069e0 <__func__.6708>:
 80069e0:	6863 7645 5374 6769 616e 496c 0000 0000     chEvtSignalI....

080069f0 <__func__.7553>:
 80069f0:	7067 5f74 6c6c 5f64 7473 7261 0074 0000     gpt_lld_start...

08006a00 <__func__.6730>:
 8006a00:	6863 514f 7257 7469 5465 6d69 6f65 7475     chOQWriteTimeout
	...

08006a20 <__func__.7614>:
 8006a20:	6d64 5361 7274 6165 416d 6c6c 636f 7461     dmaStreamAllocat
 8006a30:	0065 0000 0000 0000 0000 0000 0000 0000     e...............

08006a40 <__func__.6691>:
 8006a40:	6863 7645 4274 6f72 6461 6163 7473 6c46     chEvtBroadcastFl
 8006a50:	6761 4973 0000 0000 0000 0000 0000 0000     agsI............

08006a60 <__func__.5968.lto_priv.107>:
 8006a60:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006a70 <__func__.5968.lto_priv.108>:
 8006a70:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006a80 <__func__.6694>:
 8006a80:	6863 5149 6552 6461 6954 656d 756f 0074     chIQReadTimeout.

08006a90 <__func__.5968.lto_priv.106>:
 8006a90:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006aa0 <__func__.7540>:
 8006aa0:	7067 5374 6174 7472 0000 0000 0000 0000     gptStart........

08006ab0 <__func__.7536>:
 8006ab0:	7473 7453 7261 4174 616c 6d72 0000 0000     stStartAlarm....

08006ac0 <__func__.6671>:
 8006ac0:	6863 6353 5268 6165 7964 0049 0000 0000     chSchReadyI.....

08006ad0 <__func__.6727>:
 8006ad0:	6863 6854 4564 6978 5374 0000 0000 0000     chThdExitS......

08006ae0 <__func__.6683>:
 8006ae0:	6863 6854 4364 6572 7461 4965 0000 0000     chThdCreateI....
 8006af0:	7473 6361 206b 766f 7265 6c66 776f 0000     stack overflow..
 8006b00:	5653 3123 0031 0000 5653 3123 0030 0000     SV#11...SV#10...
 8006b10:	5653 3923 0000 0000 5653 3823 0000 0000     SV#9....SV#8....
 8006b20:	5653 3723 0000 0000 5653 3623 0000 0000     SV#7....SV#6....
 8006b30:	5653 3523 0000 0000 5653 3423 0000 0000     SV#5....SV#4....

08006b40 <ram_areas>:
 8006b40:	806c 0800 ddc0 2000 ddc0 2000 ddc0 2000     l...... ... ... 
 8006b50:	806c 0800 0000 2000 0000 2000 0000 2000     l...... ... ... 
 8006b60:	806c 0800 c000 2001 c000 2001 c000 2001     l...... ... ... 
 8006b70:	806c 0800 0000 0000 0000 0000 0000 0000     l...............
 8006b80:	806c 0800 0000 1000 0000 1000 0000 1000     l...............
 8006b90:	806c 0800 4000 4002 4000 4002 4000 4002     l....@.@.@.@.@.@
 8006ba0:	806c 0800 0000 0000 0000 0000 0000 0000     l...............
 8006bb0:	806c 0800 0000 0000 0000 0000 0000 0000     l...............

08006bc0 <__func__.6674.lto_priv.111>:
 8006bc0:	6863 5456 6f44 6553 4974 0000 0000 0000     chVTDoSetI......

08006bd0 <__func__.6674.lto_priv.112>:
 8006bd0:	6863 744d 4c78 636f 536b 0000 0000 0000     chMtxLockS......

08006be0 <__func__.5968>:
 8006be0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006bf0 <__func__.6699>:
 8006bf0:	6863 6353 5768 6b61 7565 5370 0000 0000     chSchWakeupS....

08006c00 <__func__.6142>:
 8006c00:	6863 6854 5364 656c 7065 0053 0000 0000     chThdSleepS.....

08006c10 <__func__.6749>:
 8006c10:	6863 6854 5264 7365 6d75 4965 0000 0000     chThdResumeI....

08006c20 <__func__.7540>:
 8006c20:	7770 536d 6174 7472 0000 0000 0000 0000     pwmStart........

08006c30 <__func__.5968.lto_priv.80>:
 8006c30:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006c40 <__func__.7549>:
 8006c40:	7770 5f6d 6c6c 5f64 7473 7261 0074 0000     pwm_lld_start...

08006c50 <vmt>:
 8006c50:	3541 0800 3741 0800 3611 0800 3811 0800     A5..A7...6...8..
 8006c60:	3601 0800 3801 0800 3531 0800 3731 0800     .6...8..15..17..

08006c70 <motor_pwmcfg>:
 8006c70:	bd00 0501 0fa0 0000 0000 0000 0001 0000     ................
 8006c80:	0000 0000 0001 0000 0000 0000 0001 0000     ................
 8006c90:	0000 0000 0001 0000 0000 0000 0000 0000     ................
	...

08006cb0 <_stm32_dma_streams>:
 8006cb0:	6010 4002 6008 4002 0000 000b 6028 4002     .`.@.`.@....(`.@
 8006cc0:	6008 4002 0106 000c 6040 4002 6008 4002     .`.@....@`.@.`.@
 8006cd0:	0210 000d 6058 4002 6008 4002 0316 000e     ....X`.@.`.@....
 8006ce0:	6070 4002 600c 4002 0400 000f 6088 4002     p`.@.`.@.....`.@
 8006cf0:	600c 4002 0506 0010 60a0 4002 600c 4002     .`.@.....`.@.`.@
 8006d00:	0610 0011 60b8 4002 600c 4002 0716 002f     .....`.@.`.@../.
 8006d10:	6410 4002 6408 4002 0800 0038 6428 4002     .d.@.d.@..8.(d.@
 8006d20:	6408 4002 0906 0039 6440 4002 6408 4002     .d.@..9.@d.@.d.@
 8006d30:	0a10 003a 6458 4002 6408 4002 0b16 003b     ..:.Xd.@.d.@..;.
 8006d40:	6470 4002 640c 4002 0c00 003c 6488 4002     pd.@.d.@..<..d.@
 8006d50:	640c 4002 0d06 0044 64a0 4002 640c 4002     .d.@..D..d.@.d.@
 8006d60:	0e10 0045 64b8 4002 640c 4002 0f16 0046     ..E..d.@.d.@..F.

08006d70 <__func__.7581>:
 8006d70:	6473 7453 7261 0074 0000 0000 0000 0000     sdStart.........

08006d80 <ch_debug>:
 8006d80:	616d 6e69 1600 1845 0404 0860 100c 1814     main..E...`.....
 8006d90:	201c 2221 0000 0000 0000 0000 0000 0000     . !"............

08006da0 <__func__.5968.lto_priv.81>:
 8006da0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006db0 <commands>:
 8006db0:	6e08 0800 42e1 0800 0000 0000 0000 0000     .n...B..........

08006dc0 <shell_cfg1>:
 8006dc0:	2da4 2000 6db0 0800 0000 0000 0000 0000     .-. .m..........
 8006dd0:	6341 6c63 253a 6434 2020 4720 7279 3a6f     Accl:%4d   Gyro:
 8006de0:	3425 0a64 0000 0000 5653 3323 0000 0000     %4d.....SV#3....
 8006df0:	6469 656c 0000 0000 6f4d 6f74 2072 6f43     idle....Motor Co
 8006e00:	746e 6f72 006c 0000 7270 6e69 0074 0000     ntrol...print...

08006e10 <__func__.7552>:
 8006e10:	7073 5569 736e 6c65 6365 0074 0000 0000     spiUnselect.....

08006e20 <__func__.7594>:
 8006e20:	7073 5369 6e65 0064 0000 0000 0000 0000     spiSend.........

08006e30 <__func__.5968.lto_priv.63>:
 8006e30:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006e40 <__func__.5968.lto_priv.64>:
 8006e40:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006e50 <__func__.5968.lto_priv.66>:
 8006e50:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006e60 <__func__.7559>:
 8006e60:	3269 4d63 7361 6574 5472 6172 736e 696d     i2cMasterTransmi
 8006e70:	5474 6d69 6f65 7475 0000 0000 0000 0000     tTimeout........

08006e80 <__func__.6154>:
 8006e80:	6863 6854 4464 446f 7165 6575 6575 654e     chThdDoDequeueNe
 8006e90:	7478 0049 0000 0000 0000 0000 0000 0000     xtI.............

08006ea0 <hall_cfg>:
 8006ea0:	bd00 0501 0000 0000 0000 0000 0000 0000     ................
 8006eb0:	6152 6964 206f 6f63 746e 6f72 006c 0000     Radio control...
 8006ec0:	6148 6c6c 5320 6e65 6f73 0072 0920 0000     Hall Sensor. ...

08006ed0 <vmt>:
 8006ed0:	1e61 0800 1e31 0800 1d21 0800 1d01 0800     a...1...!.......

08006ee0 <__func__.6737>:
 8006ee0:	6863 6854 5364 7375 6570 646e 0053 0000     chThdSuspendS...

08006ef0 <__func__.6697>:
 8006ef0:	6863 744d 5578 6c6e 636f 006b 0000 0000     chMtxUnlock.....

08006f00 <__func__.6743>:
 8006f00:	6863 6854 5364 7375 6570 646e 6954 656d     chThdSuspendTime
 8006f10:	756f 5374 0000 0000 0000 0000 0000 0000     outS............

08006f20 <__func__.5968.lto_priv.65>:
 8006f20:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08006f30 <__func__.7548>:
 8006f30:	7073 5369 6c65 6365 0074 0000 0000 0000     spiSelect.......

08006f40 <__func__.7554>:
 8006f40:	7073 5f69 6c6c 5f64 7473 7261 0074 0000     spi_lld_start...

08006f50 <ascii_8x16>:
	...
 8006f60:	0000 817e 81a5 bd81 8199 7e81 0000 0000     ..~........~....
 8006f70:	0000 ff7e ffdb c3ff ffe7 7eff 0000 0000     ..~........~....
 8006f80:	0000 0000 fe6c fefe 7cfe 1038 0000 0000     ....l....|8.....
 8006f90:	0000 0000 3810 fe7c 387c 0010 0000 0000     .....8|.|8......
 8006fa0:	0000 1800 3c3c e7e7 18e7 3c18 0000 0000     ....<<.....<....
 8006fb0:	0000 1800 7e3c ffff 187e 3c18 0000 0000     ....<~..~..<....
 8006fc0:	0000 0000 0000 3c18 183c 0000 0000 0000     .......<<.......
 8006fd0:	ffff ffff ffff c3e7 e7c3 ffff ffff ffff     ................
 8006fe0:	0000 0000 3c00 4266 6642 003c 0000 0000     .....<fBBf<.....
 8006ff0:	ffff ffff c3ff bd99 99bd ffc3 ffff ffff     ................
 8007000:	0000 0e1e 321a cc78 cccc 78cc 0000 0000     .....2x....x....
 8007010:	0000 663c 6666 3c66 7e18 1818 0000 0000     ..<ffff<.~......
 8007020:	0000 333f 303f 3030 7030 e0f0 0000 0000     ..?3?0000p......
 8007030:	0000 637f 637f 6363 6763 e6e7 00c0 0000     ...c.ccccg......
 8007040:	0000 1800 db18 e73c db3c 1818 0000 0000     ......<.<.......
 8007050:	8000 e0c0 f8f0 f8fe e0f0 80c0 0000 0000     ................
 8007060:	0200 0e06 3e1e 3efe 0e1e 0206 0000 0000     .....>.>........
 8007070:	0000 3c18 187e 1818 3c7e 0018 0000 0000     ...<~...~<......
 8007080:	0000 6666 6666 6666 0066 6666 0000 0000     ..fffffff.ff....
 8007090:	0000 db7f dbdb 1b7b 1b1b 1b1b 0000 0000     ......{.........
 80070a0:	7c00 60c6 6c38 c6c6 386c c60c 007c 0000     .|.`8l..l8..|...
	...
 80070b8:	fefe fefe 0000 0000 0000 3c18 187e 1818     ...........<~...
 80070c8:	3c7e 7e18 0000 0000 0000 3c18 187e 1818     ~<.~.......<~...
 80070d8:	1818 1818 0000 0000 0000 1818 1818 1818     ................
 80070e8:	7e18 183c 0000 0000 0000 0000 1800 fe0c     .~<.............
 80070f8:	180c 0000 0000 0000 0000 0000 3000 fe60     .............0`.
 8007108:	3060 0000 0000 0000 0000 0000 0000 c0c0     `0..............
 8007118:	fec0 0000 0000 0000 0000 0000 2800 fe6c     .............(l.
 8007128:	286c 0000 0000 0000 0000 0000 3810 7c38     l(...........88|
 8007138:	fe7c 00fe 0000 0000 0000 0000 fefe 7c7c     |.............||
 8007148:	3838 0010 0000 0000 0000 0000 0000 0000     88..............
	...
 8007160:	0000 3c18 3c3c 1818 0018 1818 0000 0000     ...<<<..........
 8007170:	6600 6666 0024 0000 0000 0000 0000 0000     .fff$...........
 8007180:	0000 6c00 fe6c 6c6c fe6c 6c6c 0000 0000     ...ll.lll.ll....
 8007190:	1818 c67c c0c2 067c 8606 7cc6 1818 0000     ..|...|....|....
 80071a0:	0000 0000 c6c2 180c 6030 86c6 0000 0000     ........0`......
 80071b0:	0000 6c38 386c dc76 cccc 76cc 0000 0000     ..8ll8v....v....
 80071c0:	3000 3030 0060 0000 0000 0000 0000 0000     .000`...........
 80071d0:	0000 180c 3030 3030 3030 0c18 0000 0000     ....000000......
 80071e0:	0000 1830 0c0c 0c0c 0c0c 3018 0000 0000     ..0........0....
 80071f0:	0000 0000 6600 ff3c 663c 0000 0000 0000     .....f<.<f......
 8007200:	0000 0000 1800 7e18 1818 0000 0000 0000     .......~........
	...
 8007218:	1800 1818 0030 0000 0000 0000 0000 fe00     ....0...........
	...
 8007238:	0000 1818 0000 0000 0000 0000 0602 180c     ................
 8007248:	6030 80c0 0000 0000 0000 6c38 c6c6 d6d6     0`........8l....
 8007258:	c6c6 386c 0000 0000 0000 3818 1878 1818     ..l8.......8x...
 8007268:	1818 7e18 0000 0000 0000 c67c 0c06 3018     ...~......|....0
 8007278:	c060 fec6 0000 0000 0000 c67c 0606 063c     `.........|...<.
 8007288:	0606 7cc6 0000 0000 0000 1c0c 6c3c fecc     ...|........<l..
 8007298:	0c0c 1e0c 0000 0000 0000 c0fe c0c0 06fc     ................
 80072a8:	0606 7cc6 0000 0000 0000 6038 c0c0 c6fc     ...|......8`....
 80072b8:	c6c6 7cc6 0000 0000 0000 c6fe 0606 180c     ...|............
 80072c8:	3030 3030 0000 0000 0000 c67c c6c6 c67c     0000......|...|.
 80072d8:	c6c6 7cc6 0000 0000 0000 c67c c6c6 067e     ...|......|...~.
 80072e8:	0606 780c 0000 0000 0000 0000 1818 0000     ...x............
 80072f8:	1800 0018 0000 0000 0000 0000 1818 0000     ................
 8007308:	1800 3018 0000 0000 0000 0600 180c 6030     ...0..........0`
 8007318:	1830 060c 0000 0000 0000 0000 7e00 0000     0............~..
 8007328:	007e 0000 0000 0000 0000 6000 1830 060c     ~..........`0...
 8007338:	180c 6030 0000 0000 0000 c67c 0cc6 1818     ..0`......|.....
 8007348:	0018 1818 0000 0000 0000 7c00 c6c6 dede     ...........|....
 8007358:	dcde 7cc0 0000 0000 0000 3810 c66c fec6     ...|.......8l...
 8007368:	c6c6 c6c6 0000 0000 0000 66fc 6666 667c     ...........fff|f
 8007378:	6666 fc66 0000 0000 0000 663c c0c2 c0c0     fff.......<f....
 8007388:	c2c0 3c66 0000 0000 0000 6cf8 6666 6666     ..f<.......lffff
 8007398:	6666 f86c 0000 0000 0000 66fe 6862 6878     ffl........fbhxh
 80073a8:	6260 fe66 0000 0000 0000 66fe 6862 6878     `bf........fbhxh
 80073b8:	6060 f060 0000 0000 0000 663c c0c2 dec0     ```.......<f....
 80073c8:	c6c6 3a66 0000 0000 0000 c6c6 c6c6 c6fe     ..f:............
 80073d8:	c6c6 c6c6 0000 0000 0000 183c 1818 1818     ..........<.....
 80073e8:	1818 3c18 0000 0000 0000 0c1e 0c0c 0c0c     ...<............
 80073f8:	cccc 78cc 0000 0000 0000 66e6 6c66 7878     ...x.......fflxx
 8007408:	666c e666 0000 0000 0000 60f0 6060 6060     lff........`````
 8007418:	6260 fe66 0000 0000 0000 eec6 fefe c6d6     `bf.............
 8007428:	c6c6 c6c6 0000 0000 0000 e6c6 fef6 cede     ................
 8007438:	c6c6 c6c6 0000 0000 0000 c67c c6c6 c6c6     ..........|.....
 8007448:	c6c6 7cc6 0000 0000 0000 66fc 6666 607c     ...|.......fff|`
 8007458:	6060 f060 0000 0000 0000 c67c c6c6 c6c6     ```.......|.....
 8007468:	d6c6 7cde 0e0c 0000 0000 66fc 6666 6c7c     ...|.......fff|l
 8007478:	6666 e666 0000 0000 0000 c67c 60c6 0c38     fff.......|..`8.
 8007488:	c606 7cc6 0000 0000 0000 7e7e 185a 1818     ...|......~~Z...
 8007498:	1818 3c18 0000 0000 0000 c6c6 c6c6 c6c6     ...<............
 80074a8:	c6c6 7cc6 0000 0000 0000 c6c6 c6c6 c6c6     ...|............
 80074b8:	6cc6 1038 0000 0000 0000 c6c6 c6c6 d6d6     .l8.............
 80074c8:	fed6 6cee 0000 0000 0000 c6c6 7c6c 3838     ...l........l|88
 80074d8:	6c7c c6c6 0000 0000 0000 6666 6666 183c     |l........ffff<.
 80074e8:	1818 3c18 0000 0000 0000 c6fe 0c86 3018     ...<...........0
 80074f8:	c260 fec6 0000 0000 0000 303c 3030 3030     `.........<00000
 8007508:	3030 3c30 0000 0000 0000 8000 e0c0 3870     000<..........p8
 8007518:	0e1c 0206 0000 0000 0000 0c3c 0c0c 0c0c     ..........<.....
 8007528:	0c0c 3c0c 0000 0000 3810 c66c 0000 0000     ...<.....8l.....
	...
 800754c:	ff00 0000 3000 0c18 0000 0000 0000 0000     .....0..........
	...
 8007564:	7800 7c0c cccc 76cc 0000 0000 0000 60e0     .x.|...v.......`
 8007574:	7860 666c 6666 7c66 0000 0000 0000 0000     `xlffff|........
 8007584:	7c00 c0c6 c0c0 7cc6 0000 0000 0000 0c1c     .|.....|........
 8007594:	3c0c cc6c cccc 76cc 0000 0000 0000 0000     .<l....v........
 80075a4:	7c00 fec6 c0c0 7cc6 0000 0000 0000 361c     .|.....|.......6
 80075b4:	3032 3078 3030 7830 0000 0000 0000 0000     20x0000x........
 80075c4:	7600 cccc cccc 7ccc cc0c 0078 0000 60e0     .v.....|..x....`
 80075d4:	6c60 6676 6666 e666 0000 0000 0000 1818     `lvffff.........
 80075e4:	3800 1818 1818 3c18 0000 0000 0000 0606     .8.....<........
 80075f4:	0e00 0606 0606 0606 6666 003c 0000 60e0     ........ff<....`
 8007604:	6660 786c 6c78 e666 0000 0000 0000 1838     `flxxlf.......8.
 8007614:	1818 1818 1818 3c18 0000 0000 0000 0000     .......<........
 8007624:	ec00 d6fe d6d6 c6d6 0000 0000 0000 0000     ................
 8007634:	dc00 6666 6666 6666 0000 0000 0000 0000     ..ffffff........
 8007644:	7c00 c6c6 c6c6 7cc6 0000 0000 0000 0000     .|.....|........
 8007654:	dc00 6666 6666 7c66 6060 00f0 0000 0000     ..fffff|``......
 8007664:	7600 cccc cccc 7ccc 0c0c 001e 0000 0000     .v.....|........
 8007674:	dc00 6676 6060 f060 0000 0000 0000 0000     ..vf```.........
 8007684:	7c00 60c6 0c38 7cc6 0000 0000 0000 3010     .|.`8..|.......0
 8007694:	fc30 3030 3030 1c36 0000 0000 0000 0000     0.00006.........
 80076a4:	cc00 cccc cccc 76cc 0000 0000 0000 0000     .......v........
 80076b4:	c600 c6c6 c6c6 386c 0000 0000 0000 0000     ......l8........
 80076c4:	c600 d6c6 d6d6 6cfe 0000 0000 0000 0000     .......l........
 80076d4:	c600 386c 3838 c66c 0000 0000 0000 0000     ..l888l.........
 80076e4:	c600 c6c6 c6c6 7ec6 0c06 00f8 0000 0000     .......~........
 80076f4:	fe00 18cc 6030 fec6 0000 0000 0000 180e     ....0`..........
 8007704:	1818 1870 1818 0e18 0000 0000 0000 1818     ..p.............
 8007714:	1818 1818 1818 1818 0000 0000 0000 1870     ..............p.
 8007724:	1818 180e 1818 7018 0000 0000 7600 00dc     .......p.....v..
	...
 8007744:	3810 c66c c6c6 00fe 0000 0000 0000 fe00     .8l.............
 8007754:	8282 8282 8282 00fe 0000 0000 0000 fe00     ................
 8007764:	aad6 aad6 aad6 00fe 0000 0000 0000 fe00     ................
 8007774:	8a86 da8a b2f2 00fe 0000 0000 0000 fe00     ................
 8007784:	aad6 fade baf6 00fe 0000 0000 0000 00cc     ................
 8007794:	7800 7c0c cccc 76cc 0000 0000 6000 1830     .x.|...v.....`0.
 80077a4:	7800 7c0c cccc 76cc 0000 0000 3800 386c     .x.|...v.....8l8
 80077b4:	7800 7c0c cccc 76cc 0000 0000 0000 0000     .x.|...v........
 80077c4:	7c00 c0c6 c0c0 7cc6 7018 0000 1000 6c38     .|.....|.p....8l
 80077d4:	7c00 fec6 c0c0 7cc6 0000 0000 0000 00c6     .|.....|........
 80077e4:	7c00 fec6 c0c0 7cc6 0000 0000 6000 1830     .|.....|.....`0.
 80077f4:	7c00 fec6 c0c0 7cc6 0000 0000 0000 0066     .|.....|......f.
 8007804:	3800 1818 1818 3c18 0000 0000 1800 663c     .8.....<......<f
 8007814:	3800 1818 1818 3c18 0000 0000 6000 1830     .8.....<.....`0.
 8007824:	3800 1818 1818 3c18 0000 0000 c600 1000     .8.....<........
 8007834:	6c38 c6c6 c6fe c6c6 0000 0000 6c38 1038     8l..........8l8.
 8007844:	6c38 fec6 c6c6 c6c6 0000 0000 180c fe00     8l..............
 8007854:	6266 7868 6268 fe66 0000 0000 0000 0000     fbhxhbf.........
 8007864:	ec00 3636 d87e 6ed8 0000 0000 0000 6c3e     ..66~..n......>l
 8007874:	cccc ccfe cccc cecc 0000 0000 1000 6c38     ..............8l
 8007884:	7c00 c6c6 c6c6 7cc6 0000 0000 0000 00c6     .|.....|........
 8007894:	7c00 c6c6 c6c6 7cc6 0000 0000 6000 1830     .|.....|.....`0.
 80078a4:	7c00 c6c6 c6c6 7cc6 0000 0000 3000 cc78     .|.....|.....0x.
 80078b4:	cc00 cccc cccc 76cc 0000 0000 6000 1830     .......v.....`0.
 80078c4:	cc00 cccc cccc 76cc 0000 0000 0000 00c6     .......v........
 80078d4:	c600 c6c6 c6c6 7ec6 0c06 0078 c600 7c00     .......~..x....|
 80078e4:	c6c6 c6c6 c6c6 7cc6 0000 0000 c600 c600     .......|........
 80078f4:	c6c6 c6c6 c6c6 7cc6 0000 0000 1800 7c18     .......|.......|
 8007904:	c0c6 c0c0 7cc6 1818 0000 0000 3800 646c     .....|.......8ld
 8007914:	f060 6060 6060 fce6 0000 0000 0000 6666     `.````........ff
 8007924:	183c 187e 187e 1818 0000 0000 f800 cccc     <.~.~...........
 8007934:	c4f8 decc cccc c6cc 0000 0000 0e00 181b     ................
 8007944:	1818 187e 1818 70d8 0000 0000 1800 6030     ..~....p......0`
 8007954:	7800 7c0c cccc 76cc 0000 0000 0c00 3018     .x.|...v.......0
 8007964:	3800 1818 1818 3c18 0000 0000 1800 6030     .8.....<......0`
 8007974:	7c00 c6c6 c6c6 7cc6 0000 0000 1800 6030     .|.....|......0`
 8007984:	cc00 cccc cccc 76cc 0000 0000 0000 dc76     .......v......v.
 8007994:	dc00 6666 6666 6666 0000 0000 dc76 c600     ..ffffff....v...
 80079a4:	f6e6 defe c6ce c6c6 0000 0000 0000 6c3c     ..............<l
 80079b4:	3e6c 7e00 0000 0000 0000 0000 0000 6c38     l>.~..........8l
 80079c4:	386c 7c00 0000 0000 0000 0000 0000 3030     l8.|..........00
 80079d4:	3000 6030 c6c0 7cc6 0000 0000 0000 0000     .00`...|........
 80079e4:	0000 c0fe c0c0 00c0 0000 0000 0000 0000     ................
 80079f4:	0000 06fe 0606 0006 0000 0000 6000 62e0     .............`.b
 8007a04:	6c66 3018 dc60 0c86 3e18 0000 6000 62e0     fl.0`....>...`.b
 8007a14:	6c66 3018 ce66 3f9a 0606 0000 0000 1818     fl.0f..?........
 8007a24:	1800 1818 3c3c 183c 0000 0000 0000 0000     ....<<<.........
 8007a34:	3600 d86c 366c 0000 0000 0000 0000 0000     .6l.l6..........
 8007a44:	d800 366c d86c 0000 0000 0000 4411 4411     ..l6l........D.D
 8007a54:	4411 4411 4411 4411 4411 4411 aa55 aa55     .D.D.D.D.D.DU.U.
 8007a64:	aa55 aa55 aa55 aa55 aa55 aa55 77dd 77dd     U.U.U.U.U.U..w.w
 8007a74:	77dd 77dd 77dd 77dd 77dd 77dd 1818 1818     .w.w.w.w.w.w....
 8007a84:	1818 1818 1818 1818 1818 1818 1818 1818     ................
 8007a94:	1818 f818 1818 1818 1818 1818 1818 1818     ................
 8007aa4:	f818 f818 1818 1818 1818 1818 3636 3636     ............6666
 8007ab4:	3636 f636 3636 3636 3636 3636 0000 0000     666.66666666....
 8007ac4:	0000 fe00 3636 3636 3636 3636 0000 0000     ....66666666....
 8007ad4:	f800 f818 1818 1818 1818 1818 3636 3636     ............6666
 8007ae4:	f636 f606 3636 3636 3636 3636 3636 3636     6...666666666666
 8007af4:	3636 3636 3636 3636 3636 3636 0000 0000     666666666666....
 8007b04:	fe00 f606 3636 3636 3636 3636 3636 3636     ....666666666666
 8007b14:	f636 fe06 0000 0000 0000 0000 3636 3636     6...........6666
 8007b24:	3636 fe36 0000 0000 0000 0000 1818 1818     666.............
 8007b34:	f818 f818 0000 0000 0000 0000 0000 0000     ................
 8007b44:	0000 f800 1818 1818 1818 1818 1818 1818     ................
 8007b54:	1818 1f18 0000 0000 0000 0000 1818 1818     ................
 8007b64:	1818 ff18 0000 0000 0000 0000 0000 0000     ................
 8007b74:	0000 ff00 1818 1818 1818 1818 1818 1818     ................
 8007b84:	1818 1f18 1818 1818 1818 1818 0000 0000     ................
 8007b94:	0000 ff00 0000 0000 0000 0000 1818 1818     ................
 8007ba4:	1818 ff18 1818 1818 1818 1818 1818 1818     ................
 8007bb4:	1f18 1f18 1818 1818 1818 1818 3636 3636     ............6666
 8007bc4:	3636 3736 3636 3636 3636 3636 3636 3636     6667666666666666
 8007bd4:	3736 3f30 0000 0000 0000 0000 0000 0000     670?............
 8007be4:	3f00 3730 3636 3636 3636 3636 3636 3636     .?07666666666666
 8007bf4:	f736 ff00 0000 0000 0000 0000 0000 0000     6...............
 8007c04:	ff00 f700 3636 3636 3636 3636 3636 3636     ....666666666666
 8007c14:	3736 3730 3636 3636 3636 3636 0000 0000     670766666666....
 8007c24:	ff00 ff00 0000 0000 0000 0000 3636 3636     ............6666
 8007c34:	f736 f700 3636 3636 3636 3636 1818 1818     6...66666666....
 8007c44:	ff18 ff00 0000 0000 0000 0000 3636 3636     ............6666
 8007c54:	3636 ff36 0000 0000 0000 0000 0000 0000     666.............
 8007c64:	ff00 ff00 1818 1818 1818 1818 0000 0000     ................
 8007c74:	0000 ff00 3636 3636 3636 3636 3636 3636     ....666666666666
 8007c84:	3636 3f36 0000 0000 0000 0000 1818 1818     666?............
 8007c94:	1f18 1f18 0000 0000 0000 0000 0000 0000     ................
 8007ca4:	1f00 1f18 1818 1818 1818 1818 0000 0000     ................
 8007cb4:	0000 3f00 3636 3636 3636 3636 3636 3636     ...?666666666666
 8007cc4:	3636 ff36 3636 3636 3636 3636 1818 1818     666.66666666....
 8007cd4:	ff18 ff18 1818 1818 1818 1818 1818 1818     ................
 8007ce4:	1818 f818 0000 0000 0000 0000 0000 0000     ................
 8007cf4:	0000 1f00 1818 1818 1818 1818 ffff ffff     ................
 8007d04:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
 8007d14:	0000 ff00 ffff ffff ffff ffff f0f0 f0f0     ................
 8007d24:	f0f0 f0f0 f0f0 f0f0 f0f0 f0f0 0f0f 0f0f     ................
 8007d34:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f ffff ffff     ................
 8007d44:	ffff 00ff 0000 0000 0000 0000 0000 0000     ................
 8007d54:	7600 d8dc d8d8 76dc 0000 0000 0000 cc78     .v.....v......x.
 8007d64:	cccc ccd8 c6c6 ccc6 0000 0000 0000 c6fe     ................
 8007d74:	c0c6 c0c0 c0c0 c0c0 0000 0000 0000 0000     ................
 8007d84:	fe00 6c6c 6c6c 6c6c 0000 0000 0000 c6fe     ..llllll........
 8007d94:	3060 1818 6030 fec6 0000 0000 0000 0000     `0..0`..........
 8007da4:	7e00 d8d8 d8d8 70d8 0000 0000 0000 0000     .~.....p........
 8007db4:	6600 6666 6666 7c66 6060 00c0 0000 0000     .ffffff|``......
 8007dc4:	dc76 1818 1818 1818 0000 0000 0000 187e     v.............~.
 8007dd4:	663c 6666 3c66 7e18 0000 0000 0000 6c38     <ffff<.~......8l
 8007de4:	c6c6 c6fe c6c6 386c 0000 0000 0000 6c38     ......l8......8l
 8007df4:	c6c6 6cc6 6c6c ee6c 0000 0000 0000 301e     ...llll........0
 8007e04:	0c18 663e 6666 3c66 0000 0000 0000 0000     ..>ffff<........
 8007e14:	7e00 dbdb 7edb 0000 0000 0000 0000 0300     .~...~..........
 8007e24:	7e06 dbdb 7ef3 c060 0000 0000 0000 301c     .~...~`........0
 8007e34:	6060 607c 6060 1c30 0000 0000 0000 7c00     ``|```0........|
 8007e44:	c6c6 c6c6 c6c6 c6c6 0000 0000 0000 0000     ................
 8007e54:	00fe fe00 0000 00fe 0000 0000 0000 0000     ................
 8007e64:	1818 187e 0018 7e00 0000 0000 0000 3000     ..~....~.......0
 8007e74:	0c18 0c06 3018 7e00 0000 0000 0000 0c00     .....0.~........
 8007e84:	3018 3060 0c18 7e00 0000 0000 0000 1b0e     .0`0...~........
 8007e94:	181b 1818 1818 1818 1818 1818 1818 1818     ................
 8007ea4:	1818 1818 d818 d8d8 0070 0000 0000 0000     ........p.......
 8007eb4:	1800 7e00 1800 0000 0000 0000 0000 0000     ...~............
 8007ec4:	7600 00dc dc76 0000 0000 0000 3800 6c6c     .v..v........8ll
 8007ed4:	0038 0000 0000 0000 0000 0000 0000 0000     8...............
 8007ee4:	0000 1800 0018 0000 0000 0000 0000 0000     ................
 8007ef4:	0000 1800 0000 0000 0000 0000 0f00 0c0c     ................
 8007f04:	0c0c ec0c 6c6c 1c3c 0000 0000 6c00 3636     ....ll<......l66
 8007f14:	3636 0036 0000 0000 0000 0000 3c00 0c66     666..........<f.
 8007f24:	3218 007e 0000 0000 0000 0000 0000 0000     .2~.............
 8007f34:	7e7e 7e7e 7e7e 007e 0000 0000 0000 0000     ~~~~~~~.........
	...
 8007f50:	4654 2054 6944 7073 616c 0079 6854 7465     TFT Display.Thet
 8007f60:	3a61 3625 0064 0000 4352 3a31 3525 0064     a:%6d...RC1:%5d.
 8007f70:	4352 3a32 3525 0064 4352 3a33 3525 0064     RC2:%5d.RC3:%5d.

08007f80 <TFTSPI_cfg>:
 8007f80:	0000 0000 0400 4002 000c 000f 0000 0000     .......@........

08007f90 <__func__.7540>:
 8007f90:	7073 5369 6174 7472 0000 0000 0000 0000     spiStart........

08007fa0 <atanlo>:
 8007fa0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 8007fb0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

08007fc0 <atanhi>:
 8007fc0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 8007fd0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
