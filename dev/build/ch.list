
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f004 fcd2 	bl	8004bc0 <__core_init>
 800021c:	f001 fbc8 	bl	80019b0 <__early_init>
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <endfiniloop+0xa>)
 8000222:	491e      	ldr	r1, [pc, #120]	; (800029c <endfiniloop+0xe>)
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <endfiniloop+0x12>)

08000226 <msloop>:
 8000226:	4291      	cmp	r1, r2
 8000228:	bf3c      	itt	cc
 800022a:	f841 0b04 	strcc.w	r0, [r1], #4
 800022e:	e7fa      	bcc.n	8000226 <msloop>
 8000230:	491c      	ldr	r1, [pc, #112]	; (80002a4 <endfiniloop+0x16>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <endfiniloop+0x6>)

08000234 <psloop>:
 8000234:	4291      	cmp	r1, r2
 8000236:	bf3c      	itt	cc
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
 800023c:	e7fa      	bcc.n	8000234 <psloop>
 800023e:	491a      	ldr	r1, [pc, #104]	; (80002a8 <endfiniloop+0x1a>)
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <endfiniloop+0x1e>)
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <endfiniloop+0x22>)

08000244 <dloop>:
 8000244:	429a      	cmp	r2, r3
 8000246:	bf3e      	ittt	cc
 8000248:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024c:	f842 0b04 	strcc.w	r0, [r2], #4
 8000250:	e7f8      	bcc.n	8000244 <dloop>
 8000252:	2000      	movs	r0, #0
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <endfiniloop+0x26>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <endfiniloop+0x2a>)

08000258 <bloop>:
 8000258:	4291      	cmp	r1, r2
 800025a:	bf3c      	itt	cc
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000260:	e7fa      	bcc.n	8000258 <bloop>
 8000262:	f004 fc75 	bl	8004b50 <__init_ram_areas>
 8000266:	f004 fca3 	bl	8004bb0 <__late_init>
 800026a:	4c14      	ldr	r4, [pc, #80]	; (80002bc <endfiniloop+0x2e>)
 800026c:	4d14      	ldr	r5, [pc, #80]	; (80002c0 <endfiniloop+0x32>)

0800026e <initloop>:
 800026e:	42ac      	cmp	r4, r5
 8000270:	da03      	bge.n	800027a <endinitloop>
 8000272:	f854 1b04 	ldr.w	r1, [r4], #4
 8000276:	4788      	blx	r1
 8000278:	e7f9      	b.n	800026e <initloop>

0800027a <endinitloop>:
 800027a:	f005 fc49 	bl	8005b10 <main>
 800027e:	4c11      	ldr	r4, [pc, #68]	; (80002c4 <endfiniloop+0x36>)
 8000280:	4d11      	ldr	r5, [pc, #68]	; (80002c8 <endfiniloop+0x3a>)

08000282 <finiloop>:
 8000282:	42ac      	cmp	r4, r5
 8000284:	da03      	bge.n	800028e <endfiniloop>
 8000286:	f854 1b04 	ldr.w	r1, [r4], #4
 800028a:	4788      	blx	r1
 800028c:	e7f9      	b.n	8000282 <finiloop>

0800028e <endfiniloop>:
 800028e:	f004 bc87 	b.w	8004ba0 <__default_exit>
 8000292:	0000      	.short	0x0000
 8000294:	20000800 	.word	0x20000800
 8000298:	55555555 	.word	0x55555555
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000400 	.word	0x20000400
 80002a4:	20000400 	.word	0x20000400
 80002a8:	08008e30 	.word	0x08008e30
 80002ac:	20000800 	.word	0x20000800
 80002b0:	2000088c 	.word	0x2000088c
 80002b4:	20000890 	.word	0x20000890
 80002b8:	2000f0a0 	.word	0x2000f0a0
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
 80002c8:	080001c0 	.word	0x080001c0
 80002cc:	00000000 	.word	0x00000000

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	f004 fa2a 	bl	8004740 <_dbg_check_unlock>
 80002ec:	f003 ff98 	bl	8004220 <_stats_stop_measure_crit_thd>
 80002f0:	2300      	movs	r3, #0
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	4628      	mov	r0, r5
 80002f8:	47a0      	blx	r4
 80002fa:	2000      	movs	r0, #0
 80002fc:	f004 fae0 	bl	80048c0 <chThdExit>

08000300 <_port_switch_from_isr>:
 8000300:	f003 ffa6 	bl	8004250 <_stats_start_measure_crit_thd>
 8000304:	f004 fa2c 	bl	8004760 <_dbg_check_lock>
 8000308:	f003 ffea 	bl	80042e0 <chSchDoReschedule>
 800030c:	f004 fa18 	bl	8004740 <_dbg_check_unlock>
 8000310:	f003 ff86 	bl	8004220 <_stats_stop_measure_crit_thd>

08000314 <_port_exit_from_isr>:
 8000314:	df00      	svc	0
 8000316:	e7fe      	b.n	8000316 <_port_exit_from_isr+0x2>
	...

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800045e:	f1a4 0401 	sub.w	r4, r4, #1
 8000462:	d1e9      	bne.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f092 0f00 	teq	r2, #0
 800060a:	bf14      	ite	ne
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	4770      	bxeq	lr
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800061c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000620:	e720      	b.n	8000464 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_ul2d>:
 8000624:	ea50 0201 	orrs.w	r2, r0, r1
 8000628:	bf08      	it	eq
 800062a:	4770      	bxeq	lr
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	e00a      	b.n	800064a <__aeabi_l2d+0x16>

08000634 <__aeabi_l2d>:
 8000634:	ea50 0201 	orrs.w	r2, r0, r1
 8000638:	bf08      	it	eq
 800063a:	4770      	bxeq	lr
 800063c:	b530      	push	{r4, r5, lr}
 800063e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000642:	d502      	bpl.n	800064a <__aeabi_l2d+0x16>
 8000644:	4240      	negs	r0, r0
 8000646:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000652:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000656:	f43f aedc 	beq.w	8000412 <__adddf3+0xe6>
 800065a:	f04f 0203 	mov.w	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000672:	f1c2 0320 	rsb	r3, r2, #32
 8000676:	fa00 fc03 	lsl.w	ip, r0, r3
 800067a:	fa20 f002 	lsr.w	r0, r0, r2
 800067e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000682:	ea40 000e 	orr.w	r0, r0, lr
 8000686:	fa21 f102 	lsr.w	r1, r1, r2
 800068a:	4414      	add	r4, r2
 800068c:	e6c1      	b.n	8000412 <__adddf3+0xe6>
 800068e:	bf00      	nop

08000690 <__aeabi_dmul>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000696:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800069a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800069e:	bf1d      	ittte	ne
 80006a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006a4:	ea94 0f0c 	teqne	r4, ip
 80006a8:	ea95 0f0c 	teqne	r5, ip
 80006ac:	f000 f8de 	bleq	800086c <__aeabi_dmul+0x1dc>
 80006b0:	442c      	add	r4, r5
 80006b2:	ea81 0603 	eor.w	r6, r1, r3
 80006b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006c2:	bf18      	it	ne
 80006c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006d0:	d038      	beq.n	8000744 <__aeabi_dmul+0xb4>
 80006d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006e6:	f04f 0600 	mov.w	r6, #0
 80006ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ee:	f09c 0f00 	teq	ip, #0
 80006f2:	bf18      	it	ne
 80006f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000700:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000704:	d204      	bcs.n	8000710 <__aeabi_dmul+0x80>
 8000706:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800070a:	416d      	adcs	r5, r5
 800070c:	eb46 0606 	adc.w	r6, r6, r6
 8000710:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000714:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000718:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800071c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000720:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000724:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000728:	bf88      	it	hi
 800072a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800072e:	d81e      	bhi.n	800076e <__aeabi_dmul+0xde>
 8000730:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000734:	bf08      	it	eq
 8000736:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800073a:	f150 0000 	adcs.w	r0, r0, #0
 800073e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000748:	ea46 0101 	orr.w	r1, r6, r1
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000758:	bfc2      	ittt	gt
 800075a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800075e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000762:	bd70      	popgt	{r4, r5, r6, pc}
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f04f 0e00 	mov.w	lr, #0
 800076c:	3c01      	subs	r4, #1
 800076e:	f300 80ab 	bgt.w	80008c8 <__aeabi_dmul+0x238>
 8000772:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000776:	bfde      	ittt	le
 8000778:	2000      	movle	r0, #0
 800077a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd70      	pople	{r4, r5, r6, pc}
 8000780:	f1c4 0400 	rsb	r4, r4, #0
 8000784:	3c20      	subs	r4, #32
 8000786:	da35      	bge.n	80007f4 <__aeabi_dmul+0x164>
 8000788:	340c      	adds	r4, #12
 800078a:	dc1b      	bgt.n	80007c4 <__aeabi_dmul+0x134>
 800078c:	f104 0414 	add.w	r4, r4, #20
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f305 	lsl.w	r3, r0, r5
 8000798:	fa20 f004 	lsr.w	r0, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	fa21 f604 	lsr.w	r6, r1, r4
 80007b4:	eb42 0106 	adc.w	r1, r2, r6
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 040c 	rsb	r4, r4, #12
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f304 	lsl.w	r3, r0, r4
 80007d0:	fa20 f005 	lsr.w	r0, r0, r5
 80007d4:	fa01 f204 	lsl.w	r2, r1, r4
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e4:	f141 0100 	adc.w	r1, r1, #0
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f1c4 0520 	rsb	r5, r4, #32
 80007f8:	fa00 f205 	lsl.w	r2, r0, r5
 80007fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000800:	fa20 f304 	lsr.w	r3, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea43 0302 	orr.w	r3, r3, r2
 800080c:	fa21 f004 	lsr.w	r0, r1, r4
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	fa21 f204 	lsr.w	r2, r1, r4
 8000818:	ea20 0002 	bic.w	r0, r0, r2
 800081c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f094 0f00 	teq	r4, #0
 8000830:	d10f      	bne.n	8000852 <__aeabi_dmul+0x1c2>
 8000832:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000836:	0040      	lsls	r0, r0, #1
 8000838:	eb41 0101 	adc.w	r1, r1, r1
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3c01      	subeq	r4, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1a6>
 8000846:	ea41 0106 	orr.w	r1, r1, r6
 800084a:	f095 0f00 	teq	r5, #0
 800084e:	bf18      	it	ne
 8000850:	4770      	bxne	lr
 8000852:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	eb43 0303 	adc.w	r3, r3, r3
 800085c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000860:	bf08      	it	eq
 8000862:	3d01      	subeq	r5, #1
 8000864:	d0f7      	beq.n	8000856 <__aeabi_dmul+0x1c6>
 8000866:	ea43 0306 	orr.w	r3, r3, r6
 800086a:	4770      	bx	lr
 800086c:	ea94 0f0c 	teq	r4, ip
 8000870:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000874:	bf18      	it	ne
 8000876:	ea95 0f0c 	teqne	r5, ip
 800087a:	d00c      	beq.n	8000896 <__aeabi_dmul+0x206>
 800087c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000886:	d1d1      	bne.n	800082c <__aeabi_dmul+0x19c>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800089a:	bf06      	itte	eq
 800089c:	4610      	moveq	r0, r2
 800089e:	4619      	moveq	r1, r3
 80008a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a4:	d019      	beq.n	80008da <__aeabi_dmul+0x24a>
 80008a6:	ea94 0f0c 	teq	r4, ip
 80008aa:	d102      	bne.n	80008b2 <__aeabi_dmul+0x222>
 80008ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b0:	d113      	bne.n	80008da <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	d105      	bne.n	80008c4 <__aeabi_dmul+0x234>
 80008b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008bc:	bf1c      	itt	ne
 80008be:	4610      	movne	r0, r2
 80008c0:	4619      	movne	r1, r3
 80008c2:	d10a      	bne.n	80008da <__aeabi_dmul+0x24a>
 80008c4:	ea81 0103 	eor.w	r1, r1, r3
 80008c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008e2:	bd70      	pop	{r4, r5, r6, pc}

080008e4 <__aeabi_ddiv>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008f2:	bf1d      	ittte	ne
 80008f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f8:	ea94 0f0c 	teqne	r4, ip
 80008fc:	ea95 0f0c 	teqne	r5, ip
 8000900:	f000 f8a7 	bleq	8000a52 <__aeabi_ddiv+0x16e>
 8000904:	eba4 0405 	sub.w	r4, r4, r5
 8000908:	ea81 0e03 	eor.w	lr, r1, r3
 800090c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000910:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000914:	f000 8088 	beq.w	8000a28 <__aeabi_ddiv+0x144>
 8000918:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800091c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000920:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000924:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000928:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800092c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000930:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000934:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000938:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800093c:	429d      	cmp	r5, r3
 800093e:	bf08      	it	eq
 8000940:	4296      	cmpeq	r6, r2
 8000942:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000946:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800094a:	d202      	bcs.n	8000952 <__aeabi_ddiv+0x6e>
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	1ab6      	subs	r6, r6, r2
 8000954:	eb65 0503 	sbc.w	r5, r5, r3
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000962:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 000c 	orrcs.w	r0, r0, ip
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009c4:	d018      	beq.n	80009f8 <__aeabi_ddiv+0x114>
 80009c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009e2:	d1c0      	bne.n	8000966 <__aeabi_ddiv+0x82>
 80009e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e8:	d10b      	bne.n	8000a02 <__aeabi_ddiv+0x11e>
 80009ea:	ea41 0100 	orr.w	r1, r1, r0
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009f6:	e7b6      	b.n	8000966 <__aeabi_ddiv+0x82>
 80009f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fc:	bf04      	itt	eq
 80009fe:	4301      	orreq	r1, r0
 8000a00:	2000      	moveq	r0, #0
 8000a02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a06:	bf88      	it	hi
 8000a08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a0c:	f63f aeaf 	bhi.w	800076e <__aeabi_dmul+0xde>
 8000a10:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a14:	bf04      	itt	eq
 8000a16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a1e:	f150 0000 	adcs.w	r0, r0, #0
 8000a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a34:	bfc2      	ittt	gt
 8000a36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a44:	f04f 0e00 	mov.w	lr, #0
 8000a48:	3c01      	subs	r4, #1
 8000a4a:	e690      	b.n	800076e <__aeabi_dmul+0xde>
 8000a4c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a50:	e68d      	b.n	800076e <__aeabi_dmul+0xde>
 8000a52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a56:	ea94 0f0c 	teq	r4, ip
 8000a5a:	bf08      	it	eq
 8000a5c:	ea95 0f0c 	teqeq	r5, ip
 8000a60:	f43f af3b 	beq.w	80008da <__aeabi_dmul+0x24a>
 8000a64:	ea94 0f0c 	teq	r4, ip
 8000a68:	d10a      	bne.n	8000a80 <__aeabi_ddiv+0x19c>
 8000a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a6e:	f47f af34 	bne.w	80008da <__aeabi_dmul+0x24a>
 8000a72:	ea95 0f0c 	teq	r5, ip
 8000a76:	f47f af25 	bne.w	80008c4 <__aeabi_dmul+0x234>
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	e72c      	b.n	80008da <__aeabi_dmul+0x24a>
 8000a80:	ea95 0f0c 	teq	r5, ip
 8000a84:	d106      	bne.n	8000a94 <__aeabi_ddiv+0x1b0>
 8000a86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a8a:	f43f aefd 	beq.w	8000888 <__aeabi_dmul+0x1f8>
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4619      	mov	r1, r3
 8000a92:	e722      	b.n	80008da <__aeabi_dmul+0x24a>
 8000a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a9e:	f47f aec5 	bne.w	800082c <__aeabi_dmul+0x19c>
 8000aa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aa6:	f47f af0d 	bne.w	80008c4 <__aeabi_dmul+0x234>
 8000aaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aae:	f47f aeeb 	bne.w	8000888 <__aeabi_dmul+0x1f8>
 8000ab2:	e712      	b.n	80008da <__aeabi_dmul+0x24a>
	...

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <memcpy>:
 8000b60:	4684      	mov	ip, r0
 8000b62:	ea41 0300 	orr.w	r3, r1, r0
 8000b66:	f013 0303 	ands.w	r3, r3, #3
 8000b6a:	d16d      	bne.n	8000c48 <memcpy+0xe8>
 8000b6c:	3a40      	subs	r2, #64	; 0x40
 8000b6e:	d341      	bcc.n	8000bf4 <memcpy+0x94>
 8000b70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b74:	f840 3b04 	str.w	r3, [r0], #4
 8000b78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b7c:	f840 3b04 	str.w	r3, [r0], #4
 8000b80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b84:	f840 3b04 	str.w	r3, [r0], #4
 8000b88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b8c:	f840 3b04 	str.w	r3, [r0], #4
 8000b90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b94:	f840 3b04 	str.w	r3, [r0], #4
 8000b98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b9c:	f840 3b04 	str.w	r3, [r0], #4
 8000ba0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba4:	f840 3b04 	str.w	r3, [r0], #4
 8000ba8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bac:	f840 3b04 	str.w	r3, [r0], #4
 8000bb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bb4:	f840 3b04 	str.w	r3, [r0], #4
 8000bb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bbc:	f840 3b04 	str.w	r3, [r0], #4
 8000bc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bc4:	f840 3b04 	str.w	r3, [r0], #4
 8000bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bcc:	f840 3b04 	str.w	r3, [r0], #4
 8000bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bd4:	f840 3b04 	str.w	r3, [r0], #4
 8000bd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bdc:	f840 3b04 	str.w	r3, [r0], #4
 8000be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000be4:	f840 3b04 	str.w	r3, [r0], #4
 8000be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bec:	f840 3b04 	str.w	r3, [r0], #4
 8000bf0:	3a40      	subs	r2, #64	; 0x40
 8000bf2:	d2bd      	bcs.n	8000b70 <memcpy+0x10>
 8000bf4:	3230      	adds	r2, #48	; 0x30
 8000bf6:	d311      	bcc.n	8000c1c <memcpy+0xbc>
 8000bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bfc:	f840 3b04 	str.w	r3, [r0], #4
 8000c00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c04:	f840 3b04 	str.w	r3, [r0], #4
 8000c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c0c:	f840 3b04 	str.w	r3, [r0], #4
 8000c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c14:	f840 3b04 	str.w	r3, [r0], #4
 8000c18:	3a10      	subs	r2, #16
 8000c1a:	d2ed      	bcs.n	8000bf8 <memcpy+0x98>
 8000c1c:	320c      	adds	r2, #12
 8000c1e:	d305      	bcc.n	8000c2c <memcpy+0xcc>
 8000c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c24:	f840 3b04 	str.w	r3, [r0], #4
 8000c28:	3a04      	subs	r2, #4
 8000c2a:	d2f9      	bcs.n	8000c20 <memcpy+0xc0>
 8000c2c:	3204      	adds	r2, #4
 8000c2e:	d008      	beq.n	8000c42 <memcpy+0xe2>
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	bf1c      	itt	ne
 8000c34:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c38:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c3c:	d301      	bcc.n	8000c42 <memcpy+0xe2>
 8000c3e:	880b      	ldrh	r3, [r1, #0]
 8000c40:	8003      	strh	r3, [r0, #0]
 8000c42:	4660      	mov	r0, ip
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2a08      	cmp	r2, #8
 8000c4a:	d313      	bcc.n	8000c74 <memcpy+0x114>
 8000c4c:	078b      	lsls	r3, r1, #30
 8000c4e:	d08d      	beq.n	8000b6c <memcpy+0xc>
 8000c50:	f010 0303 	ands.w	r3, r0, #3
 8000c54:	d08a      	beq.n	8000b6c <memcpy+0xc>
 8000c56:	f1c3 0304 	rsb	r3, r3, #4
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	07db      	lsls	r3, r3, #31
 8000c5e:	bf1c      	itt	ne
 8000c60:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c64:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c68:	d380      	bcc.n	8000b6c <memcpy+0xc>
 8000c6a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000c6e:	f820 3b02 	strh.w	r3, [r0], #2
 8000c72:	e77b      	b.n	8000b6c <memcpy+0xc>
 8000c74:	3a04      	subs	r2, #4
 8000c76:	d3d9      	bcc.n	8000c2c <memcpy+0xcc>
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c7e:	f800 3b01 	strb.w	r3, [r0], #1
 8000c82:	d2f9      	bcs.n	8000c78 <memcpy+0x118>
 8000c84:	780b      	ldrb	r3, [r1, #0]
 8000c86:	7003      	strb	r3, [r0, #0]
 8000c88:	784b      	ldrb	r3, [r1, #1]
 8000c8a:	7043      	strb	r3, [r0, #1]
 8000c8c:	788b      	ldrb	r3, [r1, #2]
 8000c8e:	7083      	strb	r3, [r0, #2]
 8000c90:	4660      	mov	r0, ip
 8000c92:	4770      	bx	lr
	...
 8000ca0:	eba2 0003 	sub.w	r0, r2, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <strcmp>:
 8000ca8:	7802      	ldrb	r2, [r0, #0]
 8000caa:	780b      	ldrb	r3, [r1, #0]
 8000cac:	2a01      	cmp	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	429a      	cmpcs	r2, r3
 8000cb2:	d1f5      	bne.n	8000ca0 <memcpy+0x140>
 8000cb4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000cb8:	ea40 0401 	orr.w	r4, r0, r1
 8000cbc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000cc0:	f06f 0c00 	mvn.w	ip, #0
 8000cc4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000cc8:	b312      	cbz	r2, 8000d10 <strcmp+0x68>
 8000cca:	ea80 0401 	eor.w	r4, r0, r1
 8000cce:	f014 0f07 	tst.w	r4, #7
 8000cd2:	d16a      	bne.n	8000daa <strcmp+0x102>
 8000cd4:	f000 0407 	and.w	r4, r0, #7
 8000cd8:	f020 0007 	bic.w	r0, r0, #7
 8000cdc:	f004 0503 	and.w	r5, r4, #3
 8000ce0:	f021 0107 	bic.w	r1, r1, #7
 8000ce4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000ce8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000cec:	f014 0f04 	tst.w	r4, #4
 8000cf0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000cf4:	fa0c f405 	lsl.w	r4, ip, r5
 8000cf8:	ea62 0204 	orn	r2, r2, r4
 8000cfc:	ea66 0604 	orn	r6, r6, r4
 8000d00:	d00a      	beq.n	8000d18 <strcmp+0x70>
 8000d02:	ea63 0304 	orn	r3, r3, r4
 8000d06:	4662      	mov	r2, ip
 8000d08:	ea67 0704 	orn	r7, r7, r4
 8000d0c:	4666      	mov	r6, ip
 8000d0e:	e003      	b.n	8000d18 <strcmp+0x70>
 8000d10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000d14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000d18:	fa82 f54c 	uadd8	r5, r2, ip
 8000d1c:	ea82 0406 	eor.w	r4, r2, r6
 8000d20:	faa4 f48c 	sel	r4, r4, ip
 8000d24:	bb6c      	cbnz	r4, 8000d82 <strcmp+0xda>
 8000d26:	fa83 f54c 	uadd8	r5, r3, ip
 8000d2a:	ea83 0507 	eor.w	r5, r3, r7
 8000d2e:	faa5 f58c 	sel	r5, r5, ip
 8000d32:	b995      	cbnz	r5, 8000d5a <strcmp+0xb2>
 8000d34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000d38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000d3c:	fa82 f54c 	uadd8	r5, r2, ip
 8000d40:	ea82 0406 	eor.w	r4, r2, r6
 8000d44:	faa4 f48c 	sel	r4, r4, ip
 8000d48:	fa83 f54c 	uadd8	r5, r3, ip
 8000d4c:	ea83 0507 	eor.w	r5, r3, r7
 8000d50:	faa5 f58c 	sel	r5, r5, ip
 8000d54:	4325      	orrs	r5, r4
 8000d56:	d0db      	beq.n	8000d10 <strcmp+0x68>
 8000d58:	b99c      	cbnz	r4, 8000d82 <strcmp+0xda>
 8000d5a:	ba2d      	rev	r5, r5
 8000d5c:	fab5 f485 	clz	r4, r5
 8000d60:	f024 0407 	bic.w	r4, r4, #7
 8000d64:	fa27 f104 	lsr.w	r1, r7, r4
 8000d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000d6c:	fa23 f304 	lsr.w	r3, r3, r4
 8000d70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000d74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000d7c:	eba0 0001 	sub.w	r0, r0, r1
 8000d80:	4770      	bx	lr
 8000d82:	ba24      	rev	r4, r4
 8000d84:	fab4 f484 	clz	r4, r4
 8000d88:	f024 0407 	bic.w	r4, r4, #7
 8000d8c:	fa26 f104 	lsr.w	r1, r6, r4
 8000d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000d94:	fa22 f204 	lsr.w	r2, r2, r4
 8000d98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000d9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000da0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000da4:	eba0 0001 	sub.w	r0, r0, r1
 8000da8:	4770      	bx	lr
 8000daa:	f014 0f03 	tst.w	r4, #3
 8000dae:	d13c      	bne.n	8000e2a <strcmp+0x182>
 8000db0:	f010 0403 	ands.w	r4, r0, #3
 8000db4:	d128      	bne.n	8000e08 <strcmp+0x160>
 8000db6:	f850 2b08 	ldr.w	r2, [r0], #8
 8000dba:	f851 3b08 	ldr.w	r3, [r1], #8
 8000dbe:	fa82 f54c 	uadd8	r5, r2, ip
 8000dc2:	ea82 0503 	eor.w	r5, r2, r3
 8000dc6:	faa5 f58c 	sel	r5, r5, ip
 8000dca:	b95d      	cbnz	r5, 8000de4 <strcmp+0x13c>
 8000dcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd4:	fa82 f54c 	uadd8	r5, r2, ip
 8000dd8:	ea82 0503 	eor.w	r5, r2, r3
 8000ddc:	faa5 f58c 	sel	r5, r5, ip
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d0e8      	beq.n	8000db6 <strcmp+0x10e>
 8000de4:	ba2d      	rev	r5, r5
 8000de6:	fab5 f485 	clz	r4, r5
 8000dea:	f024 0407 	bic.w	r4, r4, #7
 8000dee:	fa23 f104 	lsr.w	r1, r3, r4
 8000df2:	fa22 f204 	lsr.w	r2, r2, r4
 8000df6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000dfa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000dfe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e02:	eba0 0001 	sub.w	r0, r0, r1
 8000e06:	4770      	bx	lr
 8000e08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000e0c:	f020 0003 	bic.w	r0, r0, #3
 8000e10:	f850 2b08 	ldr.w	r2, [r0], #8
 8000e14:	f021 0103 	bic.w	r1, r1, #3
 8000e18:	f851 3b08 	ldr.w	r3, [r1], #8
 8000e1c:	fa0c f404 	lsl.w	r4, ip, r4
 8000e20:	ea62 0204 	orn	r2, r2, r4
 8000e24:	ea63 0304 	orn	r3, r3, r4
 8000e28:	e7c9      	b.n	8000dbe <strcmp+0x116>
 8000e2a:	f010 0403 	ands.w	r4, r0, #3
 8000e2e:	d01a      	beq.n	8000e66 <strcmp+0x1be>
 8000e30:	eba1 0104 	sub.w	r1, r1, r4
 8000e34:	f020 0003 	bic.w	r0, r0, #3
 8000e38:	07e4      	lsls	r4, r4, #31
 8000e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e3e:	d006      	beq.n	8000e4e <strcmp+0x1a6>
 8000e40:	d20f      	bcs.n	8000e62 <strcmp+0x1ba>
 8000e42:	788b      	ldrb	r3, [r1, #2]
 8000e44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000e48:	1ae4      	subs	r4, r4, r3
 8000e4a:	d106      	bne.n	8000e5a <strcmp+0x1b2>
 8000e4c:	b12b      	cbz	r3, 8000e5a <strcmp+0x1b2>
 8000e4e:	78cb      	ldrb	r3, [r1, #3]
 8000e50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000e54:	1ae4      	subs	r4, r4, r3
 8000e56:	d100      	bne.n	8000e5a <strcmp+0x1b2>
 8000e58:	b91b      	cbnz	r3, 8000e62 <strcmp+0x1ba>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000e60:	4770      	bx	lr
 8000e62:	f101 0104 	add.w	r1, r1, #4
 8000e66:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e6a:	07cc      	lsls	r4, r1, #31
 8000e6c:	f021 0103 	bic.w	r1, r1, #3
 8000e70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e74:	d848      	bhi.n	8000f08 <strcmp+0x260>
 8000e76:	d224      	bcs.n	8000ec2 <strcmp+0x21a>
 8000e78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8000e7c:	fa82 f54c 	uadd8	r5, r2, ip
 8000e80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000e84:	faa5 f58c 	sel	r5, r5, ip
 8000e88:	d10a      	bne.n	8000ea0 <strcmp+0x1f8>
 8000e8a:	b965      	cbnz	r5, 8000ea6 <strcmp+0x1fe>
 8000e8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e90:	ea84 0402 	eor.w	r4, r4, r2
 8000e94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000e98:	d10e      	bne.n	8000eb8 <strcmp+0x210>
 8000e9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000e9e:	e7eb      	b.n	8000e78 <strcmp+0x1d0>
 8000ea0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000ea4:	e055      	b.n	8000f52 <strcmp+0x2aa>
 8000ea6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8000eaa:	d14d      	bne.n	8000f48 <strcmp+0x2a0>
 8000eac:	7808      	ldrb	r0, [r1, #0]
 8000eae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000eb2:	f1c0 0000 	rsb	r0, r0, #0
 8000eb6:	4770      	bx	lr
 8000eb8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ebc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000ec0:	e047      	b.n	8000f52 <strcmp+0x2aa>
 8000ec2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000ec6:	fa82 f54c 	uadd8	r5, r2, ip
 8000eca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000ece:	faa5 f58c 	sel	r5, r5, ip
 8000ed2:	d10a      	bne.n	8000eea <strcmp+0x242>
 8000ed4:	b965      	cbnz	r5, 8000ef0 <strcmp+0x248>
 8000ed6:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eda:	ea84 0402 	eor.w	r4, r4, r2
 8000ede:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000ee2:	d10c      	bne.n	8000efe <strcmp+0x256>
 8000ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8000ee8:	e7eb      	b.n	8000ec2 <strcmp+0x21a>
 8000eea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000eee:	e030      	b.n	8000f52 <strcmp+0x2aa>
 8000ef0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000ef4:	d128      	bne.n	8000f48 <strcmp+0x2a0>
 8000ef6:	880b      	ldrh	r3, [r1, #0]
 8000ef8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000efc:	e029      	b.n	8000f52 <strcmp+0x2aa>
 8000efe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000f02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000f06:	e024      	b.n	8000f52 <strcmp+0x2aa>
 8000f08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8000f0c:	fa82 f54c 	uadd8	r5, r2, ip
 8000f10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000f14:	faa5 f58c 	sel	r5, r5, ip
 8000f18:	d10a      	bne.n	8000f30 <strcmp+0x288>
 8000f1a:	b965      	cbnz	r5, 8000f36 <strcmp+0x28e>
 8000f1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f20:	ea84 0402 	eor.w	r4, r4, r2
 8000f24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000f28:	d109      	bne.n	8000f3e <strcmp+0x296>
 8000f2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f2e:	e7eb      	b.n	8000f08 <strcmp+0x260>
 8000f30:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000f34:	e00d      	b.n	8000f52 <strcmp+0x2aa>
 8000f36:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000f3a:	d105      	bne.n	8000f48 <strcmp+0x2a0>
 8000f3c:	680b      	ldr	r3, [r1, #0]
 8000f3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000f42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f46:	e004      	b.n	8000f52 <strcmp+0x2aa>
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f50:	4770      	bx	lr
 8000f52:	ba12      	rev	r2, r2
 8000f54:	ba1b      	rev	r3, r3
 8000f56:	fa82 f44c 	uadd8	r4, r2, ip
 8000f5a:	ea82 0403 	eor.w	r4, r2, r3
 8000f5e:	faa4 f58c 	sel	r5, r4, ip
 8000f62:	fab5 f485 	clz	r4, r5
 8000f66:	fa02 f204 	lsl.w	r2, r2, r4
 8000f6a:	fa03 f304 	lsl.w	r3, r3, r4
 8000f6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000f72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8000f7a:	4770      	bx	lr
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <__gedf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpdf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__ledf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpdf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpdf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000faa:	d01b      	beq.n	8000fe4 <__cmpdf2+0x54>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fb8:	ea91 0f03 	teqne	r1, r3
 8000fbc:	bf02      	ittt	eq
 8000fbe:	ea90 0f02 	teqeq	r0, r2
 8000fc2:	2000      	moveq	r0, #0
 8000fc4:	4770      	bxeq	lr
 8000fc6:	f110 0f00 	cmn.w	r0, #0
 8000fca:	ea91 0f03 	teq	r1, r3
 8000fce:	bf58      	it	pl
 8000fd0:	4299      	cmppl	r1, r3
 8000fd2:	bf08      	it	eq
 8000fd4:	4290      	cmpeq	r0, r2
 8000fd6:	bf2c      	ite	cs
 8000fd8:	17d8      	asrcs	r0, r3, #31
 8000fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000fde:	f040 0001 	orr.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fec:	d102      	bne.n	8000ff4 <__cmpdf2+0x64>
 8000fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ff2:	d107      	bne.n	8001004 <__cmpdf2+0x74>
 8000ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ffc:	d1d6      	bne.n	8000fac <__cmpdf2+0x1c>
 8000ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001002:	d0d3      	beq.n	8000fac <__cmpdf2+0x1c>
 8001004:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__aeabi_cdrcmple>:
 800100c:	4684      	mov	ip, r0
 800100e:	4610      	mov	r0, r2
 8001010:	4662      	mov	r2, ip
 8001012:	468c      	mov	ip, r1
 8001014:	4619      	mov	r1, r3
 8001016:	4663      	mov	r3, ip
 8001018:	e000      	b.n	800101c <__aeabi_cdcmpeq>
 800101a:	bf00      	nop

0800101c <__aeabi_cdcmpeq>:
 800101c:	b501      	push	{r0, lr}
 800101e:	f7ff ffb7 	bl	8000f90 <__cmpdf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	bf48      	it	mi
 8001026:	f110 0f00 	cmnmi.w	r0, #0
 800102a:	bd01      	pop	{r0, pc}

0800102c <__aeabi_dcmpeq>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff fff4 	bl	800101c <__aeabi_cdcmpeq>
 8001034:	bf0c      	ite	eq
 8001036:	2001      	moveq	r0, #1
 8001038:	2000      	movne	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_dcmplt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffea 	bl	800101c <__aeabi_cdcmpeq>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_dcmple>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffe0 	bl	800101c <__aeabi_cdcmpeq>
 800105c:	bf94      	ite	ls
 800105e:	2001      	movls	r0, #1
 8001060:	2000      	movhi	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_dcmpge>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffce 	bl	800100c <__aeabi_cdrcmple>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_dcmpgt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffc4 	bl	800100c <__aeabi_cdrcmple>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <notify4.lto_priv.99>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE;
 8001090:	4a02      	ldr	r2, [pc, #8]	; (800109c <notify4.lto_priv.99+0xc>)
 8001092:	68d3      	ldr	r3, [r2, #12]
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	60d3      	str	r3, [r2, #12]
 800109a:	4770      	bx	lr
 800109c:	40004c00 	.word	0x40004c00

080010a0 <notify2.lto_priv.98>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80010a0:	4a02      	ldr	r2, [pc, #8]	; (80010ac <notify2.lto_priv.98+0xc>)
 80010a2:	68d3      	ldr	r3, [r2, #12]
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	60d3      	str	r3, [r2, #12]
 80010aa:	4770      	bx	lr
 80010ac:	40004400 	.word	0x40004400

080010b0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010b0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010b4:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010b6:	68dc      	ldr	r4, [r3, #12]
 80010b8:	4014      	ands	r4, r2
 80010ba:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80010bc:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010be:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010c0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 80010c2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010c4:	d503      	bpl.n	80010ce <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80010c6:	6843      	ldr	r3, [r0, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010ca:	b103      	cbz	r3, 80010ce <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80010cc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010ce:	0760      	lsls	r0, r4, #29
 80010d0:	d504      	bpl.n	80010dc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 80010d2:	686b      	ldr	r3, [r5, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010d6:	b10b      	cbz	r3, 80010dc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 80010d8:	4628      	mov	r0, r5
 80010da:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010dc:	0721      	lsls	r1, r4, #28
 80010de:	d504      	bpl.n	80010ea <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 80010e0:	686b      	ldr	r3, [r5, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010e4:	b10b      	cbz	r3, 80010ea <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 80010e6:	4628      	mov	r0, r5
 80010e8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010ea:	06e2      	lsls	r2, r4, #27
 80010ec:	d504      	bpl.n	80010f8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 80010ee:	686b      	ldr	r3, [r5, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010f2:	b10b      	cbz	r3, 80010f8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 80010f4:	4628      	mov	r0, r5
 80010f6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80010f8:	07e3      	lsls	r3, r4, #31
 80010fa:	d506      	bpl.n	800110a <pwm_lld_serve_interrupt+0x5a>
 80010fc:	686b      	ldr	r3, [r5, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	b11b      	cbz	r3, 800110a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8001102:	4628      	mov	r0, r5
}
 8001104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8001108:	4718      	bx	r3
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	0000      	movs	r0, r0
	...

08001110 <gpt_lld_serve_interrupt>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8001110:	7801      	ldrb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8001112:	68c3      	ldr	r3, [r0, #12]
 8001114:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8001116:	2904      	cmp	r1, #4
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8001118:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 800111a:	d107      	bne.n	800112c <gpt_lld_serve_interrupt+0x1c>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800111c:	2102      	movs	r1, #2
 800111e:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8001120:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8001122:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800112a:	60da      	str	r2, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800112c:	6843      	ldr	r3, [r0, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4718      	bx	r3
 8001132:	bf00      	nop
	...

08001140 <spi_lld_serve_tx_interrupt.lto_priv.111>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001140:	f011 0f0c 	tst.w	r1, #12
 8001144:	d100      	bne.n	8001148 <spi_lld_serve_tx_interrupt.lto_priv.111+0x8>
 8001146:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <spi_lld_serve_tx_interrupt.lto_priv.111+0x14>)
 800114c:	4a02      	ldr	r2, [pc, #8]	; (8001158 <spi_lld_serve_tx_interrupt.lto_priv.111+0x18>)
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001150:	e7fe      	b.n	8001150 <spi_lld_serve_tx_interrupt.lto_priv.111+0x10>
 8001152:	bf00      	nop
 8001154:	20000b30 	.word	0x20000b30
 8001158:	08007360 	.word	0x08007360
 800115c:	00000000 	.word	0x00000000

08001160 <i2c_lld_serve_tx_end_irq.lto_priv.114>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001160:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001164:	b410      	push	{r4}
  I2C_TypeDef *dp = i2cp->i2c;
 8001166:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001168:	d114      	bne.n	8001194 <i2c_lld_serve_tx_end_irq.lto_priv.114+0x34>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800116a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	f021 011f 	bic.w	r1, r1, #31
 8001174:	6019      	str	r1, [r3, #0]
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	07c9      	lsls	r1, r1, #31
 800117a:	d4fc      	bmi.n	8001176 <i2c_lld_serve_tx_end_irq.lto_priv.114+0x16>
 800117c:	7a11      	ldrb	r1, [r2, #8]
 800117e:	6852      	ldr	r2, [r2, #4]
 8001180:	233d      	movs	r3, #61	; 0x3d
 8001182:	408b      	lsls	r3, r1
 8001184:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001186:	6863      	ldr	r3, [r4, #4]
 8001188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118c:	6063      	str	r3, [r4, #4]
}
 800118e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	b672      	cpsid	i
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <i2c_lld_serve_tx_end_irq.lto_priv.114+0x40>)
 8001198:	4a02      	ldr	r2, [pc, #8]	; (80011a4 <i2c_lld_serve_tx_end_irq.lto_priv.114+0x44>)
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
 800119c:	e7fe      	b.n	800119c <i2c_lld_serve_tx_end_irq.lto_priv.114+0x3c>
 800119e:	bf00      	nop
 80011a0:	20000b30 	.word	0x20000b30
 80011a4:	08007360 	.word	0x08007360
	...

080011b0 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80011b0:	2900      	cmp	r1, #0
 80011b2:	dd03      	ble.n	80011bc <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80011b4:	4919      	ldr	r1, [pc, #100]	; (800121c <cmd_info+0x6c>)
 80011b6:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <cmd_info+0x70>)
 80011b8:	f002 bb92 	b.w	80038e0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80011bc:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80011be:	4919      	ldr	r1, [pc, #100]	; (8001224 <cmd_info+0x74>)
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80011c2:	b082      	sub	sp, #8
 80011c4:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80011c6:	f002 fb8b 	bl	80038e0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 80011ca:	4620      	mov	r0, r4
 80011cc:	4917      	ldr	r1, [pc, #92]	; (800122c <cmd_info+0x7c>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <cmd_info+0x80>)
 80011d0:	f002 fb86 	bl	80038e0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 80011d4:	4620      	mov	r0, r4
 80011d6:	4917      	ldr	r1, [pc, #92]	; (8001234 <cmd_info+0x84>)
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <cmd_info+0x88>)
 80011da:	f002 fb81 	bl	80038e0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 80011de:	4620      	mov	r0, r4
 80011e0:	4916      	ldr	r1, [pc, #88]	; (800123c <cmd_info+0x8c>)
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <cmd_info+0x90>)
 80011e4:	f002 fb7c 	bl	80038e0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 80011e8:	4620      	mov	r0, r4
 80011ea:	4916      	ldr	r1, [pc, #88]	; (8001244 <cmd_info+0x94>)
 80011ec:	4a16      	ldr	r2, [pc, #88]	; (8001248 <cmd_info+0x98>)
 80011ee:	f002 fb77 	bl	80038e0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80011f2:	4620      	mov	r0, r4
 80011f4:	4915      	ldr	r1, [pc, #84]	; (800124c <cmd_info+0x9c>)
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <cmd_info+0xa0>)
 80011f8:	f002 fb72 	bl	80038e0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80011fc:	4620      	mov	r0, r4
 80011fe:	4915      	ldr	r1, [pc, #84]	; (8001254 <cmd_info+0xa4>)
 8001200:	4a15      	ldr	r2, [pc, #84]	; (8001258 <cmd_info+0xa8>)
 8001202:	f002 fb6d 	bl	80038e0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <cmd_info+0xac>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4620      	mov	r0, r4
 800120c:	4914      	ldr	r1, [pc, #80]	; (8001260 <cmd_info+0xb0>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <cmd_info+0xb4>)
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <cmd_info+0xb8>)
 8001212:	f002 fb65 	bl	80038e0 <chprintf>
#endif
#endif
}
 8001216:	b002      	add	sp, #8
 8001218:	bd10      	pop	{r4, pc}
 800121a:	bf00      	nop
 800121c:	0800736c 	.word	0x0800736c
 8001220:	08007378 	.word	0x08007378
 8001224:	08007380 	.word	0x08007380
 8001228:	08007394 	.word	0x08007394
 800122c:	0800739c 	.word	0x0800739c
 8001230:	080073b0 	.word	0x080073b0
 8001234:	080073f8 	.word	0x080073f8
 8001238:	0800740c 	.word	0x0800740c
 800123c:	08007418 	.word	0x08007418
 8001240:	0800742c 	.word	0x0800742c
 8001244:	08007438 	.word	0x08007438
 8001248:	0800744c 	.word	0x0800744c
 800124c:	08007464 	.word	0x08007464
 8001250:	08007478 	.word	0x08007478
 8001254:	080074a4 	.word	0x080074a4
 8001258:	080074b8 	.word	0x080074b8
 800125c:	08007508 	.word	0x08007508
 8001260:	080074e0 	.word	0x080074e0
 8001264:	080074f8 	.word	0x080074f8
 8001268:	08007504 	.word	0x08007504
 800126c:	00000000 	.word	0x00000000

08001270 <VectorA0>:
/**
 * @brief   TIM9 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
 8001270:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001272:	f002 ff95 	bl	80041a0 <_stats_increase_irq>
 8001276:	f003 f9e3 	bl	8004640 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD9);
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <VectorA0+0x1c>)
 800127c:	f7ff ff18 	bl	80010b0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001280:	f003 f9c6 	bl	8004610 <_dbg_check_leave_isr>
}
 8001284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD9);

  OSAL_IRQ_EPILOGUE();
 8001288:	f000 bdda 	b.w	8001e40 <_port_irq_epilogue>
 800128c:	20001190 	.word	0x20001190

08001290 <VectorF8>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_CC_HANDLER) {
 8001290:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001292:	f002 ff85 	bl	80041a0 <_stats_increase_irq>
 8001296:	f003 f9d3 	bl	8004640 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <VectorF8+0x1c>)
 800129c:	f7ff ff08 	bl	80010b0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012a0:	f003 f9b6 	bl	8004610 <_dbg_check_leave_isr>
}
 80012a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 80012a8:	f000 bdca 	b.w	8001e40 <_port_irq_epilogue>
 80012ac:	20001230 	.word	0x20001230

080012b0 <VectorF0>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
 80012b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012b2:	f002 ff75 	bl	80041a0 <_stats_increase_irq>
 80012b6:	f003 f9c3 	bl	8004640 <_dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD8);
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <VectorF0+0x1c>)
 80012bc:	f7ff fef8 	bl	80010b0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012c0:	f003 f9a6 	bl	8004610 <_dbg_check_leave_isr>
}
 80012c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD8);

  OSAL_IRQ_EPILOGUE();
 80012c8:	f000 bdba 	b.w	8001e40 <_port_irq_epilogue>
 80012cc:	20001230 	.word	0x20001230

080012d0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80012d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012d2:	f002 ff65 	bl	80041a0 <_stats_increase_irq>
 80012d6:	f003 f9b3 	bl	8004640 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD4);
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <VectorB8+0x1c>)
 80012dc:	f7ff ff18 	bl	8001110 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80012e0:	f003 f996 	bl	8004610 <_dbg_check_leave_isr>
}
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 80012e8:	f000 bdaa 	b.w	8001e40 <_port_irq_epilogue>
 80012ec:	2000125c 	.word	0x2000125c

080012f0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80012f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80012f2:	f002 ff55 	bl	80041a0 <_stats_increase_irq>
 80012f6:	f003 f9a3 	bl	8004640 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD3);
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <VectorB4+0x1c>)
 80012fc:	f7ff ff08 	bl	8001110 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001300:	f003 f986 	bl	8004610 <_dbg_check_leave_isr>
}
 8001304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 8001308:	f000 bd9a 	b.w	8001e40 <_port_irq_epilogue>
 800130c:	20000b1c 	.word	0x20000b1c

08001310 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001310:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001312:	f002 ff45 	bl	80041a0 <_stats_increase_irq>
 8001316:	f003 f993 	bl	8004640 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD2);
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <VectorB0+0x1c>)
 800131c:	f7ff fef8 	bl	8001110 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001320:	f003 f976 	bl	8004610 <_dbg_check_leave_isr>
}
 8001324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD2);

  OSAL_IRQ_EPILOGUE();
 8001328:	f000 bd8a 	b.w	8001e40 <_port_irq_epilogue>
 800132c:	2000124c 	.word	0x2000124c

08001330 <VectorA4>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001330:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001332:	f002 ff35 	bl	80041a0 <_stats_increase_irq>
 8001336:	f003 f983 	bl	8004640 <_dbg_check_enter_isr>

  gpt_lld_serve_interrupt(&GPTD1);
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <VectorA4+0x1c>)
 800133c:	f7ff fee8 	bl	8001110 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001340:	f003 f966 	bl	8004610 <_dbg_check_leave_isr>
}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD1);

  OSAL_IRQ_EPILOGUE();
 8001348:	f000 bd7a 	b.w	8001e40 <_port_irq_epilogue>
 800134c:	2000dcc4 	.word	0x2000dcc4

08001350 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8001350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8001354:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001356:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 8001358:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800135a:	05da      	lsls	r2, r3, #23
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 800135c:	4605      	mov	r5, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800135e:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001360:	d515      	bpl.n	800138e <serve_interrupt+0x3e>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001362:	2320      	movs	r3, #32
 8001364:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001368:	f002 ff6a 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800136c:	f003 f998 	bl	80046a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001370:	1d28      	adds	r0, r5, #4
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	f000 ff9b 	bl	80022b0 <chEvtBroadcastFlagsI>
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 800137a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800137e:	6033      	str	r3, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001380:	f003 f976 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001384:	f002 ff44 	bl	8004210 <_stats_stop_measure_crit_isr>
 8001388:	2300      	movs	r3, #0
 800138a:	f383 8811 	msr	BASEPRI, r3
 800138e:	2320      	movs	r3, #32
 8001390:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001394:	f002 ff54 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001398:	f003 f982 	bl	80046a0 <_dbg_check_lock_from_isr>
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800139c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80013a0:	d04e      	beq.n	8001440 <serve_interrupt+0xf0>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 80013a2:	f105 0804 	add.w	r8, r5, #4
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 80013a6:	f105 090c 	add.w	r9, r5, #12
 80013aa:	e008      	b.n	80013be <serve_interrupt+0x6e>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 80013ac:	06a3      	lsls	r3, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80013ae:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013b2:	d41e      	bmi.n	80013f2 <serve_interrupt+0xa2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80013b4:	6834      	ldr	r4, [r6, #0]
 80013b6:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013b8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80013bc:	d040      	beq.n	8001440 <serve_interrupt+0xf0>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80013be:	0723      	lsls	r3, r4, #28
 80013c0:	d0f4      	beq.n	80013ac <serve_interrupt+0x5c>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 80013c2:	f014 0f08 	tst.w	r4, #8
 80013c6:	bf0c      	ite	eq
 80013c8:	2100      	moveq	r1, #0
 80013ca:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80013cc:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80013ce:	bf48      	it	mi
 80013d0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80013d4:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80013d6:	bf48      	it	mi
 80013d8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80013dc:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80013de:	bf48      	it	mi
 80013e0:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80013e4:	4640      	mov	r0, r8
 80013e6:	f000 ff63 	bl	80022b0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 80013ea:	06a3      	lsls	r3, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80013ec:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013f0:	d5e0      	bpl.n	80013b4 <serve_interrupt+0x64>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 80013f2:	f002 ffc5 	bl	8004380 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 80013f6:	f002 ffc3 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 80013fa:	696b      	ldr	r3, [r5, #20]
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80013fc:	b91b      	cbnz	r3, 8001406 <serve_interrupt+0xb6>
 80013fe:	4640      	mov	r0, r8
 8001400:	2104      	movs	r1, #4
 8001402:	f000 ff55 	bl	80022b0 <chEvtBroadcastFlagsI>
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();
 8001406:	f002 ffbb 	bl	8004380 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();
 800140a:	f002 ffb9 	bl	8004380 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800140e:	6a2b      	ldr	r3, [r5, #32]
 8001410:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001412:	4293      	cmp	r3, r2
 8001414:	d078      	beq.n	8001508 <serve_interrupt+0x1b8>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001416:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001418:	1c59      	adds	r1, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800141a:	3201      	adds	r2, #1
 800141c:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 800141e:	6229      	str	r1, [r5, #32]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8001420:	f883 a000 	strb.w	sl, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001424:	6a2a      	ldr	r2, [r5, #32]
 8001426:	69eb      	ldr	r3, [r5, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	d301      	bcc.n	8001430 <serve_interrupt+0xe0>
    iqp->q_wrptr = iqp->q_buffer;
 800142c:	69ab      	ldr	r3, [r5, #24]
 800142e:	622b      	str	r3, [r5, #32]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8001430:	4648      	mov	r0, r9
 8001432:	f001 fb65 	bl	8002b00 <chThdDequeueNextI.constprop.52>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001436:	6834      	ldr	r4, [r6, #0]
 8001438:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800143a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800143e:	d1be      	bne.n	80013be <serve_interrupt+0x6e>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001440:	f003 f916 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001444:	f002 fee4 	bl	8004210 <_stats_stop_measure_crit_isr>
 8001448:	2300      	movs	r3, #0
 800144a:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800144e:	0638      	lsls	r0, r7, #24
 8001450:	d501      	bpl.n	8001456 <serve_interrupt+0x106>
 8001452:	0621      	lsls	r1, r4, #24
 8001454:	d403      	bmi.n	800145e <serve_interrupt+0x10e>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8001456:	0662      	lsls	r2, r4, #25
 8001458:	d42b      	bmi.n	80014b2 <serve_interrupt+0x162>
 800145a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800145e:	2320      	movs	r3, #32
 8001460:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001464:	f002 feec 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001468:	f003 f91a 	bl	80046a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
  uint8_t b;

  chDbgCheckClassI();
 800146c:	f002 ff88 	bl	8004380 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8001470:	f002 ff86 	bl	8004380 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001474:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001476:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001478:	429a      	cmp	r2, r3
 800147a:	d037      	beq.n	80014ec <serve_interrupt+0x19c>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800147c:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800147e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001480:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001482:	3201      	adds	r2, #1
 8001484:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001486:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8001488:	4288      	cmp	r0, r1
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800148a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 800148e:	d301      	bcc.n	8001494 <serve_interrupt+0x144>
    oqp->q_rdptr = oqp->q_buffer;
 8001490:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001492:	64ab      	str	r3, [r5, #72]	; 0x48
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8001494:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001498:	f001 fb32 	bl	8002b00 <chThdDequeueNextI.constprop.52>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800149c:	f8c6 8004 	str.w	r8, [r6, #4]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80014a0:	f003 f8e6 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80014a4:	f002 feb4 	bl	8004210 <_stats_stop_measure_crit_isr>
 80014a8:	2300      	movs	r3, #0
 80014aa:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80014ae:	0662      	lsls	r2, r4, #25
 80014b0:	d5d3      	bpl.n	800145a <serve_interrupt+0x10a>
 80014b2:	2320      	movs	r3, #32
 80014b4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80014b8:	f002 fec2 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80014bc:	f003 f8f0 	bl	80046a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80014c0:	f002 ff5e 	bl	8004380 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80014c4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80014c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d025      	beq.n	8001518 <serve_interrupt+0x1c8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80014cc:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80014d0:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 80014d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80014d6:	60f3      	str	r3, [r6, #12]
    u->SR = ~USART_SR_TC;
 80014d8:	6032      	str	r2, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80014da:	f003 f8c9 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80014de:	f002 fe97 	bl	8004210 <_stats_stop_measure_crit_isr>
 80014e2:	2300      	movs	r3, #0
 80014e4:	f383 8811 	msr	BASEPRI, r3
 80014e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d0c4      	beq.n	800147c <serve_interrupt+0x12c>
 80014f2:	1d28      	adds	r0, r5, #4
 80014f4:	2108      	movs	r1, #8
 80014f6:	f000 fedb 	bl	80022b0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80014fa:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80014fe:	403b      	ands	r3, r7
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	60f3      	str	r3, [r6, #12]
 8001506:	e7cb      	b.n	80014a0 <serve_interrupt+0x150>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001508:	696a      	ldr	r2, [r5, #20]
 800150a:	2a00      	cmp	r2, #0
 800150c:	d083      	beq.n	8001416 <serve_interrupt+0xc6>
 800150e:	4640      	mov	r0, r8
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	f000 fecd 	bl	80022b0 <chEvtBroadcastFlagsI>
 8001516:	e74d      	b.n	80013b4 <serve_interrupt+0x64>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001518:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0d6      	beq.n	80014cc <serve_interrupt+0x17c>
 800151e:	1d28      	adds	r0, r5, #4
 8001520:	2110      	movs	r1, #16
 8001522:	f000 fec5 	bl	80022b0 <chEvtBroadcastFlagsI>
 8001526:	e7d1      	b.n	80014cc <serve_interrupt+0x17c>
	...

08001530 <Vector110>:
/**
 * @brief   UART4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001530:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001532:	f002 fe35 	bl	80041a0 <_stats_increase_irq>
 8001536:	f003 f883 	bl	8004640 <_dbg_check_enter_isr>

  serve_interrupt(&SD4);
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <Vector110+0x1c>)
 800153c:	f7ff ff08 	bl	8001350 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001540:	f003 f866 	bl	8004610 <_dbg_check_leave_isr>
}
 8001544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8001548:	f000 bc7a 	b.w	8001e40 <_port_irq_epilogue>
 800154c:	200011ac 	.word	0x200011ac

08001550 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001550:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001552:	f002 fe25 	bl	80041a0 <_stats_increase_irq>
 8001556:	f003 f873 	bl	8004640 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <VectorD8+0x1c>)
 800155c:	f7ff fef8 	bl	8001350 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001560:	f003 f856 	bl	8004610 <_dbg_check_leave_isr>
}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8001568:	f000 bc6a 	b.w	8001e40 <_port_irq_epilogue>
 800156c:	2000126c 	.word	0x2000126c

08001570 <spi_lld_serve_rx_interrupt.lto_priv.110>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001570:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001574:	b538      	push	{r3, r4, r5, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001576:	d13a      	bne.n	80015ee <spi_lld_serve_rx_interrupt.lto_priv.110+0x7e>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001578:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800157a:	680b      	ldr	r3, [r1, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f022 021f 	bic.w	r2, r2, #31
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	07d4      	lsls	r4, r2, #31
 8001588:	d4fc      	bmi.n	8001584 <spi_lld_serve_rx_interrupt.lto_priv.110+0x14>
 800158a:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800158c:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800158e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8001590:	6813      	ldr	r3, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8001592:	213d      	movs	r1, #61	; 0x3d
 8001594:	40a9      	lsls	r1, r5
 8001596:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	f021 011f 	bic.w	r1, r1, #31
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	07c9      	lsls	r1, r1, #31
 80015a4:	d4fc      	bmi.n	80015a0 <spi_lld_serve_rx_interrupt.lto_priv.110+0x30>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80015a6:	6843      	ldr	r3, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80015a8:	6851      	ldr	r1, [r2, #4]
 80015aa:	4604      	mov	r4, r0
 80015ac:	7a10      	ldrb	r0, [r2, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80015ae:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80015b0:	233d      	movs	r3, #61	; 0x3d
 80015b2:	4083      	lsls	r3, r0
 80015b4:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80015b6:	b1fa      	cbz	r2, 80015f8 <spi_lld_serve_rx_interrupt.lto_priv.110+0x88>
 80015b8:	2304      	movs	r3, #4
 80015ba:	7023      	strb	r3, [r4, #0]
 80015bc:	4620      	mov	r0, r4
 80015be:	4790      	blx	r2
 80015c0:	7823      	ldrb	r3, [r4, #0]
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d018      	beq.n	80015f8 <spi_lld_serve_rx_interrupt.lto_priv.110+0x88>
 80015c6:	2320      	movs	r3, #32
 80015c8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80015cc:	f002 fe38 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80015d0:	f003 f866 	bl	80046a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80015d4:	f104 0008 	add.w	r0, r4, #8
 80015d8:	2100      	movs	r1, #0
 80015da:	f002 ffd9 	bl	8004590 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80015de:	f003 f847 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80015e2:	f002 fe15 	bl	8004210 <_stats_stop_measure_crit_isr>
 80015e6:	2300      	movs	r3, #0
 80015e8:	f383 8811 	msr	BASEPRI, r3
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ee:	b672      	cpsid	i
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <spi_lld_serve_rx_interrupt.lto_priv.110+0x90>)
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <spi_lld_serve_rx_interrupt.lto_priv.110+0x94>)
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f6:	e7fe      	b.n	80015f6 <spi_lld_serve_rx_interrupt.lto_priv.110+0x86>
 80015f8:	2302      	movs	r3, #2
 80015fa:	7023      	strb	r3, [r4, #0]
 80015fc:	e7e3      	b.n	80015c6 <spi_lld_serve_rx_interrupt.lto_priv.110+0x56>
 80015fe:	bf00      	nop
 8001600:	20000b30 	.word	0x20000b30
 8001604:	08007360 	.word	0x08007360
	...

08001610 <VectorC0>:
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8001612:	4c3d      	ldr	r4, [pc, #244]	; (8001708 <VectorC0+0xf8>)
 8001614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001616:	695e      	ldr	r6, [r3, #20]

  OSAL_IRQ_PROLOGUE();
 8001618:	f002 fdc2 	bl	80041a0 <_stats_increase_irq>

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800161c:	b2b5      	uxth	r5, r6

  OSAL_IRQ_PROLOGUE();
 800161e:	f003 f80f 	bl	8004640 <_dbg_check_enter_isr>
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001622:	6b27      	ldr	r7, [r4, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001626:	683a      	ldr	r2, [r7, #0]
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001628:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
 800162c:	43db      	mvns	r3, r3
 800162e:	614b      	str	r3, [r1, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f023 031f 	bic.w	r3, r3, #31
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	07d8      	lsls	r0, r3, #31
 800163c:	d4fc      	bmi.n	8001638 <VectorC0+0x28>
 800163e:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8001642:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001644:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001646:	6802      	ldr	r2, [r0, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001648:	233d      	movs	r3, #61	; 0x3d
 800164a:	fa03 f30e 	lsl.w	r3, r3, lr
 800164e:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f023 031f 	bic.w	r3, r3, #31
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f013 0301 	ands.w	r3, r3, #1
 800165e:	d1fb      	bne.n	8001658 <VectorC0+0x48>
 8001660:	7a07      	ldrb	r7, [r0, #8]
 8001662:	6840      	ldr	r0, [r0, #4]
 8001664:	223d      	movs	r2, #61	; 0x3d
 8001666:	40ba      	lsls	r2, r7
 8001668:	6002      	str	r2, [r0, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800166a:	05ea      	lsls	r2, r5, #23
    i2cp->errors |= I2C_BUS_ERROR;
 800166c:	bf48      	it	mi
 800166e:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001670:	05af      	lsls	r7, r5, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8001672:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001674:	bf44      	itt	mi
 8001676:	f043 0302 	orrmi.w	r3, r3, #2
 800167a:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800167c:	0568      	lsls	r0, r5, #21
 800167e:	d50a      	bpl.n	8001696 <VectorC0+0x86>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001680:	684a      	ldr	r2, [r1, #4]
 8001682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001686:	604a      	str	r2, [r1, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8001688:	680a      	ldr	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800168a:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800168e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001692:	600a      	str	r2, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001694:	60a3      	str	r3, [r4, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8001696:	052a      	lsls	r2, r5, #20
    i2cp->errors |= I2C_OVERRUN;
 8001698:	bf44      	itt	mi
 800169a:	f043 0308 	orrmi.w	r3, r3, #8
 800169e:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80016a0:	046f      	lsls	r7, r5, #17
    i2cp->errors |= I2C_TIMEOUT;
 80016a2:	bf44      	itt	mi
 80016a4:	f043 0320 	orrmi.w	r3, r3, #32
 80016a8:	60a3      	strmi	r3, [r4, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80016aa:	04e8      	lsls	r0, r5, #19
 80016ac:	d51d      	bpl.n	80016ea <VectorC0+0xda>
    i2cp->errors |= I2C_PEC_ERROR;
 80016ae:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80016b2:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 80016b4:	60a3      	str	r3, [r4, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80016b6:	d422      	bmi.n	80016fe <VectorC0+0xee>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80016b8:	2320      	movs	r3, #32
 80016ba:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80016be:	f002 fdbf 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80016c2:	f002 ffed 	bl	80046a0 <_dbg_check_lock_from_isr>
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <VectorC0+0xfc>)
 80016c8:	f06f 0101 	mvn.w	r1, #1
 80016cc:	f002 ff60 	bl	8004590 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80016d0:	f002 ffce 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80016d4:	f002 fd9c 	bl	8004210 <_stats_stop_measure_crit_isr>
 80016d8:	2300      	movs	r3, #0
 80016da:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016de:	f002 ff97 	bl	8004610 <_dbg_check_leave_isr>
}
 80016e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016e6:	f000 bbab 	b.w	8001e40 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80016ea:	0432      	lsls	r2, r6, #16
 80016ec:	d407      	bmi.n	80016fe <VectorC0+0xee>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e2      	bne.n	80016b8 <VectorC0+0xa8>
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016f2:	f002 ff8d 	bl	8004610 <_dbg_check_leave_isr>
}
 80016f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80016fa:	f000 bba1 	b.w	8001e40 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	60a3      	str	r3, [r4, #8]
 8001704:	e7d8      	b.n	80016b8 <VectorC0+0xa8>
 8001706:	bf00      	nop
 8001708:	200012e8 	.word	0x200012e8
 800170c:	20001304 	.word	0x20001304

08001710 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001712:	4d42      	ldr	r5, [pc, #264]	; (800181c <VectorBC+0x10c>)
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8001714:	f002 fd44 	bl	80041a0 <_stats_increase_irq>
 8001718:	f002 ff92 	bl	8004640 <_dbg_check_enter_isr>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800171c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800171e:	4a40      	ldr	r2, [pc, #256]	; (8001820 <VectorBC+0x110>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 8001720:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8001722:	6966      	ldr	r6, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001724:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8001728:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800172c:	4293      	cmp	r3, r2
 800172e:	d050      	beq.n	80017d2 <VectorBC+0xc2>
 8001730:	d820      	bhi.n	8001774 <VectorBC+0x64>
 8001732:	3a07      	subs	r2, #7
 8001734:	4293      	cmp	r3, r2
 8001736:	d040      	beq.n	80017ba <VectorBC+0xaa>
 8001738:	3201      	adds	r2, #1
 800173a:	4293      	cmp	r3, r2
 800173c:	d110      	bne.n	8001760 <VectorBC+0x50>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800173e:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8001740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001742:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8001746:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001748:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8001752:	6862      	ldr	r2, [r4, #4]
 8001754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001758:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d958      	bls.n	8001812 <VectorBC+0x102>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8001760:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 8001764:	bf18      	it	ne
 8001766:	69a3      	ldrne	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001768:	f002 ff52 	bl	8004610 <_dbg_check_leave_isr>
}
 800176c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001770:	f000 bb66 	b.w	8001e40 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <VectorBC+0x114>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d014      	beq.n	80017a4 <VectorBC+0x94>
 800177a:	3202      	adds	r2, #2
 800177c:	4293      	cmp	r3, r2
 800177e:	d1ef      	bne.n	8001760 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001780:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685f      	ldr	r7, [r3, #4]
 8001786:	b34f      	cbz	r7, 80017dc <VectorBC+0xcc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001788:	8c2a      	ldrh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800178a:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800178c:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001790:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001794:	842a      	strh	r2, [r5, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001796:	6023      	str	r3, [r4, #0]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001798:	f002 ff3a 	bl	8004610 <_dbg_check_leave_isr>
}
 800179c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80017a0:	f000 bb4e 	b.w	8001e40 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017a4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80017a6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80017ac:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017ae:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e7d2      	b.n	8001760 <VectorBC+0x50>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 80017ba:	8c2b      	ldrh	r3, [r5, #32]
 80017bc:	0a1a      	lsrs	r2, r3, #8
 80017be:	d00b      	beq.n	80017d8 <VectorBC+0xc8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017c8:	f002 0206 	and.w	r2, r2, #6
 80017cc:	4313      	orrs	r3, r2
 80017ce:	6123      	str	r3, [r4, #16]
 80017d0:	e7c6      	b.n	8001760 <VectorBC+0x50>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80017d2:	8c2b      	ldrh	r3, [r5, #32]
 80017d4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80017d8:	6123      	str	r3, [r4, #16]
 80017da:	e7c1      	b.n	8001760 <VectorBC+0x50>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017e2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6023      	str	r3, [r4, #0]
 80017ec:	2320      	movs	r3, #32
 80017ee:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80017f2:	f002 fd25 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80017f6:	f002 ff53 	bl	80046a0 <_dbg_check_lock_from_isr>
 80017fa:	f105 001c 	add.w	r0, r5, #28
 80017fe:	4639      	mov	r1, r7
 8001800:	f002 fec6 	bl	8004590 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001804:	f002 ff34 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001808:	f002 fd02 	bl	8004210 <_stats_stop_measure_crit_isr>
 800180c:	f387 8811 	msr	BASEPRI, r7
 8001810:	e7a6      	b.n	8001760 <VectorBC+0x50>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001818:	6023      	str	r3, [r4, #0]
 800181a:	e7a1      	b.n	8001760 <VectorBC+0x50>
 800181c:	200012e8 	.word	0x200012e8
 8001820:	00030008 	.word	0x00030008
 8001824:	00070082 	.word	0x00070082
	...

08001830 <i2c_lld_serve_rx_end_irq.lto_priv.113>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001830:	f011 0f0c 	tst.w	r1, #12
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001834:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001836:	d12f      	bne.n	8001898 <i2c_lld_serve_rx_end_irq.lto_priv.113+0x68>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001838:	b570      	push	{r4, r5, r6, lr}
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800183a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800183c:	6829      	ldr	r1, [r5, #0]
 800183e:	680a      	ldr	r2, [r1, #0]
 8001840:	f022 021f 	bic.w	r2, r2, #31
 8001844:	600a      	str	r2, [r1, #0]
 8001846:	680a      	ldr	r2, [r1, #0]
 8001848:	f012 0401 	ands.w	r4, r2, #1
 800184c:	d1fb      	bne.n	8001846 <i2c_lld_serve_rx_end_irq.lto_priv.113+0x16>
 800184e:	4606      	mov	r6, r0
 8001850:	7a28      	ldrb	r0, [r5, #8]
 8001852:	6869      	ldr	r1, [r5, #4]
 8001854:	223d      	movs	r2, #61	; 0x3d
 8001856:	4082      	lsls	r2, r0
 8001858:	600a      	str	r2, [r1, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001860:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001868:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	2320      	movs	r3, #32
 8001874:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001878:	f002 fce2 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800187c:	f002 ff10 	bl	80046a0 <_dbg_check_lock_from_isr>
 8001880:	f106 001c 	add.w	r0, r6, #28
 8001884:	4621      	mov	r1, r4
 8001886:	f002 fe83 	bl	8004590 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800188a:	f002 fef1 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800188e:	f002 fcbf 	bl	8004210 <_stats_stop_measure_crit_isr>
 8001892:	f384 8811 	msr	BASEPRI, r4
 8001896:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
 800189a:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <i2c_lld_serve_rx_end_irq.lto_priv.113+0x74>)
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <i2c_lld_serve_rx_end_irq.lto_priv.113+0x78>)
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a0:	e7fe      	b.n	80018a0 <i2c_lld_serve_rx_end_irq.lto_priv.113+0x70>
 80018a2:	bf00      	nop
 80018a4:	20000b30 	.word	0x20000b30
 80018a8:	08007360 	.word	0x08007360
 80018ac:	00000000 	.word	0x00000000

080018b0 <Vector108>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80018b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80018b4:	4e38      	ldr	r6, [pc, #224]	; (8001998 <Vector108+0xe8>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 80018b6:	f002 fc73 	bl	80041a0 <_stats_increase_irq>
 80018ba:	f002 fec1 	bl	8004640 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80018be:	6933      	ldr	r3, [r6, #16]
 80018c0:	079b      	lsls	r3, r3, #30
 80018c2:	d405      	bmi.n	80018d0 <Vector108+0x20>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80018c4:	f002 fea4 	bl	8004610 <_dbg_check_leave_isr>
}
 80018c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80018cc:	f000 bab8 	b.w	8001e40 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80018d0:	2700      	movs	r7, #0
 80018d2:	6137      	str	r7, [r6, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80018d4:	f04f 0920 	mov.w	r9, #32
 80018d8:	f389 8811 	msr	BASEPRI, r9
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80018dc:	4d2f      	ldr	r5, [pc, #188]	; (800199c <Vector108+0xec>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80018de:	f002 fcaf 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80018e2:	f002 fedd 	bl	80046a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80018e6:	f002 fd4b 	bl	8004380 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80018ea:	f002 fd49 	bl	8004380 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80018ee:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80018f0:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80018f2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80018f4:	68a3      	ldr	r3, [r4, #8]
 80018f6:	1a50      	subs	r0, r2, r1
 80018f8:	4298      	cmp	r0, r3
 80018fa:	bf38      	it	cc
 80018fc:	f105 061c 	addcc.w	r6, r5, #28
 8001900:	d325      	bcc.n	800194e <Vector108+0x9e>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8001902:	46b8      	mov	r8, r7
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001904:	4637      	mov	r7, r6
 8001906:	f105 061c 	add.w	r6, r5, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800190a:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 800190c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001910:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001912:	42b2      	cmp	r2, r6
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001914:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001916:	6056      	str	r6, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8001918:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800191a:	f8c4 800c 	str.w	r8, [r4, #12]
 800191e:	bf08      	it	eq
 8001920:	f8c7 800c 	streq.w	r8, [r7, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001924:	f002 fea4 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001928:	f002 fc72 	bl	8004210 <_stats_stop_measure_crit_isr>
 800192c:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001930:	6920      	ldr	r0, [r4, #16]
 8001932:	47d0      	blx	sl
 8001934:	f389 8811 	msr	BASEPRI, r9
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001938:	f002 fc82 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800193c:	f002 feb0 	bl	80046a0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001940:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001944:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001946:	68a3      	ldr	r3, [r4, #8]
 8001948:	1a50      	subs	r0, r2, r1
 800194a:	4283      	cmp	r3, r0
 800194c:	d9dd      	bls.n	800190a <Vector108+0x5a>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800194e:	42b4      	cmp	r4, r6
 8001950:	d014      	beq.n	800197c <Vector108+0xcc>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8001952:	440b      	add	r3, r1
 8001954:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001956:	2b01      	cmp	r3, #1
 8001958:	bf98      	it	ls
 800195a:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 800195c:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800195e:	4620      	mov	r0, r4
 8001960:	f000 fa56 	bl	8001e10 <stSetAlarm>
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <Vector108+0xe8>)

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8001966:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <Vector108+0xec>)
 800196c:	1a63      	subs	r3, r4, r1
 800196e:	1a52      	subs	r2, r2, r1
 8001970:	429a      	cmp	r2, r3
 8001972:	d903      	bls.n	800197c <Vector108+0xcc>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <Vector108+0xf0>)
 8001978:	62c3      	str	r3, [r0, #44]	; 0x2c
 800197a:	e7fe      	b.n	800197a <Vector108+0xca>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800197c:	f002 fe78 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001980:	f002 fc46 	bl	8004210 <_stats_stop_measure_crit_isr>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001984:	2300      	movs	r3, #0
 8001986:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800198a:	f002 fe41 	bl	8004610 <_dbg_check_leave_isr>
}
 800198e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001992:	f000 ba55 	b.w	8001e40 <_port_irq_epilogue>
 8001996:	bf00      	nop
 8001998:	40000c00 	.word	0x40000c00
 800199c:	20000b30 	.word	0x20000b30
 80019a0:	08007350 	.word	0x08007350
	...

080019b0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019b0:	492c      	ldr	r1, [pc, #176]	; (8001a64 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80019bc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80019be:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80019c0:	680b      	ldr	r3, [r1, #0]
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80019c8:	680a      	ldr	r2, [r1, #0]
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <__early_init+0xb4>)
 80019cc:	0790      	lsls	r0, r2, #30
 80019ce:	d5fb      	bpl.n	80019c8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	f022 0203 	bic.w	r2, r2, #3
 80019d6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80019dc:	4619      	mov	r1, r3
 80019de:	688b      	ldr	r3, [r1, #8]
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <__early_init+0xb4>)
 80019e2:	f013 030c 	ands.w	r3, r3, #12
 80019e6:	d1fa      	bne.n	80019de <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80019e8:	6811      	ldr	r1, [r2, #0]
 80019ea:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80019ee:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80019f0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <__early_init+0xb4>)
 80019fe:	0389      	lsls	r1, r1, #14
 8001a00:	d5fb      	bpl.n	80019fa <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001a02:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001a0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a0c:	4915      	ldr	r1, [pc, #84]	; (8001a64 <__early_init+0xb4>)
 8001a0e:	0790      	lsls	r0, r2, #30
 8001a10:	d5fb      	bpl.n	8001a0a <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <__early_init+0xbc>)
 8001a14:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001a16:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001a18:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001a20:	6853      	ldr	r3, [r2, #4]
 8001a22:	0459      	lsls	r1, r3, #17
 8001a24:	d5fc      	bpl.n	8001a20 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001a26:	490f      	ldr	r1, [pc, #60]	; (8001a64 <__early_init+0xb4>)
 8001a28:	680a      	ldr	r2, [r1, #0]
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <__early_init+0xb4>)
 8001a2c:	0192      	lsls	r2, r2, #6
 8001a2e:	d5fb      	bpl.n	8001a28 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001a32:	4910      	ldr	r1, [pc, #64]	; (8001a74 <__early_init+0xc4>)
 8001a34:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001a36:	f240 7105 	movw	r1, #1797	; 0x705
 8001a3a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	f042 0202 	orr.w	r2, r2, #2
 8001a42:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001a44:	461a      	mov	r2, r3
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	4906      	ldr	r1, [pc, #24]	; (8001a64 <__early_init+0xb4>)
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d1f9      	bne.n	8001a46 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001a52:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	644b      	str	r3, [r1, #68]	; 0x44
 8001a5a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	664b      	str	r3, [r1, #100]	; 0x64
 8001a62:	4770      	bx	lr
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	07405408 	.word	0x07405408
 8001a70:	40023c00 	.word	0x40023c00
 8001a74:	38889400 	.word	0x38889400
	...

08001a80 <shell_thread.lto_priv.93>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <shell_thread.lto_priv.93+0x1e0>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8001a86:	6804      	ldr	r4, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a76      	ldr	r2, [pc, #472]	; (8001c64 <shell_thread.lto_priv.93+0x1e4>)
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8001a8c:	6847      	ldr	r7, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8001a8e:	4976      	ldr	r1, [pc, #472]	; (8001c68 <shell_thread.lto_priv.93+0x1e8>)
 8001a90:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001a92:	b099      	sub	sp, #100	; 0x64
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8001a94:	4620      	mov	r0, r4
 8001a96:	f001 ff23 	bl	80038e0 <chprintf>
 8001a9a:	ae08      	add	r6, sp, #32
  while (true) {
    chprintf(chp, "ch> ");
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4973      	ldr	r1, [pc, #460]	; (8001c6c <shell_thread.lto_priv.93+0x1ec>)
 8001aa0:	f001 ff1e 	bl	80038e0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8001aa4:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f10d 0107 	add.w	r1, sp, #7
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4798      	blx	r3
 8001ab4:	b380      	cbz	r0, 8001b18 <shell_thread.lto_priv.93+0x98>
      return true;
    if (c == 4) {
 8001ab6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001aba:	2904      	cmp	r1, #4
 8001abc:	d028      	beq.n	8001b10 <shell_thread.lto_priv.93+0x90>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8001abe:	2908      	cmp	r1, #8
 8001ac0:	d012      	beq.n	8001ae8 <shell_thread.lto_priv.93+0x68>
 8001ac2:	297f      	cmp	r1, #127	; 0x7f
 8001ac4:	d010      	beq.n	8001ae8 <shell_thread.lto_priv.93+0x68>
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8001ac6:	290d      	cmp	r1, #13
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8001ac8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
        chSequentialStreamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8001acc:	d039      	beq.n	8001b42 <shell_thread.lto_priv.93+0xc2>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8001ace:	291f      	cmp	r1, #31
 8001ad0:	d9e9      	bls.n	8001aa6 <shell_thread.lto_priv.93+0x26>
      continue;
    if (p < line + size - 1) {
 8001ad2:	429d      	cmp	r5, r3
 8001ad4:	d2e7      	bcs.n	8001aa6 <shell_thread.lto_priv.93+0x26>
      chSequentialStreamPut(chp, c);
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	4620      	mov	r0, r4
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4798      	blx	r3
      *p++ = (char)c;
 8001ade:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ae2:	702b      	strb	r3, [r5, #0]
 8001ae4:	3501      	adds	r5, #1
 8001ae6:	e7de      	b.n	8001aa6 <shell_thread.lto_priv.93+0x26>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8001ae8:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, 0x08);
 8001aea:	f04f 0108 	mov.w	r1, #8
 8001aee:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8001af0:	d0d9      	beq.n	8001aa6 <shell_thread.lto_priv.93+0x26>
        chSequentialStreamPut(chp, 0x08);
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	4620      	mov	r0, r4
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2120      	movs	r1, #32
 8001b00:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x08);
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	4620      	mov	r0, r4
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2108      	movs	r1, #8
        p--;
 8001b0a:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, 0x08);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, 0x08);
 8001b0c:	4798      	blx	r3
 8001b0e:	e7ca      	b.n	8001aa6 <shell_thread.lto_priv.93+0x26>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8001b10:	4620      	mov	r0, r4
 8001b12:	4957      	ldr	r1, [pc, #348]	; (8001c70 <shell_thread.lto_priv.93+0x1f0>)
 8001b14:	f001 fee4 	bl	80038e0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4956      	ldr	r1, [pc, #344]	; (8001c74 <shell_thread.lto_priv.93+0x1f4>)
 8001b1c:	f001 fee0 	bl	80038e0 <chprintf>
 8001b20:	2320      	movs	r3, #32
 8001b22:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8001b26:	f002 fb93 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001b2a:	f002 fe19 	bl	8004760 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4851      	ldr	r0, [pc, #324]	; (8001c78 <shell_thread.lto_priv.93+0x1f8>)
 8001b32:	f000 fbbd 	bl	80022b0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f002 fd42 	bl	80045c0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8001b3c:	b019      	add	sp, #100	; 0x64
 8001b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8001b42:	494e      	ldr	r1, [pc, #312]	; (8001c7c <shell_thread.lto_priv.93+0x1fc>)
 8001b44:	4620      	mov	r0, r4
 8001b46:	f001 fecb 	bl	80038e0 <chprintf>
      *p = 0;
 8001b4a:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b4c:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8001b4e:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b50:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8001b52:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b54:	f001 f8bc 	bl	8002cd0 <_strtok.constprop.19>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b58:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001b5a:	4681      	mov	r9, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f10d 080c 	add.w	r8, sp, #12
 8001b62:	f001 f8b5 	bl	8002cd0 <_strtok.constprop.19>
 8001b66:	b150      	cbz	r0, 8001b7e <shell_thread.lto_priv.93+0xfe>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001b68:	2d04      	cmp	r5, #4
 8001b6a:	d01d      	beq.n	8001ba8 <shell_thread.lto_priv.93+0x128>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001b6c:	f848 0b04 	str.w	r0, [r8], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b70:	a902      	add	r1, sp, #8
 8001b72:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001b74:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001b76:	f001 f8ab 	bl	8002cd0 <_strtok.constprop.19>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d1f4      	bne.n	8001b68 <shell_thread.lto_priv.93+0xe8>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001b7e:	ab18      	add	r3, sp, #96	; 0x60
 8001b80:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001b84:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8001b88:	f1b9 0f00 	cmp.w	r9, #0
 8001b8c:	d086      	beq.n	8001a9c <shell_thread.lto_priv.93+0x1c>
      if (strcmp(cmd, "exit") == 0) {
 8001b8e:	4648      	mov	r0, r9
 8001b90:	493b      	ldr	r1, [pc, #236]	; (8001c80 <shell_thread.lto_priv.93+0x200>)
 8001b92:	f7ff f889 	bl	8000ca8 <strcmp>
 8001b96:	b970      	cbnz	r0, 8001bb6 <shell_thread.lto_priv.93+0x136>
        if (n > 0) {
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d0c1      	beq.n	8001b20 <shell_thread.lto_priv.93+0xa0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4939      	ldr	r1, [pc, #228]	; (8001c84 <shell_thread.lto_priv.93+0x204>)
 8001ba0:	4a37      	ldr	r2, [pc, #220]	; (8001c80 <shell_thread.lto_priv.93+0x200>)
 8001ba2:	f001 fe9d 	bl	80038e0 <chprintf>
 8001ba6:	e779      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4937      	ldr	r1, [pc, #220]	; (8001c88 <shell_thread.lto_priv.93+0x208>)
 8001bac:	f001 fe98 	bl	80038e0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9307      	str	r3, [sp, #28]
 8001bb4:	e772      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8001bb6:	4648      	mov	r0, r9
 8001bb8:	4934      	ldr	r1, [pc, #208]	; (8001c8c <shell_thread.lto_priv.93+0x20c>)
 8001bba:	f7ff f875 	bl	8000ca8 <strcmp>
 8001bbe:	b930      	cbnz	r0, 8001bce <shell_thread.lto_priv.93+0x14e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001bc0:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 8001bc2:	b1bd      	cbz	r5, 8001bf4 <shell_thread.lto_priv.93+0x174>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001bc4:	492f      	ldr	r1, [pc, #188]	; (8001c84 <shell_thread.lto_priv.93+0x204>)
 8001bc6:	4a31      	ldr	r2, [pc, #196]	; (8001c8c <shell_thread.lto_priv.93+0x20c>)
 8001bc8:	f001 fe8a 	bl	80038e0 <chprintf>
 8001bcc:	e766      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
 8001bce:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001c98 <shell_thread.lto_priv.93+0x218>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 8001bd2:	482f      	ldr	r0, [pc, #188]	; (8001c90 <shell_thread.lto_priv.93+0x210>)
 8001bd4:	e002      	b.n	8001bdc <shell_thread.lto_priv.93+0x15c>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001bd6:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8001bda:	b348      	cbz	r0, 8001c30 <shell_thread.lto_priv.93+0x1b0>
    if (strcmp(scp->sc_name, name) == 0) {
 8001bdc:	4649      	mov	r1, r9
 8001bde:	f7ff f863 	bl	8000ca8 <strcmp>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d1f7      	bne.n	8001bd6 <shell_thread.lto_priv.93+0x156>
      scp->sc_function(chp, argc, argv);
 8001be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001bea:	4629      	mov	r1, r5
 8001bec:	aa03      	add	r2, sp, #12
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4798      	blx	r3
 8001bf2:	e753      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8001bf4:	4927      	ldr	r1, [pc, #156]	; (8001c94 <shell_thread.lto_priv.93+0x214>)
 8001bf6:	4d28      	ldr	r5, [pc, #160]	; (8001c98 <shell_thread.lto_priv.93+0x218>)
 8001bf8:	f001 fe72 	bl	80038e0 <chprintf>
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <shell_thread.lto_priv.93+0x210>)
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
    chprintf(chp, "%s ", scp->sc_name);
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <shell_thread.lto_priv.93+0x21c>)
 8001c00:	4620      	mov	r0, r4
 8001c02:	f001 fe6d 	bl	80038e0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001c06:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d1f7      	bne.n	8001bfe <shell_thread.lto_priv.93+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8001c0e:	b157      	cbz	r7, 8001c26 <shell_thread.lto_priv.93+0x1a6>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b142      	cbz	r2, 8001c26 <shell_thread.lto_priv.93+0x1a6>
 8001c14:	463d      	mov	r5, r7
    chprintf(chp, "%s ", scp->sc_name);
 8001c16:	4620      	mov	r0, r4
 8001c18:	4920      	ldr	r1, [pc, #128]	; (8001c9c <shell_thread.lto_priv.93+0x21c>)
 8001c1a:	f001 fe61 	bl	80038e0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001c1e:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d1f7      	bne.n	8001c16 <shell_thread.lto_priv.93+0x196>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8001c26:	4620      	mov	r0, r4
 8001c28:	4914      	ldr	r1, [pc, #80]	; (8001c7c <shell_thread.lto_priv.93+0x1fc>)
 8001c2a:	f001 fe59 	bl	80038e0 <chprintf>
 8001c2e:	e735      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001c30:	b167      	cbz	r7, 8001c4c <shell_thread.lto_priv.93+0x1cc>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	b150      	cbz	r0, 8001c4c <shell_thread.lto_priv.93+0x1cc>
 8001c36:	46b8      	mov	r8, r7
 8001c38:	e002      	b.n	8001c40 <shell_thread.lto_priv.93+0x1c0>
 8001c3a:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8001c3e:	b128      	cbz	r0, 8001c4c <shell_thread.lto_priv.93+0x1cc>
    if (strcmp(scp->sc_name, name) == 0) {
 8001c40:	4649      	mov	r1, r9
 8001c42:	f7ff f831 	bl	8000ca8 <strcmp>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d1f7      	bne.n	8001c3a <shell_thread.lto_priv.93+0x1ba>
 8001c4a:	e7cc      	b.n	8001be6 <shell_thread.lto_priv.93+0x166>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4913      	ldr	r1, [pc, #76]	; (8001ca0 <shell_thread.lto_priv.93+0x220>)
 8001c52:	f001 fe45 	bl	80038e0 <chprintf>
        chprintf(chp, " ?\r\n");
 8001c56:	4620      	mov	r0, r4
 8001c58:	4912      	ldr	r1, [pc, #72]	; (8001ca4 <shell_thread.lto_priv.93+0x224>)
 8001c5a:	f001 fe41 	bl	80038e0 <chprintf>
 8001c5e:	e71d      	b.n	8001a9c <shell_thread.lto_priv.93+0x1c>
 8001c60:	20000b30 	.word	0x20000b30
 8001c64:	08007514 	.word	0x08007514
 8001c68:	0800751c 	.word	0x0800751c
 8001c6c:	08007534 	.word	0x08007534
 8001c70:	0800753c 	.word	0x0800753c
 8001c74:	08007590 	.word	0x08007590
 8001c78:	20000890 	.word	0x20000890
 8001c7c:	080074b4 	.word	0x080074b4
 8001c80:	08007558 	.word	0x08007558
 8001c84:	0800736c 	.word	0x0800736c
 8001c88:	08007540 	.word	0x08007540
 8001c8c:	08007560 	.word	0x08007560
 8001c90:	08007378 	.word	0x08007378
 8001c94:	08007568 	.word	0x08007568
 8001c98:	080075b0 	.word	0x080075b0
 8001c9c:	08007580 	.word	0x08007580
 8001ca0:	08007584 	.word	0x08007584
 8001ca4:	08007588 	.word	0x08007588
	...

08001cb0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	dd03      	ble.n	8001cbc <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001cb4:	4914      	ldr	r1, [pc, #80]	; (8001d08 <cmd_systime+0x58>)
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <cmd_systime+0x5c>)
 8001cb8:	f001 be12 	b.w	80038e0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8001cc6:	f002 fac3 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001cca:	f002 fd49 	bl	8004760 <_dbg_check_lock>
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <cmd_systime+0x60>)
 8001cd0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001cd2:	f002 fd35 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001cd6:	f002 faa3 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <cmd_systime+0x64>)
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	4299      	cmp	r1, r3
 8001ce0:	d004      	beq.n	8001cec <cmd_systime+0x3c>
 8001ce2:	6998      	ldr	r0, [r3, #24]
 8001ce4:	688a      	ldr	r2, [r1, #8]
 8001ce6:	6881      	ldr	r1, [r0, #8]
 8001ce8:	4291      	cmp	r1, r2
 8001cea:	d309      	bcc.n	8001d00 <cmd_systime+0x50>
 8001cec:	2300      	movs	r3, #0
 8001cee:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8001cf2:	4909      	ldr	r1, [pc, #36]	; (8001d18 <cmd_systime+0x68>)
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	462a      	mov	r2, r5
}
 8001cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8001cfc:	f001 bdf0 	b.w	80038e0 <chprintf>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <cmd_systime+0x6c>)
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d06:	e7fe      	b.n	8001d06 <cmd_systime+0x56>
 8001d08:	0800736c 	.word	0x0800736c
 8001d0c:	0800759c 	.word	0x0800759c
 8001d10:	40000c00 	.word	0x40000c00
 8001d14:	20000b30 	.word	0x20000b30
 8001d18:	080075a4 	.word	0x080075a4
 8001d1c:	08007340 	.word	0x08007340

08001d20 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <SVC_Handler+0x1c>)
 8001d22:	6853      	ldr	r3, [r2, #4]
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001d2a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001d2e:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001d30:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001d34:	2300      	movs	r3, #0
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ef30 	.word	0xe000ef30

08001d40 <dmaStreamAllocate>:
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d054      	beq.n	8001dee <dmaStreamAllocate+0xae>
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001d48:	4f2b      	ldr	r7, [pc, #172]	; (8001df8 <dmaStreamAllocate+0xb8>)
 8001d4a:	7a45      	ldrb	r5, [r0, #9]
 8001d4c:	683c      	ldr	r4, [r7, #0]
 8001d4e:	4698      	mov	r8, r3
 8001d50:	2301      	movs	r3, #1
 8001d52:	fa03 fe05 	lsl.w	lr, r3, r5
 8001d56:	ea1e 0f04 	tst.w	lr, r4
 8001d5a:	d13d      	bne.n	8001dd8 <dmaStreamAllocate+0x98>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d5c:	4e27      	ldr	r6, [pc, #156]	; (8001dfc <dmaStreamAllocate+0xbc>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d5e:	ea4e 0404 	orr.w	r4, lr, r4
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d62:	eb06 0cc5 	add.w	ip, r6, r5, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001d66:	f014 0fff 	tst.w	r4, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d6a:	603c      	str	r4, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d6c:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d70:	f8cc 8004 	str.w	r8, [ip, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001d74:	d004      	beq.n	8001d80 <dmaStreamAllocate+0x40>
    rccEnableDMA1(false);
 8001d76:	4d22      	ldr	r5, [pc, #136]	; (8001e00 <dmaStreamAllocate+0xc0>)
 8001d78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7e:	632b      	str	r3, [r5, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8001d80:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 8001d84:	d12b      	bne.n	8001dde <dmaStreamAllocate+0x9e>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d86:	6804      	ldr	r4, [r0, #0]
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	f023 031f 	bic.w	r3, r3, #31
 8001d8e:	6023      	str	r3, [r4, #0]
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	f013 0301 	ands.w	r3, r3, #1
 8001d96:	d1fb      	bne.n	8001d90 <dmaStreamAllocate+0x50>
 8001d98:	7a07      	ldrb	r7, [r0, #8]
 8001d9a:	6846      	ldr	r6, [r0, #4]
 8001d9c:	253d      	movs	r5, #61	; 0x3d
 8001d9e:	40bd      	lsls	r5, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001da0:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001da2:	6035      	str	r5, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001da4:	6023      	str	r3, [r4, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001da6:	6167      	str	r7, [r4, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8001da8:	b1fa      	cbz	r2, 8001dea <dmaStreamAllocate+0xaa>
    nvicEnableVector(dmastp->vector, priority);
 8001daa:	7a80      	ldrb	r0, [r0, #10]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dac:	0942      	lsrs	r2, r0, #5
 8001dae:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001db0:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 8001db4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001db8:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8001dbc:	0109      	lsls	r1, r1, #4
 8001dbe:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dc2:	f000 001f 	and.w	r0, r0, #31
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	fa04 f000 	lsl.w	r0, r4, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001dcc:	b2c9      	uxtb	r1, r1
 8001dce:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dd2:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001dd6:	6010      	str	r0, [r2, #0]
  }

  return false;
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 8001dde:	4c08      	ldr	r4, [pc, #32]	; (8001e00 <dmaStreamAllocate+0xc0>)
 8001de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de6:	6323      	str	r3, [r4, #48]	; 0x30
 8001de8:	e7cd      	b.n	8001d86 <dmaStreamAllocate+0x46>
  dmaStreamDisable(dmastp);
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8001dea:	4613      	mov	r3, r2
 8001dec:	e7f4      	b.n	8001dd8 <dmaStreamAllocate+0x98>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <dmaStreamAllocate+0xc4>)
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <dmaStreamAllocate+0xc8>)
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001df6:	e7fe      	b.n	8001df6 <dmaStreamAllocate+0xb6>
 8001df8:	2000d028 	.word	0x2000d028
 8001dfc:	2000dcd4 	.word	0x2000dcd4
 8001e00:	40023800 	.word	0x40023800
 8001e04:	20000b30 	.word	0x20000b30
 8001e08:	08007630 	.word	0x08007630
 8001e0c:	00000000 	.word	0x00000000

08001e10 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <stSetAlarm+0x18>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001e14:	0792      	lsls	r2, r2, #30
 8001e16:	d501      	bpl.n	8001e1c <stSetAlarm+0xc>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e18:	6358      	str	r0, [r3, #52]	; 0x34
 8001e1a:	4770      	bx	lr
 8001e1c:	b672      	cpsid	i
 8001e1e:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <stSetAlarm+0x1c>)
 8001e20:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <stSetAlarm+0x20>)
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e24:	e7fe      	b.n	8001e24 <stSetAlarm+0x14>
 8001e26:	bf00      	nop
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	20000b30 	.word	0x20000b30
 8001e30:	080075e0 	.word	0x080075e0
	...

08001e40 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e40:	2320      	movs	r3, #32
 8001e42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <_port_irq_epilogue+0x50>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001e4e:	d102      	bne.n	8001e56 <_port_irq_epilogue+0x16>
 8001e50:	f383 8811 	msr	BASEPRI, r3
 8001e54:	4770      	bx	lr
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001e56:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001e5a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001e60:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001e6a:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001e6e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001e72:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <_port_irq_epilogue+0x58>)
 8001e78:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001e7a:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001e7c:	6889      	ldr	r1, [r1, #8]
 8001e7e:	6892      	ldr	r2, [r2, #8]
 8001e80:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001e82:	bf8c      	ite	hi
 8001e84:	4a05      	ldrhi	r2, [pc, #20]	; (8001e9c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001e86:	4a06      	ldrls	r2, [pc, #24]	; (8001ea0 <_port_irq_epilogue+0x60>)
 8001e88:	f843 2c50 	str.w	r2, [r3, #-80]
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	e000ef30 	.word	0xe000ef30
 8001e98:	20000b30 	.word	0x20000b30
 8001e9c:	08000301 	.word	0x08000301
 8001ea0:	08000314 	.word	0x08000314
	...

08001eb0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8001eb0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001eb2:	f002 f975 	bl	80041a0 <_stats_increase_irq>
 8001eb6:	f002 fbc3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <Vector158+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ebe:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001ec0:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ec2:	0d89      	lsrs	r1, r1, #22
 8001ec4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8001ec8:	058c      	lsls	r4, r1, #22
 8001eca:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001ecc:	b10a      	cbz	r2, 8001ed2 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001ece:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001ed0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001ed2:	f002 fb9d 	bl	8004610 <_dbg_check_leave_isr>
}
 8001ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001eda:	f7ff bfb1 	b.w	8001e40 <_port_irq_epilogue>
 8001ede:	bf00      	nop
 8001ee0:	40026400 	.word	0x40026400
 8001ee4:	2000dcd4 	.word	0x2000dcd4
	...

08001ef0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8001ef0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001ef2:	f002 f955 	bl	80041a0 <_stats_increase_irq>
 8001ef6:	f002 fba3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <Vector154+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001efe:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8001f00:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001f02:	0c09      	lsrs	r1, r1, #16
 8001f04:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8001f08:	040c      	lsls	r4, r1, #16
 8001f0a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8001f0c:	b10a      	cbz	r2, 8001f12 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8001f0e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001f10:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001f12:	f002 fb7d 	bl	8004610 <_dbg_check_leave_isr>
}
 8001f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001f1a:	f7ff bf91 	b.w	8001e40 <_port_irq_epilogue>
 8001f1e:	bf00      	nop
 8001f20:	40026400 	.word	0x40026400
 8001f24:	2000dcd4 	.word	0x2000dcd4
	...

08001f30 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8001f30:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001f32:	f002 f935 	bl	80041a0 <_stats_increase_irq>
 8001f36:	f002 fb83 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8001f3c:	4809      	ldr	r0, [pc, #36]	; (8001f64 <Vector150+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001f3e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8001f40:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001f42:	0989      	lsrs	r1, r1, #6
 8001f44:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8001f48:	018c      	lsls	r4, r1, #6
 8001f4a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001f4c:	b10a      	cbz	r2, 8001f52 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001f4e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001f50:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001f52:	f002 fb5d 	bl	8004610 <_dbg_check_leave_isr>
}
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001f5a:	f7ff bf71 	b.w	8001e40 <_port_irq_epilogue>
 8001f5e:	bf00      	nop
 8001f60:	40026400 	.word	0x40026400
 8001f64:	2000dcd4 	.word	0x2000dcd4
	...

08001f70 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001f70:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001f72:	f002 f915 	bl	80041a0 <_stats_increase_irq>
 8001f76:	f002 fb63 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <Vector130+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001f7e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8001f80:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001f82:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8001f86:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001f88:	b10a      	cbz	r2, 8001f8e <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001f8a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001f8c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001f8e:	f002 fb3f 	bl	8004610 <_dbg_check_leave_isr>
}
 8001f92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001f96:	f7ff bf53 	b.w	8001e40 <_port_irq_epilogue>
 8001f9a:	bf00      	nop
 8001f9c:	40026400 	.word	0x40026400
 8001fa0:	2000dcd4 	.word	0x2000dcd4
	...

08001fb0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8001fb0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001fb2:	f002 f8f5 	bl	80041a0 <_stats_increase_irq>
 8001fb6:	f002 fb43 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8001fbc:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001fbe:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8001fc0:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001fc2:	0d89      	lsrs	r1, r1, #22
 8001fc4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8001fc8:	058c      	lsls	r4, r1, #22
 8001fca:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001fcc:	b10a      	cbz	r2, 8001fd2 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001fce:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001fd0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001fd2:	f002 fb1d 	bl	8004610 <_dbg_check_leave_isr>
}
 8001fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001fda:	f7ff bf31 	b.w	8001e40 <_port_irq_epilogue>
 8001fde:	bf00      	nop
 8001fe0:	40026400 	.word	0x40026400
 8001fe4:	2000dcd4 	.word	0x2000dcd4
	...

08001ff0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8001ff0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001ff2:	f002 f8d5 	bl	80041a0 <_stats_increase_irq>
 8001ff6:	f002 fb23 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8001ffc:	4809      	ldr	r0, [pc, #36]	; (8002024 <Vector128+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001ffe:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002000:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002002:	0c09      	lsrs	r1, r1, #16
 8002004:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002008:	040c      	lsls	r4, r1, #16
 800200a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800200c:	b10a      	cbz	r2, 8002012 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800200e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002010:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002012:	f002 fafd 	bl	8004610 <_dbg_check_leave_isr>
}
 8002016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800201a:	f7ff bf11 	b.w	8001e40 <_port_irq_epilogue>
 800201e:	bf00      	nop
 8002020:	40026400 	.word	0x40026400
 8002024:	2000dcd4 	.word	0x2000dcd4
	...

08002030 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002030:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002032:	f002 f8b5 	bl	80041a0 <_stats_increase_irq>
 8002036:	f002 fb03 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <Vector124+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800203e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002040:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002042:	0989      	lsrs	r1, r1, #6
 8002044:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8002048:	018c      	lsls	r4, r1, #6
 800204a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800204c:	b10a      	cbz	r2, 8002052 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800204e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002050:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002052:	f002 fadd 	bl	8004610 <_dbg_check_leave_isr>
}
 8002056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800205a:	f7ff bef1 	b.w	8001e40 <_port_irq_epilogue>
 800205e:	bf00      	nop
 8002060:	40026400 	.word	0x40026400
 8002064:	2000dcd4 	.word	0x2000dcd4
	...

08002070 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002070:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002072:	f002 f895 	bl	80041a0 <_stats_increase_irq>
 8002076:	f002 fae3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 800207c:	4808      	ldr	r0, [pc, #32]	; (80020a0 <Vector120+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800207e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002080:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002082:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002086:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002088:	b10a      	cbz	r2, 800208e <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800208a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800208c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800208e:	f002 fabf 	bl	8004610 <_dbg_check_leave_isr>
}
 8002092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002096:	f7ff bed3 	b.w	8001e40 <_port_irq_epilogue>
 800209a:	bf00      	nop
 800209c:	40026400 	.word	0x40026400
 80020a0:	2000dcd4 	.word	0x2000dcd4
	...

080020b0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80020b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80020b2:	f002 f875 	bl	80041a0 <_stats_increase_irq>
 80020b6:	f002 fac3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80020be:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 80020c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80020c2:	0d89      	lsrs	r1, r1, #22
 80020c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80020c8:	058c      	lsls	r4, r1, #22
 80020ca:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80020cc:	b10a      	cbz	r2, 80020d2 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80020ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80020d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80020d2:	f002 fa9d 	bl	8004610 <_dbg_check_leave_isr>
}
 80020d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80020da:	f7ff beb1 	b.w	8001e40 <_port_irq_epilogue>
 80020de:	bf00      	nop
 80020e0:	40026000 	.word	0x40026000
 80020e4:	2000dcd4 	.word	0x2000dcd4
	...

080020f0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80020f0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80020f2:	f002 f855 	bl	80041a0 <_stats_increase_irq>
 80020f6:	f002 faa3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <Vector84+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80020fe:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002100:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002102:	0c09      	lsrs	r1, r1, #16
 8002104:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8002108:	040c      	lsls	r4, r1, #16
 800210a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800210c:	b10a      	cbz	r2, 8002112 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800210e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002110:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002112:	f002 fa7d 	bl	8004610 <_dbg_check_leave_isr>
}
 8002116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800211a:	f7ff be91 	b.w	8001e40 <_port_irq_epilogue>
 800211e:	bf00      	nop
 8002120:	40026000 	.word	0x40026000
 8002124:	2000dcd4 	.word	0x2000dcd4
	...

08002130 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002130:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002132:	f002 f835 	bl	80041a0 <_stats_increase_irq>
 8002136:	f002 fa83 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <Vector80+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800213e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002140:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002142:	0989      	lsrs	r1, r1, #6
 8002144:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8002148:	018c      	lsls	r4, r1, #6
 800214a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800214c:	b10a      	cbz	r2, 8002152 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800214e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002150:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002152:	f002 fa5d 	bl	8004610 <_dbg_check_leave_isr>
}
 8002156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800215a:	f7ff be71 	b.w	8001e40 <_port_irq_epilogue>
 800215e:	bf00      	nop
 8002160:	40026000 	.word	0x40026000
 8002164:	2000dcd4 	.word	0x2000dcd4
	...

08002170 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002170:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002172:	f002 f815 	bl	80041a0 <_stats_increase_irq>
 8002176:	f002 fa63 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800217e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002180:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002182:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002186:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002188:	b10a      	cbz	r2, 800218e <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800218a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800218c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800218e:	f002 fa3f 	bl	8004610 <_dbg_check_leave_isr>
}
 8002192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002196:	f7ff be53 	b.w	8001e40 <_port_irq_epilogue>
 800219a:	bf00      	nop
 800219c:	40026000 	.word	0x40026000
 80021a0:	2000dcd4 	.word	0x2000dcd4
	...

080021b0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80021b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80021b2:	f001 fff5 	bl	80041a0 <_stats_increase_irq>
 80021b6:	f002 fa43 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <Vector78+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80021be:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 80021c0:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80021c2:	0d89      	lsrs	r1, r1, #22
 80021c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80021c8:	058c      	lsls	r4, r1, #22
 80021ca:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80021cc:	b10a      	cbz	r2, 80021d2 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80021ce:	69c0      	ldr	r0, [r0, #28]
 80021d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80021d2:	f002 fa1d 	bl	8004610 <_dbg_check_leave_isr>
}
 80021d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80021da:	f7ff be31 	b.w	8001e40 <_port_irq_epilogue>
 80021de:	bf00      	nop
 80021e0:	40026000 	.word	0x40026000
 80021e4:	2000dcd4 	.word	0x2000dcd4
	...

080021f0 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80021f0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80021f2:	f001 ffd5 	bl	80041a0 <_stats_increase_irq>
 80021f6:	f002 fa23 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <Vector74+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80021fe:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002200:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002202:	0c09      	lsrs	r1, r1, #16
 8002204:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8002208:	040c      	lsls	r4, r1, #16
 800220a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800220c:	b10a      	cbz	r2, 8002212 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800220e:	6940      	ldr	r0, [r0, #20]
 8002210:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002212:	f002 f9fd 	bl	8004610 <_dbg_check_leave_isr>
}
 8002216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800221a:	f7ff be11 	b.w	8001e40 <_port_irq_epilogue>
 800221e:	bf00      	nop
 8002220:	40026000 	.word	0x40026000
 8002224:	2000dcd4 	.word	0x2000dcd4
	...

08002230 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002230:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002232:	f001 ffb5 	bl	80041a0 <_stats_increase_irq>
 8002236:	f002 fa03 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <Vector70+0x34>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800223e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002240:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002242:	0989      	lsrs	r1, r1, #6
 8002244:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8002248:	018c      	lsls	r4, r1, #6
 800224a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800224c:	b10a      	cbz	r2, 8002252 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800224e:	68c0      	ldr	r0, [r0, #12]
 8002250:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8002252:	f002 f9dd 	bl	8004610 <_dbg_check_leave_isr>
}
 8002256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800225a:	f7ff bdf1 	b.w	8001e40 <_port_irq_epilogue>
 800225e:	bf00      	nop
 8002260:	40026000 	.word	0x40026000
 8002264:	2000dcd4 	.word	0x2000dcd4
	...

08002270 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002270:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8002272:	f001 ff95 	bl	80041a0 <_stats_increase_irq>
 8002276:	f002 f9e3 	bl	8004640 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002284:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	b10b      	cbz	r3, 800228e <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800228a:	6850      	ldr	r0, [r2, #4]
 800228c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800228e:	f002 f9bf 	bl	8004610 <_dbg_check_leave_isr>
}
 8002292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002296:	f7ff bdd3 	b.w	8001e40 <_port_irq_epilogue>
 800229a:	bf00      	nop
 800229c:	40026000 	.word	0x40026000
 80022a0:	2000dcd4 	.word	0x2000dcd4
	...

080022b0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80022b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b4:	4680      	mov	r8, r0
 80022b6:	460e      	mov	r6, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 80022b8:	f002 f862 	bl	8004380 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 80022bc:	f1b8 0f00 	cmp.w	r8, #0
 80022c0:	d039      	beq.n	8002336 <chEvtBroadcastFlagsI+0x86>

  elp = esp->es_next;
 80022c2:	f8d8 4000 	ldr.w	r4, [r8]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80022c6:	45a0      	cmp	r8, r4
 80022c8:	d026      	beq.n	8002318 <chEvtBroadcastFlagsI+0x68>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80022ca:	2700      	movs	r7, #0
 80022cc:	e002      	b.n	80022d4 <chEvtBroadcastFlagsI+0x24>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 80022ce:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80022d0:	45a0      	cmp	r8, r4
 80022d2:	d021      	beq.n	8002318 <chEvtBroadcastFlagsI+0x68>
  /*lint -restore*/
    elp->el_flags |= flags;
 80022d4:	68e3      	ldr	r3, [r4, #12]
 80022d6:	4333      	orrs	r3, r6
 80022d8:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80022da:	b116      	cbz	r6, 80022e2 <chEvtBroadcastFlagsI+0x32>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 80022dc:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80022de:	4213      	tst	r3, r2
 80022e0:	d0f5      	beq.n	80022ce <chEvtBroadcastFlagsI+0x1e>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 80022e2:	6865      	ldr	r5, [r4, #4]
 80022e4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 80022e8:	f002 f84a 	bl	8004380 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80022ec:	b1f5      	cbz	r5, 800232c <chEvtBroadcastFlagsI+0x7c>

  tp->p_epending |= events;
 80022ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80022f0:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80022f4:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80022f8:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80022fa:	63ab      	str	r3, [r5, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80022fc:	d00e      	beq.n	800231c <chEvtBroadcastFlagsI+0x6c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80022fe:	2a0b      	cmp	r2, #11
 8002300:	d1e5      	bne.n	80022ce <chEvtBroadcastFlagsI+0x1e>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8002302:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002304:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8002306:	429a      	cmp	r2, r3
 8002308:	d1e1      	bne.n	80022ce <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800230a:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 800230c:	4628      	mov	r0, r5
 800230e:	f002 f917 	bl	8004540 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002312:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002314:	45a0      	cmp	r8, r4
 8002316:	d1dd      	bne.n	80022d4 <chEvtBroadcastFlagsI+0x24>
 8002318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800231c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800231e:	4213      	tst	r3, r2
 8002320:	d0d5      	beq.n	80022ce <chEvtBroadcastFlagsI+0x1e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8002322:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002324:	4628      	mov	r0, r5
 8002326:	f002 f90b 	bl	8004540 <chSchReadyI>
 800232a:	e7f2      	b.n	8002312 <chEvtBroadcastFlagsI+0x62>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <chEvtBroadcastFlagsI+0x90>)
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <chEvtBroadcastFlagsI+0x94>)
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
 8002334:	e7fe      	b.n	8002334 <chEvtBroadcastFlagsI+0x84>
 8002336:	b672      	cpsid	i
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <chEvtBroadcastFlagsI+0x90>)
 800233a:	4a03      	ldr	r2, [pc, #12]	; (8002348 <chEvtBroadcastFlagsI+0x98>)
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
 800233e:	e7fe      	b.n	800233e <chEvtBroadcastFlagsI+0x8e>
 8002340:	20000b30 	.word	0x20000b30
 8002344:	080075f0 	.word	0x080075f0
 8002348:	08007650 	.word	0x08007650
 800234c:	00000000 	.word	0x00000000

08002350 <chSysUnlock.lto_priv.59>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002350:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8002352:	f002 f9f5 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002356:	f001 ff63 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <chSysUnlock.lto_priv.59+0x2c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d004      	beq.n	800236c <chSysUnlock.lto_priv.59+0x1c>
 8002362:	6999      	ldr	r1, [r3, #24]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	6889      	ldr	r1, [r1, #8]
 8002368:	4291      	cmp	r1, r2
 800236a:	d303      	bcc.n	8002374 <chSysUnlock.lto_priv.59+0x24>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800236c:	2300      	movs	r3, #0
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
 8002376:	4a02      	ldr	r2, [pc, #8]	; (8002380 <chSysUnlock.lto_priv.59+0x30>)
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
 800237a:	e7fe      	b.n	800237a <chSysUnlock.lto_priv.59+0x2a>
 800237c:	20000b30 	.word	0x20000b30
 8002380:	08007800 	.word	0x08007800
	...

08002390 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((gptp != NULL) && (config != NULL));
 8002392:	b328      	cbz	r0, 80023e0 <gptStart+0x50>
 8002394:	b321      	cbz	r1, 80023e0 <gptStart+0x50>
 8002396:	4604      	mov	r4, r0
 8002398:	460d      	mov	r5, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800239a:	2320      	movs	r3, #32
 800239c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80023a0:	f001 ff56 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80023a4:	f002 f9dc 	bl	8004760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 80023a8:	7823      	ldrb	r3, [r4, #0]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d904      	bls.n	80023ba <gptStart+0x2a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
 80023b2:	4b55      	ldr	r3, [pc, #340]	; (8002508 <gptStart+0x178>)
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <gptStart+0x17c>)
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80023b8:	e7fe      	b.n	80023b8 <gptStart+0x28>
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80023ba:	2b01      	cmp	r3, #1
              "invalid state");
  gptp->config = config;
 80023bc:	6065      	str	r5, [r4, #4]
 80023be:	d032      	beq.n	8002426 <gptStart+0x96>
 80023c0:	462b      	mov	r3, r5
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80023c2:	68a0      	ldr	r0, [r4, #8]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	fbb0 f2f1 	udiv	r2, r0, r1
 80023ca:	3a01      	subs	r2, #1
 80023cc:	b292      	uxth	r2, r2
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
 80023ce:	fb02 1101 	mla	r1, r2, r1, r1
 80023d2:	4288      	cmp	r0, r1
 80023d4:	d009      	beq.n	80023ea <gptStart+0x5a>
 80023d6:	b672      	cpsid	i
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <gptStart+0x178>)
 80023da:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <gptStart+0x180>)
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023de:	e7fe      	b.n	80023de <gptStart+0x4e>
 80023e0:	b672      	cpsid	i
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <gptStart+0x178>)
 80023e4:	4a49      	ldr	r2, [pc, #292]	; (800250c <gptStart+0x17c>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80023e8:	e7fe      	b.n	80023e8 <gptStart+0x58>
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80023ea:	68d8      	ldr	r0, [r3, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80023ec:	68e1      	ldr	r1, [r4, #12]
  gptp->tim->CR2  = gptp->config->cr2;
 80023ee:	689e      	ldr	r6, [r3, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80023f0:	2500      	movs	r5, #0
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80023f2:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 80023f6:	2002      	movs	r0, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80023f8:	600d      	str	r5, [r1, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 80023fa:	604e      	str	r6, [r1, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80023fc:	628a      	str	r2, [r1, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 80023fe:	610d      	str	r5, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8002400:	60cb      	str	r3, [r1, #12]
 8002402:	7020      	strb	r0, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002404:	f002 f99c 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002408:	f001 ff0a 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <gptStart+0x178>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d004      	beq.n	800241e <gptStart+0x8e>
 8002414:	6999      	ldr	r1, [r3, #24]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	6889      	ldr	r1, [r1, #8]
 800241a:	4291      	cmp	r1, r2
 800241c:	d311      	bcc.n	8002442 <gptStart+0xb2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800241e:	2300      	movs	r3, #0
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <gptStart+0x184>)
 8002428:	429c      	cmp	r4, r3
 800242a:	d056      	beq.n	80024da <gptStart+0x14a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <gptStart+0x188>)
 800242e:	429c      	cmp	r4, r3
 8002430:	d03b      	beq.n	80024aa <gptStart+0x11a>
#endif
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <gptStart+0x18c>)
 8002434:	429c      	cmp	r4, r3
 8002436:	d020      	beq.n	800247a <gptStart+0xea>
#endif
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <gptStart+0x190>)
 800243a:	429c      	cmp	r4, r3
 800243c:	d005      	beq.n	800244a <gptStart+0xba>
 800243e:	6863      	ldr	r3, [r4, #4]
 8002440:	e7bf      	b.n	80023c2 <gptStart+0x32>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002442:	b672      	cpsid	i
 8002444:	4a37      	ldr	r2, [pc, #220]	; (8002524 <gptStart+0x194>)
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
 8002448:	e7fe      	b.n	8002448 <gptStart+0xb8>
      rccEnableTIM4(FALSE);
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800244c:	4a37      	ldr	r2, [pc, #220]	; (800252c <gptStart+0x19c>)
 800244e:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002450:	4837      	ldr	r0, [pc, #220]	; (8002530 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 8002452:	f041 0104 	orr.w	r1, r1, #4
 8002456:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM4();
 8002458:	6a19      	ldr	r1, [r3, #32]
 800245a:	2600      	movs	r6, #0
 800245c:	f041 0104 	orr.w	r1, r1, #4
 8002460:	2570      	movs	r5, #112	; 0x70
 8002462:	6219      	str	r1, [r3, #32]
 8002464:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002466:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800246a:	f882 531e 	strb.w	r5, [r2, #798]	; 0x31e
 800246e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002470:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002474:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002476:	60a0      	str	r0, [r4, #8]
 8002478:	e7a3      	b.n	80023c2 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800247c:	4a2b      	ldr	r2, [pc, #172]	; (800252c <gptStart+0x19c>)
 800247e:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 8002480:	482b      	ldr	r0, [pc, #172]	; (8002530 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8002482:	f041 0102 	orr.w	r1, r1, #2
 8002486:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8002488:	6a19      	ldr	r1, [r3, #32]
 800248a:	2600      	movs	r6, #0
 800248c:	f041 0102 	orr.w	r1, r1, #2
 8002490:	2570      	movs	r5, #112	; 0x70
 8002492:	6219      	str	r1, [r3, #32]
 8002494:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002496:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800249a:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 800249e:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024a0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024a4:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80024a6:	60a0      	str	r0, [r4, #8]
 80024a8:	e78b      	b.n	80023c2 <gptStart+0x32>
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024ac:	4a1f      	ldr	r2, [pc, #124]	; (800252c <gptStart+0x19c>)
 80024ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80024b0:	481f      	ldr	r0, [pc, #124]	; (8002530 <gptStart+0x1a0>)
    }
#endif

#if STM32_GPT_USE_TIM2
    if (&GPTD2 == gptp) {
      rccEnableTIM2(FALSE);
 80024b2:	f041 0101 	orr.w	r1, r1, #1
 80024b6:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 80024b8:	6a19      	ldr	r1, [r3, #32]
 80024ba:	2600      	movs	r6, #0
 80024bc:	f041 0101 	orr.w	r1, r1, #1
 80024c0:	2570      	movs	r5, #112	; 0x70
 80024c2:	6219      	str	r1, [r3, #32]
 80024c4:	621e      	str	r6, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024ca:	f882 531c 	strb.w	r5, [r2, #796]	; 0x31c
 80024ce:	6863      	ldr	r3, [r4, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024d0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024d4:	6011      	str	r1, [r2, #0]
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM2CLK)
      gptp->clock = STM32_TIM2CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80024d6:	60a0      	str	r0, [r4, #8]
 80024d8:	e773      	b.n	80023c2 <gptStart+0x32>

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <gptStart+0x198>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024dc:	4a13      	ldr	r2, [pc, #76]	; (800252c <gptStart+0x19c>)
 80024de:	6c59      	ldr	r1, [r3, #68]	; 0x44
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 80024e0:	4d14      	ldr	r5, [pc, #80]	; (8002534 <gptStart+0x1a4>)

  if (gptp->state == GPT_STOP) {
    /* Clock activation.*/
#if STM32_GPT_USE_TIM1
    if (&GPTD1 == gptp) {
      rccEnableTIM1(FALSE);
 80024e2:	f041 0101 	orr.w	r1, r1, #1
 80024e6:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM1();
 80024e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80024ee:	2700      	movs	r7, #0
 80024f0:	f041 0101 	orr.w	r1, r1, #1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024f4:	2670      	movs	r6, #112	; 0x70
 80024f6:	6259      	str	r1, [r3, #36]	; 0x24
 80024f8:	625f      	str	r7, [r3, #36]	; 0x24
 80024fa:	f882 6319 	strb.w	r6, [r2, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024fe:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002502:	6010      	str	r0, [r2, #0]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_GPT_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      gptp->clock = STM32_TIM1CLK;
#else
      gptp->clock = STM32_TIMCLK2;
 8002504:	60a5      	str	r5, [r4, #8]
 8002506:	e79a      	b.n	800243e <gptStart+0xae>
 8002508:	20000b30 	.word	0x20000b30
 800250c:	080075d0 	.word	0x080075d0
 8002510:	08007600 	.word	0x08007600
 8002514:	2000dcc4 	.word	0x2000dcc4
 8002518:	2000124c 	.word	0x2000124c
 800251c:	20000b1c 	.word	0x20000b1c
 8002520:	2000125c 	.word	0x2000125c
 8002524:	080076a0 	.word	0x080076a0
 8002528:	40023800 	.word	0x40023800
 800252c:	e000e100 	.word	0xe000e100
 8002530:	0501bd00 	.word	0x0501bd00
 8002534:	0a037a00 	.word	0x0a037a00
	...

08002540 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8002540:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002542:	2320      	movs	r3, #32
 8002544:	4604      	mov	r4, r0
 8002546:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800254a:	f001 fe81 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800254e:	f002 f907 	bl	8004760 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8002552:	f001 ff15 	bl	8004380 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002556:	4812      	ldr	r0, [pc, #72]	; (80025a0 <chCoreAlloc+0x60>)
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <chCoreAlloc+0x64>)
 800255a:	6802      	ldr	r2, [r0, #0]
 800255c:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800255e:	1de3      	adds	r3, r4, #7
 8002560:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8002564:	1a89      	subs	r1, r1, r2
 8002566:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8002568:	bf9d      	ittte	ls
 800256a:	189b      	addls	r3, r3, r2
 800256c:	6003      	strls	r3, [r0, #0]

  return p;
 800256e:	4614      	movls	r4, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8002570:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002572:	f002 f8e5 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002576:	f001 fe53 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <chCoreAlloc+0x68>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d004      	beq.n	800258c <chCoreAlloc+0x4c>
 8002582:	6999      	ldr	r1, [r3, #24]
 8002584:	6892      	ldr	r2, [r2, #8]
 8002586:	6889      	ldr	r1, [r1, #8]
 8002588:	4291      	cmp	r1, r2
 800258a:	d304      	bcc.n	8002596 <chCoreAlloc+0x56>
 800258c:	2300      	movs	r3, #0
 800258e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8002592:	4620      	mov	r0, r4
 8002594:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002596:	b672      	cpsid	i
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <chCoreAlloc+0x6c>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
 800259c:	e7fe      	b.n	800259c <chCoreAlloc+0x5c>
 800259e:	bf00      	nop
 80025a0:	2000dcc0 	.word	0x2000dcc0
 80025a4:	20004eb0 	.word	0x20004eb0
 80025a8:	20000b30 	.word	0x20000b30
 80025ac:	08007690 	.word	0x08007690

080025b0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	b083      	sub	sp, #12
 80025b6:	4683      	mov	fp, r0
 80025b8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80025ba:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t w = 0;

  chDbgCheck(n > 0U);
 80025be:	4617      	mov	r7, r2
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d06e      	beq.n	80026a2 <chOQWriteTimeout+0xf2>
 80025c4:	4688      	mov	r8, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80025c6:	2620      	movs	r6, #32
 80025c8:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80025cc:	f001 fe40 	bl	8004250 <_stats_start_measure_crit_thd>
 80025d0:	4c38      	ldr	r4, [pc, #224]	; (80026b4 <chOQWriteTimeout+0x104>)
  _dbg_check_lock();
 80025d2:	f002 f8c5 	bl	8004760 <_dbg_check_lock>
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 80025d6:	2500      	movs	r5, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80025d8:	46a2      	mov	sl, r4
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 80025da:	f001 fed1 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 80025de:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80025e2:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03e      	beq.n	8002666 <chOQWriteTimeout+0xb6>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80025e8:	f8db 2014 	ldr.w	r2, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80025ec:	f8db 3008 	ldr.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 80025f0:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80025f2:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80025f4:	f8cb 1014 	str.w	r1, [fp, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80025f8:	f8cb 3008 	str.w	r3, [fp, #8]
    *oqp->q_wrptr++ = *bp++;
 80025fc:	f898 3000 	ldrb.w	r3, [r8]
 8002600:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8002602:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002606:	f8db 2014 	ldr.w	r2, [fp, #20]
 800260a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800260c:	bf24      	itt	cs
 800260e:	f8db 300c 	ldrcs.w	r3, [fp, #12]
 8002612:	f8cb 3014 	strcs.w	r3, [fp, #20]
    }

    if (nfy != NULL) {
 8002616:	f1b9 0f00 	cmp.w	r9, #0
 800261a:	d000      	beq.n	800261e <chOQWriteTimeout+0x6e>
      nfy(oqp);
 800261c:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800261e:	f002 f88f 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002622:	f001 fdfd 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <chOQWriteTimeout+0x104>)
 800262a:	42a3      	cmp	r3, r4
 800262c:	d005      	beq.n	800263a <chOQWriteTimeout+0x8a>
 800262e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	6889      	ldr	r1, [r1, #8]
 8002636:	4299      	cmp	r1, r3
 8002638:	d32f      	bcc.n	800269a <chOQWriteTimeout+0xea>
 800263a:	2300      	movs	r3, #0
 800263c:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8002640:	3f01      	subs	r7, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8002642:	f105 0501 	add.w	r5, r5, #1
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8002646:	f108 0801 	add.w	r8, r8, #1
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800264a:	d022      	beq.n	8002692 <chOQWriteTimeout+0xe2>
 800264c:	f386 8811 	msr	BASEPRI, r6
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8002650:	f001 fdfe 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002654:	f002 f884 	bl	8004760 <_dbg_check_lock>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8002658:	f001 fe92 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 800265c:	f8db 3008 	ldr.w	r3, [fp, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002660:	4658      	mov	r0, fp

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c0      	bne.n	80025e8 <chOQWriteTimeout+0x38>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8002666:	4658      	mov	r0, fp
 8002668:	9901      	ldr	r1, [sp, #4]
 800266a:	f001 ff51 	bl	8004510 <chThdEnqueueTimeoutS>
 800266e:	2800      	cmp	r0, #0
 8002670:	d0b3      	beq.n	80025da <chOQWriteTimeout+0x2a>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002672:	f002 f865 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002676:	f001 fdd3 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800267a:	6822      	ldr	r2, [r4, #0]
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <chOQWriteTimeout+0x104>)
 800267e:	42a2      	cmp	r2, r4
 8002680:	d004      	beq.n	800268c <chOQWriteTimeout+0xdc>
 8002682:	6999      	ldr	r1, [r3, #24]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	6889      	ldr	r1, [r1, #8]
 8002688:	4291      	cmp	r1, r2
 800268a:	d30f      	bcc.n	80026ac <chOQWriteTimeout+0xfc>
 800268c:	2300      	movs	r3, #0
 800268e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8002692:	4628      	mov	r0, r5
 8002694:	b003      	add	sp, #12
 8002696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800269a:	b672      	cpsid	i
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <chOQWriteTimeout+0x108>)
 800269e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026a0:	e7fe      	b.n	80026a0 <chOQWriteTimeout+0xf0>
 80026a2:	b672      	cpsid	i
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <chOQWriteTimeout+0x104>)
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <chOQWriteTimeout+0x10c>)
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026aa:	e7fe      	b.n	80026aa <chOQWriteTimeout+0xfa>
 80026ac:	b672      	cpsid	i
 80026ae:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <chOQWriteTimeout+0x108>)
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b2:	e7fe      	b.n	80026b2 <chOQWriteTimeout+0x102>
 80026b4:	20000b30 	.word	0x20000b30
 80026b8:	08007680 	.word	0x08007680
 80026bc:	08007610 	.word	0x08007610

080026c0 <writet.lto_priv.79>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80026c0:	3030      	adds	r0, #48	; 0x30
 80026c2:	f7ff bf75 	b.w	80025b0 <chOQWriteTimeout>
 80026c6:	bf00      	nop
	...

080026d0 <write.lto_priv.71>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80026d0:	3030      	adds	r0, #48	; 0x30
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	f7ff bf6b 	b.w	80025b0 <chOQWriteTimeout>
 80026da:	bf00      	nop
 80026dc:	0000      	movs	r0, r0
	...

080026e0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	4604      	mov	r4, r0
 80026e4:	460f      	mov	r7, r1
 80026e6:	4616      	mov	r6, r2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80026e8:	2320      	movs	r3, #32
 80026ea:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80026ee:	f001 fdaf 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80026f2:	f002 f835 	bl	8004760 <_dbg_check_lock>
 80026f6:	e003      	b.n	8002700 <chOQPutTimeout+0x20>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80026f8:	f001 ff0a 	bl	8004510 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80026fc:	1e05      	subs	r5, r0, #0
 80026fe:	db28      	blt.n	8002752 <chOQPutTimeout+0x72>
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();
 8002700:	f001 fe3e 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 8002704:	68a3      	ldr	r3, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002706:	4620      	mov	r0, r4
 8002708:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f4      	beq.n	80026f8 <chOQPutTimeout+0x18>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800270e:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002710:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002712:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002714:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8002716:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002718:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800271a:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	6962      	ldr	r2, [r4, #20]
 8002720:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002722:	bf24      	itt	cs
 8002724:	68e3      	ldrcs	r3, [r4, #12]
 8002726:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8002728:	69e3      	ldr	r3, [r4, #28]
 800272a:	b10b      	cbz	r3, 8002730 <chOQPutTimeout+0x50>
    oqp->q_notify(oqp);
 800272c:	4620      	mov	r0, r4
 800272e:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002730:	f002 f806 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002734:	f001 fd74 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <chOQPutTimeout+0xa8>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d004      	beq.n	800274a <chOQPutTimeout+0x6a>
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	6892      	ldr	r2, [r2, #8]
 8002744:	6889      	ldr	r1, [r1, #8]
 8002746:	4291      	cmp	r1, r2
 8002748:	d319      	bcc.n	800277e <chOQPutTimeout+0x9e>
 800274a:	2000      	movs	r0, #0
 800274c:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8002750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002752:	f001 fff5 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002756:	f001 fd63 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <chOQPutTimeout+0xa8>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d004      	beq.n	800276c <chOQPutTimeout+0x8c>
 8002762:	6999      	ldr	r1, [r3, #24]
 8002764:	6892      	ldr	r2, [r2, #8]
 8002766:	6889      	ldr	r1, [r1, #8]
 8002768:	4291      	cmp	r1, r2
 800276a:	d304      	bcc.n	8002776 <chOQPutTimeout+0x96>
 800276c:	2300      	movs	r3, #0
 800276e:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002772:	4628      	mov	r0, r5
 8002774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002776:	b672      	cpsid	i
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <chOQPutTimeout+0xac>)
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
 800277c:	e7fe      	b.n	800277c <chOQPutTimeout+0x9c>
 800277e:	b672      	cpsid	i
 8002780:	4a02      	ldr	r2, [pc, #8]	; (800278c <chOQPutTimeout+0xac>)
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
 8002784:	e7fe      	b.n	8002784 <chOQPutTimeout+0xa4>
 8002786:	bf00      	nop
 8002788:	20000b30 	.word	0x20000b30
 800278c:	08007680 	.word	0x08007680

08002790 <putt.lto_priv.77>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002790:	3030      	adds	r0, #48	; 0x30
 8002792:	f7ff bfa5 	b.w	80026e0 <chOQPutTimeout>
 8002796:	bf00      	nop
	...

080027a0 <put.lto_priv.73>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80027a0:	3030      	adds	r0, #48	; 0x30
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	f7ff bf9b 	b.w	80026e0 <chOQPutTimeout>
 80027aa:	bf00      	nop
 80027ac:	0000      	movs	r0, r0
	...

080027b0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	b083      	sub	sp, #12
 80027b6:	4699      	mov	r9, r3
  qnotify_t nfy = iqp->q_notify;
 80027b8:	69c3      	ldr	r3, [r0, #28]
 80027ba:	9301      	str	r3, [sp, #4]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80027bc:	4682      	mov	sl, r0
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;

  chDbgCheck(n > 0U);
 80027be:	4614      	mov	r4, r2
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	d065      	beq.n	8002890 <chIQReadTimeout+0xe0>
 80027c4:	460e      	mov	r6, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80027c6:	f04f 0820 	mov.w	r8, #32
 80027ca:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80027ce:	f001 fd3f 	bl	8004250 <_stats_start_measure_crit_thd>
 80027d2:	4d36      	ldr	r5, [pc, #216]	; (80028ac <chIQReadTimeout+0xfc>)
  _dbg_check_lock();
 80027d4:	f001 ffc4 	bl	8004760 <_dbg_check_lock>
 80027d8:	3c01      	subs	r4, #1
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 80027da:	2700      	movs	r7, #0
 80027dc:	4434      	add	r4, r6

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80027de:	46ab      	mov	fp, r5

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80027e0:	9b01      	ldr	r3, [sp, #4]
 80027e2:	b133      	cbz	r3, 80027f2 <chIQReadTimeout+0x42>
      nfy(iqp);
 80027e4:	4650      	mov	r0, sl
 80027e6:	4798      	blx	r3
 80027e8:	e003      	b.n	80027f2 <chIQReadTimeout+0x42>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80027ea:	f001 fe91 	bl	8004510 <chThdEnqueueTimeoutS>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d13a      	bne.n	8002868 <chIQReadTimeout+0xb8>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 80027f2:	f001 fdc5 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 80027f6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80027fa:	4650      	mov	r0, sl
 80027fc:	4649      	mov	r1, r9
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f3      	beq.n	80027ea <chIQReadTimeout+0x3a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8002802:	f8da 2018 	ldr.w	r2, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8002806:	f8da 3008 	ldr.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 800280a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800280c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800280e:	f8ca 1018 	str.w	r1, [sl, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8002812:	f8ca 3008 	str.w	r3, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
 8002816:	7813      	ldrb	r3, [r2, #0]
 8002818:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 800281a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800281e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002822:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8002824:	bf24      	itt	cs
 8002826:	f8da 300c 	ldrcs.w	r3, [sl, #12]
 800282a:	f8ca 3018 	strcs.w	r3, [sl, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800282e:	f001 ff87 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002832:	f001 fcf5 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002836:	682b      	ldr	r3, [r5, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <chIQReadTimeout+0xfc>)
 800283a:	42ab      	cmp	r3, r5
 800283c:	d005      	beq.n	800284a <chIQReadTimeout+0x9a>
 800283e:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	6889      	ldr	r1, [r1, #8]
 8002846:	4299      	cmp	r1, r3
 8002848:	d327      	bcc.n	800289a <chIQReadTimeout+0xea>
 800284a:	2300      	movs	r3, #0
 800284c:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
    if (--n == 0U) {
 8002850:	42a6      	cmp	r6, r4
    if (iqp->q_rdptr >= iqp->q_top) {
      iqp->q_rdptr = iqp->q_buffer;
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8002852:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8002856:	d017      	beq.n	8002888 <chIQReadTimeout+0xd8>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8002858:	3601      	adds	r6, #1
 800285a:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800285e:	f001 fcf7 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002862:	f001 ff7d 	bl	8004760 <_dbg_check_lock>
 8002866:	e7bb      	b.n	80027e0 <chIQReadTimeout+0x30>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002868:	f001 ff6a 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800286c:	f001 fcd8 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002870:	682a      	ldr	r2, [r5, #0]
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <chIQReadTimeout+0xfc>)
 8002874:	42aa      	cmp	r2, r5
 8002876:	d004      	beq.n	8002882 <chIQReadTimeout+0xd2>
 8002878:	6999      	ldr	r1, [r3, #24]
 800287a:	6892      	ldr	r2, [r2, #8]
 800287c:	6889      	ldr	r1, [r1, #8]
 800287e:	4291      	cmp	r1, r2
 8002880:	d30f      	bcc.n	80028a2 <chIQReadTimeout+0xf2>
 8002882:	2300      	movs	r3, #0
 8002884:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    chSysLock();
  }
}
 8002888:	4638      	mov	r0, r7
 800288a:	b003      	add	sp, #12
 800288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <chIQReadTimeout+0xfc>)
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <chIQReadTimeout+0x100>)
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c
 8002898:	e7fe      	b.n	8002898 <chIQReadTimeout+0xe8>
 800289a:	b672      	cpsid	i
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <chIQReadTimeout+0x104>)
 800289e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028a0:	e7fe      	b.n	80028a0 <chIQReadTimeout+0xf0>
 80028a2:	b672      	cpsid	i
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <chIQReadTimeout+0x104>)
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a8:	e7fe      	b.n	80028a8 <chIQReadTimeout+0xf8>
 80028aa:	bf00      	nop
 80028ac:	20000b30 	.word	0x20000b30
 80028b0:	08007670 	.word	0x08007670
 80028b4:	08007680 	.word	0x08007680
	...

080028c0 <readt.lto_priv.80>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80028c0:	300c      	adds	r0, #12
 80028c2:	f7ff bf75 	b.w	80027b0 <chIQReadTimeout>
 80028c6:	bf00      	nop
	...

080028d0 <read.lto_priv.72>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80028d0:	300c      	adds	r0, #12
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	f7ff bf6b 	b.w	80027b0 <chIQReadTimeout>
 80028da:	bf00      	nop
 80028dc:	0000      	movs	r0, r0
	...

080028e0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80028e0:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80028e2:	2320      	movs	r3, #32
 80028e4:	4604      	mov	r4, r0
 80028e6:	460e      	mov	r6, r1
 80028e8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80028ec:	f001 fcb0 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80028f0:	f001 ff36 	bl	8004760 <_dbg_check_lock>
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80028f4:	69e3      	ldr	r3, [r4, #28]
 80028f6:	b133      	cbz	r3, 8002906 <chIQGetTimeout+0x26>
    iqp->q_notify(iqp);
 80028f8:	4620      	mov	r0, r4
 80028fa:	4798      	blx	r3
 80028fc:	e003      	b.n	8002906 <chIQGetTimeout+0x26>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80028fe:	f001 fe07 	bl	8004510 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002902:	1e05      	subs	r5, r0, #0
 8002904:	db25      	blt.n	8002952 <chIQGetTimeout+0x72>
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();
 8002906:	f001 fd3b 	bl	8004380 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 800290a:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800290c:	4620      	mov	r0, r4
 800290e:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f4      	beq.n	80028fe <chIQGetTimeout+0x1e>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002914:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002916:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8002918:	6920      	ldr	r0, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800291a:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800291c:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800291e:	4282      	cmp	r2, r0
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002920:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002922:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8002924:	bf28      	it	cs
 8002926:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002928:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800292a:	bf28      	it	cs
 800292c:	61a3      	strcs	r3, [r4, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800292e:	f001 ff07 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002932:	f001 fc75 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <chIQGetTimeout+0x9c>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d004      	beq.n	8002948 <chIQGetTimeout+0x68>
 800293e:	6999      	ldr	r1, [r3, #24]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	6889      	ldr	r1, [r1, #8]
 8002944:	4291      	cmp	r1, r2
 8002946:	d315      	bcc.n	8002974 <chIQGetTimeout+0x94>
 8002948:	2300      	movs	r3, #0
 800294a:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
 800294e:	4628      	mov	r0, r5
}
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002952:	f001 fef5 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002956:	f001 fc63 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <chIQGetTimeout+0x9c>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d0f2      	beq.n	8002948 <chIQGetTimeout+0x68>
 8002962:	6999      	ldr	r1, [r3, #24]
 8002964:	6892      	ldr	r2, [r2, #8]
 8002966:	6889      	ldr	r1, [r1, #8]
 8002968:	4291      	cmp	r1, r2
 800296a:	d2ed      	bcs.n	8002948 <chIQGetTimeout+0x68>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <chIQGetTimeout+0xa0>)
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
 8002972:	e7fe      	b.n	8002972 <chIQGetTimeout+0x92>
 8002974:	b672      	cpsid	i
 8002976:	4a02      	ldr	r2, [pc, #8]	; (8002980 <chIQGetTimeout+0xa0>)
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
 800297a:	e7fe      	b.n	800297a <chIQGetTimeout+0x9a>
 800297c:	20000b30 	.word	0x20000b30
 8002980:	08007680 	.word	0x08007680
	...

08002990 <gett.lto_priv.78>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002990:	300c      	adds	r0, #12
 8002992:	f7ff bfa5 	b.w	80028e0 <chIQGetTimeout>
 8002996:	bf00      	nop
	...

080029a0 <get.lto_priv.75>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80029a0:	300c      	adds	r0, #12
 80029a2:	f04f 31ff 	mov.w	r1, #4294967295
 80029a6:	f7ff bf9b 	b.w	80028e0 <chIQGetTimeout>
 80029aa:	bf00      	nop
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <RC_thread.lto_priv.96>:
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <RC_thread.lto_priv.96+0x44>)
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <RC_thread.lto_priv.96+0x48>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4e11      	ldr	r6, [pc, #68]	; (80029fc <RC_thread.lto_priv.96+0x4c>)
 80029b8:	4c11      	ldr	r4, [pc, #68]	; (8002a00 <RC_thread.lto_priv.96+0x50>)
    rc_channel[0] = rc_channel[1] = rc_channel[2] = 1500U;
}

static THD_WORKING_AREA(RC_thread_wa, 64);
static THD_FUNCTION(RC_thread, p)
{
 80029ba:	b580      	push	{r7, lr}
    rc_channel[0] = RC_GPT.tim->CCR[0];
    rc_channel[1] = RC_GPT.tim->CCR[2];
    rc_channel[2] = RC_GPT.tim->CCR[3];
  }
  else
    rc_channel[0] = rc_channel[1] = rc_channel[2] = 1500U;
 80029bc:	f240 55dc 	movw	r5, #1500	; 0x5dc
 80029c0:	619a      	str	r2, [r3, #24]
  0
};

static void rc_update(void)
{
  if(RC_GPT.tim->CCR[0] > 900U && RC_GPT.tim->CCR[0] < 2100U)
 80029c2:	f640 0733 	movw	r7, #2099	; 0x833
 80029c6:	e006      	b.n	80029d6 <RC_thread.lto_priv.96+0x26>
    rc_channel[0] = RC_GPT.tim->CCR[0];
    rc_channel[1] = RC_GPT.tim->CCR[2];
    rc_channel[2] = RC_GPT.tim->CCR[3];
  }
  else
    rc_channel[0] = rc_channel[1] = rc_channel[2] = 1500U;
 80029c8:	80a5      	strh	r5, [r4, #4]
 80029ca:	8065      	strh	r5, [r4, #2]
 80029cc:	8025      	strh	r5, [r4, #0]
  chRegSetThreadName("Radio control");

  while (true)
  {
    rc_update();
    chThdSleepMilliseconds(200);
 80029ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029d2:	f001 ffb5 	bl	8004940 <chThdSleep>
  0
};

static void rc_update(void)
{
  if(RC_GPT.tim->CCR[0] > 900U && RC_GPT.tim->CCR[0] < 2100U)
 80029d6:	68f3      	ldr	r3, [r6, #12]
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	f5b2 7f61 	cmp.w	r2, #900	; 0x384
 80029de:	d9f3      	bls.n	80029c8 <RC_thread.lto_priv.96+0x18>
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	42ba      	cmp	r2, r7
 80029e4:	d8f0      	bhi.n	80029c8 <RC_thread.lto_priv.96+0x18>
  {
    rc_channel[0] = RC_GPT.tim->CCR[0];
 80029e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    rc_channel[1] = RC_GPT.tim->CCR[2];
 80029e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    rc_channel[2] = RC_GPT.tim->CCR[3];
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40

static void rc_update(void)
{
  if(RC_GPT.tim->CCR[0] > 900U && RC_GPT.tim->CCR[0] < 2100U)
  {
    rc_channel[0] = RC_GPT.tim->CCR[0];
 80029ec:	8021      	strh	r1, [r4, #0]
    rc_channel[1] = RC_GPT.tim->CCR[2];
 80029ee:	8062      	strh	r2, [r4, #2]
    rc_channel[2] = RC_GPT.tim->CCR[3];
 80029f0:	80a3      	strh	r3, [r4, #4]
 80029f2:	e7ec      	b.n	80029ce <RC_thread.lto_priv.96+0x1e>
 80029f4:	20000b30 	.word	0x20000b30
 80029f8:	080077a0 	.word	0x080077a0
 80029fc:	2000124c 	.word	0x2000124c
 8002a00:	20000820 	.word	0x20000820
	...

08002a10 <Hall_thread.lto_priv.94>:
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <Hall_thread.lto_priv.94+0xc4>)
 8002a12:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <Hall_thread.lto_priv.94+0xc8>)
 8002a14:	699b      	ldr	r3, [r3, #24]
static THD_FUNCTION(Hall_thread, p)
{
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 8002a16:	4831      	ldr	r0, [pc, #196]	; (8002adc <Hall_thread.lto_priv.94+0xcc>)
 8002a18:	4d31      	ldr	r5, [pc, #196]	; (8002ae0 <Hall_thread.lto_priv.94+0xd0>)
    chThdSleepMilliseconds(20);
  }
}

static THD_FUNCTION(Hall_thread, p)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	619a      	str	r2, [r3, #24]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002a1e:	4f31      	ldr	r7, [pc, #196]	; (8002ae4 <Hall_thread.lto_priv.94+0xd4>)
  (void)p;
  chRegSetThreadName("Hall Sensor");

  Hall_init(hall_encoder);
 8002a20:	f002 fdce 	bl	80055c0 <Hall_init>
  Hall_init(hall_encoder + 1);
 8002a24:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <Hall_thread.lto_priv.94+0xd8>)
 8002a26:	f002 fdcb 	bl	80055c0 <Hall_init>
 8002a2a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  uint32_t count,tick = chVTGetSystemTimeX();

  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);
 8002a2e:	36c8      	adds	r6, #200	; 0xc8

    if(tick>chVTGetSystemTimeX())
 8002a30:	42b3      	cmp	r3, r6
 8002a32:	f105 042e 	add.w	r4, r5, #46	; 0x2e
 8002a36:	d349      	bcc.n	8002acc <Hall_thread.lto_priv.94+0xbc>
 8002a38:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    else
      tick=chVTGetSystemTimeX();

    int32_t prev[NUM_OF_MOTOR];

    prev[0] = motors[0].Hall_Encoder->count;
 8002a3a:	682a      	ldr	r2, [r5, #0]
    prev[1] = motors[1].Hall_Encoder->count;
 8002a3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30

    Hall_update(hall_encoder);
 8002a3e:	4827      	ldr	r0, [pc, #156]	; (8002adc <Hall_thread.lto_priv.94+0xcc>)
    else
      tick=chVTGetSystemTimeX();

    int32_t prev[NUM_OF_MOTOR];

    prev[0] = motors[0].Hall_Encoder->count;
 8002a40:	f8d2 a008 	ldr.w	sl, [r2, #8]
    prev[1] = motors[1].Hall_Encoder->count;
 8002a44:	f8d3 9008 	ldr.w	r9, [r3, #8]

    Hall_update(hall_encoder);
 8002a48:	f002 fd92 	bl	8005570 <Hall_update>
    Hall_update(hall_encoder + 1);
 8002a4c:	4826      	ldr	r0, [pc, #152]	; (8002ae8 <Hall_thread.lto_priv.94+0xd8>)
 8002a4e:	f002 fd8f 	bl	8005570 <Hall_update>

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <Hall_thread.lto_priv.94+0xdc>)
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8002a54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8002a56:	6829      	ldr	r1, [r5, #0]
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8002a58:	6898      	ldr	r0, [r3, #8]
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8002a5a:	6889      	ldr	r1, [r1, #8]
    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
      prev[1];

    uint8_t i;

    temp[0] = 0.0f;
 8002a5c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002af0 <Hall_thread.lto_priv.94+0xe0>
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <Hall_thread.lto_priv.94+0xe4>)
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8002a62:	fba2 e208 	umull	lr, r2, r2, r8
 8002a66:	08d2      	lsrs	r2, r2, #3
 8002a68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a6c:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
 8002a70:	eb05 0e42 	add.w	lr, r5, r2, lsl #1
 8002a74:	ebca 0a01 	rsb	sl, sl, r1
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8002a78:	ebc9 0900 	rsb	r9, r9, r0
      prev[1];

    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;
 8002a7c:	eeb0 6a66 	vmov.f32	s12, s13
    prev[1] = motors[1].Hall_Encoder->count;

    Hall_update(hall_encoder);
    Hall_update(hall_encoder + 1);

    motors[0].speedRaw[count % SPEED_COUNT] = motors[0].Hall_Encoder->count -
 8002a80:	f8ae a01c 	strh.w	sl, [lr, #28]
      prev[0];

    motors[1].speedRaw[count % SPEED_COUNT] = motors[1].Hall_Encoder->count -
 8002a84:	f8ae 904c 	strh.w	r9, [lr, #76]	; 0x4c

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
      temp[0] += (float)motors[0].speedRaw[i];
 8002a88:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002a8c:	ee07 2a10 	vmov	s14, r2
      temp[1] += (float)motors[1].speedRaw[i];
 8002a90:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8002a94:	ee07 2a90 	vmov	s15, r2

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
      temp[0] += (float)motors[0].speedRaw[i];
 8002a98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      temp[1] += (float)motors[1].speedRaw[i];
 8002a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
 8002aa0:	42a3      	cmp	r3, r4
      temp[0] += (float)motors[0].speedRaw[i];
 8002aa2:	ee76 6a87 	vadd.f32	s13, s13, s14
      temp[1] += (float)motors[1].speedRaw[i];
 8002aa6:	ee36 6a27 	vadd.f32	s12, s12, s15
    uint8_t i;

    temp[0] = 0.0f;
    temp[1] = 0.0f;

    for (i = 0; i < SPEED_COUNT; i++) {
 8002aaa:	d1ed      	bne.n	8002a88 <Hall_thread.lto_priv.94+0x78>
      temp[0] += (float)motors[0].speedRaw[i];
      temp[1] += (float)motors[1].speedRaw[i];
    }

    temp[0] /= (float)SPEED_COUNT;
 8002aac:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 8002ab0:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  uint32_t count,tick = chVTGetSystemTimeX();

  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);
 8002ab6:	36c8      	adds	r6, #200	; 0xc8

    if(tick>chVTGetSystemTimeX())
 8002ab8:	42b3      	cmp	r3, r6
    temp[1] /= (float)SPEED_COUNT;

    motors[0].speed = temp[0];
    motors[1].speed = temp[1];

    count++;
 8002aba:	f108 0801 	add.w	r8, r8, #1
      temp[0] += (float)motors[0].speedRaw[i];
      temp[1] += (float)motors[1].speedRaw[i];
    }

    temp[0] /= (float)SPEED_COUNT;
    temp[1] /= (float)SPEED_COUNT;
 8002abe:	ee86 6a27 	vdiv.f32	s12, s12, s15

    motors[0].speed = temp[0];
 8002ac2:	edc5 6a06 	vstr	s13, [r5, #24]
    motors[1].speed = temp[1];
 8002ac6:	ed85 6a12 	vstr	s12, [r5, #72]	; 0x48
  float temp[NUM_OF_MOTOR];
  while(true)
  {
    tick+=US2ST(HALL_COUNT);

    if(tick>chVTGetSystemTimeX())
 8002aca:	d2b5      	bcs.n	8002a38 <Hall_thread.lto_priv.94+0x28>
      chThdSleepUntil(tick);
 8002acc:	4630      	mov	r0, r6
 8002ace:	f001 ff07 	bl	80048e0 <chThdSleepUntil>
 8002ad2:	e7b2      	b.n	8002a3a <Hall_thread.lto_priv.94+0x2a>
 8002ad4:	20000b30 	.word	0x20000b30
 8002ad8:	080077b0 	.word	0x080077b0
 8002adc:	20000800 	.word	0x20000800
 8002ae0:	20000828 	.word	0x20000828
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	20000810 	.word	0x20000810
 8002aec:	cccccccd 	.word	0xcccccccd
 8002af0:	00000000 	.word	0x00000000
 8002af4:	20000842 	.word	0x20000842
	...

08002b00 <chThdDequeueNextI.constprop.52>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8002b00:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d010      	beq.n	8002b28 <chThdDequeueNextI.constprop.52+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6002      	str	r2, [r0, #0]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 8002b0a:	f893 1020 	ldrb.w	r1, [r3, #32]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002b0e:	6050      	str	r0, [r2, #4]
 8002b10:	2904      	cmp	r1, #4
 8002b12:	d004      	beq.n	8002b1e <chThdDequeueNextI.constprop.52+0x1e>
 8002b14:	b672      	cpsid	i
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <chThdDequeueNextI.constprop.52+0x2c>)
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <chThdDequeueNextI.constprop.52+0x30>)
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b1c:	e7fe      	b.n	8002b1c <chThdDequeueNextI.constprop.52+0x1c>

  tp->p_u.rdymsg = msg;
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 bd0c 	b.w	8004540 <chSchReadyI>
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000b30 	.word	0x20000b30
 8002b30:	08007750 	.word	0x08007750
	...

08002b40 <sdObjectInit.constprop.47>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8002b44:	4604      	mov	r4, r0
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <sdObjectInit.constprop.47+0x5c>)
 8002b48:	f844 3b04 	str.w	r3, [r4], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002b4c:	f100 0254 	add.w	r2, r0, #84	; 0x54
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8002b50:	f100 0364 	add.w	r3, r0, #100	; 0x64
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8002b54:	2700      	movs	r7, #0
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
 8002b56:	f100 060c 	add.w	r6, r0, #12
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
 8002b5a:	f100 0530 	add.w	r5, r0, #48	; 0x30
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002b5e:	f04f 0801 	mov.w	r8, #1
  oqp->q_counter = size;
 8002b62:	f04f 0c10 	mov.w	ip, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002b66:	f100 0e74 	add.w	lr, r0, #116	; 0x74
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8002b6a:	6147      	str	r7, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002b6c:	6044      	str	r4, [r0, #4]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8002b6e:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8002b70:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 8002b72:	6500      	str	r0, [r0, #80]	; 0x50
 8002b74:	f880 8008 	strb.w	r8, [r0, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8002b78:	6287      	str	r7, [r0, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8002b7a:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002b7e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002b82:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8002b84:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8002b86:	6202      	str	r2, [r0, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002b88:	60c6      	str	r6, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002b8a:	6106      	str	r6, [r0, #16]
  iqp->q_top     = bp + size;
 8002b8c:	61c3      	str	r3, [r0, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8002b8e:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8002b90:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8002b92:	6443      	str	r3, [r0, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002b94:	6305      	str	r5, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8002b96:	6345      	str	r5, [r0, #52]	; 0x34
 8002b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9c:	08007810 	.word	0x08007810

08002ba0 <pwm_lld_start.constprop.36>:
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8002ba0:	4a44      	ldr	r2, [pc, #272]	; (8002cb4 <pwm_lld_start.constprop.36+0x114>)
 8002ba2:	7813      	ldrb	r3, [r2, #0]
 8002ba4:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8002ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8002baa:	d01a      	beq.n	8002be2 <pwm_lld_start.constprop.36+0x42>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8002bac:	6991      	ldr	r1, [r2, #24]
 8002bae:	6953      	ldr	r3, [r2, #20]
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	6008      	str	r0, [r1, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8002bb4:	6348      	str	r0, [r1, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8002bb6:	6388      	str	r0, [r1, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8002bb8:	63c8      	str	r0, [r1, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8002bba:	6408      	str	r0, [r1, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8002bbc:	6248      	str	r0, [r1, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8002bbe:	6851      	ldr	r1, [r2, #4]
 8002bc0:	4d3c      	ldr	r5, [pc, #240]	; (8002cb4 <pwm_lld_start.constprop.36+0x114>)
 8002bc2:	680a      	ldr	r2, [r1, #0]
 8002bc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bc8:	1e44      	subs	r4, r0, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 8002bca:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8002bce:	d203      	bcs.n	8002bd8 <pwm_lld_start.constprop.36+0x38>
 8002bd0:	fb02 f200 	mul.w	r2, r2, r0
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d02b      	beq.n	8002c30 <pwm_lld_start.constprop.36+0x90>
 8002bd8:	b672      	cpsid	i
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <pwm_lld_start.constprop.36+0x118>)
 8002bdc:	4a37      	ldr	r2, [pc, #220]	; (8002cbc <pwm_lld_start.constprop.36+0x11c>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8002be0:	e7fe      	b.n	8002be0 <pwm_lld_start.constprop.36+0x40>
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8002be2:	4837      	ldr	r0, [pc, #220]	; (8002cc0 <pwm_lld_start.constprop.36+0x120>)
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <pwm_lld_start.constprop.36+0x124>)
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8002be6:	6c44      	ldr	r4, [r0, #68]	; 0x44
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002be8:	6995      	ldr	r5, [r2, #24]
      nvicEnableVector(STM32_TIM8_CC_NUMBER, STM32_PWM_TIM8_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM8CLK)
      pwmp->clock = STM32_TIM8CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8002bea:	6153      	str	r3, [r2, #20]
    }
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
 8002bec:	f044 0402 	orr.w	r4, r4, #2
 8002bf0:	6444      	str	r4, [r0, #68]	; 0x44
      rccResetTIM8();
 8002bf2:	6a44      	ldr	r4, [r0, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002bf4:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <pwm_lld_start.constprop.36+0x128>)
 8002bf6:	f04f 0e70 	mov.w	lr, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002bfa:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8002bfe:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002c02:	f646 0668 	movw	r6, #26728	; 0x6868
#endif

#if STM32_PWM_USE_TIM8
    if (&PWMD8 == pwmp) {
      rccEnableTIM8(FALSE);
      rccResetTIM8();
 8002c06:	f04f 0800 	mov.w	r8, #0
 8002c0a:	f044 0402 	orr.w	r4, r4, #2
 8002c0e:	6244      	str	r4, [r0, #36]	; 0x24
 8002c10:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c14:	f881 e32c 	strb.w	lr, [r1, #812]	; 0x32c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c18:	f8c1 c184 	str.w	ip, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c1c:	f8c1 c004 	str.w	ip, [r1, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c20:	f881 e32e 	strb.w	lr, [r1, #814]	; 0x32e
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c24:	f8c1 7184 	str.w	r7, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c28:	604f      	str	r7, [r1, #4]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002c2a:	61ae      	str	r6, [r5, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8002c2c:	61ee      	str	r6, [r5, #28]
 8002c2e:	e7c6      	b.n	8002bbe <pwm_lld_start.constprop.36+0x1e>
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002c30:	68cb      	ldr	r3, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8002c32:	68a8      	ldr	r0, [r5, #8]
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8002c34:	69aa      	ldr	r2, [r5, #24]
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002c36:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8002c38:	6294      	str	r4, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002c3a:	f003 030f 	and.w	r3, r3, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8002c3e:	3801      	subs	r0, #1
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002c40:	2b01      	cmp	r3, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8002c42:	62d0      	str	r0, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002c44:	6055      	str	r5, [r2, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002c46:	d003      	beq.n	8002c50 <pwm_lld_start.constprop.36+0xb0>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2303      	moveq	r3, #3
 8002c4e:	2300      	movne	r3, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8002c50:	6948      	ldr	r0, [r1, #20]
 8002c52:	f000 000f 	and.w	r0, r0, #15
 8002c56:	2801      	cmp	r0, #1
 8002c58:	d003      	beq.n	8002c62 <pwm_lld_start.constprop.36+0xc2>
 8002c5a:	2802      	cmp	r0, #2
 8002c5c:	d103      	bne.n	8002c66 <pwm_lld_start.constprop.36+0xc6>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8002c62:	f043 0310 	orr.w	r3, r3, #16
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8002c66:	69c8      	ldr	r0, [r1, #28]
 8002c68:	f000 000f 	and.w	r0, r0, #15
 8002c6c:	2801      	cmp	r0, #1
 8002c6e:	d003      	beq.n	8002c78 <pwm_lld_start.constprop.36+0xd8>
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d103      	bne.n	8002c7c <pwm_lld_start.constprop.36+0xdc>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8002c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8002c7c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002c7e:	f000 000f 	and.w	r0, r0, #15
 8002c82:	2801      	cmp	r0, #1
 8002c84:	d003      	beq.n	8002c8e <pwm_lld_start.constprop.36+0xee>
 8002c86:	2802      	cmp	r0, #2
 8002c88:	d103      	bne.n	8002c92 <pwm_lld_start.constprop.36+0xf2>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 8002c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8002c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002c92:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8002c94:	6213      	str	r3, [r2, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002c96:	2501      	movs	r5, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002c98:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002c9c:	2400      	movs	r4, #0
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002c9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002ca2:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002ca4:	6155      	str	r5, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002ca6:	6114      	str	r4, [r2, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002ca8:	60d3      	str	r3, [r2, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002caa:	6450      	str	r0, [r2, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002cac:	6011      	str	r1, [r2, #0]
 8002cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20001230 	.word	0x20001230
 8002cb8:	20000b30 	.word	0x20000b30
 8002cbc:	08007830 	.word	0x08007830
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	0a037a00 	.word	0x0a037a00
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <_strtok.constprop.19>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	460d      	mov	r5, r1
  char *token;
  if (str)
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	b190      	cbz	r0, 8002cfe <_strtok.constprop.19+0x2e>
    *saveptr = str;
 8002cd8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	490b      	ldr	r1, [pc, #44]	; (8002d0c <_strtok.constprop.19+0x3c>)
 8002cde:	f004 f947 	bl	8006f70 <strspn>
 8002ce2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4909      	ldr	r1, [pc, #36]	; (8002d0c <_strtok.constprop.19+0x3c>)
 8002ce8:	f004 f91a 	bl	8006f20 <strpbrk>
  if (*saveptr)
 8002cec:	b160      	cbz	r0, 8002d08 <_strtok.constprop.19+0x38>
    *(*saveptr)++ = '\0';
 8002cee:	1c42      	adds	r2, r0, #1
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	602a      	str	r2, [r5, #0]
 8002cf4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8002cf6:	7823      	ldrb	r3, [r4, #0]
 8002cf8:	b123      	cbz	r3, 8002d04 <_strtok.constprop.19+0x34>
 8002cfa:	4620      	mov	r0, r4
}
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8002cfe:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8002d00:	2c00      	cmp	r4, #0
 8002d02:	d1ea      	bne.n	8002cda <_strtok.constprop.19+0xa>
    return NULL;
 8002d04:	2000      	movs	r0, #0
 8002d06:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8002d08:	6028      	str	r0, [r5, #0]
 8002d0a:	e7f4      	b.n	8002cf6 <_strtok.constprop.19+0x26>
 8002d0c:	080077bc 	.word	0x080077bc

08002d10 <long_to_string_with_divisor.constprop.18>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8002d10:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8002d12:	f100 070b 	add.w	r7, r0, #11
 8002d16:	463c      	mov	r4, r7
 8002d18:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8002d1a:	fbb1 f6f2 	udiv	r6, r1, r2
 8002d1e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8002d22:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8002d26:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002d28:	bfc8      	it	gt
 8002d2a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8002d34:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8002d38:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d1ed      	bne.n	8002d1a <long_to_string_with_divisor.constprop.18+0xa>

  i = (int)(p + MAX_FILLER - q);
 8002d3e:	1b3a      	subs	r2, r7, r4
 8002d40:	4402      	add	r2, r0
 8002d42:	e001      	b.n	8002d48 <long_to_string_with_divisor.constprop.18+0x38>
 8002d44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8002d48:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002d4c:	4290      	cmp	r0, r2
 8002d4e:	d1f9      	bne.n	8002d44 <long_to_string_with_divisor.constprop.18+0x34>

  return p;
}
 8002d50:	bcf0      	pop	{r4, r5, r6, r7}
 8002d52:	4770      	bx	lr
	...

08002d60 <tft_printf.constprop.13>:
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8002d60:	b40c      	push	{r2, r3}
 8002d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d66:	b0c6      	sub	sp, #280	; 0x118
 8002d68:	aa4e      	add	r2, sp, #312	; 0x138
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8002d6a:	ac06      	add	r4, sp, #24
 8002d6c:	f852 3b04 	ldr.w	r3, [r2], #4
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8002d70:	4f36      	ldr	r7, [pc, #216]	; (8002e4c <tft_printf.constprop.13+0xec>)
	va_list arglist;

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
 8002d72:	9200      	str	r2, [sp, #0]
  msp->buffer = buffer;
  msp->size   = size;
  msp->eos    = eos;
 8002d74:	2600      	movs	r6, #0
  * @param  x: starting x-coordinate
  * @param  y: starting y-coordinate
  * @param  pstr: string to be printed
  * @retval None
  */
void tft_printf(uint8_t x, uint8_t y, const char * pstr, ...)
 8002d76:	460d      	mov	r5, r1

  MemoryStream ms;
  msObjectInit(&ms, buf, 255, 0);
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
 8002d78:	a801      	add	r0, sp, #4
 8002d7a:	4619      	mov	r1, r3
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
  msp->size   = size;
 8002d7c:	23ff      	movs	r3, #255	; 0xff
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 8002d7e:	9701      	str	r7, [sp, #4]
  msp->buffer = buffer;
  msp->size   = size;
 8002d80:	9303      	str	r3, [sp, #12]
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
 8002d82:	9402      	str	r4, [sp, #8]
  msp->size   = size;
  msp->eos    = eos;
 8002d84:	9604      	str	r6, [sp, #16]
  msp->offset = 0;
 8002d86:	9605      	str	r6, [sp, #20]
 8002d88:	f000 fc22 	bl	80035d0 <chvprintf>
  va_end(arglist);

  if (ms.eos < 255)
 8002d8c:	9b04      	ldr	r3, [sp, #16]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8002d8e:	4930      	ldr	r1, [pc, #192]	; (8002e50 <tft_printf.constprop.13+0xf0>)
 8002d90:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <tft_printf.constprop.13+0xf4>)
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8002d92:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8002e64 <tft_printf.constprop.13+0x104>
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8002d96:	4f30      	ldr	r7, [pc, #192]	; (8002e58 <tft_printf.constprop.13+0xf8>)
 8002d98:	f8b1 9000 	ldrh.w	r9, [r1]
 8002d9c:	f8b2 8000 	ldrh.w	r8, [r2]
  
  va_start(arglist, pstr);
  chvprintf((BaseSequentialStream *)(void *)&ms, pstr, arglist);
  va_end(arglist);

  if (ms.eos < 255)
 8002da0:	2bfe      	cmp	r3, #254	; 0xfe
      buf[ms.eos] = 0;
 8002da2:	bf98      	it	ls
 8002da4:	54e6      	strbls	r6, [r4, r3]
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <tft_printf.constprop.13+0xfc>)
 8002da8:	4e2d      	ldr	r6, [pc, #180]	; (8002e60 <tft_printf.constprop.13+0x100>)
 8002daa:	f8b3 c000 	ldrh.w	ip, [r3]
 8002dae:	4622      	mov	r2, r4
 8002db0:	2105      	movs	r1, #5
 8002db2:	2400      	movs	r4, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8002db4:	7813      	ldrb	r3, [r2, #0]
 8002db6:	b33b      	cbz	r3, 8002e08 <tft_printf.constprop.13+0xa8>
		if (*fp == '[' && *(fp - 1) != '\\') {
 8002db8:	2b5b      	cmp	r3, #91	; 0x5b
 8002dba:	d02c      	beq.n	8002e16 <tft_printf.constprop.13+0xb6>
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8002dbc:	2b5d      	cmp	r3, #93	; 0x5d
 8002dbe:	d031      	beq.n	8002e24 <tft_printf.constprop.13+0xc4>
			is_special = 0;
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
 8002dc0:	2b0d      	cmp	r3, #13
 8002dc2:	d026      	beq.n	8002e12 <tft_printf.constprop.13+0xb2>
 8002dc4:	2b0a      	cmp	r3, #10
 8002dc6:	d024      	beq.n	8002e12 <tft_printf.constprop.13+0xb2>
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
 8002dc8:	2914      	cmp	r1, #20
 8002dca:	d822      	bhi.n	8002e12 <tft_printf.constprop.13+0xb2>
 8002dcc:	2d0a      	cmp	r5, #10
 8002dce:	d820      	bhi.n	8002e12 <tft_printf.constprop.13+0xb2>
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8002dd0:	2b5c      	cmp	r3, #92	; 0x5c
 8002dd2:	d032      	beq.n	8002e3a <tft_printf.constprop.13+0xda>
        fp++;
      }
			text[x][y] = *fp++;
 8002dd4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002dd8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8002ddc:	2c00      	cmp	r4, #0
 8002dde:	bf14      	ite	ne
 8002de0:	46ca      	movne	sl, r9
 8002de2:	46c2      	moveq	sl, r8
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8002de4:	2914      	cmp	r1, #20
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
 8002de6:	f102 0201 	add.w	r2, r2, #1
 8002dea:	f80e 3000 	strb.w	r3, [lr, r0]
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
 8002dee:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
        fp++;
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
 8002df2:	f827 a010 	strh.w	sl, [r7, r0, lsl #1]
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
 8002df6:	d01c      	beq.n	8002e32 <tft_printf.constprop.13+0xd2>
				x = 0;
				y++;
			} else {
				x++;
 8002df8:	3101      	adds	r1, #1
 8002dfa:	b2c9      	uxtb	r1, r1
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8002dfc:	7813      	ldrb	r3, [r2, #0]
				y++;
			} else {
				x++;
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
 8002dfe:	2d0a      	cmp	r5, #10
 8002e00:	bf28      	it	cs
 8002e02:	2500      	movcs	r5, #0
  if (ms.eos < 255)
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1d7      	bne.n	8002db8 <tft_printf.constprop.13+0x58>
			}
			if (y >= CHAR_MAX_Y)
				y = 0;
		}
	}
}
 8002e08:	b046      	add	sp, #280	; 0x118
 8002e0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0e:	b002      	add	sp, #8
 8002e10:	4770      	bx	lr
			fp++;
		} else if (*fp == '\r' || *fp == '\n') {
			fp++;
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
 8002e12:	3201      	adds	r2, #1
 8002e14:	e7ce      	b.n	8002db4 <tft_printf.constprop.13+0x54>
      buf[ms.eos] = 0;

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
 8002e16:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8002e1a:	285c      	cmp	r0, #92	; 0x5c
 8002e1c:	d0d4      	beq.n	8002dc8 <tft_printf.constprop.13+0x68>
			is_special = 1;
			fp++;
 8002e1e:	3201      	adds	r2, #1

  fp = buf;

	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
 8002e20:	2401      	movs	r4, #1
 8002e22:	e7c7      	b.n	8002db4 <tft_printf.constprop.13+0x54>
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
 8002e24:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8002e28:	285c      	cmp	r0, #92	; 0x5c
 8002e2a:	d0cd      	beq.n	8002dc8 <tft_printf.constprop.13+0x68>
			is_special = 0;
			fp++;
 8002e2c:	3201      	adds	r2, #1
	while (*fp)	{
		if (*fp == '[' && *(fp - 1) != '\\') {
			is_special = 1;
			fp++;
		} else if (*fp == ']' && *(fp - 1) != '\\') {
			is_special = 0;
 8002e2e:	2400      	movs	r4, #0
 8002e30:	e7c0      	b.n	8002db4 <tft_printf.constprop.13+0x54>
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
				y++;
 8002e32:	3501      	adds	r5, #1
 8002e34:	b2ed      	uxtb	r5, r5
      }
			text[x][y] = *fp++;
			text_color[x][y] = is_special ? curr_text_color_sp : curr_text_color;
			bg_color[x][y] = curr_bg_color;
			if (x >= CHAR_MAX_X) {
				x = 0;
 8002e36:	2100      	movs	r1, #0
 8002e38:	e7e0      	b.n	8002dfc <tft_printf.constprop.13+0x9c>
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8002e3a:	7850      	ldrb	r0, [r2, #1]
 8002e3c:	285b      	cmp	r0, #91	; 0x5b
 8002e3e:	d001      	beq.n	8002e44 <tft_printf.constprop.13+0xe4>
 8002e40:	285d      	cmp	r0, #93	; 0x5d
 8002e42:	d1c7      	bne.n	8002dd4 <tft_printf.constprop.13+0x74>
        fp++;
 8002e44:	3201      	adds	r2, #1
		} else {
			if (x > CHAR_MAX_X || y > CHAR_MAX_Y) {
				fp++;
				continue;
			}
      if (*fp == '\\' && (*(fp+1) == '[' || *(fp+1) == ']')) {
 8002e46:	4603      	mov	r3, r0
 8002e48:	e7c4      	b.n	8002dd4 <tft_printf.constprop.13+0x74>
 8002e4a:	bf00      	nop
 8002e4c:	08007700 	.word	0x08007700
 8002e50:	200012e4 	.word	0x200012e4
 8002e54:	20000b2c 	.word	0x20000b2c
 8002e58:	20001320 	.word	0x20001320
 8002e5c:	20001224 	.word	0x20001224
 8002e60:	20000894 	.word	0x20000894
 8002e64:	20000a54 	.word	0x20000a54
	...

08002e70 <flashRead.part.6.lto_priv.85>:
    }
    /* Lock flash again */
    flashLock();
}

void flashRead(flashaddr_t address, char* buffer, size_t size)
 8002e70:	b410      	push	{r4}
{
    if(flashUnlock() == CH_FAILED)
        return;

    flashWaitWhileBusy();
 8002e72:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <flashRead.part.6.lto_priv.85+0x34>)
 8002e74:	68e3      	ldr	r3, [r4, #12]
 8002e76:	03db      	lsls	r3, r3, #15
 8002e78:	d4fc      	bmi.n	8002e74 <flashRead.part.6.lto_priv.85+0x4>

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
 8002e7a:	2a03      	cmp	r2, #3
 8002e7c:	d90a      	bls.n	8002e94 <flashRead.part.6.lto_priv.85+0x24>
 8002e7e:	3a04      	subs	r2, #4
 8002e80:	f022 0203 	bic.w	r2, r2, #3
 8002e84:	1d03      	adds	r3, r0, #4
 8002e86:	441a      	add	r2, r3
    return CH_SUCCESS;
}

flashdata_t flashReadData(flashaddr_t address)
{
  return *(flashdata_t*)address;
 8002e88:	f850 3b04 	ldr.w	r3, [r0], #4

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
    {
        *flashbuffer = flashReadData(address);
 8002e8c:	f841 3b04 	str.w	r3, [r1], #4

    flashWaitWhileBusy();

    flashdata_t* flashbuffer = (flashdata_t*)buffer;

    while (size >= sizeof(flashdata_t))
 8002e90:	4290      	cmp	r0, r2
 8002e92:	d1f9      	bne.n	8002e88 <flashRead.part.6.lto_priv.85+0x18>
        address += sizeof(flashdata_t);
        flashbuffer++;
        size -= sizeof(flashdata_t);
    }

    flashLock();
 8002e94:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <flashRead.part.6.lto_priv.85+0x34>)
}
 8002e96:	f85d 4b04 	ldr.w	r4, [sp], #4
        address += sizeof(flashdata_t);
        flashbuffer++;
        size -= sizeof(flashdata_t);
    }

    flashLock();
 8002e9a:	6913      	ldr	r3, [r2, #16]
 8002e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea0:	6113      	str	r3, [r2, #16]
}
 8002ea2:	4770      	bx	lr
 8002ea4:	40023c00 	.word	0x40023c00
	...

08002eb0 <flashUnlock.part.1.lto_priv.86>:
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <flashUnlock.part.1.lto_priv.86+0x14>)
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <flashUnlock.part.1.lto_priv.86+0x18>)
    FLASH->KEYR = 0xCDEF89AB;
 8002eb4:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <flashUnlock.part.1.lto_priv.86+0x1c>)
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
        return CH_SUCCESS;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 8002eb6:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8002eb8:	605a      	str	r2, [r3, #4]

    /* Check if unlock was successful */
    if (FLASH->CR & FLASH_CR_LOCK)
 8002eba:	6918      	ldr	r0, [r3, #16]
        return CH_FAILED;
    return CH_SUCCESS;
}
 8002ebc:	43c0      	mvns	r0, r0
 8002ebe:	0fc0      	lsrs	r0, r0, #31
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023c00 	.word	0x40023c00
 8002ec8:	45670123 	.word	0x45670123
 8002ecc:	cdef89ab 	.word	0xcdef89ab

08002ed0 <chMtxUnlock.constprop.51>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  thread_t *ctp = currp;
 8002ed4:	4c35      	ldr	r4, [pc, #212]	; (8002fac <chMtxUnlock.constprop.51+0xdc>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8002edc:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8002ee0:	f001 f9b6 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002ee4:	f001 fc3c 	bl	8004760 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->p_mtxlist != NULL, "owned mutexes list empty");
 8002ee8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002eec:	b133      	cbz	r3, 8002efc <chMtxUnlock.constprop.51+0x2c>
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp, "ownership failure");
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4590      	cmp	r8, r2
 8002ef2:	d007      	beq.n	8002f04 <chMtxUnlock.constprop.51+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef4:	b672      	cpsid	i
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <chMtxUnlock.constprop.51+0xe0>)
 8002ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002efa:	e7fe      	b.n	8002efa <chMtxUnlock.constprop.51+0x2a>
 8002efc:	b672      	cpsid	i
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <chMtxUnlock.constprop.51+0xe0>)
 8002f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f02:	e7fe      	b.n	8002f02 <chMtxUnlock.constprop.51+0x32>
  chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->m_cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");
 8002f04:	4d2b      	ldr	r5, [pc, #172]	; (8002fb4 <chMtxUnlock.constprop.51+0xe4>)
 8002f06:	f105 090c 	add.w	r9, r5, #12
 8002f0a:	454b      	cmp	r3, r9
 8002f0c:	d003      	beq.n	8002f16 <chMtxUnlock.constprop.51+0x46>
 8002f0e:	b672      	cpsid	i
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <chMtxUnlock.constprop.51+0xe0>)
 8002f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f14:	e7fe      	b.n	8002f14 <chMtxUnlock.constprop.51+0x44>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8002f16:	69ae      	ldr	r6, [r5, #24]
 8002f18:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8002f1c:	f001 f9e8 	bl	80042f0 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8002f20:	68ef      	ldr	r7, [r5, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002f22:	454f      	cmp	r7, r9
 8002f24:	d03a      	beq.n	8002f9c <chMtxUnlock.constprop.51+0xcc>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002f26:	f8d8 a040 	ldr.w	sl, [r8, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002f2a:	b15e      	cbz	r6, 8002f44 <chMtxUnlock.constprop.51+0x74>
 8002f2c:	f001 f9e0 	bl	80042f0 <chDbgCheckClassS>
 8002f30:	6833      	ldr	r3, [r6, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8002f32:	429e      	cmp	r6, r3
 8002f34:	d003      	beq.n	8002f3e <chMtxUnlock.constprop.51+0x6e>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	459a      	cmp	sl, r3
 8002f3a:	bf38      	it	cc
 8002f3c:	469a      	movcc	sl, r3
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8002f3e:	68f6      	ldr	r6, [r6, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	d1f3      	bne.n	8002f2c <chMtxUnlock.constprop.51+0x5c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8002f44:	683b      	ldr	r3, [r7, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8002f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8002f48:	f8c8 a008 	str.w	sl, [r8, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	60eb      	str	r3, [r5, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002f50:	f8c3 9004 	str.w	r9, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8002f54:	61aa      	str	r2, [r5, #24]
      tp->p_mtxlist = mp;
 8002f56:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8002f5a:	616f      	str	r7, [r5, #20]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8002f5c:	f001 faf0 	bl	8004540 <chSchReadyI>
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();
 8002f60:	f001 f9c6 	bl	80042f0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8002f64:	f001 fa0c 	bl	8004380 <chDbgCheckClassI>

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8002f68:	69a2      	ldr	r2, [r4, #24]
 8002f6a:	6823      	ldr	r3, [r4, #0]

  if (chSchIsRescRequiredI()) {
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d201      	bcs.n	8002f78 <chMtxUnlock.constprop.51+0xa8>
    chSchDoRescheduleAhead();
 8002f74:	f001 f974 	bl	8004260 <chSchDoRescheduleAhead>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002f78:	f001 fbe2 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002f7c:	f001 f950 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <chMtxUnlock.constprop.51+0xdc>)
 8002f84:	42a2      	cmp	r2, r4
 8002f86:	d004      	beq.n	8002f92 <chMtxUnlock.constprop.51+0xc2>
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	6889      	ldr	r1, [r1, #8]
 8002f8e:	4291      	cmp	r1, r2
 8002f90:	d307      	bcc.n	8002fa2 <chMtxUnlock.constprop.51+0xd2>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002f92:	2300      	movs	r3, #0
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      chSchRescheduleS();
    }
    else {
      mp->m_owner = NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	616b      	str	r3, [r5, #20]
 8002fa0:	e7ea      	b.n	8002f78 <chMtxUnlock.constprop.51+0xa8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa2:	b672      	cpsid	i
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <chMtxUnlock.constprop.51+0xe8>)
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa8:	e7fe      	b.n	8002fa8 <chMtxUnlock.constprop.51+0xd8>
 8002faa:	bf00      	nop
 8002fac:	20000b30 	.word	0x20000b30
 8002fb0:	080077d0 	.word	0x080077d0
 8002fb4:	200012e8 	.word	0x200012e8
 8002fb8:	080076e0 	.word	0x080076e0
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <i2cMasterTransmitTimeout.constprop.39>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8002fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8002fc4:	b158      	cbz	r0, 8002fde <i2cMasterTransmitTimeout.constprop.39+0x1e>
 8002fc6:	b151      	cbz	r1, 8002fde <i2cMasterTransmitTimeout.constprop.39+0x1e>
 8002fc8:	b103      	cbz	r3, 8002fcc <i2cMasterTransmitTimeout.constprop.39+0xc>
 8002fca:	b142      	cbz	r2, 8002fde <i2cMasterTransmitTimeout.constprop.39+0x1e>
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8002fcc:	4c57      	ldr	r4, [pc, #348]	; (800312c <i2cMasterTransmitTimeout.constprop.39+0x16c>)
 8002fce:	7825      	ldrb	r5, [r4, #0]
 8002fd0:	2d02      	cmp	r5, #2
 8002fd2:	d009      	beq.n	8002fe8 <i2cMasterTransmitTimeout.constprop.39+0x28>
 8002fd4:	b672      	cpsid	i
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 8002fd8:	4a56      	ldr	r2, [pc, #344]	; (8003134 <i2cMasterTransmitTimeout.constprop.39+0x174>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fdc:	e7fe      	b.n	8002fdc <i2cMasterTransmitTimeout.constprop.39+0x1c>
 8002fde:	b672      	cpsid	i
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 8002fe2:	4a54      	ldr	r2, [pc, #336]	; (8003134 <i2cMasterTransmitTimeout.constprop.39+0x174>)
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fe6:	e7fe      	b.n	8002fe6 <i2cMasterTransmitTimeout.constprop.39+0x26>
 8002fe8:	4698      	mov	r8, r3
 8002fea:	4606      	mov	r6, r0
 8002fec:	4691      	mov	r9, r2
 8002fee:	468a      	mov	sl, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	4d4e      	ldr	r5, [pc, #312]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8002ff8:	f001 f92a 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002ffc:	f001 fbb0 	bl	8004760 <_dbg_check_lock>

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003000:	0070      	lsls	r0, r6, #1

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8003002:	2303      	movs	r3, #3
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8003004:	2200      	movs	r2, #0
  i2cp->state = I2C_ACTIVE_TX;
 8003006:	7023      	strb	r3, [r4, #0]
 8003008:	8420      	strh	r0, [r4, #32]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800300a:	60a2      	str	r2, [r4, #8]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 800300c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800300e:	f001 fb97 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003012:	f001 f905 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	42ab      	cmp	r3, r5
 800301a:	d004      	beq.n	8003026 <i2cMasterTransmitTimeout.constprop.39+0x66>
 800301c:	69aa      	ldr	r2, [r5, #24]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d356      	bcc.n	80030d4 <i2cMasterTransmitTimeout.constprop.39+0x114>
 8003026:	2300      	movs	r3, #0
 8003028:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800302c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800302e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003030:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003036:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8003038:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8003148 <i2cMasterTransmitTimeout.constprop.39+0x188>
 800303c:	4f3e      	ldr	r7, [pc, #248]	; (8003138 <i2cMasterTransmitTimeout.constprop.39+0x178>)

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800303e:	600a      	str	r2, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8003040:	f8c1 e00c 	str.w	lr, [r1, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8003044:	f8c1 a004 	str.w	sl, [r1, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003048:	6018      	str	r0, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800304a:	f8c3 900c 	str.w	r9, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800304e:	f8c3 8004 	str.w	r8, [r3, #4]
 8003052:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
 8003056:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>
 800305a:	f04f 0820 	mov.w	r8, #32
 800305e:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003062:	f001 f8f5 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003066:	f001 fb7b 	bl	8004760 <_dbg_check_lock>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 800306a:	69b3      	ldr	r3, [r6, #24]
 800306c:	0799      	lsls	r1, r3, #30
 800306e:	d402      	bmi.n	8003076 <i2cMasterTransmitTimeout.constprop.39+0xb6>
 8003070:	6833      	ldr	r3, [r6, #0]
 8003072:	059a      	lsls	r2, r3, #22
 8003074:	d532      	bpl.n	80030dc <i2cMasterTransmitTimeout.constprop.39+0x11c>
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8003078:	ebca 0303 	rsb	r3, sl, r3
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 800307c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003080:	d211      	bcs.n	80030a6 <i2cMasterTransmitTimeout.constprop.39+0xe6>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003082:	f001 fb5d 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003086:	f001 f8cb 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800308a:	682a      	ldr	r2, [r5, #0]
 800308c:	4928      	ldr	r1, [pc, #160]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 800308e:	42aa      	cmp	r2, r5
 8003090:	d005      	beq.n	800309e <i2cMasterTransmitTimeout.constprop.39+0xde>
 8003092:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8003096:	6892      	ldr	r2, [r2, #8]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4293      	cmp	r3, r2
 800309c:	d33d      	bcc.n	800311a <i2cMasterTransmitTimeout.constprop.39+0x15a>
 800309e:	2300      	movs	r3, #0
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	e7db      	b.n	800305e <i2cMasterTransmitTimeout.constprop.39+0x9e>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 80030a6:	2305      	movs	r3, #5
 80030a8:	7023      	strb	r3, [r4, #0]
 80030aa:	f04f 36ff 	mov.w	r6, #4294967295
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80030ae:	f001 fb47 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80030b2:	f001 f8b5 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80030b6:	682a      	ldr	r2, [r5, #0]
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80030ba:	42aa      	cmp	r2, r5
 80030bc:	d004      	beq.n	80030c8 <i2cMasterTransmitTimeout.constprop.39+0x108>
 80030be:	6999      	ldr	r1, [r3, #24]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	6889      	ldr	r1, [r1, #8]
 80030c4:	4291      	cmp	r1, r2
 80030c6:	d32c      	bcc.n	8003122 <i2cMasterTransmitTimeout.constprop.39+0x162>
 80030c8:	2300      	movs	r3, #0
 80030ca:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 80030ce:	4630      	mov	r0, r6
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d4:	b672      	cpsid	i
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <i2cMasterTransmitTimeout.constprop.39+0x17c>)
 80030d8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80030da:	e7fe      	b.n	80030da <i2cMasterTransmitTimeout.constprop.39+0x11a>

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80030dc:	6873      	ldr	r3, [r6, #4]
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 80030de:	69e0      	ldr	r0, [r4, #28]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80030e0:	69aa      	ldr	r2, [r5, #24]
 80030e2:	4913      	ldr	r1, [pc, #76]	; (8003130 <i2cMasterTransmitTimeout.constprop.39+0x170>)
 80030e4:	4f11      	ldr	r7, [pc, #68]	; (800312c <i2cMasterTransmitTimeout.constprop.39+0x16c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6073      	str	r3, [r6, #4]
  dp->CR1 |= I2C_CR1_START;
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6033      	str	r3, [r6, #0]
 80030f4:	b118      	cbz	r0, 80030fe <i2cMasterTransmitTimeout.constprop.39+0x13e>
 80030f6:	b672      	cpsid	i
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <i2cMasterTransmitTimeout.constprop.39+0x180>)
 80030fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030fc:	e7fe      	b.n	80030fc <i2cMasterTransmitTimeout.constprop.39+0x13c>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80030fe:	463b      	mov	r3, r7
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003100:	2003      	movs	r0, #3

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8003102:	f843 2f1c 	str.w	r2, [r3, #28]!
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003106:	210a      	movs	r1, #10
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 8003108:	6253      	str	r3, [r2, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800310a:	f001 f949 	bl	80043a0 <chSchGoSleepTimeoutS>
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	4606      	mov	r6, r0
 8003112:	d0c8      	beq.n	80030a6 <i2cMasterTransmitTimeout.constprop.39+0xe6>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8003114:	2302      	movs	r3, #2
 8003116:	703b      	strb	r3, [r7, #0]
 8003118:	e7c9      	b.n	80030ae <i2cMasterTransmitTimeout.constprop.39+0xee>
 800311a:	b672      	cpsid	i
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <i2cMasterTransmitTimeout.constprop.39+0x17c>)
 800311e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003120:	e7fe      	b.n	8003120 <i2cMasterTransmitTimeout.constprop.39+0x160>
 8003122:	b672      	cpsid	i
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <i2cMasterTransmitTimeout.constprop.39+0x184>)
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c
 8003128:	e7fe      	b.n	8003128 <i2cMasterTransmitTimeout.constprop.39+0x168>
 800312a:	bf00      	nop
 800312c:	200012e8 	.word	0x200012e8
 8003130:	20000b30 	.word	0x20000b30
 8003134:	08007730 	.word	0x08007730
 8003138:	40000c00 	.word	0x40000c00
 800313c:	08007720 	.word	0x08007720
 8003140:	080077e0 	.word	0x080077e0
 8003144:	080076f0 	.word	0x080076f0
 8003148:	20001228 	.word	0x20001228
 800314c:	00000000 	.word	0x00000000

08003150 <pwmStop.constprop.33>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @api
 */
void pwmStop(PWMDriver *pwmp) {
 8003150:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003152:	2320      	movs	r3, #32
 8003154:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003158:	f001 f87a 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800315c:	f001 fb00 	bl	8004760 <_dbg_check_lock>

  osalDbgCheck(pwmp != NULL);

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <pwmStop.constprop.33+0x8c>)
 8003162:	7813      	ldrb	r3, [r2, #0]
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	2901      	cmp	r1, #1
 8003168:	d904      	bls.n	8003174 <pwmStop.constprop.33+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800316a:	b672      	cpsid	i
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <pwmStop.constprop.33+0x90>)
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <pwmStop.constprop.33+0x94>)
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
 8003172:	e7fe      	b.n	8003172 <pwmStop.constprop.33+0x22>
 * @notapi
 */
void pwm_lld_stop(PWMDriver *pwmp) {

  /* If in ready state then disables the PWM clock.*/
  if (pwmp->state == PWM_READY) {
 8003174:	2b02      	cmp	r3, #2
 8003176:	d014      	beq.n	80031a2 <pwmStop.constprop.33+0x52>
                "invalid state");
  pwm_lld_stop(pwmp);
  pwmp->enabled = 0;
  pwmp->state   = PWM_STOP;
 8003178:	2301      	movs	r3, #1

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwm_lld_stop(pwmp);
  pwmp->enabled = 0;
 800317a:	2100      	movs	r1, #0
  pwmp->state   = PWM_STOP;
 800317c:	7013      	strb	r3, [r2, #0]

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwm_lld_stop(pwmp);
  pwmp->enabled = 0;
 800317e:	60d1      	str	r1, [r2, #12]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003180:	f001 fade 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003184:	f001 f84c 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <pwmStop.constprop.33+0x90>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d004      	beq.n	800319a <pwmStop.constprop.33+0x4a>
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	6889      	ldr	r1, [r1, #8]
 8003196:	4291      	cmp	r1, r2
 8003198:	d31c      	bcc.n	80031d4 <pwmStop.constprop.33+0x84>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800319a:	2300      	movs	r3, #0
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
    pwmp->tim->CR1  = 0;                    /* Timer disabled.              */
 80031a2:	6990      	ldr	r0, [r2, #24]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80031a4:	4910      	ldr	r1, [pc, #64]	; (80031e8 <pwmStop.constprop.33+0x98>)
    if (&PWMD8 == pwmp) {
#if !defined(STM32_TIM8_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM8_UP_NUMBER);
      nvicDisableVector(STM32_TIM8_CC_NUMBER);
#endif
      rccDisableTIM8(FALSE);
 80031a6:	4c11      	ldr	r4, [pc, #68]	; (80031ec <pwmStop.constprop.33+0x9c>)
 */
void pwm_lld_stop(PWMDriver *pwmp) {

  /* If in ready state then disables the PWM clock.*/
  if (pwmp->state == PWM_READY) {
    pwmp->tim->CR1  = 0;                    /* Timer disabled.              */
 80031a8:	2300      	movs	r3, #0
 80031aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80031ae:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80031b2:	6003      	str	r3, [r0, #0]
    pwmp->tim->DIER = 0;                    /* All IRQs disabled.           */
 80031b4:	60c3      	str	r3, [r0, #12]
    pwmp->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 80031b6:	6103      	str	r3, [r0, #16]
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
    pwmp->tim->BDTR  = 0;
 80031b8:	6443      	str	r3, [r0, #68]	; 0x44
 80031ba:	f8c1 6084 	str.w	r6, [r1, #132]	; 0x84
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80031be:	f881 332c 	strb.w	r3, [r1, #812]	; 0x32c
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80031c2:	f8c1 5084 	str.w	r5, [r1, #132]	; 0x84
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80031c6:	f881 332e 	strb.w	r3, [r1, #814]	; 0x32e
    if (&PWMD8 == pwmp) {
#if !defined(STM32_TIM8_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM8_UP_NUMBER);
      nvicDisableVector(STM32_TIM8_CC_NUMBER);
#endif
      rccDisableTIM8(FALSE);
 80031ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	6463      	str	r3, [r4, #68]	; 0x44
 80031d2:	e7d1      	b.n	8003178 <pwmStop.constprop.33+0x28>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <pwmStop.constprop.33+0xa0>)
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031da:	e7fe      	b.n	80031da <pwmStop.constprop.33+0x8a>
 80031dc:	20001230 	.word	0x20001230
 80031e0:	20000b30 	.word	0x20000b30
 80031e4:	080076d0 	.word	0x080076d0
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08007800 	.word	0x08007800
	...

08003200 <sdStart.constprop.31>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003200:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheck(sdp != NULL);
 8003202:	2800      	cmp	r0, #0
 8003204:	d055      	beq.n	80032b2 <sdStart.constprop.31+0xb2>
 8003206:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003208:	2320      	movs	r3, #32
 800320a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800320e:	f001 f81f 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003212:	f001 faa5 	bl	8004760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8003216:	7a23      	ldrb	r3, [r4, #8]
 8003218:	1e5a      	subs	r2, r3, #1
 800321a:	2a01      	cmp	r2, #1
 800321c:	d904      	bls.n	8003228 <sdStart.constprop.31+0x28>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800321e:	b672      	cpsid	i
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <sdStart.constprop.31+0xe0>)
 8003222:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <sdStart.constprop.31+0xe4>)
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	e7fe      	b.n	8003226 <sdStart.constprop.31+0x26>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003228:	2b01      	cmp	r3, #1
 800322a:	d02d      	beq.n	8003288 <sdStart.constprop.31+0x88>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800322c:	6f63      	ldr	r3, [r4, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800322e:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <sdStart.constprop.31+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d025      	beq.n	8003280 <sdStart.constprop.31+0x80>
 8003234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003238:	4293      	cmp	r3, r2
 800323a:	d021      	beq.n	8003280 <sdStart.constprop.31+0x80>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800323c:	f241 1217 	movw	r2, #4375	; 0x1117
 8003240:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003242:	f242 102c 	movw	r0, #8492	; 0x212c
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003246:	f244 0240 	movw	r2, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800324a:	2100      	movs	r1, #0
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800324c:	2501      	movs	r5, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800324e:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003250:	615d      	str	r5, [r3, #20]
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003252:	2202      	movs	r2, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003254:	60d8      	str	r0, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8003256:	6019      	str	r1, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8003258:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	7222      	strb	r2, [r4, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800325e:	f001 fa6f 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003262:	f000 ffdd 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <sdStart.constprop.31+0xe0>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d004      	beq.n	8003278 <sdStart.constprop.31+0x78>
 800326e:	6999      	ldr	r1, [r3, #24]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	6889      	ldr	r1, [r1, #8]
 8003274:	4291      	cmp	r1, r2
 8003276:	d321      	bcc.n	80032bc <sdStart.constprop.31+0xbc>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003278:	2300      	movs	r3, #0
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	bd38      	pop	{r3, r4, r5, pc}
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8003280:	f242 222e 	movw	r2, #8750	; 0x222e
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	e7dc      	b.n	8003242 <sdStart.constprop.31+0x42>
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <sdStart.constprop.31+0xec>)
 800328a:	429c      	cmp	r4, r3
 800328c:	d01a      	beq.n	80032c4 <sdStart.constprop.31+0xc4>
      rccEnableUSART3(FALSE);
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <sdStart.constprop.31+0xf0>)
 8003290:	429c      	cmp	r4, r3
 8003292:	d1cb      	bne.n	800322c <sdStart.constprop.31+0x2c>
      rccEnableUART4(FALSE);
 8003294:	4817      	ldr	r0, [pc, #92]	; (80032f4 <sdStart.constprop.31+0xf4>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <sdStart.constprop.31+0xf8>)
 8003298:	6c02      	ldr	r2, [r0, #64]	; 0x40
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800329a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800329e:	25c0      	movs	r5, #192	; 0xc0
 80032a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80032a4:	6402      	str	r2, [r0, #64]	; 0x40
 80032a6:	f883 5334 	strb.w	r5, [r3, #820]	; 0x334
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032aa:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032ae:	6059      	str	r1, [r3, #4]
 80032b0:	e7bc      	b.n	800322c <sdStart.constprop.31+0x2c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b2:	b672      	cpsid	i
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <sdStart.constprop.31+0xe0>)
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <sdStart.constprop.31+0xe4>)
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ba:	e7fe      	b.n	80032ba <sdStart.constprop.31+0xba>
 80032bc:	b672      	cpsid	i
 80032be:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <sdStart.constprop.31+0xfc>)
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032c2:	e7fe      	b.n	80032c2 <sdStart.constprop.31+0xc2>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <sdStart.constprop.31+0xf4>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <sdStart.constprop.31+0xf8>)
 80032c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032ca:	2140      	movs	r1, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032cc:	25c0      	movs	r5, #192	; 0xc0
 80032ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032d2:	6402      	str	r2, [r0, #64]	; 0x40
 80032d4:	f883 5326 	strb.w	r5, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032d8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032dc:	6059      	str	r1, [r3, #4]
 80032de:	e7a5      	b.n	800322c <sdStart.constprop.31+0x2c>
 80032e0:	20000b30 	.word	0x20000b30
 80032e4:	08007790 	.word	0x08007790
 80032e8:	40011000 	.word	0x40011000
 80032ec:	2000126c 	.word	0x2000126c
 80032f0:	200011ac 	.word	0x200011ac
 80032f4:	40023800 	.word	0x40023800
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	08007780 	.word	0x08007780

08003300 <spiSelect.constprop.27>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8003300:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003302:	2320      	movs	r3, #32
 8003304:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003308:	f000 ffa2 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800330c:	f001 fa28 	bl	8004760 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <spiSelect.constprop.27+0x5c>)
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	2a02      	cmp	r2, #2
 8003316:	d004      	beq.n	8003322 <spiSelect.constprop.27+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003318:	b672      	cpsid	i
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <spiSelect.constprop.27+0x60>)
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <spiSelect.constprop.27+0x64>)
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003320:	e7fe      	b.n	8003320 <spiSelect.constprop.27+0x20>
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	8919      	ldrh	r1, [r3, #8]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	2301      	movs	r3, #1
 800332a:	408b      	lsls	r3, r1
 800332c:	b29b      	uxth	r3, r3
 800332e:	8353      	strh	r3, [r2, #26]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003330:	f001 fa06 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003334:	f000 ff74 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <spiSelect.constprop.27+0x60>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d004      	beq.n	800334a <spiSelect.constprop.27+0x4a>
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	6889      	ldr	r1, [r1, #8]
 8003346:	4291      	cmp	r1, r2
 8003348:	d303      	bcc.n	8003352 <spiSelect.constprop.27+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800334a:	2300      	movs	r3, #0
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003352:	b672      	cpsid	i
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <spiSelect.constprop.27+0x68>)
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
 8003358:	e7fe      	b.n	8003358 <spiSelect.constprop.27+0x58>
 800335a:	bf00      	nop
 800335c:	20000a24 	.word	0x20000a24
 8003360:	20000b30 	.word	0x20000b30
 8003364:	080076b0 	.word	0x080076b0
 8003368:	08007710 	.word	0x08007710
 800336c:	00000000 	.word	0x00000000

08003370 <spiUnselect.constprop.25>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8003370:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003372:	2320      	movs	r3, #32
 8003374:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003378:	f000 ff6a 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800337c:	f001 f9f0 	bl	8004760 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <spiUnselect.constprop.25+0x5c>)
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	2a02      	cmp	r2, #2
 8003386:	d004      	beq.n	8003392 <spiUnselect.constprop.25+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <spiUnselect.constprop.25+0x60>)
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <spiUnselect.constprop.25+0x64>)
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003390:	e7fe      	b.n	8003390 <spiUnselect.constprop.25+0x20>
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	8919      	ldrh	r1, [r3, #8]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	2301      	movs	r3, #1
 800339a:	408b      	lsls	r3, r1
 800339c:	b29b      	uxth	r3, r3
 800339e:	8313      	strh	r3, [r2, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80033a0:	f001 f9ce 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80033a4:	f000 ff3c 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <spiUnselect.constprop.25+0x60>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d004      	beq.n	80033ba <spiUnselect.constprop.25+0x4a>
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	6889      	ldr	r1, [r1, #8]
 80033b6:	4291      	cmp	r1, r2
 80033b8:	d303      	bcc.n	80033c2 <spiUnselect.constprop.25+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80033ba:	2300      	movs	r3, #0
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c2:	b672      	cpsid	i
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <spiUnselect.constprop.25+0x68>)
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033c8:	e7fe      	b.n	80033c8 <spiUnselect.constprop.25+0x58>
 80033ca:	bf00      	nop
 80033cc:	20000a24 	.word	0x20000a24
 80033d0:	20000b30 	.word	0x20000b30
 80033d4:	080076c0 	.word	0x080076c0
 80033d8:	08007710 	.word	0x08007710
 80033dc:	00000000 	.word	0x00000000

080033e0 <spiSend.constprop.23>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 80033e2:	b1c0      	cbz	r0, 8003416 <spiSend.constprop.23+0x36>
 80033e4:	4606      	mov	r6, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80033e6:	2320      	movs	r3, #32
 80033e8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80033ec:	f000 ff30 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80033f0:	f001 f9b6 	bl	8004760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <spiSend.constprop.23+0xb8>)
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	2a02      	cmp	r2, #2
 80033fa:	d004      	beq.n	8003406 <spiSend.constprop.23+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <spiSend.constprop.23+0xbc>)
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <spiSend.constprop.23+0xc0>)
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
 8003404:	e7fe      	b.n	8003404 <spiSend.constprop.23+0x24>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	b14a      	cbz	r2, 8003420 <spiSend.constprop.23+0x40>
 800340c:	b672      	cpsid	i
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <spiSend.constprop.23+0xbc>)
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <spiSend.constprop.23+0xc0>)
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
 8003414:	e7fe      	b.n	8003414 <spiSend.constprop.23+0x34>
 8003416:	b672      	cpsid	i
 8003418:	4b20      	ldr	r3, [pc, #128]	; (800349c <spiSend.constprop.23+0xbc>)
 800341a:	4a21      	ldr	r2, [pc, #132]	; (80034a0 <spiSend.constprop.23+0xc0>)
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
 800341e:	e7fe      	b.n	800341e <spiSend.constprop.23+0x3e>
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8003420:	6a19      	ldr	r1, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8003422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8003424:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003426:	6adc      	ldr	r4, [r3, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8003428:	6812      	ldr	r2, [r2, #0]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800342a:	481e      	ldr	r0, [pc, #120]	; (80034a4 <spiSend.constprop.23+0xc4>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800342c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800342e:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8003430:	2501      	movs	r5, #1
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003432:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  spiStartSendI(spip, n, txbuf);
 8003436:	2003      	movs	r0, #3
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8003438:	604d      	str	r5, [r1, #4]
 800343a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800343c:	600f      	str	r7, [r1, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800343e:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8003440:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003442:	6014      	str	r4, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8003444:	680d      	ldr	r5, [r1, #0]
 8003446:	4c15      	ldr	r4, [pc, #84]	; (800349c <spiSend.constprop.23+0xbc>)
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8003448:	689f      	ldr	r7, [r3, #8]
 800344a:	69a6      	ldr	r6, [r4, #24]
 800344c:	f045 0501 	orr.w	r5, r5, #1
 8003450:	600d      	str	r5, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	f041 0101 	orr.w	r1, r1, #1
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	b11f      	cbz	r7, 8003464 <spiSend.constprop.23+0x84>
 800345c:	b672      	cpsid	i
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <spiSend.constprop.23+0xc8>)
 8003460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003462:	e7fe      	b.n	8003462 <spiSend.constprop.23+0x82>

  *trp = tp;
 8003464:	f843 6f08 	str.w	r6, [r3, #8]!
  tp->p_u.wttrp = trp;
 8003468:	6273      	str	r3, [r6, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800346a:	f000 ff51 	bl	8004310 <chSchGoSleepS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800346e:	f001 f967 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003472:	f000 fed5 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	42a3      	cmp	r3, r4
 800347a:	d004      	beq.n	8003486 <spiSend.constprop.23+0xa6>
 800347c:	69a2      	ldr	r2, [r4, #24]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d303      	bcc.n	800348e <spiSend.constprop.23+0xae>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003486:	2300      	movs	r3, #0
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800348e:	b672      	cpsid	i
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <spiSend.constprop.23+0xcc>)
 8003492:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003494:	e7fe      	b.n	8003494 <spiSend.constprop.23+0xb4>
 8003496:	bf00      	nop
 8003498:	20000a24 	.word	0x20000a24
 800349c:	20000b30 	.word	0x20000b30
 80034a0:	080077c0 	.word	0x080077c0
 80034a4:	2000122e 	.word	0x2000122e
 80034a8:	08007770 	.word	0x08007770
 80034ac:	08007710 	.word	0x08007710

080034b0 <get.lto_priv.76>:

static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 80034b0:	6903      	ldr	r3, [r0, #16]
 80034b2:	68c1      	ldr	r1, [r0, #12]
 80034b4:	4299      	cmp	r1, r3
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}

static msg_t get(void *ip) {
 80034b6:	4602      	mov	r2, r0
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 80034b8:	d004      	beq.n	80034c4 <get.lto_priv.76+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 80034ba:	6841      	ldr	r1, [r0, #4]
 80034bc:	5cc8      	ldrb	r0, [r1, r3]
  msp->offset += 1;
 80034be:	3301      	adds	r3, #1
 80034c0:	6113      	str	r3, [r2, #16]
 80034c2:	4770      	bx	lr
static msg_t get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
    return MSG_RESET;
 80034c4:	f06f 0001 	mvn.w	r0, #1
  b = *(msp->buffer + msp->offset);
  msp->offset += 1;
  return b;
}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	0000      	movs	r0, r0
	...

080034d0 <put.lto_priv.74>:
}

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 80034d0:	68c3      	ldr	r3, [r0, #12]
 80034d2:	6882      	ldr	r2, [r0, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d006      	beq.n	80034e6 <put.lto_priv.74+0x16>
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 80034d8:	6842      	ldr	r2, [r0, #4]
 80034da:	54d1      	strb	r1, [r2, r3]
  msp->eos += 1;
 80034dc:	68c3      	ldr	r3, [r0, #12]
 80034de:	3301      	adds	r3, #1
 80034e0:	60c3      	str	r3, [r0, #12]
  return MSG_OK;
 80034e2:	2000      	movs	r0, #0
 80034e4:	4770      	bx	lr

static msg_t put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
    return MSG_RESET;
 80034e6:	f06f 0001 	mvn.w	r0, #1
  *(msp->buffer + msp->eos) = b;
  msp->eos += 1;
  return MSG_OK;
}
 80034ea:	4770      	bx	lr
 80034ec:	0000      	movs	r0, r0
	...

080034f0 <Test_thread.lto_priv.87>:
 80034f0:	4a16      	ldr	r2, [pc, #88]	; (800354c <Test_thread.lto_priv.87+0x5c>)
static THD_FUNCTION(Test_thread, p)
{
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <Test_thread.lto_priv.87+0x60>)
 80034f4:	6990      	ldr	r0, [r2, #24]
 80034f6:	4c17      	ldr	r4, [pc, #92]	; (8003554 <Test_thread.lto_priv.87+0x64>)
  palSetPad(GPIOD,GPIOD_LED5);
  palClearPad(GPIOD,GPIOD_LED3);

  rc_channel = rc_getChannels();
 80034f8:	4a17      	ldr	r2, [pc, #92]	; (8003558 <Test_thread.lto_priv.87+0x68>)
 80034fa:	4918      	ldr	r1, [pc, #96]	; (800355c <Test_thread.lto_priv.87+0x6c>)
  while (true)
  {
    if(!(count % 4))
      palTogglePad(GPIOD,GPIOD_LED6);

    if(palReadPad(GPIOA,GPIOA_BUTTON))
 80034fc:	4e18      	ldr	r6, [pc, #96]	; (8003560 <Test_thread.lto_priv.87+0x70>)

static rc_channel_t* rc_channel;

static THD_WORKING_AREA(Test_thread_wa, 64);
static THD_FUNCTION(Test_thread, p)
{
 80034fe:	b580      	push	{r7, lr}
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 8003500:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003504:	6184      	str	r4, [r0, #24]
  palSetPad(GPIOD,GPIOD_LED5);
 8003506:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  palClearPad(GPIOD,GPIOD_LED3);
 800350a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
static THD_FUNCTION(Test_thread, p)
{
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
 800350e:	831d      	strh	r5, [r3, #24]
 8003510:	4f14      	ldr	r7, [pc, #80]	; (8003564 <Test_thread.lto_priv.87+0x74>)
  palSetPad(GPIOD,GPIOD_LED5);
 8003512:	831c      	strh	r4, [r3, #24]
  uint32_t count = 0;

  while (true)
  {
    if(!(count % 4))
      palTogglePad(GPIOD,GPIOD_LED6);
 8003514:	461d      	mov	r5, r3
  (void)p;
  chRegSetThreadName("Test");

  palSetPad(GPIOD,GPIOD_LED4);
  palSetPad(GPIOD,GPIOD_LED5);
  palClearPad(GPIOD,GPIOD_LED3);
 8003516:	8358      	strh	r0, [r3, #26]

  rc_channel = rc_getChannels();
  uint32_t count = 0;
 8003518:	2400      	movs	r4, #0

  palSetPad(GPIOD,GPIOD_LED4);
  palSetPad(GPIOD,GPIOD_LED5);
  palClearPad(GPIOD,GPIOD_LED3);

  rc_channel = rc_getChannels();
 800351a:	6011      	str	r1, [r2, #0]
 800351c:	e004      	b.n	8003528 <Test_thread.lto_priv.87+0x38>
      cmd_control_start(CHP, 0, NULL);
      palTogglePad(GPIOD,GPIOD_LED4);
    }

    count++;
    chThdSleepMilliseconds(50);
 800351e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    {
      cmd_control_start(CHP, 0, NULL);
      palTogglePad(GPIOD,GPIOD_LED4);
    }

    count++;
 8003522:	3401      	adds	r4, #1
    chThdSleepMilliseconds(50);
 8003524:	f001 fa0c 	bl	8004940 <chThdSleep>
  rc_channel = rc_getChannels();
  uint32_t count = 0;

  while (true)
  {
    if(!(count % 4))
 8003528:	07a2      	lsls	r2, r4, #30
 800352a:	d103      	bne.n	8003534 <Test_thread.lto_priv.87+0x44>
      palTogglePad(GPIOD,GPIOD_LED6);
 800352c:	696b      	ldr	r3, [r5, #20]
 800352e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8003532:	616b      	str	r3, [r5, #20]

    if(palReadPad(GPIOA,GPIOA_BUTTON))
 8003534:	6933      	ldr	r3, [r6, #16]
 8003536:	07db      	lsls	r3, r3, #31
 8003538:	d5f1      	bpl.n	800351e <Test_thread.lto_priv.87+0x2e>

void cmd_control_start(BaseSequentialStream * chp, int argc, char *argv[])
{
  (void) argc,argv;

  if(!controller.status)
 800353a:	793b      	ldrb	r3, [r7, #4]
 800353c:	b90b      	cbnz	r3, 8003542 <Test_thread.lto_priv.87+0x52>
 800353e:	f002 f907 	bl	8005750 <cmd_control_start.part.0.lto_priv.116>
    {
      cmd_control_start(CHP, 0, NULL);
      palTogglePad(GPIOD,GPIOD_LED4);
 8003542:	696b      	ldr	r3, [r5, #20]
 8003544:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003548:	616b      	str	r3, [r5, #20]
 800354a:	e7e8      	b.n	800351e <Test_thread.lto_priv.87+0x2e>
 800354c:	20000b30 	.word	0x20000b30
 8003550:	40020c00 	.word	0x40020c00
 8003554:	08007880 	.word	0x08007880
 8003558:	2000f09c 	.word	0x2000f09c
 800355c:	20000820 	.word	0x20000820
 8003560:	40020000 	.word	0x40020000
 8003564:	20001754 	.word	0x20001754
	...

08003570 <reads.lto_priv.82>:
  memcpy(msp->buffer + msp->eos, bp, n);
  msp->eos += n;
  return n;
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4605      	mov	r5, r0
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 8003574:	4608      	mov	r0, r1
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 8003576:	692b      	ldr	r3, [r5, #16]
 8003578:	68ec      	ldr	r4, [r5, #12]
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 800357a:	6869      	ldr	r1, [r5, #4]
}

static size_t reads(void *ip, uint8_t *bp, size_t n) {
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset < n)
 800357c:	1ae4      	subs	r4, r4, r3
 800357e:	4294      	cmp	r4, r2
 8003580:	bf28      	it	cs
 8003582:	4614      	movcs	r4, r2
    n = msp->eos - msp->offset;
  memcpy(bp, msp->buffer + msp->offset, n);
 8003584:	4419      	add	r1, r3
 8003586:	4622      	mov	r2, r4
 8003588:	f7fd faea 	bl	8000b60 <memcpy>
  msp->offset += n;
 800358c:	692b      	ldr	r3, [r5, #16]
 800358e:	4423      	add	r3, r4
 8003590:	612b      	str	r3, [r5, #16]
  return n;
}
 8003592:	4620      	mov	r0, r4
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
	...

080035a0 <writes.lto_priv.81>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 80035a0:	b538      	push	{r3, r4, r5, lr}
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
 80035a2:	68c3      	ldr	r3, [r0, #12]
 80035a4:	6884      	ldr	r4, [r0, #8]
 80035a6:	1ae4      	subs	r4, r4, r3

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static size_t writes(void *ip, const uint8_t *bp, size_t n) {
 80035a8:	4605      	mov	r5, r0
 80035aa:	4294      	cmp	r4, r2
  MemoryStream *msp = ip;

  if (msp->size - msp->eos < n)
    n = msp->size - msp->eos;
  memcpy(msp->buffer + msp->eos, bp, n);
 80035ac:	6840      	ldr	r0, [r0, #4]
 80035ae:	bf28      	it	cs
 80035b0:	4614      	movcs	r4, r2
 80035b2:	4418      	add	r0, r3
 80035b4:	4622      	mov	r2, r4
 80035b6:	f7fd fad3 	bl	8000b60 <memcpy>
  msp->eos += n;
 80035ba:	68eb      	ldr	r3, [r5, #12]
 80035bc:	4423      	add	r3, r4
 80035be:	60eb      	str	r3, [r5, #12]
  return n;
}
 80035c0:	4620      	mov	r0, r4
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
	...

080035d0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	b087      	sub	sp, #28
 80035d6:	4615      	mov	r5, r2
 80035d8:	f10d 030d 	add.w	r3, sp, #13
 80035dc:	aa03      	add	r2, sp, #12
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	4681      	mov	r9, r0
 80035e2:	468a      	mov	sl, r1
 80035e4:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80035e6:	f04f 0800 	mov.w	r8, #0
 80035ea:	468b      	mov	fp, r1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80035ec:	f89b 1000 	ldrb.w	r1, [fp]
 80035f0:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80035f4:	b179      	cbz	r1, 8003616 <chvprintf+0x46>
      return n;
    if (c != '%') {
 80035f6:	2925      	cmp	r1, #37	; 0x25
 80035f8:	d011      	beq.n	800361e <chvprintf+0x4e>
      streamPut(chp, (uint8_t)c);
 80035fa:	f8d9 2000 	ldr.w	r2, [r9]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80035fe:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	4648      	mov	r0, r9
 8003604:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8003606:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 800360a:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800360e:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8003612:	2900      	cmp	r1, #0
 8003614:	d1ef      	bne.n	80035f6 <chvprintf+0x26>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8003616:	4640      	mov	r0, r8
 8003618:	b007      	add	sp, #28
 800361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800361e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8003622:	2a2d      	cmp	r2, #45	; 0x2d
 8003624:	bf03      	ittte	eq
 8003626:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800362a:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800362e:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8003632:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8003636:	2a30      	cmp	r2, #48	; 0x30
 8003638:	bf03      	ittte	eq
 800363a:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800363c:	3301      	addeq	r3, #1
      filler = '0';
 800363e:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8003640:	2720      	movne	r7, #32
 8003642:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8003644:	2600      	movs	r6, #0
 8003646:	e006      	b.n	8003656 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8003648:	782b      	ldrb	r3, [r5, #0]
 800364a:	3504      	adds	r5, #4
 800364c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8003650:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8003654:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003656:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800365e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8003660:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003664:	d9f2      	bls.n	800364c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8003666:	2a2a      	cmp	r2, #42	; 0x2a
 8003668:	d0ee      	beq.n	8003648 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800366a:	2a2e      	cmp	r2, #46	; 0x2e
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	d043      	beq.n	80036fa <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003672:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003676:	2b4c      	cmp	r3, #76	; 0x4c
 8003678:	d04e      	beq.n	8003718 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800367a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800367e:	2834      	cmp	r0, #52	; 0x34
 8003680:	f200 80f7 	bhi.w	8003872 <chvprintf+0x2a2>
 8003684:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003688:	00f500ea 	.word	0x00f500ea
 800368c:	00f500f5 	.word	0x00f500f5
 8003690:	00ea00f5 	.word	0x00ea00f5
 8003694:	00f500f5 	.word	0x00f500f5
 8003698:	00f500f5 	.word	0x00f500f5
 800369c:	00e800f5 	.word	0x00e800f5
 80036a0:	00f500f5 	.word	0x00f500f5
 80036a4:	00f500f5 	.word	0x00f500f5
 80036a8:	00dd00f5 	.word	0x00dd00f5
 80036ac:	00f500f5 	.word	0x00f500f5
 80036b0:	00f500f2 	.word	0x00f500f2
 80036b4:	00f500f5 	.word	0x00f500f5
 80036b8:	00f500f5 	.word	0x00f500f5
 80036bc:	00f500f5 	.word	0x00f500f5
 80036c0:	00f500f5 	.word	0x00f500f5
 80036c4:	00a100f5 	.word	0x00a100f5
 80036c8:	00f500ea 	.word	0x00f500ea
 80036cc:	00f500f5 	.word	0x00f500f5
 80036d0:	00ea00f5 	.word	0x00ea00f5
 80036d4:	00f500f5 	.word	0x00f500f5
 80036d8:	00f500f5 	.word	0x00f500f5
 80036dc:	00e800f5 	.word	0x00e800f5
 80036e0:	00f500f5 	.word	0x00f500f5
 80036e4:	007100f5 	.word	0x007100f5
 80036e8:	00dd00f5 	.word	0x00dd00f5
 80036ec:	00f500f5 	.word	0x00f500f5
 80036f0:	00f2      	.short	0x00f2
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80036f2:	782b      	ldrb	r3, [r5, #0]
 80036f4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80036f6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80036fa:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 80036fe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8003706:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800370a:	d9f4      	bls.n	80036f6 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 800370c:	2a2a      	cmp	r2, #42	; 0x2a
 800370e:	d0f0      	beq.n	80036f2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003710:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003714:	2b4c      	cmp	r3, #76	; 0x4c
 8003716:	d1b0      	bne.n	800367a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8003718:	f89b 3000 	ldrb.w	r3, [fp]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a8 	beq.w	8003872 <chvprintf+0x2a2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003722:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8003726:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800372a:	2a34      	cmp	r2, #52	; 0x34
 800372c:	f200 80a0 	bhi.w	8003870 <chvprintf+0x2a0>
 8003730:	e8df f002 	tbb	[pc, r2]
 8003734:	9e9e9e94 	.word	0x9e9e9e94
 8003738:	9e9e949e 	.word	0x9e9e949e
 800373c:	929e9e9e 	.word	0x929e9e9e
 8003740:	9e9e9e9e 	.word	0x9e9e9e9e
 8003744:	9e9e879e 	.word	0x9e9e879e
 8003748:	9e9e9e9c 	.word	0x9e9e9e9c
 800374c:	9e9e9e9e 	.word	0x9e9e9e9e
 8003750:	4b9e9e9e 	.word	0x4b9e9e9e
 8003754:	9e9e9e94 	.word	0x9e9e9e94
 8003758:	9e9e949e 	.word	0x9e9e949e
 800375c:	929e9e9e 	.word	0x929e9e9e
 8003760:	1b9e9e9e 	.word	0x1b9e9e9e
 8003764:	9e9e879e 	.word	0x9e9e879e
 8003768:	9c          	.byte	0x9c
 8003769:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800376a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 800376c:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <chvprintf+0x308>)
 800376e:	2c00      	cmp	r4, #0
 8003770:	bf08      	it	eq
 8003772:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003774:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003776:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8003778:	2900      	cmp	r1, #0
 800377a:	f000 8094 	beq.w	80038a6 <chvprintf+0x2d6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8096 	beq.w	80038b0 <chvprintf+0x2e0>
 8003784:	3901      	subs	r1, #1
 8003786:	4620      	mov	r0, r4
 8003788:	e001      	b.n	800378e <chvprintf+0x1be>
 800378a:	3901      	subs	r1, #1
 800378c:	d403      	bmi.n	8003796 <chvprintf+0x1c6>
 800378e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f9      	bne.n	800378a <chvprintf+0x1ba>
 8003796:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003798:	1a36      	subs	r6, r6, r0
 800379a:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800379c:	2720      	movs	r7, #32
 800379e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80037a2:	f1ba 0f00 	cmp.w	sl, #0
 80037a6:	d01f      	beq.n	80037e8 <chvprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	da34      	bge.n	8003818 <chvprintf+0x248>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	f43f af1c 	beq.w	80035ec <chvprintf+0x1c>
 80037b4:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 80037b6:	f8d9 3000 	ldr.w	r3, [r9]
 80037ba:	4648      	mov	r0, r9
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4639      	mov	r1, r7
 80037c0:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80037c2:	3c01      	subs	r4, #1
 80037c4:	d1f7      	bne.n	80037b6 <chvprintf+0x1e6>
 80037c6:	44b0      	add	r8, r6
 80037c8:	e710      	b.n	80035ec <chvprintf+0x1c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	f88d 300c 	strb.w	r3, [sp, #12]
 80037d0:	9b01      	ldr	r3, [sp, #4]
 80037d2:	3504      	adds	r5, #4
 80037d4:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80037d6:	2720      	movs	r7, #32
 80037d8:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80037da:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80037dc:	1a36      	subs	r6, r6, r0
 80037de:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80037e2:	f1ba 0f00 	cmp.w	sl, #0
 80037e6:	d1df      	bne.n	80037a8 <chvprintf+0x1d8>
 80037e8:	9300      	str	r3, [sp, #0]
      width = -width;
 80037ea:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 80037ee:	f1ba 0f00 	cmp.w	sl, #0
 80037f2:	d045      	beq.n	8003880 <chvprintf+0x2b0>
      if (*s == '-' && filler == '0') {
 80037f4:	7821      	ldrb	r1, [r4, #0]
 80037f6:	292d      	cmp	r1, #45	; 0x2d
 80037f8:	d047      	beq.n	800388a <chvprintf+0x2ba>
        streamPut(chp, (uint8_t)*s++);
        n++;
 80037fa:	4656      	mov	r6, sl
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80037fc:	f8d9 3000 	ldr.w	r3, [r9]
 8003800:	4648      	mov	r0, r9
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4639      	mov	r1, r7
 8003806:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8003808:	3601      	adds	r6, #1
 800380a:	d1f7      	bne.n	80037fc <chvprintf+0x22c>
    }
    while (--i >= 0) {
 800380c:	9b00      	ldr	r3, [sp, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	ebca 0808 	rsb	r8, sl, r8
 8003814:	f6ff aeea 	blt.w	80035ec <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003818:	f8dd a000 	ldr.w	sl, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 800381c:	f8d9 3000 	ldr.w	r3, [r9]
 8003820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003824:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003826:	f10a 3aff 	add.w	sl, sl, #4294967295
      streamPut(chp, (uint8_t)*s++);
 800382a:	4648      	mov	r0, r9
 800382c:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800382e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003832:	d1f3      	bne.n	800381c <chvprintf+0x24c>
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	f108 0801 	add.w	r8, r8, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfa8      	it	ge
 800383e:	4498      	addge	r8, r3
 8003840:	e7b5      	b.n	80037ae <chvprintf+0x1de>
 8003842:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003844:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003846:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003848:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800384a:	f7ff fa61 	bl	8002d10 <long_to_string_with_divisor.constprop.18>
 800384e:	ab03      	add	r3, sp, #12
 8003850:	1ac0      	subs	r0, r0, r3
 8003852:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003854:	ac03      	add	r4, sp, #12
 8003856:	e7c1      	b.n	80037dc <chvprintf+0x20c>
 8003858:	2208      	movs	r2, #8
 800385a:	e7f3      	b.n	8003844 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800385c:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 800385e:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8003860:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8003864:	db2e      	blt.n	80038c4 <chvprintf+0x2f4>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003866:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003868:	220a      	movs	r2, #10
 800386a:	e7ee      	b.n	800384a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800386c:	2210      	movs	r2, #16
 800386e:	e7e9      	b.n	8003844 <chvprintf+0x274>
 8003870:	461a      	mov	r2, r3
 8003872:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8003874:	f88d 200c 	strb.w	r2, [sp, #12]
 8003878:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800387a:	ac03      	add	r4, sp, #12
 800387c:	3b01      	subs	r3, #1
 800387e:	e7ad      	b.n	80037dc <chvprintf+0x20c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003880:	9b00      	ldr	r3, [sp, #0]
 8003882:	2b00      	cmp	r3, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8003884:	4656      	mov	r6, sl
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003886:	dac7      	bge.n	8003818 <chvprintf+0x248>
 8003888:	e6b0      	b.n	80035ec <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800388a:	2f30      	cmp	r7, #48	; 0x30
 800388c:	d1b5      	bne.n	80037fa <chvprintf+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800388e:	f8d9 3000 	ldr.w	r3, [r9]
 8003892:	4648      	mov	r0, r9
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4798      	blx	r3
 8003898:	9b00      	ldr	r3, [sp, #0]
 800389a:	3b01      	subs	r3, #1
 800389c:	3401      	adds	r4, #1
        n++;
 800389e:	f108 0801 	add.w	r8, r8, #1
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	e7a9      	b.n	80037fa <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80038a6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f af6b 	bne.w	8003786 <chvprintf+0x1b6>
 80038b0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80038b4:	f1ba 0f00 	cmp.w	sl, #0
 80038b8:	d10b      	bne.n	80038d2 <chvprintf+0x302>
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2720      	movs	r7, #32
 80038c2:	e792      	b.n	80037ea <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80038c4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80038c6:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80038c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80038cc:	f10d 000d 	add.w	r0, sp, #13
 80038d0:	e7ca      	b.n	8003868 <chvprintf+0x298>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80038d2:	2720      	movs	r7, #32
 80038d4:	e76b      	b.n	80037ae <chvprintf+0x1de>
 80038d6:	bf00      	nop
 80038d8:	08007888 	.word	0x08007888
 80038dc:	00000000 	.word	0x00000000

080038e0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80038e0:	b40e      	push	{r1, r2, r3}
 80038e2:	b500      	push	{lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	aa03      	add	r2, sp, #12
 80038e8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80038ec:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80038ee:	f7ff fe6f 	bl	80035d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80038f2:	b002      	add	sp, #8
 80038f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f8:	b003      	add	sp, #12
 80038fa:	4770      	bx	lr
 80038fc:	0000      	movs	r0, r0
	...

08003900 <MPU_thread.lto_priv.88>:
  }
}

static THD_WORKING_AREA(MPU_thread_wa, 32768);
static THD_FUNCTION(MPU_thread, p)
{
 8003900:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003904:	4ca0      	ldr	r4, [pc, #640]	; (8003b88 <MPU_thread.lto_priv.88+0x288>)
 8003906:	4aa1      	ldr	r2, [pc, #644]	; (8003b8c <MPU_thread.lto_priv.88+0x28c>)
 8003908:	69a3      	ldr	r3, [r4, #24]
 800390a:	b087      	sub	sp, #28
 800390c:	619a      	str	r2, [r3, #24]
  (void)p;
  chRegSetThreadName("MPU6050");
  chThdSleepMilliseconds(200);
 800390e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003912:	f001 f815 	bl	8004940 <chThdSleep>
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {

  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8003916:	4b9e      	ldr	r3, [pc, #632]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	1e5a      	subs	r2, r3, #1
 800391c:	2a01      	cmp	r2, #1
 800391e:	d905      	bls.n	800392c <MPU_thread.lto_priv.88+0x2c>
 8003920:	2b05      	cmp	r3, #5
 8003922:	d003      	beq.n	800392c <MPU_thread.lto_priv.88+0x2c>
 8003924:	b672      	cpsid	i
 8003926:	4b9b      	ldr	r3, [pc, #620]	; (8003b94 <MPU_thread.lto_priv.88+0x294>)
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800392a:	e7fe      	b.n	800392a <MPU_thread.lto_priv.88+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800392c:	2320      	movs	r3, #32
 800392e:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 8003932:	f000 fc8d 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003936:	f000 ff13 	bl	8004760 <_dbg_check_lock>
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800393a:	4b95      	ldr	r3, [pc, #596]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800393c:	4994      	ldr	r1, [pc, #592]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800393e:	781f      	ldrb	r7, [r3, #0]
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8003940:	4895      	ldr	r0, [pc, #596]	; (8003b98 <MPU_thread.lto_priv.88+0x298>)
 8003942:	6058      	str	r0, [r3, #4]
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003944:	f240 4256 	movw	r2, #1110	; 0x456
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003948:	f240 4316 	movw	r3, #1046	; 0x416
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800394c:	2f01      	cmp	r7, #1
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800394e:	628a      	str	r2, [r1, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003950:	624b      	str	r3, [r1, #36]	; 0x24
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003952:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8003954:	460e      	mov	r6, r1
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003956:	d03d      	beq.n	80039d4 <MPU_thread.lto_priv.88+0xd4>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003958:	4629      	mov	r1, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800395a:	4b8d      	ldr	r3, [pc, #564]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 800395c:	6842      	ldr	r2, [r0, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800395e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003962:	f8d6 8000 	ldr.w	r8, [r6]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8003966:	f8df e254 	ldr.w	lr, [pc, #596]	; 8003bbc <MPU_thread.lto_priv.88+0x2bc>
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800396a:	f8d3 a000 	ldr.w	sl, [r3]
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800396e:	7a07      	ldrb	r7, [r0, #8]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003970:	f105 0610 	add.w	r6, r5, #16
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8003974:	f102 3cff 	add.w	ip, r2, #4294967295
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003978:	f8c8 6008 	str.w	r6, [r8, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800397c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  dp->CR1 = 0;
 8003980:	2300      	movs	r3, #0
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003982:	f44f 6810 	mov.w	r8, #2304	; 0x900
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8003986:	45f4      	cmp	ip, lr
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003988:	f8ca 6008 	str.w	r6, [sl, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800398c:	f8c5 9000 	str.w	r9, [r5]
  dp->CR1 = 0;
 8003990:	602b      	str	r3, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003992:	f8c5 8004 	str.w	r8, [r5, #4]
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;

  osalDbgCheck((i2cp != NULL) &&
 8003996:	d819      	bhi.n	80039cc <MPU_thread.lto_priv.88+0xcc>
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8003998:	f8d1 c004 	ldr.w	ip, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800399c:	f8df e220 	ldr.w	lr, [pc, #544]	; 8003bc0 <MPU_thread.lto_priv.88+0x2c0>
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80039a0:	f64f 76c0 	movw	r6, #65472	; 0xffc0
 80039a4:	ea0c 0606 	and.w	r6, ip, r6
 80039a8:	604e      	str	r6, [r1, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80039aa:	684e      	ldr	r6, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 80039ac:	4572      	cmp	r2, lr
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80039ae:	f046 062a 	orr.w	r6, r6, #42	; 0x2a
 80039b2:	604e      	str	r6, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 80039b4:	f240 835c 	bls.w	8004070 <MPU_thread.lto_priv.88+0x770>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 80039b8:	4e78      	ldr	r6, [pc, #480]	; (8003b9c <MPU_thread.lto_priv.88+0x29c>)
 80039ba:	42b2      	cmp	r2, r6
 80039bc:	dc69      	bgt.n	8003a92 <MPU_thread.lto_priv.88+0x192>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 80039be:	1ebb      	subs	r3, r7, #2
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d94c      	bls.n	8003a5e <MPU_thread.lto_priv.88+0x15e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <MPU_thread.lto_priv.88+0x2a0>)
 80039c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039ca:	e7fe      	b.n	80039ca <MPU_thread.lto_priv.88+0xca>
 80039cc:	b672      	cpsid	i
 80039ce:	4b74      	ldr	r3, [pc, #464]	; (8003ba0 <MPU_thread.lto_priv.88+0x2a0>)
 80039d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039d2:	e7fe      	b.n	80039d2 <MPU_thread.lto_priv.88+0xd2>

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80039d4:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8003bc4 <MPU_thread.lto_priv.88+0x2c4>
      b = dmaStreamAllocate(i2cp->dmarx,
 80039d8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80039da:	f8d8 3020 	ldr.w	r3, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80039de:	4a71      	ldr	r2, [pc, #452]	; (8003ba4 <MPU_thread.lto_priv.88+0x2a4>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80039e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e4:	f04f 0e00 	mov.w	lr, #0
 80039e8:	f8c8 3020 	str.w	r3, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80039ec:	2105      	movs	r1, #5

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80039ee:	f8c8 e020 	str.w	lr, [r8, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80039f2:	4633      	mov	r3, r6
 80039f4:	f7fe f9a4 	bl	8001d40 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 80039f8:	2800      	cmp	r0, #0
 80039fa:	f040 8318 	bne.w	800402e <MPU_thread.lto_priv.88+0x72e>
      b = dmaStreamAllocate(i2cp->dmatx,
 80039fe:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003a00:	4a69      	ldr	r2, [pc, #420]	; (8003ba8 <MPU_thread.lto_priv.88+0x2a8>)
 8003a02:	2105      	movs	r1, #5
 8003a04:	4633      	mov	r3, r6
 8003a06:	f7fe f99b 	bl	8001d40 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f040 830b 	bne.w	8004026 <MPU_thread.lto_priv.88+0x726>
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003a10:	6a72      	ldr	r2, [r6, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003a12:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8003a14:	f8d8 c040 	ldr.w	ip, [r8, #64]	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a18:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8003bc8 <MPU_thread.lto_priv.88+0x2c8>
 8003a1c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8003a1e:	6870      	ldr	r0, [r6, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003a20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a28:	f04f 0950 	mov.w	r9, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a2c:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8003a30:	f44c 1c00 	orr.w	ip, ip, #2097152	; 0x200000
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003a34:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003a38:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8003a3c:	f8c8 c040 	str.w	ip, [r8, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003a40:	6272      	str	r2, [r6, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a42:	f88e 931f 	strb.w	r9, [lr, #799]	; 0x31f
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003a46:	62b3      	str	r3, [r6, #40]	; 0x28
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a48:	f8ce a180 	str.w	sl, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003a4c:	f8ce a000 	str.w	sl, [lr]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a50:	f88e 9320 	strb.w	r9, [lr, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a54:	f8ce 7184 	str.w	r7, [lr, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003a58:	f8ce 7004 	str.w	r7, [lr, #4]
 8003a5c:	e77d      	b.n	800395a <MPU_thread.lto_priv.88+0x5a>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8003a5e:	2f02      	cmp	r7, #2
 8003a60:	f000 82ed 	beq.w	800403e <MPU_thread.lto_priv.88+0x73e>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8003a64:	2319      	movs	r3, #25
 8003a66:	fb03 f202 	mul.w	r2, r3, r2
 8003a6a:	4e50      	ldr	r6, [pc, #320]	; (8003bac <MPU_thread.lto_priv.88+0x2ac>)
 8003a6c:	fbb6 f3f2 	udiv	r3, r6, r2
 8003a70:	fb02 f203 	mul.w	r2, r2, r3
 8003a74:	1ab6      	subs	r6, r6, r2
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	f040 82dd 	bne.w	8004036 <MPU_thread.lto_priv.88+0x736>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8003a7c:	b29a      	uxth	r2, r3
      regCCR |= I2C_CCR_DUTY;
 8003a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8003a82:	4313      	orrs	r3, r2
 8003a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8003a8c:	220d      	movs	r2, #13
      regCCR |= I2C_CCR_DUTY;
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8003a8e:	b29b      	uxth	r3, r3

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8003a90:	620a      	str	r2, [r1, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8003a92:	61cb      	str	r3, [r1, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8003a94:	7802      	ldrb	r2, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003a96:	680b      	ldr	r3, [r1, #0]
  switch (opmode) {
 8003a98:	2a02      	cmp	r2, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003a9a:	b29b      	uxth	r3, r3
  switch (opmode) {
 8003a9c:	f000 82db 	beq.w	8004056 <MPU_thread.lto_priv.88+0x756>
 8003aa0:	2a03      	cmp	r2, #3
 8003aa2:	f000 82de 	beq.w	8004062 <MPU_thread.lto_priv.88+0x762>
 8003aa6:	2a01      	cmp	r2, #1
 8003aa8:	d102      	bne.n	8003ab0 <MPU_thread.lto_priv.88+0x1b0>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003aaa:	f023 030a 	bic.w	r3, r3, #10
 8003aae:	b29b      	uxth	r3, r3
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8003ab0:	600b      	str	r3, [r1, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8003ab2:	682b      	ldr	r3, [r5, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 8003ab4:	4a36      	ldr	r2, [pc, #216]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	2302      	movs	r3, #2
 8003abe:	7013      	strb	r3, [r2, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003ac0:	f000 fe3e 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003ac4:	f000 fbac 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <MPU_thread.lto_priv.88+0x288>)
 8003acc:	42a2      	cmp	r2, r4
 8003ace:	d005      	beq.n	8003adc <MPU_thread.lto_priv.88+0x1dc>
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	6889      	ldr	r1, [r1, #8]
 8003ad6:	4291      	cmp	r1, r2
 8003ad8:	f0c0 82c6 	bcc.w	8004068 <MPU_thread.lto_priv.88+0x768>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003adc:	2500      	movs	r5, #0
 8003ade:	f385 8811 	msr	BASEPRI, r5
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 8003ae2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003bcc <MPU_thread.lto_priv.88+0x2cc>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8003ae6:	4832      	ldr	r0, [pc, #200]	; (8003bb0 <MPU_thread.lto_priv.88+0x2b0>)
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000
 8003ae8:	23c0      	movs	r3, #192	; 0xc0
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 8003aea:	246b      	movs	r4, #107	; 0x6b
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000
 8003aec:	f888 3001 	strb.w	r3, [r8, #1]
  msg_t status = MSG_OK;

  i2cStart(MPU_USE_I2C, &i2cfg);

  /* Reset all MPU6050 registers to their default values */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 8003af0:	f888 4000 	strb.w	r4, [r8]
 8003af4:	f000 fe44 	bl	8004780 <chMtxLock>
  mpu6050TXData[1] = 0xC0;          // Register value 0b11000000

  i2cAcquireBus(MPU_USE_I2C);

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 8003af8:	462a      	mov	r2, r5
 8003afa:	462b      	mov	r3, r5
 8003afc:	2068      	movs	r0, #104	; 0x68
 8003afe:	2102      	movs	r1, #2
 8003b00:	f7ff fa5e 	bl	8002fc0 <i2cMasterTransmitTimeout.constprop.39>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));

  if (status != MSG_OK) {
 8003b04:	4605      	mov	r5, r0
 8003b06:	b1d0      	cbz	r0, 8003b3e <MPU_thread.lto_priv.88+0x23e>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8003b08:	f7ff f9e2 	bl	8002ed0 <chMtxUnlock.constprop.51>
    i2cReleaseBus(MPU_USE_I2C);
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <MPU_thread.lto_priv.88+0x2b4>)
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 8003b14:	7a1b      	ldrb	r3, [r3, #8]
 8003b16:	700b      	strb	r3, [r1, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 8003b18:	b113      	cbz	r3, 8003b20 <MPU_thread.lto_priv.88+0x220>
      g_i2cErrorInfo.i2c_error_counter++;
 8003b1a:	884b      	ldrh	r3, [r1, #2]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	804b      	strh	r3, [r1, #2]
    }
    g_i2cErrorInfo.errorFlag |= 0x02;
 8003b20:	9a01      	ldr	r2, [sp, #4]
 8003b22:	7913      	ldrb	r3, [r2, #4]
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	7113      	strb	r3, [r2, #4]

  if(!mpu6050Init(MPU6050_I2C_ADDR_A0_LOW))
    while(true)
    {
      palTogglePad(GPIOD,GPIOD_LED3);
 8003b2a:	4c23      	ldr	r4, [pc, #140]	; (8003bb8 <MPU_thread.lto_priv.88+0x2b8>)
 8003b2c:	6963      	ldr	r3, [r4, #20]
 8003b2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b32:	6163      	str	r3, [r4, #20]
      chThdSleepMilliseconds(200);
 8003b34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003b38:	f000 ff02 	bl	8004940 <chThdSleep>
 8003b3c:	e7f6      	b.n	8003b2c <MPU_thread.lto_priv.88+0x22c>
    return 0;
  }

  /* Wait 100 ms for the MPU6050 to reset */
  chThdSleepMilliseconds(100);
 8003b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b42:	f000 fefd 	bl	8004940 <chThdSleep>

  /* Clear the SLEEP flag, set the clock and start measuring. */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
  mpu6050TXData[1] = 0x03;         // Register value CLKSEL = PLL_Z;
 8003b46:	2603      	movs	r6, #3

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 8003b48:	2068      	movs	r0, #104	; 0x68
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	462b      	mov	r3, r5

  /* Wait 100 ms for the MPU6050 to reset */
  chThdSleepMilliseconds(100);

  /* Clear the SLEEP flag, set the clock and start measuring. */
  mpu6050TXData[0] = MPU6050_PWR_MGMT_1;  // Start register address;
 8003b50:	f888 4000 	strb.w	r4, [r8]
  mpu6050TXData[1] = 0x03;         // Register value CLKSEL = PLL_Z;
 8003b54:	f888 6001 	strb.w	r6, [r8, #1]

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 2,
 8003b58:	f7ff fa32 	bl	8002fc0 <i2cMasterTransmitTimeout.constprop.39>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));

  if (status != MSG_OK) {
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d036      	beq.n	8003bd0 <MPU_thread.lto_priv.88+0x2d0>
 8003b62:	f7ff f9b5 	bl	8002ed0 <chMtxUnlock.constprop.51>
    i2cReleaseBus(MPU_USE_I2C);
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MPU_thread.lto_priv.88+0x2b4>)
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <MPU_thread.lto_priv.88+0x290>)
 8003b6e:	7a1b      	ldrb	r3, [r3, #8]
 8003b70:	700b      	strb	r3, [r1, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 8003b72:	b113      	cbz	r3, 8003b7a <MPU_thread.lto_priv.88+0x27a>
      g_i2cErrorInfo.i2c_error_counter++;
 8003b74:	884b      	ldrh	r3, [r1, #2]
 8003b76:	3301      	adds	r3, #1
 8003b78:	804b      	strh	r3, [r1, #2]
//      debugLog("E:mpu6050i-rst");
    }
    g_i2cErrorInfo.errorFlag |= 0x04;
 8003b7a:	9a01      	ldr	r2, [sp, #4]
 8003b7c:	7913      	ldrb	r3, [r2, #4]
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	7113      	strb	r3, [r2, #4]
 8003b84:	e7d1      	b.n	8003b2a <MPU_thread.lto_priv.88+0x22a>
 8003b86:	bf00      	nop
 8003b88:	20000b30 	.word	0x20000b30
 8003b8c:	08007890 	.word	0x08007890
 8003b90:	200012e8 	.word	0x200012e8
 8003b94:	08007840 	.word	0x08007840
 8003b98:	080078a0 	.word	0x080078a0
 8003b9c:	00061a80 	.word	0x00061a80
 8003ba0:	08007850 	.word	0x08007850
 8003ba4:	08001831 	.word	0x08001831
 8003ba8:	08001161 	.word	0x08001161
 8003bac:	0280de80 	.word	0x0280de80
 8003bb0:	200012f4 	.word	0x200012f4
 8003bb4:	200014b0 	.word	0x200014b0
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	003d08ff 	.word	0x003d08ff
 8003bc0:	000186a0 	.word	0x000186a0
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	20001228 	.word	0x20001228
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
  mpu6050TXData[4] = 0x01;          // ACCEL_CONFIG register value AFS_SEL = +-4G

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 5,
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4623      	mov	r3, r4

  /* Configure the MPU6050 sensor        */
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
 8003bd4:	2719      	movs	r7, #25
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
 8003bd6:	260b      	movs	r6, #11
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
  mpu6050TXData[4] = 0x01;          // ACCEL_CONFIG register value AFS_SEL = +-4G
 8003bd8:	2501      	movs	r5, #1

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 5,
 8003bda:	2068      	movs	r0, #104	; 0x68
 8003bdc:	2105      	movs	r1, #5
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
 8003bde:	f888 4002 	strb.w	r4, [r8, #2]
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
 8003be2:	f888 4003 	strb.w	r4, [r8, #3]

  /* Configure the MPU6050 sensor        */
  /* NOTE:                               */
  /* - SLEEP flag must be cleared before */
  /*   configuring the sensor.           */
  mpu6050TXData[0] = MPU6050_SMPLRT_DIV;  // Start register address;
 8003be6:	f888 7000 	strb.w	r7, [r8]
  mpu6050TXData[1] = 11;                  // SMPLRT_DIV register value (8000 / (11 + 1) = 666 Hz);
 8003bea:	f888 6001 	strb.w	r6, [r8, #1]
  mpu6050TXData[2] = 0x00;          // CONFIG register value DLPF_CFG = 0 (256-260 Hz);
  mpu6050TXData[3] = 0x00;          // GYRO_CONFIG register value FS_SEL = +-250 deg/s;
  mpu6050TXData[4] = 0x01;          // ACCEL_CONFIG register value AFS_SEL = +-4G
 8003bee:	f888 5004 	strb.w	r5, [r8, #4]

  status = i2cMasterTransmitTimeout(MPU_USE_I2C, addr, mpu6050TXData, 5,
 8003bf2:	f7ff f9e5 	bl	8002fc0 <i2cMasterTransmitTimeout.constprop.39>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	f7ff f96a 	bl	8002ed0 <chMtxUnlock.constprop.51>
    NULL, 0, MS2ST(MPU6050_WRITE_TIMEOUT_MS));


  i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
 8003bfc:	2c00      	cmp	r4, #0
 8003bfe:	f040 8203 	bne.w	8004008 <MPU_thread.lto_priv.88+0x708>
 * @param  fAddrLow - IMU address pin A0 is pulled low flag.
 */
void imuStructureInit(PIMUStruct pIMU, uint8_t fAddrHigh) {
  uint8_t i;
  /* Initialize to zero. */
  memset((void *)pIMU, 0, sizeof(IMUStruct));
 8003c02:	4621      	mov	r1, r4
 8003c04:	2281      	movs	r2, #129	; 0x81
 8003c06:	48ae      	ldr	r0, [pc, #696]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
 8003c08:	f003 f93a 	bl	8006e80 <memset>
  memset(MPUFlash, 0, 24);
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	48ad      	ldr	r0, [pc, #692]	; (8003ec4 <MPU_thread.lto_priv.88+0x5c4>)
 8003c10:	2218      	movs	r2, #24
 8003c12:	f003 f935 	bl	8006e80 <memset>
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8003c16:	4bac      	ldr	r3, [pc, #688]	; (8003ec8 <MPU_thread.lto_priv.88+0x5c8>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f2c0 81ee 	blt.w	8003ffc <MPU_thread.lto_priv.88+0x6fc>
 8003c20:	48aa      	ldr	r0, [pc, #680]	; (8003ecc <MPU_thread.lto_priv.88+0x5cc>)
 8003c22:	49a8      	ldr	r1, [pc, #672]	; (8003ec4 <MPU_thread.lto_priv.88+0x5c4>)
 8003c24:	2218      	movs	r2, #24
 8003c26:	f7ff f923 	bl	8002e70 <flashRead.part.6.lto_priv.85>
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8003c2a:	4aa9      	ldr	r2, [pc, #676]	; (8003ed0 <MPU_thread.lto_priv.88+0x5d0>)
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8003c2c:	4ba5      	ldr	r3, [pc, #660]	; (8003ec4 <MPU_thread.lto_priv.88+0x5c4>)
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8003c2e:	7810      	ldrb	r0, [r2, #0]
 8003c30:	7851      	ldrb	r1, [r2, #1]
 8003c32:	4ea8      	ldr	r6, [pc, #672]	; (8003ed4 <MPU_thread.lto_priv.88+0x5d4>)
 8003c34:	7892      	ldrb	r2, [r2, #2]
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8003c36:	4da2      	ldr	r5, [pc, #648]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 8003c38:	f8d3 900c 	ldr.w	r9, [r3, #12]
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8003c3c:	689f      	ldr	r7, [r3, #8]
 8003c3e:	f8d3 a000 	ldr.w	sl, [r3]
 8003c42:	f8d3 c004 	ldr.w	ip, [r3, #4]
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 8003c46:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8003c4a:	695c      	ldr	r4, [r3, #20]
 8003c4c:	4ba2      	ldr	r3, [pc, #648]	; (8003ed8 <MPU_thread.lto_priv.88+0x5d8>)
 8003c4e:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8003c50:	9301      	str	r3, [sp, #4]
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8003c52:	f002 030f 	and.w	r3, r2, #15
 8003c56:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
    pIMU->addr = MPU6050_I2C_ADDR_A0_HIGH;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
 8003c5a:	2268      	movs	r2, #104	; 0x68
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8003c5c:	f000 000f 	and.w	r0, r0, #15
 8003c60:	f001 010f 	and.w	r1, r1, #15
 8003c64:	4b9b      	ldr	r3, [pc, #620]	; (8003ed4 <MPU_thread.lto_priv.88+0x5d4>)
 8003c66:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    pIMU->addr = MPU6050_I2C_ADDR_A0_HIGH;
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] >> 4;
    }
  } else {
    pIMU->addr = MPU6050_I2C_ADDR_A0_LOW;
 8003c6a:	f885 207f 	strb.w	r2, [r5, #127]	; 0x7f
    for (i = 0; i < 3; i++) {
      pIMU->axes_conf[i] = g_sensorSettings[i] & IMU1_CONF_MASK;
 8003c6e:	f885 107d 	strb.w	r1, [r5, #125]	; 0x7d
 8003c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8003c74:	63af      	str	r7, [r5, #56]	; 0x38

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);
 8003c76:	3619      	adds	r6, #25
    }

  imuStructureInit(&g_IMU1, false);

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
 8003c78:	2700      	movs	r7, #0
  while (true)
  {
    tick+=US2ST(MPU_COUNT);

    if(tick>chVTGetSystemTimeX())
 8003c7a:	42b2      	cmp	r2, r6
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 8003c7c:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003c80:	eddf 8a96 	vldr	s17, [pc, #600]	; 8003edc <MPU_thread.lto_priv.88+0x5dc>
 8003c84:	ed9f 8a96 	vldr	s16, [pc, #600]	; 8003ee0 <MPU_thread.lto_priv.88+0x5e0>
  memset(MPUFlash, 0, 24);

  flashRead(MPU_FLASH_ADDR,(char*)MPUFlash, 24);
  for (i = 0; i < 3U; i++)
  {
     pIMU->accelBias[i] = MPUFlash[i];
 8003c88:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
 8003c8c:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
     pIMU->gyroBias[i] = MPUFlash[i + 3];
 8003c90:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
 8003c94:	646c      	str	r4, [r5, #68]	; 0x44
    }

  imuStructureInit(&g_IMU1, false);

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
 8003c96:	46b9      	mov	r9, r7
  while (true)
  {
    tick+=US2ST(MPU_COUNT);

    if(tick>chVTGetSystemTimeX())
 8003c98:	f0c0 80f4 	bcc.w	8003e84 <MPU_thread.lto_priv.88+0x584>
 8003c9c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  int16_t mpu6050Data[6];

  /* Set the start register address for bulk data transfer. */
  mpu6050TXData[0] = MPU6050_ACCEL_XOUT_H;
  i2cAcquireBus(MPU_USE_I2C);
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
 8003c9e:	4c91      	ldr	r4, [pc, #580]	; (8003ee4 <MPU_thread.lto_priv.88+0x5e4>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8003ca0:	4891      	ldr	r0, [pc, #580]	; (8003ee8 <MPU_thread.lto_priv.88+0x5e8>)
 8003ca2:	4f87      	ldr	r7, [pc, #540]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
  msg_t status = MSG_OK;
  uint8_t id;
  int16_t mpu6050Data[6];

  /* Set the start register address for bulk data transfer. */
  mpu6050TXData[0] = MPU6050_ACCEL_XOUT_H;
 8003ca4:	233b      	movs	r3, #59	; 0x3b
 8003ca6:	f888 3000 	strb.w	r3, [r8]
 8003caa:	f000 fd69 	bl	8004780 <chMtxLock>
  i2cAcquireBus(MPU_USE_I2C);
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
 8003cae:	4622      	mov	r2, r4
 8003cb0:	f895 007f 	ldrb.w	r0, [r5, #127]	; 0x7f
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	230e      	movs	r3, #14
 8003cb8:	f7ff f982 	bl	8002fc0 <i2cMasterTransmitTimeout.constprop.39>
 8003cbc:	4682      	mov	sl, r0
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8003cbe:	f7ff f907 	bl	8002ed0 <chMtxUnlock.constprop.51>
    mpu6050RXData, 14, MS2ST(MPU6050_READ_TIMEOUT_MS));
	i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
 8003cc2:	f1ba 0f00 	cmp.w	sl, #0
 8003cc6:	f040 811b 	bne.w	8003f00 <MPU_thread.lto_priv.88+0x600>
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 8003cca:	f894 b000 	ldrb.w	fp, [r4]
 8003cce:	7860      	ldrb	r0, [r4, #1]
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 8003cd0:	f894 a002 	ldrb.w	sl, [r4, #2]
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 8003cd4:	7962      	ldrb	r2, [r4, #5]
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 8003cd6:	78e1      	ldrb	r1, [r4, #3]
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 8003cd8:	f894 c004 	ldrb.w	ip, [r4, #4]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 8003cdc:	f894 e008 	ldrb.w	lr, [r4, #8]
 8003ce0:	7a63      	ldrb	r3, [r4, #9]
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 8003ce2:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 8003ce6:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 8003cea:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 //     debugLog("E:mpu6050gnd");
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
 8003cee:	f8ad 000c 	strh.w	r0, [sp, #12]
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 8003cf2:	7b22      	ldrb	r2, [r4, #12]
 8003cf4:	7b60      	ldrb	r0, [r4, #13]
    }
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
 8003cf6:	f8ad 100e 	strh.w	r1, [sp, #14]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
 8003cfa:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
 8003cfe:	f894 a00a 	ldrb.w	sl, [r4, #10]
 8003d02:	f894 b00b 	ldrb.w	fp, [r4, #11]
    return 0;
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
 8003d06:	f8ad c010 	strh.w	ip, [sp, #16]
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 8003d0a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 8003d0e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
  }

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
 8003d12:	f8ad 3012 	strh.w	r3, [sp, #18]
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */
 8003d16:	f8ad 2016 	strh.w	r2, [sp, #22]

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
 8003d1a:	f001 0307 	and.w	r3, r1, #7
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d1e:	aa06      	add	r2, sp, #24
 8003d20:	eb02 0243 	add.w	r2, r2, r3, lsl #1

  mpu6050Data[0] = (int16_t)((mpu6050RXData[ 0]<<8) | mpu6050RXData[ 1]); /* Accel X */
  mpu6050Data[1] = (int16_t)((mpu6050RXData[ 2]<<8) | mpu6050RXData[ 3]); /* Accel Y */
  mpu6050Data[2] = (int16_t)((mpu6050RXData[ 4]<<8) | mpu6050RXData[ 5]); /* Accel Z */
  mpu6050Data[3] = (int16_t)((mpu6050RXData[ 8]<<8) | mpu6050RXData[ 9]); /* Gyro X  */
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
 8003d24:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
 8003d28:	f8ad a014 	strh.w	sl, [sp, #20]
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
 8003d2c:	f011 0f08 	tst.w	r1, #8
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d30:	4613      	mov	r3, r2
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d32:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
  mpu6050Data[4] = (int16_t)((mpu6050RXData[10]<<8) | mpu6050RXData[11]); /* Gyro Y  */
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
 8003d36:	f000 80b6 	beq.w	8003ea6 <MPU_thread.lto_priv.88+0x5a6>
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d3a:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d3e:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 8003eec <MPU_thread.lto_priv.88+0x5ec>
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d42:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003ef0 <MPU_thread.lto_priv.88+0x5f0>
  mpu6050Data[5] = (int16_t)((mpu6050RXData[12]<<8) | mpu6050RXData[13]); /* Gyro Z  */

  /* Pitch: */
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d46:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d4a:	ee07 3a90 	vmov	s15, r3
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
 8003d4e:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 8003d52:	495b      	ldr	r1, [pc, #364]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003d54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
 8003d5c:	f002 0307 	and.w	r3, r2, #7
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
 8003d60:	f012 0f08 	tst.w	r2, #8
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d64:	aa06      	add	r2, sp, #24
 8003d66:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003d6a:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003d6e:	ee67 7a87 	vmul.f32	s15, s15, s14

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d72:	4613      	mov	r3, r2
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003d74:	edc7 6a00 	vstr	s13, [r7]
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003d78:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d7c:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
 8003d80:	f000 8084 	beq.w	8003e8c <MPU_thread.lto_priv.88+0x58c>
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d84:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d88:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003eec <MPU_thread.lto_priv.88+0x5ec>
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d8c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003ef0 <MPU_thread.lto_priv.88+0x5f0>
  }

  /* Roll: */
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003d90:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003d94:	ee07 3a90 	vmov	s15, r3
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 8003d98:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003d9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 8003da4:	f002 0307 	and.w	r3, r2, #7
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
 8003da8:	f012 0f08 	tst.w	r2, #8
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003dac:	aa06      	add	r2, sp, #24
 8003dae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003db2:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003db6:	ee67 7a87 	vmul.f32	s15, s15, s14
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003dba:	edc1 6a01 	vstr	s13, [r1, #4]
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003dbe:	edc1 7a04 	vstr	s15, [r1, #16]

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003dc2:	4613      	mov	r3, r2
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
 8003dc4:	493e      	ldr	r1, [pc, #248]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003dc6:	f932 2c0c 	ldrsh.w	r2, [r2, #-12]
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
 8003dca:	f040 8107 	bne.w	8003fdc <MPU_thread.lto_priv.88+0x6dc>
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003dce:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003dd2:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003eec <MPU_thread.lto_priv.88+0x5ec>
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003dd6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003ef0 <MPU_thread.lto_priv.88+0x5f0>
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003dda:	43d2      	mvns	r2, r2
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003ddc:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003dde:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003de2:	ee07 3a90 	vmov	s15, r3
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003de6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003dee:	ee66 6a86 	vmul.f32	s13, s13, s12
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df6:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <MPU_thread.lto_priv.88+0x5c0>)
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003df8:	ed9f 4a3e 	vldr	s8, [pc, #248]	; 8003ef4 <MPU_thread.lto_priv.88+0x5f4>
 8003dfc:	eddf 4a3e 	vldr	s9, [pc, #248]	; 8003ef8 <MPU_thread.lto_priv.88+0x5f8>
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[2] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003e00:	edc1 6a02 	vstr	s13, [r1, #8]
    pIMU->gyroData[2]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003e04:	edc1 7a05 	vstr	s15, [r1, #20]
 8003e08:	2200      	movs	r2, #0
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 8003e0a:	ed93 6a00 	vldr	s12, [r3]
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 8003e0e:	ed93 7a03 	vldr	s14, [r3, #12]
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003e12:	ed93 5a15 	vldr	s10, [r3, #84]	; 0x54
 8003e16:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 8003e1a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 8003e1e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 8003e22:	ee76 6a66 	vsub.f32	s13, s12, s13
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 8003e26:	ee77 7a67 	vsub.f32	s15, s14, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003e2a:	ee25 6a28 	vmul.f32	s12, s10, s17
 8003e2e:	ee25 7a84 	vmul.f32	s14, s11, s8
 8003e32:	eea6 6a88 	vfma.f32	s12, s13, s16
 8003e36:	3204      	adds	r2, #4
{
  uint8_t i;
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
 8003e38:	2a0c      	cmp	r2, #12
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003e3a:	eea7 7aa4 	vfma.f32	s14, s15, s9
 8003e3e:	f103 0304 	add.w	r3, r3, #4
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
 8003e42:	ed43 6a01 	vstr	s13, [r3, #-4]
    pIMU->gyroData[i] -= pIMU->gyroBias[i];

    pIMU->accelFiltered[i] =
 8003e46:	ed83 6a14 	vstr	s12, [r3, #80]	; 0x50
    return;

  for(i = 0; i < 3; i++)
  {
    pIMU->accelData[i] -= pIMU->accelBias[i];
    pIMU->gyroData[i] -= pIMU->gyroBias[i];
 8003e4a:	edc3 7a02 	vstr	s15, [r3, #8]

    pIMU->accelFiltered[i] =
      lpfilter(0.15f, pIMU->accelData[i], pIMU->accelFiltered[i]);
    pIMU->gyroFiltered[i] =
 8003e4e:	ed83 7a08 	vstr	s14, [r3, #32]
{
  uint8_t i;
  if(!mpu6050GetNewData(&g_IMU1))
    return;

  for(i = 0; i < 3; i++)
 8003e52:	d1da      	bne.n	8003e0a <MPU_thread.lto_priv.88+0x50a>
      lpfilter(0.15f, pIMU->accelData[i], pIMU->accelFiltered[i]);
    pIMU->gyroFiltered[i] =
      lpfilter(0.3f, pIMU->gyroData[i], pIMU->gyroFiltered[i]);
  }

  pIMU->theta_gyro -= pIMU->gyroFiltered[2]/(float)(MPU_FREQ);
 8003e54:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 8003e58:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003efc <MPU_thread.lto_priv.88+0x5fc>
 8003e5c:	ed95 7a1c 	vldr	s14, [r5, #112]	; 0x70
 8003e60:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8003e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e68:	edc5 7a1c 	vstr	s15, [r5, #112]	; 0x70
    else
      tick=chVTGetSystemTimeX();

    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
 8003e6c:	f009 0307 	and.w	r3, r9, #7
 8003e70:	2b07      	cmp	r3, #7
 8003e72:	d053      	beq.n	8003f1c <MPU_thread.lto_priv.88+0x61c>
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <MPU_thread.lto_priv.88+0x5d4>)
 8003e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  uint32_t tick = chVTGetSystemTimeX();
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);
 8003e78:	3619      	adds	r6, #25

    if(tick>chVTGetSystemTimeX())
 8003e7a:	42b2      	cmp	r2, r6
    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
      mpu_calc_theta(&g_IMU1);

    count++;
 8003e7c:	f109 0901 	add.w	r9, r9, #1
  uint32_t count = 0;
  while (true)
  {
    tick+=US2ST(MPU_COUNT);

    if(tick>chVTGetSystemTimeX())
 8003e80:	f4bf af0c 	bcs.w	8003c9c <MPU_thread.lto_priv.88+0x39c>
      chThdSleepUntil(tick);
 8003e84:	4630      	mov	r0, r6
 8003e86:	f000 fd2b 	bl	80048e0 <chThdSleepUntil>
 8003e8a:	e708      	b.n	8003c9e <MPU_thread.lto_priv.88+0x39e>
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003e8c:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003e90:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8003eec <MPU_thread.lto_priv.88+0x5ec>
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003e94:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ef0 <MPU_thread.lto_priv.88+0x5f0>
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003e98:	43d2      	mvns	r2, r2
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003e9a:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[1] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[1] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[1] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[1]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[1] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003e9c:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[1]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	e778      	b.n	8003d98 <MPU_thread.lto_priv.88+0x498>
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003ea6:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003eaa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003eec <MPU_thread.lto_priv.88+0x5ec>
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003eae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003ef0 <MPU_thread.lto_priv.88+0x5f0>
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003eb2:	43d2      	mvns	r2, r2
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003eb4:	43db      	mvns	r3, r3
  id = pIMU->axes_conf[0] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[0] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[0] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[0]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
  } else {
    pIMU->accelData[0] = (-1 - mpu6050Data[id + 0])*MPU6050_ACCEL_SCALE;
 8003eb6:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[0]  = (-1 - mpu6050Data[id + 3])*MPU6050_GYRO_SCALE;
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	e746      	b.n	8003d4e <MPU_thread.lto_priv.88+0x44e>
 8003ec0:	20003b14 	.word	0x20003b14
 8003ec4:	200014c8 	.word	0x200014c8
 8003ec8:	40023c00 	.word	0x40023c00
 8003ecc:	08040000 	.word	0x08040000
 8003ed0:	20000888 	.word	0x20000888
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	200014b0 	.word	0x200014b0
 8003edc:	3f59999a 	.word	0x3f59999a
 8003ee0:	3e19999a 	.word	0x3e19999a
 8003ee4:	200014b8 	.word	0x200014b8
 8003ee8:	200012f4 	.word	0x200012f4
 8003eec:	3a1cf5c3 	.word	0x3a1cf5c3
 8003ef0:	3bfa232d 	.word	0x3bfa232d
 8003ef4:	3f333333 	.word	0x3f333333
 8003ef8:	3e99999a 	.word	0x3e99999a
 8003efc:	43c80000 	.word	0x43c80000
  status = i2cMasterTransmitTimeout(MPU_USE_I2C, pIMU->addr, mpu6050TXData, 1,
    mpu6050RXData, 14, MS2ST(MPU6050_READ_TIMEOUT_MS));
	i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 8003f00:	4b73      	ldr	r3, [pc, #460]	; (80040d0 <MPU_thread.lto_priv.88+0x7d0>)
 8003f02:	9a01      	ldr	r2, [sp, #4]
 8003f04:	7a1b      	ldrb	r3, [r3, #8]
 8003f06:	7013      	strb	r3, [r2, #0]
 8003f08:	4a72      	ldr	r2, [pc, #456]	; (80040d4 <MPU_thread.lto_priv.88+0x7d4>)
    if (g_i2cErrorInfo.last_i2c_error) {
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ae      	beq.n	8003e6c <MPU_thread.lto_priv.88+0x56c>
      g_i2cErrorInfo.i2c_error_counter++;
 8003f0e:	8853      	ldrh	r3, [r2, #2]
 8003f10:	3301      	adds	r3, #1
 8003f12:	8053      	strh	r3, [r2, #2]
    else
      tick=chVTGetSystemTimeX();

    mpu6050update(&g_IMU1);

    if(count % 8 == 7)
 8003f14:	f009 0307 	and.w	r3, r9, #7
 8003f18:	2b07      	cmp	r3, #7
 8003f1a:	d1ab      	bne.n	8003e74 <MPU_thread.lto_priv.88+0x574>
}

#define RAD2DEC 180.0f / M_PI
void mpu_calc_theta(PIMUStruct pIMU)
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;
 8003f1c:	ed95 7a16 	vldr	s14, [r5, #88]	; 0x58
 8003f20:	edd5 7a15 	vldr	s15, [r5, #84]	; 0x54
 8003f24:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003f28:	ee17 0a90 	vmov	r0, s15
 8003f2c:	f7fc fb5c 	bl	80005e8 <__aeabi_f2d>
 8003f30:	ec41 0b10 	vmov	d0, r0, r1
 8003f34:	f003 f83c 	bl	8006fb0 <atan>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	ec51 0b10 	vmov	r0, r1, d0
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <MPU_thread.lto_priv.88+0x7d8>)
 8003f40:	f7fc fba6 	bl	8000690 <__aeabi_dmul>
 8003f44:	a360      	add	r3, pc, #384	; (adr r3, 80040c8 <MPU_thread.lto_priv.88+0x7c8>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f7fc fccb 	bl	80008e4 <__aeabi_ddiv>
 8003f4e:	f7fc fdb7 	bl	8000ac0 <__aeabi_d2f>

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
 8003f52:	ed95 9a1d 	vldr	s18, [r5, #116]	; 0x74
}

#define RAD2DEC 180.0f / M_PI
void mpu_calc_theta(PIMUStruct pIMU)
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;
 8003f56:	66e8      	str	r0, [r5, #108]	; 0x6c
 8003f58:	ee07 0a90 	vmov	s15, r0

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
 8003f5c:	ee77 9ac9 	vsub.f32	s19, s15, s18
  float theta_prev = pIMU->theta;
  if(abs(d_accel) < 0.5f)
 8003f60:	ee19 0a90 	vmov	r0, s19
 8003f64:	f7fc fb40 	bl	80005e8 <__aeabi_f2d>
 8003f68:	ec41 0b10 	vmov	d0, r0, r1
 8003f6c:	f002 ff80 	bl	8006e70 <abs>
 8003f70:	ee07 0a90 	vmov	s15, r0
 8003f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8003f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	d435      	bmi.n	8003ff2 <MPU_thread.lto_priv.88+0x6f2>
    alpha = 0.6f;
  else if(abs(d_accel) < 2.0f)
 8003f86:	eeb0 7a00 	vmov.f32	s14, #0
 8003f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8e:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80040dc <MPU_thread.lto_priv.88+0x7dc>
 8003f92:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80040e0 <MPU_thread.lto_priv.88+0x7e0>
 8003f96:	eddf 7a53 	vldr	s15, [pc, #332]	; 80040e4 <MPU_thread.lto_priv.88+0x7e4>
 8003f9a:	eddf 6a53 	vldr	s13, [pc, #332]	; 80040e8 <MPU_thread.lto_priv.88+0x7e8>
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	bf58      	it	pl
 8003fa4:	eeb0 7a67 	vmovpl.f32	s14, s15
 8003fa8:	bf58      	it	pl
 8003faa:	eeb0 6a66 	vmovpl.f32	s12, s13
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 8003fae:	edd5 7a1c 	vldr	s15, [r5, #112]	; 0x70
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003fb2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80040ec <MPU_thread.lto_priv.88+0x7ec>
 8003fb6:	eddf 5a4e 	vldr	s11, [pc, #312]	; 80040f0 <MPU_thread.lto_priv.88+0x7f0>
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003fbe:	ee29 7a26 	vmul.f32	s14, s18, s13
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 8003fc2:	eee9 7a86 	vfma.f32	s15, s19, s12
  pIMU->theta_gyro = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	672b      	str	r3, [r5, #112]	; 0x70
  else if(abs(d_accel) < 2.0f)
    alpha = 0.2f;
  else
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
 8003fca:	ee39 9a27 	vadd.f32	s18, s18, s15
  return 1;
}

static float lpfilter(float alpha, float input, float prev)
{
  return alpha*input + (1.0f - alpha)*prev;
 8003fce:	eef0 7a47 	vmov.f32	s15, s14
 8003fd2:	eee9 7a25 	vfma.f32	s15, s18, s11
    alpha = 0.05f;

  pIMU->theta += d_accel * alpha + pIMU->theta_gyro * (1.0f - alpha);
  pIMU->theta_gyro = 0;

  pIMU->theta = lpfilter(0.4f, pIMU->theta, theta_prev);
 8003fd6:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8003fda:	e74b      	b.n	8003e74 <MPU_thread.lto_priv.88+0x574>

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003fdc:	f933 3c06 	ldrsh.w	r3, [r3, #-6]
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003fe0:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80040f4 <MPU_thread.lto_priv.88+0x7f4>
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003fe4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80040f8 <MPU_thread.lto_priv.88+0x7f8>
  }

  /* Yaw: */
  id = pIMU->axes_conf[2] & IMU_AXIS_ID_MASK;
  if (pIMU->axes_conf[2] & IMU_AXIS_DIR_POS) {
    pIMU->accelData[2] = mpu6050Data[id + 0]*MPU6050_ACCEL_SCALE;
 8003fe8:	ee06 2a90 	vmov	s13, r2
    pIMU->gyroData[2]  = mpu6050Data[id + 3]*MPU6050_GYRO_SCALE;
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	e6f9      	b.n	8003de6 <MPU_thread.lto_priv.88+0x4e6>
{
  pIMU->theta_accl = atan(pIMU->accelFiltered[1]/pIMU->accelFiltered[0]) * RAD2DEC;

  float alpha, d_accel = pIMU->theta_accl - pIMU->theta;
  float theta_prev = pIMU->theta;
  if(abs(d_accel) < 0.5f)
 8003ff2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80040fc <MPU_thread.lto_priv.88+0x7fc>
    alpha = 0.6f;
 8003ff6:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80040ec <MPU_thread.lto_priv.88+0x7ec>
 8003ffa:	e7d8      	b.n	8003fae <MPU_thread.lto_priv.88+0x6ae>
 8003ffc:	f7fe ff58 	bl	8002eb0 <flashUnlock.part.1.lto_priv.86>
    flashLock();
}

void flashRead(flashaddr_t address, char* buffer, size_t size)
{
    if(flashUnlock() == CH_FAILED)
 8004000:	2800      	cmp	r0, #0
 8004002:	f47f ae0d 	bne.w	8003c20 <MPU_thread.lto_priv.88+0x320>
 8004006:	e610      	b.n	8003c2a <MPU_thread.lto_priv.88+0x32a>


  i2cReleaseBus(MPU_USE_I2C);

  if (status != MSG_OK) {
    g_i2cErrorInfo.last_i2c_error = i2cGetErrors(MPU_USE_I2C);
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <MPU_thread.lto_priv.88+0x7d0>)
 800400a:	4a32      	ldr	r2, [pc, #200]	; (80040d4 <MPU_thread.lto_priv.88+0x7d4>)
 800400c:	7a1b      	ldrb	r3, [r3, #8]
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	7013      	strb	r3, [r2, #0]
    if (g_i2cErrorInfo.last_i2c_error) {
 8004012:	b113      	cbz	r3, 800401a <MPU_thread.lto_priv.88+0x71a>
      g_i2cErrorInfo.i2c_error_counter++;
 8004014:	8853      	ldrh	r3, [r2, #2]
 8004016:	442b      	add	r3, r5
 8004018:	8053      	strh	r3, [r2, #2]
     // debugLog("E:mpu6050i-cfg");
    }
    g_i2cErrorInfo.errorFlag |= 0x08;
 800401a:	9a01      	ldr	r2, [sp, #4]
 800401c:	7913      	ldrb	r3, [r2, #4]
 800401e:	f043 0308 	orr.w	r3, r3, #8
 8004022:	7113      	strb	r3, [r2, #4]
 8004024:	e581      	b.n	8003b2a <MPU_thread.lto_priv.88+0x22a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004026:	b672      	cpsid	i
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <MPU_thread.lto_priv.88+0x800>)
 800402a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800402c:	e7fe      	b.n	800402c <MPU_thread.lto_priv.88+0x72c>
 800402e:	b672      	cpsid	i
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <MPU_thread.lto_priv.88+0x800>)
 8004032:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004034:	e7fe      	b.n	8004034 <MPU_thread.lto_priv.88+0x734>
 8004036:	b672      	cpsid	i
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 800403a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800403c:	e7fe      	b.n	800403c <MPU_thread.lto_priv.88+0x73c>
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 800403e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <MPU_thread.lto_priv.88+0x808>)
 8004044:	fbb3 f6f2 	udiv	r6, r3, r2
 8004048:	fb02 f206 	mul.w	r2, r2, r6
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d133      	bne.n	80040ba <MPU_thread.lto_priv.88+0x7ba>
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8004052:	b2b2      	uxth	r2, r6
 8004054:	e515      	b.n	8003a82 <MPU_thread.lto_priv.88+0x182>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8004056:	f023 0308 	bic.w	r3, r3, #8
 800405a:	b29b      	uxth	r3, r3
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	e526      	b.n	8003ab0 <MPU_thread.lto_priv.88+0x1b0>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8004062:	f043 030a 	orr.w	r3, r3, #10
 8004066:	e523      	b.n	8003ab0 <MPU_thread.lto_priv.88+0x1b0>
 8004068:	b672      	cpsid	i
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <MPU_thread.lto_priv.88+0x80c>)
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
 800406e:	e7fe      	b.n	800406e <MPU_thread.lto_priv.88+0x76e>
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
    /* Configure clock_div in standard mode.*/
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8004070:	2f01      	cmp	r7, #1
 8004072:	d003      	beq.n	800407c <MPU_thread.lto_priv.88+0x77c>
 8004074:	b672      	cpsid	i
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 8004078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800407a:	e7fe      	b.n	800407a <MPU_thread.lto_priv.88+0x77a>

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 800407c:	0052      	lsls	r2, r2, #1
 800407e:	4e22      	ldr	r6, [pc, #136]	; (8004108 <MPU_thread.lto_priv.88+0x808>)
 8004080:	fbb6 f3f2 	udiv	r3, r6, r2
 8004084:	fb02 f203 	mul.w	r2, r2, r3
 8004088:	1ab6      	subs	r6, r6, r2
 800408a:	b996      	cbnz	r6, 80040b2 <MPU_thread.lto_priv.88+0x7b2>
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 800408c:	b29a      	uxth	r2, r3

    osalDbgAssert(clock_div >= 0x04,
 800408e:	2a03      	cmp	r2, #3
 8004090:	d90b      	bls.n	80040aa <MPU_thread.lto_priv.88+0x7aa>
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8004092:	232b      	movs	r3, #43	; 0x2b

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8004094:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8004098:	620b      	str	r3, [r1, #32]
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 800409a:	f3c2 030b 	ubfx	r3, r2, #0, #12

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800409e:	f4ff acf8 	bcc.w	8003a92 <MPU_thread.lto_priv.88+0x192>
 80040a2:	b672      	cpsid	i
 80040a4:	4b17      	ldr	r3, [pc, #92]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 80040a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a8:	e7fe      	b.n	80040a8 <MPU_thread.lto_priv.88+0x7a8>
 80040aa:	b672      	cpsid	i
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 80040ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b0:	e7fe      	b.n	80040b0 <MPU_thread.lto_priv.88+0x7b0>
 80040b2:	b672      	cpsid	i
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 80040b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b8:	e7fe      	b.n	80040b8 <MPU_thread.lto_priv.88+0x7b8>
 80040ba:	b672      	cpsid	i
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <MPU_thread.lto_priv.88+0x804>)
 80040be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040c0:	e7fe      	b.n	80040c0 <MPU_thread.lto_priv.88+0x7c0>
 80040c2:	bf00      	nop
 80040c4:	f3af 8000 	nop.w
 80040c8:	60000000 	.word	0x60000000
 80040cc:	400921fb 	.word	0x400921fb
 80040d0:	200012e8 	.word	0x200012e8
 80040d4:	200014b0 	.word	0x200014b0
 80040d8:	40668000 	.word	0x40668000
 80040dc:	3e4ccccd 	.word	0x3e4ccccd
 80040e0:	3f4ccccd 	.word	0x3f4ccccd
 80040e4:	3f733333 	.word	0x3f733333
 80040e8:	3d4ccccd 	.word	0x3d4ccccd
 80040ec:	3f19999a 	.word	0x3f19999a
 80040f0:	3ecccccd 	.word	0x3ecccccd
 80040f4:	3a1cf5c3 	.word	0x3a1cf5c3
 80040f8:	3bfa232d 	.word	0x3bfa232d
 80040fc:	3ecccccc 	.word	0x3ecccccc
 8004100:	08007870 	.word	0x08007870
 8004104:	08007850 	.word	0x08007850
 8004108:	0280de80 	.word	0x0280de80
 800410c:	080076f0 	.word	0x080076f0

08004110 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8004112:	6842      	ldr	r2, [r0, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8004116:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8004118:	608b      	str	r3, [r1, #8]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800411a:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800411c:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800411e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004122:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8004124:	18e4      	adds	r4, r4, r3
 8004126:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800412a:	4293      	cmp	r3, r2
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800412c:	6802      	ldr	r2, [r0, #0]

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800412e:	bf88      	it	hi
 8004130:	6043      	strhi	r3, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004132:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8004134:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8004136:	e9c0 4504 	strd	r4, r5, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800413a:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800413c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 800413e:	bf38      	it	cc
 8004140:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8004142:	bc70      	pop	{r4, r5, r6}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e0001000 	.word	0xe0001000
 800414c:	00000000 	.word	0x00000000

08004150 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8004150:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <_dbg_trace+0x30>)
 8004152:	490c      	ldr	r1, [pc, #48]	; (8004184 <_dbg_trace+0x34>)
 8004154:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8004156:	b410      	push	{r4}
 8004158:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800415a:	6991      	ldr	r1, [r2, #24]
 800415c:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 800415e:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8004160:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004162:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8004164:	f890 1020 	ldrb.w	r1, [r0, #32]
 8004168:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800416a:	3310      	adds	r3, #16
 800416c:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 8004170:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8004172:	bf28      	it	cs
 8004174:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 8004178:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800417a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	20000b30 	.word	0x20000b30
 8004184:	40000c00 	.word	0x40000c00
	...

08004190 <_idle_thread.lto_priv.97>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8004190:	e7fe      	b.n	8004190 <_idle_thread.lto_priv.97>
 8004192:	bf00      	nop
	...

080041a0 <_stats_increase_irq>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80041a0:	2320      	movs	r3, #32
 80041a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <_stats_increase_irq+0x1c>)
 80041a8:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 80041b2:	2300      	movs	r3, #0
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000b30 	.word	0x20000b30

080041c0 <chTMStopMeasurementX>:
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80041c2:	4910      	ldr	r1, [pc, #64]	; (8004204 <chTMStopMeasurementX+0x44>)
 80041c4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80041c6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80041c8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80041ca:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80041ce:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80041d0:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80041d2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80041da:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80041dc:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80041de:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80041e0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80041e4:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80041e6:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80041ea:	bf88      	it	hi
 80041ec:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80041ee:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80041f0:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80041f2:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80041f6:	bf38      	it	cc
 80041f8:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80041fa:	bcf0      	pop	{r4, r5, r6, r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e0001000 	.word	0xe0001000
 8004204:	20000b30 	.word	0x20000b30
	...

08004210 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <_stats_stop_measure_crit_isr+0x8>)
 8004212:	f7ff bfd5 	b.w	80041c0 <chTMStopMeasurementX>
 8004216:	bf00      	nop
 8004218:	20000ff8 	.word	0x20000ff8
 800421c:	00000000 	.word	0x00000000

08004220 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <_stats_stop_measure_crit_thd+0x8>)
 8004222:	f7ff bfcd 	b.w	80041c0 <chTMStopMeasurementX>
 8004226:	bf00      	nop
 8004228:	20000fe0 	.word	0x20000fe0
 800422c:	00000000 	.word	0x00000000

08004230 <chTMStartMeasurementX>:
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <chTMStartMeasurementX+0x8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8004234:	6083      	str	r3, [r0, #8]
 8004236:	4770      	bx	lr
 8004238:	e0001000 	.word	0xe0001000
 800423c:	00000000 	.word	0x00000000

08004240 <_stats_start_measure_crit_isr>:
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8004240:	4801      	ldr	r0, [pc, #4]	; (8004248 <_stats_start_measure_crit_isr+0x8>)
 8004242:	f7ff bff5 	b.w	8004230 <chTMStartMeasurementX>
 8004246:	bf00      	nop
 8004248:	20000ff8 	.word	0x20000ff8
 800424c:	00000000 	.word	0x00000000

08004250 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <_stats_start_measure_crit_thd+0x8>)
 8004252:	f7ff bfed 	b.w	8004230 <chTMStartMeasurementX>
 8004256:	bf00      	nop
 8004258:	20000fe0 	.word	0x20000fe0
 800425c:	00000000 	.word	0x00000000

08004260 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8004260:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp, *cp;

  otp = currp;
 8004262:	4d1b      	ldr	r5, [pc, #108]	; (80042d0 <chSchDoRescheduleAhead+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8004264:	682a      	ldr	r2, [r5, #0]
 8004266:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	68a1      	ldr	r1, [r4, #8]
 800426c:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800426e:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8004270:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004272:	605d      	str	r5, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004274:	f882 6020 	strb.w	r6, [r2, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004278:	61aa      	str	r2, [r5, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800427a:	f884 0020 	strb.w	r0, [r4, #32]
 800427e:	e000      	b.n	8004282 <chSchDoRescheduleAhead+0x22>
 8004280:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	428a      	cmp	r2, r1
 8004286:	d8fb      	bhi.n	8004280 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800428c:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800428e:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8004290:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8004292:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 8004294:	f7ff ff5c 	bl	8004150 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8004298:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
 800429c:	69a9      	ldr	r1, [r5, #24]
 800429e:	4e0c      	ldr	r6, [pc, #48]	; (80042d0 <chSchDoRescheduleAhead+0x70>)
 80042a0:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80042a2:	3148      	adds	r1, #72	; 0x48
 80042a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80042a8:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80042ac:	f7ff ff30 	bl	8004110 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80042b0:	f3ef 8309 	mrs	r3, PSP
 80042b4:	69e2      	ldr	r2, [r4, #28]
 80042b6:	3b64      	subs	r3, #100	; 0x64
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d805      	bhi.n	80042c8 <chSchDoRescheduleAhead+0x68>
 80042bc:	69b0      	ldr	r0, [r6, #24]
 80042be:	4621      	mov	r1, r4
}
 80042c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80042c4:	f7fc b804 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c8:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80042ca:	4b02      	ldr	r3, [pc, #8]	; (80042d4 <chSchDoRescheduleAhead+0x74>)
 80042cc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80042ce:	e7fe      	b.n	80042ce <chSchDoRescheduleAhead+0x6e>
 80042d0:	20000b30 	.word	0x20000b30
 80042d4:	08007910 	.word	0x08007910
	...

080042e0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80042e0:	f7ff bfbe 	b.w	8004260 <chSchDoRescheduleAhead>
	...

080042f0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <chDbgCheckClassS+0x18>)
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	b91a      	cbnz	r2, 80042fe <chDbgCheckClassS+0xe>
 80042f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	dd00      	ble.n	80042fe <chDbgCheckClassS+0xe>
 80042fc:	4770      	bx	lr
 80042fe:	b672      	cpsid	i
 8004300:	4a02      	ldr	r2, [pc, #8]	; (800430c <chDbgCheckClassS+0x1c>)
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
 8004304:	e7fe      	b.n	8004304 <chDbgCheckClassS+0x14>
 8004306:	bf00      	nop
 8004308:	20000b30 	.word	0x20000b30
 800430c:	08007920 	.word	0x08007920

08004310 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8004310:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8004312:	4c16      	ldr	r4, [pc, #88]	; (800436c <chSchGoSleepS+0x5c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8004314:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8004316:	f7ff ffeb 	bl	80042f0 <chDbgCheckClassS>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800431a:	6823      	ldr	r3, [r4, #0]

  otp = currp;
 800431c:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 800431e:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8004320:	f885 6020 	strb.w	r6, [r5, #32]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004324:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004326:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8004328:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800432a:	f883 1020 	strb.w	r1, [r3, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800432e:	6022      	str	r2, [r4, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004330:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8004332:	f7ff ff0d 	bl	8004150 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8004336:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800433a:	69a1      	ldr	r1, [r4, #24]
 800433c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800433e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8004342:	3148      	adds	r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8004344:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8004348:	f7ff fee2 	bl	8004110 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800434c:	f3ef 8309 	mrs	r3, PSP
 8004350:	69ea      	ldr	r2, [r5, #28]
 8004352:	3b64      	subs	r3, #100	; 0x64
 8004354:	429a      	cmp	r2, r3
 8004356:	d805      	bhi.n	8004364 <chSchGoSleepS+0x54>
 8004358:	69a0      	ldr	r0, [r4, #24]
 800435a:	4629      	mov	r1, r5
}
 800435c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8004360:	f7fb bfb6 	b.w	80002d0 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
 8004366:	4b02      	ldr	r3, [pc, #8]	; (8004370 <chSchGoSleepS+0x60>)
 8004368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800436a:	e7fe      	b.n	800436a <chSchGoSleepS+0x5a>
 800436c:	20000b30 	.word	0x20000b30
 8004370:	08007910 	.word	0x08007910
	...

08004380 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <chDbgCheckClassI+0x18>)
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	2a00      	cmp	r2, #0
 8004386:	db03      	blt.n	8004390 <chDbgCheckClassI+0x10>
 8004388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438a:	2a00      	cmp	r2, #0
 800438c:	dd00      	ble.n	8004390 <chDbgCheckClassI+0x10>
 800438e:	4770      	bx	lr
 8004390:	b672      	cpsid	i
 8004392:	4a02      	ldr	r2, [pc, #8]	; (800439c <chDbgCheckClassI+0x1c>)
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c
 8004396:	e7fe      	b.n	8004396 <chDbgCheckClassI+0x16>
 8004398:	20000b30 	.word	0x20000b30
 800439c:	08007928 	.word	0x08007928

080043a0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80043a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043a4:	460c      	mov	r4, r1
 80043a6:	b087      	sub	sp, #28
 80043a8:	4607      	mov	r7, r0

  chDbgCheckClassS();
 80043aa:	f7ff ffa1 	bl	80042f0 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80043ae:	1c63      	adds	r3, r4, #1
 80043b0:	d055      	beq.n	800445e <chSchGoSleepTimeoutS+0xbe>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80043b2:	4e51      	ldr	r6, [pc, #324]	; (80044f8 <chSchGoSleepTimeoutS+0x158>)
 80043b4:	f8d6 9018 	ldr.w	r9, [r6, #24]
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 80043b8:	f7ff ffe2 	bl	8004380 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80043bc:	b91c      	cbnz	r4, 80043c6 <chSchGoSleepTimeoutS+0x26>
 80043be:	b672      	cpsid	i
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <chSchGoSleepTimeoutS+0x15c>)
 80043c2:	62f3      	str	r3, [r6, #44]	; 0x2c
 80043c4:	e7fe      	b.n	80043c4 <chSchGoSleepTimeoutS+0x24>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80043c6:	46b0      	mov	r8, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80043c8:	2c01      	cmp	r4, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80043ca:	f858 5f1c 	ldr.w	r5, [r8, #28]!
 80043ce:	4a4c      	ldr	r2, [pc, #304]	; (8004500 <chSchGoSleepTimeoutS+0x160>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80043d0:	494c      	ldr	r1, [pc, #304]	; (8004504 <chSchGoSleepTimeoutS+0x164>)
 80043d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80043d4:	f8cd 9014 	str.w	r9, [sp, #20]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80043d8:	bf08      	it	eq
 80043da:	2402      	moveq	r4, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80043dc:	4545      	cmp	r5, r8

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80043de:	9104      	str	r1, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80043e0:	d046      	beq.n	8004470 <chSchGoSleepTimeoutS+0xd0>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 80043e2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80043e4:	1a1b      	subs	r3, r3, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 80043e6:	18e4      	adds	r4, r4, r3
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 80043e8:	68ab      	ldr	r3, [r5, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;

    if (delta < now - ch.vtlist.vt_lasttime) {
 80043ea:	d355      	bcc.n	8004498 <chSchGoSleepTimeoutS+0xf8>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 80043ec:	682d      	ldr	r5, [r5, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 80043ee:	1ae4      	subs	r4, r4, r3
 80043f0:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d904      	bls.n	8004400 <chSchGoSleepTimeoutS+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 80043f6:	682d      	ldr	r5, [r5, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80043f8:	1ae4      	subs	r4, r4, r3
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 80043fa:	68ab      	ldr	r3, [r5, #8]
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d3fa      	bcc.n	80043f6 <chSchGoSleepTimeoutS+0x56>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8004400:	686b      	ldr	r3, [r5, #4]
 8004402:	9302      	str	r3, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8004404:	f10d 0904 	add.w	r9, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8004408:	9501      	str	r5, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800440a:	f8c3 9000 	str.w	r9, [r3]
  p->vt_prev = vtp;
 800440e:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->vt_delta = delta
 8004412:	9403      	str	r4, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8004414:	68ab      	ldr	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800441a:	1b1b      	subs	r3, r3, r4
 800441c:	60ab      	str	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800441e:	6272      	str	r2, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8004420:	4638      	mov	r0, r7
 8004422:	f7ff ff75 	bl	8004310 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8004426:	f7ff ffab 	bl	8004380 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 800442a:	9b04      	ldr	r3, [sp, #16]
 800442c:	b1db      	cbz	r3, 8004466 <chSchGoSleepTimeoutS+0xc6>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800442e:	f7ff ffa7 	bl	8004380 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8004432:	69f3      	ldr	r3, [r6, #28]
 8004434:	4930      	ldr	r1, [pc, #192]	; (80044f8 <chSchGoSleepTimeoutS+0x158>)
 8004436:	454b      	cmp	r3, r9
 8004438:	d035      	beq.n	80044a6 <chSchGoSleepTimeoutS+0x106>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800443a:	9a02      	ldr	r2, [sp, #8]
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8004440:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8004442:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8004444:	4543      	cmp	r3, r8
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8004446:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8004448:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800444a:	d00c      	beq.n	8004466 <chSchGoSleepTimeoutS+0xc6>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	9a03      	ldr	r2, [sp, #12]
 8004450:	440a      	add	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8004454:	69b3      	ldr	r3, [r6, #24]
 8004456:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8004458:	b007      	add	sp, #28
 800445a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800445e:	4638      	mov	r0, r7
 8004460:	f7ff ff56 	bl	8004310 <chSchGoSleepS>
 8004464:	4e24      	ldr	r6, [pc, #144]	; (80044f8 <chSchGoSleepTimeoutS+0x158>)
  }

  return currp->p_u.rdymsg;
 8004466:	69b3      	ldr	r3, [r6, #24]
 8004468:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 800446a:	b007      	add	sp, #28
 800446c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 8004470:	9403      	str	r4, [sp, #12]
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8004472:	62b3      	str	r3, [r6, #40]	; 0x28
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8004474:	68d1      	ldr	r1, [r2, #12]
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8004476:	9501      	str	r5, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8004478:	f10d 0904 	add.w	r9, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800447c:	f011 0102 	ands.w	r1, r1, #2
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8004480:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8004482:	441c      	add	r4, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8004484:	f8c6 901c 	str.w	r9, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8004488:	f8c6 9020 	str.w	r9, [r6, #32]
 800448c:	d129      	bne.n	80044e2 <chSchGoSleepTimeoutS+0x142>
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800448e:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8004490:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8004492:	6111      	str	r1, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8004494:	60d3      	str	r3, [r2, #12]
 8004496:	e7c3      	b.n	8004420 <chSchGoSleepTimeoutS+0x80>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8004498:	429c      	cmp	r4, r3
 800449a:	d2aa      	bcs.n	80043f2 <chSchGoSleepTimeoutS+0x52>
 800449c:	4420      	add	r0, r4
 800449e:	f7fd fcb7 	bl	8001e10 <stSetAlarm>
 80044a2:	68ab      	ldr	r3, [r5, #8]
 80044a4:	e7a5      	b.n	80043f2 <chSchGoSleepTimeoutS+0x52>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80044a6:	9a01      	ldr	r2, [sp, #4]
 80044a8:	61ca      	str	r2, [r1, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80044aa:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80044ac:	4542      	cmp	r2, r8
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80044ae:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_func = NULL;
 80044b2:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80044b4:	d019      	beq.n	80044ea <chSchGoSleepTimeoutS+0x14a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80044b6:	6893      	ldr	r3, [r2, #8]
 80044b8:	9c03      	ldr	r4, [sp, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80044ba:	4811      	ldr	r0, [pc, #68]	; (8004500 <chSchGoSleepTimeoutS+0x160>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80044bc:	6a89      	ldr	r1, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80044be:	4423      	add	r3, r4
 80044c0:	6093      	str	r3, [r2, #8]
 80044c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80044c4:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d9cd      	bls.n	8004466 <chSchGoSleepTimeoutS+0xc6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80044ca:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	bf98      	it	ls
 80044d0:	2302      	movls	r3, #2
 80044d2:	4418      	add	r0, r3
 80044d4:	f7fd fc9c 	bl	8001e10 <stSetAlarm>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80044d8:	69b3      	ldr	r3, [r6, #24]
 80044da:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80044dc:	b007      	add	sp, #28
 80044de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044e2:	b672      	cpsid	i
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <chSchGoSleepTimeoutS+0x168>)
 80044e6:	62f3      	str	r3, [r6, #44]	; 0x2c
 80044e8:	e7fe      	b.n	80044e8 <chSchGoSleepTimeoutS+0x148>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <chSchGoSleepTimeoutS+0x160>)
 80044ec:	60d3      	str	r3, [r2, #12]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80044ee:	69b3      	ldr	r3, [r6, #24]
 80044f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80044f2:	b007      	add	sp, #28
 80044f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044f8:	20000b30 	.word	0x20000b30
 80044fc:	080078b0 	.word	0x080078b0
 8004500:	40000c00 	.word	0x40000c00
 8004504:	080046d1 	.word	0x080046d1
 8004508:	080078c0 	.word	0x080078c0
 800450c:	00000000 	.word	0x00000000

08004510 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8004510:	b169      	cbz	r1, 800452e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8004514:	b410      	push	{r4}
 8004516:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8004518:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800451a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800451c:	2004      	movs	r0, #4
 800451e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8004522:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8004524:	6053      	str	r3, [r2, #4]
}
 8004526:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800452a:	f7ff bf39 	b.w	80043a0 <chSchGoSleepTimeoutS>
}
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	4770      	bx	lr
 8004534:	20000b30 	.word	0x20000b30
	...

08004540 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8004540:	b510      	push	{r4, lr}
 8004542:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8004544:	f7ff ff1c 	bl	8004380 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8004548:	b1cc      	cbz	r4, 800457e <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 800454a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800454e:	b18b      	cbz	r3, 8004574 <chSchReadyI+0x34>
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d00f      	beq.n	8004574 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004554:	2200      	movs	r2, #0
 8004556:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <chSchReadyI+0x48>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800455a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800455e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	428a      	cmp	r2, r1
 8004564:	d2fb      	bcs.n	800455e <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800456a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800456c:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800456e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8004570:	605c      	str	r4, [r3, #4]

  return tp;
}
 8004572:	bd10      	pop	{r4, pc}
 8004574:	b672      	cpsid	i
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <chSchReadyI+0x48>)
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <chSchReadyI+0x4c>)
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
 800457c:	e7fe      	b.n	800457c <chSchReadyI+0x3c>
 800457e:	b672      	cpsid	i
 8004580:	4b01      	ldr	r3, [pc, #4]	; (8004588 <chSchReadyI+0x48>)
 8004582:	4a02      	ldr	r2, [pc, #8]	; (800458c <chSchReadyI+0x4c>)
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
 8004586:	e7fe      	b.n	8004586 <chSchReadyI+0x46>
 8004588:	20000b30 	.word	0x20000b30
 800458c:	080078d0 	.word	0x080078d0

08004590 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8004590:	6803      	ldr	r3, [r0, #0]
 8004592:	b173      	cbz	r3, 80045b2 <chThdResumeI+0x22>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8004594:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004598:	2a03      	cmp	r2, #3
 800459a:	d004      	beq.n	80045a6 <chThdResumeI+0x16>
 800459c:	b672      	cpsid	i
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <chThdResumeI+0x24>)
 80045a0:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <chThdResumeI+0x28>)
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80045a4:	e7fe      	b.n	80045a4 <chThdResumeI+0x14>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80045a6:	2200      	movs	r2, #0
 80045a8:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80045aa:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80045ac:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80045ae:	f7ff bfc7 	b.w	8004540 <chSchReadyI>
 80045b2:	4770      	bx	lr
 80045b4:	20000b30 	.word	0x20000b30
 80045b8:	08007a10 	.word	0x08007a10
 80045bc:	00000000 	.word	0x00000000

080045c0 <chThdExitS>:
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80045c0:	4d10      	ldr	r5, [pc, #64]	; (8004604 <chThdExitS+0x44>)
 80045c2:	69ac      	ldr	r4, [r5, #24]
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80045c4:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80045c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80045c8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80045ca:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80045ce:	429e      	cmp	r6, r3
 80045d0:	d007      	beq.n	80045e2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ffb2 	bl	8004540 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80045dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80045de:	42b3      	cmp	r3, r6
 80045e0:	d1f7      	bne.n	80045d2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80045e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80045e6:	079b      	lsls	r3, r3, #30
 80045e8:	d104      	bne.n	80045f4 <chThdExitS+0x34>
    REG_REMOVE(tp);
 80045ea:	6963      	ldr	r3, [r4, #20]
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	611a      	str	r2, [r3, #16]
 80045f0:	6922      	ldr	r2, [r4, #16]
 80045f2:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80045f4:	200f      	movs	r0, #15
 80045f6:	f7ff fe8b 	bl	8004310 <chSchGoSleepS>
 80045fa:	b672      	cpsid	i
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <chThdExitS+0x48>)
 80045fe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004600:	e7fe      	b.n	8004600 <chThdExitS+0x40>
 8004602:	bf00      	nop
 8004604:	20000b30 	.word	0x20000b30
 8004608:	080078f0 	.word	0x080078f0
 800460c:	00000000 	.word	0x00000000

08004610 <_dbg_check_leave_isr>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004610:	2320      	movs	r3, #32
 8004612:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_leave_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <_dbg_check_leave_isr+0x24>)
 8004618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461a:	2a00      	cmp	r2, #0
 800461c:	dd01      	ble.n	8004622 <_dbg_check_leave_isr+0x12>
 800461e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004620:	b119      	cbz	r1, 800462a <_dbg_check_leave_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004622:	b672      	cpsid	i
 8004624:	4a04      	ldr	r2, [pc, #16]	; (8004638 <_dbg_check_leave_isr+0x28>)
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
 8004628:	e7fe      	b.n	8004628 <_dbg_check_leave_isr+0x18>
    chSysHalt("SV#9");
  }
  ch.dbg.isr_cnt--;
 800462a:	3a01      	subs	r2, #1
 800462c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800462e:	f381 8811 	msr	BASEPRI, r1
 8004632:	4770      	bx	lr
 8004634:	20000b30 	.word	0x20000b30
 8004638:	08007930 	.word	0x08007930
 800463c:	00000000 	.word	0x00000000

08004640 <_dbg_check_enter_isr>:
 8004640:	2320      	movs	r3, #32
 8004642:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_enter_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <_dbg_check_enter_isr+0x24>)
 8004648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464a:	2a00      	cmp	r2, #0
 800464c:	db01      	blt.n	8004652 <_dbg_check_enter_isr+0x12>
 800464e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004650:	b119      	cbz	r1, 800465a <_dbg_check_enter_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004652:	b672      	cpsid	i
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <_dbg_check_enter_isr+0x28>)
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c
 8004658:	e7fe      	b.n	8004658 <_dbg_check_enter_isr+0x18>
    chSysHalt("SV#8");
  }
  ch.dbg.isr_cnt++;
 800465a:	3201      	adds	r2, #1
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800465e:	f381 8811 	msr	BASEPRI, r1
 8004662:	4770      	bx	lr
 8004664:	20000b30 	.word	0x20000b30
 8004668:	08007938 	.word	0x08007938
 800466c:	00000000 	.word	0x00000000

08004670 <_dbg_check_unlock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <_dbg_check_unlock_from_isr+0x1c>)
 8004672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004674:	2a00      	cmp	r2, #0
 8004676:	dd05      	ble.n	8004684 <_dbg_check_unlock_from_isr+0x14>
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	2a00      	cmp	r2, #0
 800467c:	dd02      	ble.n	8004684 <_dbg_check_unlock_from_isr+0x14>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 800467e:	2200      	movs	r2, #0
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
 8004682:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004684:	b672      	cpsid	i
 8004686:	4a02      	ldr	r2, [pc, #8]	; (8004690 <_dbg_check_unlock_from_isr+0x20>)
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
 800468a:	e7fe      	b.n	800468a <_dbg_check_unlock_from_isr+0x1a>
 800468c:	20000b30 	.word	0x20000b30
 8004690:	08007940 	.word	0x08007940
	...

080046a0 <_dbg_check_lock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <_dbg_check_lock_from_isr+0x1c>)
 80046a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	dd01      	ble.n	80046ac <_dbg_check_lock_from_isr+0xc>
 80046a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046aa:	b11a      	cbz	r2, 80046b4 <_dbg_check_lock_from_isr+0x14>
 80046ac:	b672      	cpsid	i
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <_dbg_check_lock_from_isr+0x20>)
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046b2:	e7fe      	b.n	80046b2 <_dbg_check_lock_from_isr+0x12>
    chSysHalt("SV#6");
  }
  _dbg_enter_lock();
 80046b4:	2201      	movs	r2, #1
 80046b6:	635a      	str	r2, [r3, #52]	; 0x34
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000b30 	.word	0x20000b30
 80046c0:	08007948 	.word	0x08007948
	...

080046d0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80046d4:	2320      	movs	r3, #32
 80046d6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80046da:	f7ff fdb1 	bl	8004240 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80046de:	f7ff ffdf 	bl	80046a0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80046e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80046e6:	2b07      	cmp	r3, #7
 80046e8:	d810      	bhi.n	800470c <wakeup+0x3c>
 80046ea:	e8df f003 	tbb	[pc, r3]
 80046ee:	0f15      	.short	0x0f15
 80046f0:	040a1d0f 	.word	0x040a1d0f
 80046f4:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80046f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 80046f8:	f7ff fe42 	bl	8004380 <chDbgCheckClassI>

  sp->s_cnt++;
 80046fc:	68ab      	ldr	r3, [r5, #8]
 80046fe:	3301      	adds	r3, #1
 8004700:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8004702:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004706:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff ff14 	bl	8004540 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004718:	f7ff ffaa 	bl	8004670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800471c:	f7ff fd78 	bl	8004210 <_stats_stop_measure_crit_isr>
 8004720:	2300      	movs	r3, #0
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8004728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff ff03 	bl	8004540 <chSchReadyI>
 800473a:	e7ed      	b.n	8004718 <wakeup+0x48>
 800473c:	0000      	movs	r0, r0
	...

08004740 <_dbg_check_unlock>:
 *
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <_dbg_check_unlock+0x18>)
 8004742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004744:	b922      	cbnz	r2, 8004750 <_dbg_check_unlock+0x10>
 8004746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004748:	2900      	cmp	r1, #0
 800474a:	dd01      	ble.n	8004750 <_dbg_check_unlock+0x10>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
 800474e:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004750:	b672      	cpsid	i
 8004752:	4a02      	ldr	r2, [pc, #8]	; (800475c <_dbg_check_unlock+0x1c>)
 8004754:	62da      	str	r2, [r3, #44]	; 0x2c
 8004756:	e7fe      	b.n	8004756 <_dbg_check_unlock+0x16>
 8004758:	20000b30 	.word	0x20000b30
 800475c:	08007950 	.word	0x08007950

08004760 <_dbg_check_lock>:
 *
 * @notapi
 */
void _dbg_check_lock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <_dbg_check_lock+0x18>)
 8004762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004764:	b90a      	cbnz	r2, 800476a <_dbg_check_lock+0xa>
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	b11a      	cbz	r2, 8004772 <_dbg_check_lock+0x12>
 800476a:	b672      	cpsid	i
 800476c:	4a03      	ldr	r2, [pc, #12]	; (800477c <_dbg_check_lock+0x1c>)
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004770:	e7fe      	b.n	8004770 <_dbg_check_lock+0x10>
    chSysHalt("SV#4");
  }
  _dbg_enter_lock();
 8004772:	2201      	movs	r2, #1
 8004774:	635a      	str	r2, [r3, #52]	; 0x34
 8004776:	4770      	bx	lr
 8004778:	20000b30 	.word	0x20000b30
 800477c:	08007958 	.word	0x08007958

08004780 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	4605      	mov	r5, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004784:	2320      	movs	r3, #32
 8004786:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800478a:	4e47      	ldr	r6, [pc, #284]	; (80048a8 <chMtxLock+0x128>)
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800478c:	f7ff fd60 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8004790:	f7ff ffe6 	bl	8004760 <_dbg_check_lock>
 8004794:	69b4      	ldr	r4, [r6, #24]

  chDbgCheckClassS();
 8004796:	f7ff fdab 	bl	80042f0 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 800479a:	2d00      	cmp	r5, #0
 800479c:	d046      	beq.n	800482c <chMtxLock+0xac>

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800479e:	68a8      	ldr	r0, [r5, #8]
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d04e      	beq.n	8004842 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80047a4:	68a2      	ldr	r2, [r4, #8]
 80047a6:	6883      	ldr	r3, [r0, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d907      	bls.n	80047bc <chMtxLock+0x3c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80047ac:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80047b0:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d05e      	beq.n	8004874 <chMtxLock+0xf4>
 80047b6:	2b07      	cmp	r3, #7
 80047b8:	d024      	beq.n	8004804 <chMtxLock+0x84>
 80047ba:	b1c3      	cbz	r3, 80047ee <chMtxLock+0x6e>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80047bc:	462b      	mov	r3, r5
 80047be:	e003      	b.n	80047c8 <chMtxLock+0x48>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80047c0:	6899      	ldr	r1, [r3, #8]
 80047c2:	68a2      	ldr	r2, [r4, #8]
 80047c4:	4291      	cmp	r1, r2
 80047c6:	d302      	bcc.n	80047ce <chMtxLock+0x4e>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80047c8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80047ca:	429d      	cmp	r5, r3
 80047cc:	d1f8      	bne.n	80047c0 <chMtxLock+0x40>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80047d2:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80047d4:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80047d6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80047d8:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80047da:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80047dc:	f7ff fd98 	bl	8004310 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 80047e0:	68ab      	ldr	r3, [r5, #8]
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d026      	beq.n	8004834 <chMtxLock+0xb4>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047e6:	b672      	cpsid	i
 80047e8:	4b30      	ldr	r3, [pc, #192]	; (80048ac <chMtxLock+0x12c>)
 80047ea:	62f3      	str	r3, [r6, #44]	; 0x2c
 80047ec:	e7fe      	b.n	80047ec <chMtxLock+0x6c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80047ee:	e890 000c 	ldmia.w	r0, {r2, r3}
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
 80047f2:	2101      	movs	r1, #1
 80047f4:	f880 1020 	strb.w	r1, [r0, #32]
 80047f8:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80047fa:	6802      	ldr	r2, [r0, #0]
 80047fc:	6053      	str	r3, [r2, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80047fe:	f7ff fe9f 	bl	8004540 <chSchReadyI>
 8004802:	e7db      	b.n	80047bc <chMtxLock+0x3c>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8004804:	e890 000a 	ldmia.w	r0, {r1, r3}
 8004808:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800480a:	6807      	ldr	r7, [r0, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800480c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800480e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004810:	460b      	mov	r3, r1
 8004812:	e002      	b.n	800481a <chMtxLock+0x9a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004814:	689f      	ldr	r7, [r3, #8]
 8004816:	4297      	cmp	r7, r2
 8004818:	d302      	bcc.n	8004820 <chMtxLock+0xa0>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800481a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800481c:	4299      	cmp	r1, r3
 800481e:	d1f9      	bne.n	8004814 <chMtxLock+0x94>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004824:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004826:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8004828:	6058      	str	r0, [r3, #4]
 800482a:	e7c7      	b.n	80047bc <chMtxLock+0x3c>
 800482c:	b672      	cpsid	i
 800482e:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <chMtxLock+0x12c>)
 8004830:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004832:	e7fe      	b.n	8004832 <chMtxLock+0xb2>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
      chDbgAssert(ctp->p_mtxlist == mp, "not owned");
 8004834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004836:	429d      	cmp	r5, r3
 8004838:	d007      	beq.n	800484a <chMtxLock+0xca>
 800483a:	b672      	cpsid	i
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <chMtxLock+0x12c>)
 800483e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004840:	e7fe      	b.n	8004840 <chMtxLock+0xc0>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8004842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004844:	60eb      	str	r3, [r5, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8004846:	60ac      	str	r4, [r5, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 8004848:	63e5      	str	r5, [r4, #60]	; 0x3c
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800484a:	f7ff ff79 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800484e:	f7ff fce7 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004852:	6832      	ldr	r2, [r6, #0]
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <chMtxLock+0x128>)
 8004856:	42b2      	cmp	r2, r6
 8004858:	d004      	beq.n	8004864 <chMtxLock+0xe4>
 800485a:	6999      	ldr	r1, [r3, #24]
 800485c:	6892      	ldr	r2, [r2, #8]
 800485e:	6889      	ldr	r1, [r1, #8]
 8004860:	4291      	cmp	r1, r2
 8004862:	d303      	bcc.n	800486c <chMtxLock+0xec>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004864:	2300      	movs	r3, #0
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800486c:	b672      	cpsid	i
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <chMtxLock+0x130>)
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
 8004872:	e7fe      	b.n	8004872 <chMtxLock+0xf2>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8004874:	e890 000a 	ldmia.w	r0, {r1, r3}
 8004878:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800487a:	6807      	ldr	r7, [r0, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800487c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800487e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004880:	460b      	mov	r3, r1
 8004882:	e002      	b.n	800488a <chMtxLock+0x10a>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004884:	689f      	ldr	r7, [r3, #8]
 8004886:	4297      	cmp	r7, r2
 8004888:	d302      	bcc.n	8004890 <chMtxLock+0x110>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800488a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800488c:	4299      	cmp	r1, r3
 800488e:	d1f9      	bne.n	8004884 <chMtxLock+0x104>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004894:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004896:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8004898:	6058      	str	r0, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800489a:	6888      	ldr	r0, [r1, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800489c:	68a2      	ldr	r2, [r4, #8]
 800489e:	6883      	ldr	r3, [r0, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d883      	bhi.n	80047ac <chMtxLock+0x2c>
 80048a4:	e78a      	b.n	80047bc <chMtxLock+0x3c>
 80048a6:	bf00      	nop
 80048a8:	20000b30 	.word	0x20000b30
 80048ac:	080078e0 	.word	0x080078e0
 80048b0:	080076e0 	.word	0x080076e0
	...

080048c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80048c0:	b508      	push	{r3, lr}
 80048c2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80048c4:	2320      	movs	r3, #32
 80048c6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80048ca:	f7ff fcc1 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80048ce:	f7ff ff47 	bl	8004760 <_dbg_check_lock>

  chSysLock();
  chThdExitS(msg);
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7ff fe74 	bl	80045c0 <chThdExitS>
	...

080048e0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 80048e0:	b510      	push	{r4, lr}
 80048e2:	2320      	movs	r3, #32
 80048e4:	4604      	mov	r4, r0
 80048e6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80048ea:	f7ff fcb1 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80048ee:	f7ff ff37 	bl	8004760 <_dbg_check_lock>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80048f2:	4b0e      	ldr	r3, [pc, #56]	; (800492c <chThdSleepUntil+0x4c>)
 80048f4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 80048f6:	1a61      	subs	r1, r4, r1
 80048f8:	d002      	beq.n	8004900 <chThdSleepUntil+0x20>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80048fa:	2008      	movs	r0, #8
 80048fc:	f7ff fd50 	bl	80043a0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004900:	f7ff ff1e 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004904:	f7ff fc8c 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <chThdSleepUntil+0x50>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d004      	beq.n	800491a <chThdSleepUntil+0x3a>
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	6889      	ldr	r1, [r1, #8]
 8004916:	4291      	cmp	r1, r2
 8004918:	d303      	bcc.n	8004922 <chThdSleepUntil+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004922:	b672      	cpsid	i
 8004924:	4a03      	ldr	r2, [pc, #12]	; (8004934 <chThdSleepUntil+0x54>)
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
 8004928:	e7fe      	b.n	8004928 <chThdSleepUntil+0x48>
 800492a:	bf00      	nop
 800492c:	40000c00 	.word	0x40000c00
 8004930:	20000b30 	.word	0x20000b30
 8004934:	080079e0 	.word	0x080079e0
	...

08004940 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8004940:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004942:	2320      	movs	r3, #32
 8004944:	4604      	mov	r4, r0
 8004946:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800494a:	f7ff fc81 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800494e:	f7ff ff07 	bl	8004760 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8004952:	b1a4      	cbz	r4, 800497e <chThdSleep+0x3e>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8004954:	4621      	mov	r1, r4
 8004956:	2008      	movs	r0, #8
 8004958:	f7ff fd22 	bl	80043a0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800495c:	f7ff fef0 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004960:	f7ff fc5e 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <chThdSleep+0x50>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d004      	beq.n	8004976 <chThdSleep+0x36>
 800496c:	6999      	ldr	r1, [r3, #24]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	6889      	ldr	r1, [r1, #8]
 8004972:	4291      	cmp	r1, r2
 8004974:	d308      	bcc.n	8004988 <chThdSleep+0x48>
 8004976:	2300      	movs	r3, #0
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800497e:	b672      	cpsid	i
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <chThdSleep+0x50>)
 8004982:	4a04      	ldr	r2, [pc, #16]	; (8004994 <chThdSleep+0x54>)
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c
 8004986:	e7fe      	b.n	8004986 <chThdSleep+0x46>
 8004988:	b672      	cpsid	i
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <chThdSleep+0x58>)
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
 800498e:	e7fe      	b.n	800498e <chThdSleep+0x4e>
 8004990:	20000b30 	.word	0x20000b30
 8004994:	08007a00 	.word	0x08007a00
 8004998:	080079e0 	.word	0x080079e0
 800499c:	00000000 	.word	0x00000000

080049a0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	4617      	mov	r7, r2
 80049a6:	4698      	mov	r8, r3
 80049a8:	b083      	sub	sp, #12
 80049aa:	4604      	mov	r4, r0
 80049ac:	468a      	mov	sl, r1
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 80049ae:	f100 0560 	add.w	r5, r0, #96	; 0x60
 80049b2:	4603      	mov	r3, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	f803 2b01 	strb.w	r2, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80049ba:	429d      	cmp	r5, r3
 80049bc:	d1fb      	bne.n	80049b6 <chThdCreateStatic+0x16>
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 80049be:	eb04 020a 	add.w	r2, r4, sl
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80049c2:	4295      	cmp	r5, r2
 80049c4:	d205      	bcs.n	80049d2 <chThdCreateStatic+0x32>
 80049c6:	462b      	mov	r3, r5
    *startp++ = v;
 80049c8:	2155      	movs	r1, #85	; 0x55
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d1fb      	bne.n	80049ca <chThdCreateStatic+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80049d2:	2320      	movs	r3, #32
 80049d4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80049d8:	f7ff fc3a 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80049dc:	f7ff fec0 	bl	8004760 <_dbg_check_lock>
                       tprio_t prio, tfunc_t pf, void *arg) {
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 80049e0:	f7ff fcce 	bl	8004380 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	f000 8083 	beq.w	8004af0 <chThdCreateStatic+0x150>
 80049ea:	f5ba 7fb8 	cmp.w	sl, #368	; 0x170
 80049ee:	d37f      	bcc.n	8004af0 <chThdCreateStatic+0x150>
 80049f0:	2f7f      	cmp	r7, #127	; 0x7f
 80049f2:	d87d      	bhi.n	8004af0 <chThdCreateStatic+0x150>
 80049f4:	f1b8 0f00 	cmp.w	r8, #0
 80049f8:	d07a      	beq.n	8004af0 <chThdCreateStatic+0x150>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80049fa:	4e49      	ldr	r6, [pc, #292]	; (8004b20 <chThdCreateStatic+0x180>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80049fc:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004b34 <chThdCreateStatic+0x194>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004a00:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004a02:	f1aa 0164 	sub.w	r1, sl, #100	; 0x64
 8004a06:	4421      	add	r1, r4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8004a08:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8004a0c:	9201      	str	r2, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a10:	60e1      	str	r1, [r4, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004a12:	2000      	movs	r0, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004a14:	f8c1 8040 	str.w	r8, [r1, #64]	; 0x40
 8004a18:	644a      	str	r2, [r1, #68]	; 0x44
 8004a1a:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004a1e:	9a01      	ldr	r2, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004a20:	6163      	str	r3, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004a22:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8004a26:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8004a2a:	f04f 0a02 	mov.w	sl, #2
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004a2e:	f04f 3bff 	mov.w	fp, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f04f 0900 	mov.w	r9, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004a3a:	60a7      	str	r7, [r4, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004a3c:	6126      	str	r6, [r4, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004a3e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8004a42:	63e0      	str	r0, [r4, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004a44:	63a0      	str	r0, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004a46:	61a0      	str	r0, [r4, #24]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004a48:	6427      	str	r7, [r4, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8004a4a:	f884 a020 	strb.w	sl, [r4, #32]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004a4e:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004a52:	611c      	str	r4, [r3, #16]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8004a54:	64e0      	str	r0, [r4, #76]	; 0x4c
  tmp->last       = (rtcnt_t)0;
 8004a56:	6520      	str	r0, [r4, #80]	; 0x50
  tmp->n          = (ucnt_t)0;
 8004a58:	6560      	str	r0, [r4, #84]	; 0x54
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8004a5a:	61e5      	str	r5, [r4, #28]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8004a5c:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004a60:	62e2      	str	r2, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8004a62:	6322      	str	r2, [r4, #48]	; 0x30
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8004a64:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8004a68:	e9c4 8916 	strd	r8, r9, [r4, #88]	; 0x58
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004a6c:	6174      	str	r4, [r6, #20]
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {

  chDbgCheckClassS();
 8004a6e:	f7ff fc3f 	bl	80042f0 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004a72:	6833      	ldr	r3, [r6, #0]
 8004a74:	69b0      	ldr	r0, [r6, #24]
 8004a76:	42b3      	cmp	r3, r6
 8004a78:	d04f      	beq.n	8004b1a <chThdCreateStatic+0x17a>
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	6883      	ldr	r3, [r0, #8]
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d347      	bcc.n	8004b12 <chThdCreateStatic+0x172>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8004a82:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8004a84:	429f      	cmp	r7, r3
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8004a86:	6262      	str	r2, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8004a88:	d93f      	bls.n	8004b0a <chThdCreateStatic+0x16a>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8004a8a:	f7ff fd59 	bl	8004540 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f884 3020 	strb.w	r3, [r4, #32]
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8004a94:	4605      	mov	r5, r0
    setcurrp(ntp);
 8004a96:	61b4      	str	r4, [r6, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8004a98:	f7ff fb5a 	bl	8004150 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8004a9c:	f8d6 34ac 	ldr.w	r3, [r6, #1196]	; 0x4ac
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8004aa0:	4f1f      	ldr	r7, [pc, #124]	; (8004b20 <chThdCreateStatic+0x180>)
 8004aa2:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8004aa4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8004aa8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8004aac:	f8c6 34ac 	str.w	r3, [r6, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8004ab0:	f7ff fb2e 	bl	8004110 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004ab4:	f3ef 8309 	mrs	r3, PSP
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8004ab8:	69ea      	ldr	r2, [r5, #28]
 8004aba:	3b64      	subs	r3, #100	; 0x64
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d820      	bhi.n	8004b02 <chThdCreateStatic+0x162>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7fb fc04 	bl	80002d0 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004ac8:	f7ff fe3a 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8004acc:	f7ff fba8 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <chThdCreateStatic+0x180>)
 8004ad4:	42b2      	cmp	r2, r6
 8004ad6:	d004      	beq.n	8004ae2 <chThdCreateStatic+0x142>
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	6892      	ldr	r2, [r2, #8]
 8004adc:	6889      	ldr	r1, [r1, #8]
 8004ade:	4291      	cmp	r1, r2
 8004ae0:	d30b      	bcc.n	8004afa <chThdCreateStatic+0x15a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
  chSysUnlock();

  return tp;
}
 8004ae8:	4620      	mov	r0, r4
 8004aea:	b003      	add	sp, #12
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004af0:	b672      	cpsid	i
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <chThdCreateStatic+0x180>)
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <chThdCreateStatic+0x184>)
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004af8:	e7fe      	b.n	8004af8 <chThdCreateStatic+0x158>
 8004afa:	b672      	cpsid	i
 8004afc:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <chThdCreateStatic+0x188>)
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b00:	e7fe      	b.n	8004b00 <chThdCreateStatic+0x160>
 8004b02:	b672      	cpsid	i
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <chThdCreateStatic+0x18c>)
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b08:	e7fe      	b.n	8004b08 <chThdCreateStatic+0x168>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7ff fd18 	bl	8004540 <chSchReadyI>
 8004b10:	e7da      	b.n	8004ac8 <chThdCreateStatic+0x128>
 8004b12:	b672      	cpsid	i
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <chThdCreateStatic+0x190>)
 8004b16:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004b18:	e7fe      	b.n	8004b18 <chThdCreateStatic+0x178>
 8004b1a:	6883      	ldr	r3, [r0, #8]
 8004b1c:	e7b1      	b.n	8004a82 <chThdCreateStatic+0xe2>
 8004b1e:	bf00      	nop
 8004b20:	20000b30 	.word	0x20000b30
 8004b24:	08007900 	.word	0x08007900
 8004b28:	080079e0 	.word	0x080079e0
 8004b2c:	08007910 	.word	0x08007910
 8004b30:	080079f0 	.word	0x080079f0
 8004b34:	080002e9 	.word	0x080002e9
	...

08004b40 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8004b40:	e7fe      	b.n	8004b40 <BusFault_Handler>
 8004b42:	bf00      	nop
	...

08004b50 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004b50:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8004b52:	4e11      	ldr	r6, [pc, #68]	; (8004b98 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004b54:	2500      	movs	r5, #0
 8004b56:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8004b5a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	d20d      	bcs.n	8004b7e <__init_ram_areas+0x2e>
 8004b62:	3904      	subs	r1, #4
 8004b64:	461a      	mov	r2, r3
      *p = *tp;
 8004b66:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8004b6a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004b6e:	42a2      	cmp	r2, r4
 8004b70:	d3f9      	bcc.n	8004b66 <__init_ram_areas+0x16>
 8004b72:	43da      	mvns	r2, r3
 8004b74:	4414      	add	r4, r2
 8004b76:	f024 0403 	bic.w	r4, r4, #3
 8004b7a:	3404      	adds	r4, #4
 8004b7c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004b7e:	68f2      	ldr	r2, [r6, #12]
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d203      	bcs.n	8004b8c <__init_ram_areas+0x3c>
      *p = 0;
 8004b84:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d3fb      	bcc.n	8004b84 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8004b8c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004b8e:	42be      	cmp	r6, r7
 8004b90:	d3e3      	bcc.n	8004b5a <__init_ram_areas+0xa>
#endif
}
 8004b92:	bcf0      	pop	{r4, r5, r6, r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	08007960 	.word	0x08007960
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8004ba0:	e7fe      	b.n	8004ba0 <__default_exit>
 8004ba2:	bf00      	nop
	...

08004bb0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
	...

08004bc0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
	...

08004bd0 <Motor_thread.lto_priv.95>:
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
}

static THD_FUNCTION(Motor_thread, p)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <Motor_thread.lto_priv.95+0x110>)
 8004bd4:	4c43      	ldr	r4, [pc, #268]	; (8004ce4 <Motor_thread.lto_priv.95+0x114>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4a43      	ldr	r2, [pc, #268]	; (8004ce8 <Motor_thread.lto_priv.95+0x118>)
 8004bda:	4e44      	ldr	r6, [pc, #272]	; (8004cec <Motor_thread.lto_priv.95+0x11c>)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004bdc:	ed9f 8a44 	vldr	s16, [pc, #272]	; 8004cf0 <Motor_thread.lto_priv.95+0x120>
 8004be0:	619a      	str	r2, [r3, #24]
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
}

static THD_FUNCTION(Motor_thread, p)
{
 8004be2:	b082      	sub	sp, #8
                    Motor_thread, NULL);
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 8004be4:	4625      	mov	r5, r4
 8004be6:	e022      	b.n	8004c2e <Motor_thread.lto_priv.95+0x5e>
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004be8:	2700      	movs	r7, #0
 8004bea:	463b      	mov	r3, r7

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004bec:	7961      	ldrb	r1, [r4, #5]
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004bee:	f894 8004 	ldrb.w	r8, [r4, #4]
 8004bf2:	69b2      	ldr	r2, [r6, #24]
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
 8004bf4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004bf8:	f108 080c 	add.w	r8, r8, #12
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004bfc:	f101 030c 	add.w	r3, r1, #12
 8004c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
 8004c04:	eb02 0188 	add.w	r1, r2, r8, lsl #2
 8004c08:	f8c1 c004 	str.w	ip, [r1, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;
 8004c0c:	6058      	str	r0, [r3, #4]

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004c0e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004c12:	330c      	adds	r3, #12
 8004c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  chRegSetThreadName("Motor Control");

  while(true)
  {
    motor_pwmUpdate();
    chThdSleepMilliseconds(20);
 8004c18:	20c8      	movs	r0, #200	; 0xc8
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));

  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] = motors[0].pwmA;
  MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = motors[0].pwmB;

  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = motors[1].pwmA;
 8004c1a:	f8c3 e004 	str.w	lr, [r3, #4]
  MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = motors[1].pwmB;
 8004c1e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004c22:	330c      	adds	r3, #12
 8004c24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004c28:	6057      	str	r7, [r2, #4]
  chRegSetThreadName("Motor Control");

  while(true)
  {
    motor_pwmUpdate();
    chThdSleepMilliseconds(20);
 8004c2a:	f7ff fe89 	bl	8004940 <chThdSleep>
                    Motor_thread, NULL);
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 8004c2e:	79a3      	ldrb	r3, [r4, #6]
 8004c30:	ed95 7a03 	vldr	s14, [r5, #12]
 8004c34:	b10b      	cbz	r3, 8004c3a <Motor_thread.lto_priv.95+0x6a>
 8004c36:	eeb1 7a47 	vneg.f32	s14, s14
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 8004c3a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
                    Motor_thread, NULL);
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
 8004c3e:	ed84 7a04 	vstr	s14, [r4, #16]
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 8004c42:	edd5 7a0f 	vldr	s15, [r5, #60]	; 0x3c
 8004c46:	b10b      	cbz	r3, 8004c4c <Motor_thread.lto_priv.95+0x7c>
 8004c48:	eef1 7a67 	vneg.f32	s15, s15

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004c4c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;
 8004c54:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004c58:	dd3e      	ble.n	8004cd8 <Motor_thread.lto_priv.95+0x108>
 8004c5a:	ee67 6a08 	vmul.f32	s13, s14, s16
 8004c5e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004c62:	edcd 6a01 	vstr	s13, [sp, #4]
 8004c66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c6a:	469c      	mov	ip, r3
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004c6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void motor_pwmUpdate(void)
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
 8004c74:	82a3      	strh	r3, [r4, #20]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004c76:	d425      	bmi.n	8004cc4 <Motor_thread.lto_priv.95+0xf4>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	4603      	mov	r3, r0

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
 8004c84:	82e3      	strh	r3, [r4, #22]
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004c86:	dd19      	ble.n	8004cbc <Motor_thread.lto_priv.95+0xec>
 8004c88:	ee27 7a88 	vmul.f32	s14, s15, s16
 8004c8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004c90:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004c94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c98:	469e      	mov	lr, r3
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
 8004ca2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
  motors[1].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp < 0.0f)? -motors[1].input_temp : 0.0f));
 8004ca6:	d59f      	bpl.n	8004be8 <Motor_thread.lto_priv.95+0x18>
 8004ca8:	ee67 7ac8 	vnmul.f32	s15, s15, s16
 8004cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb0:	edcd 7a01 	vstr	s15, [sp, #4]
 8004cb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004cb8:	461f      	mov	r7, r3
 8004cba:	e797      	b.n	8004bec <Motor_thread.lto_priv.95+0x1c>
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));

  motors[1].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[1].input_temp > 0.0f)? motors[1].input_temp : 0.0f));
 8004cbc:	f04f 0e00 	mov.w	lr, #0
 8004cc0:	4673      	mov	r3, lr
 8004cc2:	e7ea      	b.n	8004c9a <Motor_thread.lto_priv.95+0xca>
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
  motors[0].pwmB =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp < 0.0f)? -motors[0].input_temp : 0.0f));
 8004cc4:	ee27 7a48 	vnmul.f32	s14, s14, s16
 8004cc8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004ccc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004cd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	e7d1      	b.n	8004c7c <Motor_thread.lto_priv.95+0xac>
{
  motors[0].input_temp = (motors[0].reverse)?-motors[0].input_diff : motors[0].input_diff;
  motors[1].input_temp = (motors[1].reverse)?-motors[1].input_diff : motors[1].input_diff;

  motors[0].pwmA =
    (uint16_t)(PWM_PERIOD*((motors[0].input_temp > 0.0f)? motors[0].input_temp : 0.0f));
 8004cd8:	f04f 0c00 	mov.w	ip, #0
 8004cdc:	4663      	mov	r3, ip
 8004cde:	e7c5      	b.n	8004c6c <Motor_thread.lto_priv.95+0x9c>
 8004ce0:	20000b30 	.word	0x20000b30
 8004ce4:	20000828 	.word	0x20000828
 8004ce8:	08007a30 	.word	0x08007a30
 8004cec:	20001230 	.word	0x20001230
 8004cf0:	457a0000 	.word	0x457a0000
	...

08004d00 <Controller_thread>:
  controller.int_max_p = (float)(parameters[10]);
}

#define POSITION_CONTROL 40.0f
static THD_FUNCTION(Controller_thread, p)
{
 8004d00:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  static float diff_cmd = 0.0f, diff_error, diff_error_int = 0.0f, diff_output;
  static float encoder_diff = 0.0f, encoder_norm = 0.0f;
  static float rc_cmd;
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
 8004d04:	f8df b3f4 	ldr.w	fp, [pc, #1012]	; 80050fc <Controller_thread+0x3fc>
 8004d08:	4bdd      	ldr	r3, [pc, #884]	; (8005080 <Controller_thread+0x380>)
 8004d0a:	f8db a000 	ldr.w	sl, [fp]
 8004d0e:	6999      	ldr	r1, [r3, #24]
     + motors[1].Hall_Encoder->count);
 8004d10:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
  static float diff_cmd = 0.0f, diff_error, diff_error_int = 0.0f, diff_output;
  static float encoder_diff = 0.0f, encoder_norm = 0.0f;
  static float rc_cmd;
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
 8004d14:	f8da 3000 	ldr.w	r3, [sl]
     + motors[1].Hall_Encoder->count);
 8004d18:	6892      	ldr	r2, [r2, #8]
  static float diff_cmd = 0.0f, diff_error, diff_error_int = 0.0f, diff_output;
  static float encoder_diff = 0.0f, encoder_norm = 0.0f;
  static float rc_cmd;
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	48d9      	ldr	r0, [pc, #868]	; (8005084 <Controller_thread+0x384>)
 8004d1e:	6188      	str	r0, [r1, #24]
     + motors[1].Hall_Encoder->count);
 8004d20:	1899      	adds	r1, r3, r2
 8004d22:	ee07 1a90 	vmov	s15, r1

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004d26:	1a9b      	subs	r3, r3, r2

  error =  g_IMU1.theta - BALANCE_POS;
 8004d28:	4ad7      	ldr	r2, [pc, #860]	; (8005088 <Controller_thread+0x388>)
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004d2a:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 8005100 <Controller_thread+0x400>

  error =  g_IMU1.theta - BALANCE_POS;
 8004d2e:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
  static float diff_cmd = 0.0f, diff_error, diff_error_int = 0.0f, diff_output;
  static float encoder_diff = 0.0f, encoder_norm = 0.0f;
  static float rc_cmd;
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
 8004d32:	4ad6      	ldr	r2, [pc, #856]	; (800508c <Controller_thread+0x38c>)
 8004d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

  error =  g_IMU1.theta - BALANCE_POS;
  if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
 8004d38:	eef2 6a0c 	vmov.f32	s13, #44	; 0x2c
  static float diff_cmd = 0.0f, diff_error, diff_error_int = 0.0f, diff_output;
  static float encoder_diff = 0.0f, encoder_norm = 0.0f;
  static float rc_cmd;
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
 8004d3c:	edc2 7a00 	vstr	s15, [r2]
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004d40:	ee07 3a90 	vmov	s15, r3

  error =  g_IMU1.theta - BALANCE_POS;
 8004d44:	4bd2      	ldr	r3, [pc, #840]	; (8005090 <Controller_thread+0x390>)
  controller.int_max_p = (float)(parameters[10]);
}

#define POSITION_CONTROL 40.0f
static THD_FUNCTION(Controller_thread, p)
{
 8004d46:	b083      	sub	sp, #12
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  error =  g_IMU1.theta - BALANCE_POS;
 8004d4c:	ed83 7a00 	vstr	s14, [r3]
  if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
 8004d50:	eeb4 7ae6 	vcmpe.f32	s14, s13
    stand_up = 0;
 8004d54:	4bcf      	ldr	r3, [pc, #828]	; (8005094 <Controller_thread+0x394>)
  static uint8_t stand_up = 0;

  encoder_norm = (float)(motors[0].Hall_Encoder->count
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004d56:	edc8 7a00 	vstr	s15, [r8]

  error =  g_IMU1.theta - BALANCE_POS;
  if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
 8004d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    stand_up = 0;
 8004d5e:	461a      	mov	r2, r3
 8004d60:	9301      	str	r3, [sp, #4]
     + motors[1].Hall_Encoder->count);

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

  error =  g_IMU1.theta - BALANCE_POS;
  if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
 8004d62:	f300 8242 	bgt.w	80051ea <Controller_thread+0x4ea>
 8004d66:	eefa 7a0c 	vmov.f32	s15, #172	; 0xac
 8004d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	f100 823a 	bmi.w	80051ea <Controller_thread+0x4ea>
    stand_up = 0;
  else
    stand_up = 30;
 8004d76:	231e      	movs	r3, #30
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	f8df 9388 	ldr.w	r9, [pc, #904]	; 8005104 <Controller_thread+0x404>
 8004d7e:	4dc6      	ldr	r5, [pc, #792]	; (8005098 <Controller_thread+0x398>)
 8004d80:	4cc6      	ldr	r4, [pc, #792]	; (800509c <Controller_thread+0x39c>)
 8004d82:	4ec7      	ldr	r6, [pc, #796]	; (80050a0 <Controller_thread+0x3a0>)

  while(true)
  {
    rc_cmd = (float)((int16_t)(rc_channel[0]) - 1500);

    if(rc_cmd < POSITION_CONTROL && rc_cmd > -POSITION_CONTROL)
 8004d84:	eddf 8ac7 	vldr	s17, [pc, #796]	; 80050a4 <Controller_thread+0x3a4>
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
 8004d88:	ed9f 8ac7 	vldr	s16, [pc, #796]	; 80050a8 <Controller_thread+0x3a8>

  while(true)
  {
    rc_cmd = (float)((int16_t)(rc_channel[0]) - 1500);

    if(rc_cmd < POSITION_CONTROL && rc_cmd > -POSITION_CONTROL)
 8004d8c:	ed9f 9ac7 	vldr	s18, [pc, #796]	; 80050ac <Controller_thread+0x3ac>
 8004d90:	e145      	b.n	800501e <Controller_thread+0x31e>
 8004d92:	eef4 7ac9 	vcmpe.f32	s15, s18
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	f340 8153 	ble.w	8005044 <Controller_thread+0x344>
        position_error_int = -controller.int_max_p;

      position_output = controller.Kp_p * position_error;
            + controller.Ki_p * position_error_int;
*/
      speed_cmd = 0.0f;
 8004d9e:	4bc4      	ldr	r3, [pc, #784]	; (80050b0 <Controller_thread+0x3b0>)
 8004da0:	eddf 7ac1 	vldr	s15, [pc, #772]	; 80050a8 <Controller_thread+0x3a8>
 8004da4:	ed83 8a00 	vstr	s16, [r3]
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
    }

    speed_error = speed_cmd - motors[0].speed;
 8004da8:	ed9a 7a06 	vldr	s14, [sl, #24]
    speed_error_int += (speed_error * controller.Ki_v);
 8004dac:	edd5 6a00 	vldr	s13, [r5]
 8004db0:	edd4 5a08 	vldr	s11, [r4, #32]

    if(speed_error_int > controller.int_max_v)
 8004db4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
    }

    speed_error = speed_cmd - motors[0].speed;
 8004db8:	4abe      	ldr	r2, [pc, #760]	; (80050b4 <Controller_thread+0x3b4>)
    speed_error_int += (speed_error * controller.Ki_v);
 8004dba:	4bb7      	ldr	r3, [pc, #732]	; (8005098 <Controller_thread+0x398>)
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
    }

    speed_error = speed_cmd - motors[0].speed;
 8004dbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    speed_error_int += (speed_error * controller.Ki_v);
 8004dc0:	eeb0 7a66 	vmov.f32	s14, s13
 8004dc4:	eea7 7aa5 	vfma.f32	s14, s15, s11
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
    }

    speed_error = speed_cmd - motors[0].speed;
 8004dc8:	edc2 7a00 	vstr	s15, [r2]
    speed_error_int += (speed_error * controller.Ki_v);

    if(speed_error_int > controller.int_max_v)
 8004dcc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
    }

    speed_error = speed_cmd - motors[0].speed;
    speed_error_int += (speed_error * controller.Ki_v);
 8004dd4:	ed85 7a00 	vstr	s14, [r5]

    if(speed_error_int > controller.int_max_v)
 8004dd8:	dc06      	bgt.n	8004de8 <Controller_thread+0xe8>
      speed_error_int = controller.int_max_v;
    else if(speed_error_int < -controller.int_max_v)
 8004dda:	eeb1 6a46 	vneg.f32	s12, s12
 8004dde:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	d501      	bpl.n	8004dec <Controller_thread+0xec>
      speed_error_int = -controller.int_max_v;
 8004de8:	ed83 6a00 	vstr	s12, [r3]

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;
 8004dec:	ed94 7a07 	vldr	s14, [r4, #28]
 8004df0:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80050b8 <Controller_thread+0x3b8>
 8004df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004df8:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8004dfc:	ee17 0a90 	vmov	r0, s15
 8004e00:	f7fb fbf2 	bl	80005e8 <__aeabi_f2d>
 8004e04:	ec41 0b10 	vmov	d0, r0, r1
 8004e08:	f002 f8d2 	bl	8006fb0 <atan>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	ec51 0b10 	vmov	r0, r1, d0
 8004e12:	4baa      	ldr	r3, [pc, #680]	; (80050bc <Controller_thread+0x3bc>)
 8004e14:	f7fb fc3c 	bl	8000690 <__aeabi_dmul>
 8004e18:	a397      	add	r3, pc, #604	; (adr r3, 8005078 <Controller_thread+0x378>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb fd61 	bl	80008e4 <__aeabi_ddiv>
 8004e22:	f7fb fe4d 	bl	8000ac0 <__aeabi_d2f>

    error =  g_IMU1.theta - BALANCE_POS;
 8004e26:	4b98      	ldr	r3, [pc, #608]	; (8005088 <Controller_thread+0x388>)
 8004e28:	edd3 9a1d 	vldr	s19, [r3, #116]	; 0x74
    if(speed_error_int > controller.int_max_v)
      speed_error_int = controller.int_max_v;
    else if(speed_error_int < -controller.int_max_v)
      speed_error_int = -controller.int_max_v;

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;
 8004e2c:	4ba4      	ldr	r3, [pc, #656]	; (80050c0 <Controller_thread+0x3c0>)

    error =  g_IMU1.theta - BALANCE_POS;

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
 8004e2e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x2c
    if(speed_error_int > controller.int_max_v)
      speed_error_int = controller.int_max_v;
    else if(speed_error_int < -controller.int_max_v)
      speed_error_int = -controller.int_max_v;

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;
 8004e32:	6018      	str	r0, [r3, #0]

    error =  g_IMU1.theta - BALANCE_POS;

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
 8004e34:	eef4 9ae7 	vcmpe.f32	s19, s15
    else if(speed_error_int < -controller.int_max_v)
      speed_error_int = -controller.int_max_v;

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;

    error =  g_IMU1.theta - BALANCE_POS;
 8004e38:	4b95      	ldr	r3, [pc, #596]	; (8005090 <Controller_thread+0x390>)

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    else if(speed_error_int < -controller.int_max_v)
      speed_error_int = -controller.int_max_v;

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;

    error =  g_IMU1.theta - BALANCE_POS;
 8004e3e:	edc3 9a00 	vstr	s19, [r3]
    if(speed_error_int > controller.int_max_v)
      speed_error_int = controller.int_max_v;
    else if(speed_error_int < -controller.int_max_v)
      speed_error_int = -controller.int_max_v;

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;
 8004e42:	ee0a 0a10 	vmov	s20, r0

    error =  g_IMU1.theta - BALANCE_POS;

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	f300 815e 	bgt.w	8005108 <Controller_thread+0x408>
 8004e4c:	eefa 7a0c 	vmov.f32	s15, #172	; 0xac
 8004e50:	eef4 9ae7 	vcmpe.f32	s19, s15
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	f100 8156 	bmi.w	8005108 <Controller_thread+0x408>
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b1d      	cmp	r3, #29
 8004e60:	f240 8155 	bls.w	800510e <Controller_thread+0x40e>
      stand_up++;

    error -= speed_output;

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8004e64:	4b88      	ldr	r3, [pc, #544]	; (8005088 <Controller_thread+0x388>)
 8004e66:	edd4 6a03 	vldr	s13, [r4, #12]
 8004e6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004e6e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80050c4 <Controller_thread+0x3c4>
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;

    output = controller.Kp_s * error -
 8004e72:	ed94 6a02 	vldr	s12, [r4, #8]
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;
 8004e76:	4b86      	ldr	r3, [pc, #536]	; (8005090 <Controller_thread+0x390>)

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8004e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;
 8004e7c:	ee79 9aca 	vsub.f32	s19, s19, s20

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8004e80:	eec7 7a87 	vdiv.f32	s15, s15, s14
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;
 8004e84:	edc3 9a00 	vstr	s19, [r3]

    output = controller.Kp_s * error -
 8004e88:	eed9 7a86 	vfnms.f32	s15, s19, s12
 8004e8c:	4b8e      	ldr	r3, [pc, #568]	; (80050c8 <Controller_thread+0x3c8>)
 8004e8e:	edc3 7a00 	vstr	s15, [r3]
    if(stand_up < 2)
      temp = ( g_IMU1.theta - BALANCE_POS > 0 ? -0.17f : 0.062f);
    else if(stand_up < 30)
      temp += output/4.25f;
    else
      temp += output;
 8004e92:	ed96 7a00 	vldr	s14, [r6]
 8004e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e9a:	edc6 7a00 	vstr	s15, [r6]

    if(temp > 0.6f)
 8004e9e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80050cc <Controller_thread+0x3cc>
 8004ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	f340 8162 	ble.w	8005172 <Controller_thread+0x472>
      temp = 0.6f;
 8004eae:	eddf 7a88 	vldr	s15, [pc, #544]	; 80050d0 <Controller_thread+0x3d0>
 8004eb2:	ed86 7a00 	vstr	s14, [r6]
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004eb6:	f8d9 3000 	ldr.w	r3, [r9]
      motors[0].input = temp + DEAD_ZONE;
      motors[1].input = temp + DEAD_ZONE;
    }
    else
    {
      motors[0].input = temp - DEAD_ZONE;
 8004eba:	edca 7a02 	vstr	s15, [sl, #8]
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004ebe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]

    diff_error = diff_cmd - encoder_diff;

    diff_error_int += diff_error;
 8004ec2:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <Controller_thread+0x3d4>)
      motors[1].input = temp + DEAD_ZONE;
    }
    else
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
 8004ec4:	edca 7a0e 	vstr	s15, [sl, #56]	; 0x38
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004ec8:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 8004ecc:	ee07 2a10 	vmov	s14, r2
 8004ed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ed4:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x3e
 8004ed8:	ee87 7a06 	vdiv.f32	s14, s14, s12
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004edc:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;

    diff_error = diff_cmd - encoder_diff;

    diff_error_int += diff_error;
 8004ee0:	4a7c      	ldr	r2, [pc, #496]	; (80050d4 <Controller_thread+0x3d4>)
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004ee2:	6889      	ldr	r1, [r1, #8]

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;

    diff_error = diff_cmd - encoder_diff;

    diff_error_int += diff_error;
 8004ee4:	edd3 7a00 	vldr	s15, [r3]
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004ee8:	f8da 3000 	ldr.w	r3, [sl]

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004eec:	edd8 6a00 	vldr	s13, [r8]
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004ef0:	689b      	ldr	r3, [r3, #8]

    diff_error = diff_cmd - encoder_diff;

    diff_error_int += diff_error;

    if(diff_error_int > controller.int_max_r)
 8004ef2:	edd4 5a06 	vldr	s11, [r4, #24]
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	ee06 3a10 	vmov	s12, r3

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004efc:	ee37 7a26 	vadd.f32	s14, s14, s13
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004f00:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004f04:	4b74      	ldr	r3, [pc, #464]	; (80050d8 <Controller_thread+0x3d8>)

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;
 8004f06:	ed88 7a00 	vstr	s14, [r8]

    diff_error = diff_cmd - encoder_diff;
 8004f0a:	ee77 6a46 	vsub.f32	s13, s14, s12
    {
      motors[0].input = temp - DEAD_ZONE;
      motors[1].input = temp - DEAD_ZONE;
    }

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);
 8004f0e:	ed83 6a00 	vstr	s12, [r3]

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;

    diff_error = diff_cmd - encoder_diff;

    diff_error_int += diff_error;
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;

    diff_error = diff_cmd - encoder_diff;
 8004f16:	4b71      	ldr	r3, [pc, #452]	; (80050dc <Controller_thread+0x3dc>)

    diff_error_int += diff_error;
 8004f18:	edc2 7a00 	vstr	s15, [r2]

    if(diff_error_int > controller.int_max_r)
 8004f1c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

    encoder_diff = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

    diff_cmd += (float)((int16_t)(rc_channel[1]) - 1500)/30.0f;

    diff_error = diff_cmd - encoder_diff;
 8004f24:	edc3 6a00 	vstr	s13, [r3]

    diff_error_int += diff_error;

    if(diff_error_int > controller.int_max_r)
 8004f28:	f340 812f 	ble.w	800518a <Controller_thread+0x48a>
      diff_error_int = controller.int_max_r;
 8004f2c:	edc2 5a00 	vstr	s11, [r2]
 8004f30:	eef0 7a65 	vmov.f32	s15, s11
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
            + controller.Ki_r * diff_error_int)/100.0f;
 8004f34:	ed94 7a05 	vldr	s14, [r4, #20]
 8004f38:	edd4 5a04 	vldr	s11, [r4, #16]
 8004f3c:	eddf 9a68 	vldr	s19, [pc, #416]	; 80050e0 <Controller_thread+0x3e0>

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f40:	ed95 6a00 	vldr	s12, [r5]
    if(diff_error_int > controller.int_max_r)
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
 8004f44:	4f67      	ldr	r7, [pc, #412]	; (80050e4 <Controller_thread+0x3e4>)
            + controller.Ki_r * diff_error_int)/100.0f;

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f46:	4a68      	ldr	r2, [pc, #416]	; (80050e8 <Controller_thread+0x3e8>)
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
            + controller.Ki_r * diff_error_int)/100.0f;
 8004f48:	f8df a150 	ldr.w	sl, [pc, #336]	; 800509c <Controller_thread+0x39c>
 8004f4c:	ee67 7a87 	vmul.f32	s15, s15, s14

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f50:	eebd 7ac6 	vcvt.s32.f32	s14, s12
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
            + controller.Ki_r * diff_error_int)/100.0f;
 8004f54:	eee6 7aa5 	vfma.f32	s15, s13, s11

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f58:	2005      	movs	r0, #5
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	ed8d 7a00 	vstr	s14, [sp]
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
            + controller.Ki_r * diff_error_int)/100.0f;
 8004f60:	eec7 7aa9 	vdiv.f32	s15, s15, s19

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f64:	f9bd 3000 	ldrsh.w	r3, [sp]
    if(diff_error_int > controller.int_max_r)
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
      diff_error_int = -controller.int_max_r;

    diff_output = (controller.Kp_r * diff_error
 8004f68:	edc7 7a00 	vstr	s15, [r7]
            + controller.Ki_r * diff_error_int)/100.0f;

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
 8004f6c:	f7fd fef8 	bl	8002d60 <tft_printf.constprop.13>
    tft_printf(5,4,"speed+:%5d", (int16_t)(speed_output * 100.0f));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <Controller_thread+0x3c0>)
 8004f72:	4a5e      	ldr	r2, [pc, #376]	; (80050ec <Controller_thread+0x3ec>)
 8004f74:	edd3 7a00 	vldr	s15, [r3]
 8004f78:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004f7c:	2005      	movs	r0, #5
 8004f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f82:	2104      	movs	r1, #4
 8004f84:	edcd 7a00 	vstr	s15, [sp]
 8004f88:	f9bd 3000 	ldrsh.w	r3, [sp]
 8004f8c:	f7fd fee8 	bl	8002d60 <tft_printf.constprop.13>
    tft_printf(5,3,"error:%5d", (int16_t)(speed_error));
 8004f90:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <Controller_thread+0x3b4>)
 8004f92:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <Controller_thread+0x3f0>)
 8004f94:	edd3 7a00 	vldr	s15, [r3]
 8004f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f9c:	2005      	movs	r0, #5
 8004f9e:	edcd 7a00 	vstr	s15, [sp]
 8004fa2:	f9bd 3000 	ldrsh.w	r3, [sp]
 8004fa6:	2103      	movs	r1, #3
 8004fa8:	f7fd feda 	bl	8002d60 <tft_printf.constprop.13>

    motors[0].input_diff = motors[0].input - diff_output;
 8004fac:	f8db 3000 	ldr.w	r3, [fp]
 8004fb0:	edd7 7a00 	vldr	s15, [r7]
 8004fb4:	edd3 6a02 	vldr	s13, [r3, #8]
    motors[1].input_diff = motors[1].input + diff_output;
 8004fb8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38

    if(controller.display_status)
 8004fbc:	7962      	ldrb	r2, [r4, #5]

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
    tft_printf(5,4,"speed+:%5d", (int16_t)(speed_output * 100.0f));
    tft_printf(5,3,"error:%5d", (int16_t)(speed_error));

    motors[0].input_diff = motors[0].input - diff_output;
 8004fbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
    motors[1].input_diff = motors[1].input + diff_output;
 8004fc2:	ee77 7a87 	vadd.f32	s15, s15, s14

    tft_printf(5,2,"max:%5d", (int16_t)(speed_error_int));
    tft_printf(5,4,"speed+:%5d", (int16_t)(speed_output * 100.0f));
    tft_printf(5,3,"error:%5d", (int16_t)(speed_error));

    motors[0].input_diff = motors[0].input - diff_output;
 8004fc6:	edc3 6a03 	vstr	s13, [r3, #12]
    motors[1].input_diff = motors[1].input + diff_output;
 8004fca:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    if(controller.display_status)
 8004fce:	b30a      	cbz	r2, 8005014 <Controller_thread+0x314>
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
 8004fd0:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <Controller_thread+0x3b4>)
 8004fd2:	edd3 6a00 	vldr	s13, [r3]
      controller.display[1] = (int32_t)(speed_output*100.0f);
 8004fd6:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <Controller_thread+0x3c0>)
 8004fd8:	ed93 7a00 	vldr	s14, [r3]
      controller.display[2] = (int32_t)(error);
      controller.display[3] = (int32_t)(g_IMU1.theta * 100.0f);
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <Controller_thread+0x388>)
 8004fde:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
      controller.display[1] = (int32_t)(speed_output*100.0f);
      controller.display[2] = (int32_t)(error);
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <Controller_thread+0x390>)
    motors[1].input_diff = motors[1].input + diff_output;

    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
 8004fe4:	ee66 6aa9 	vmul.f32	s13, s13, s19
      controller.display[1] = (int32_t)(speed_output*100.0f);
 8004fe8:	ee27 7a29 	vmul.f32	s14, s14, s19
      controller.display[2] = (int32_t)(error);
 8004fec:	ed93 6a00 	vldr	s12, [r3]
      controller.display[3] = (int32_t)(g_IMU1.theta * 100.0f);
 8004ff0:	ee67 9aa9 	vmul.f32	s19, s15, s19
    motors[1].input_diff = motors[1].input + diff_output;

    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
 8004ff4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
      controller.display[1] = (int32_t)(speed_output*100.0f);
 8004ff8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      controller.display[2] = (int32_t)(error);
      controller.display[3] = (int32_t)(g_IMU1.theta * 100.0f);
 8004ffc:	eefd 9ae9 	vcvt.s32.f32	s19, s19
    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
      controller.display[1] = (int32_t)(speed_output*100.0f);
      controller.display[2] = (int32_t)(error);
 8005000:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    motors[1].input_diff = motors[1].input + diff_output;

    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
 8005004:	edca 6a0d 	vstr	s13, [sl, #52]	; 0x34
      controller.display[1] = (int32_t)(speed_output*100.0f);
 8005008:	ed8a 7a0e 	vstr	s14, [sl, #56]	; 0x38
      controller.display[2] = (int32_t)(error);
      controller.display[3] = (int32_t)(g_IMU1.theta * 100.0f);
 800500c:	edca 9a10 	vstr	s19, [sl, #64]	; 0x40
    if(controller.display_status)
    {
      //controller.display[0] = (int32_t)(position_error);
      controller.display[0] = (int32_t)(speed_error*100.0f);
      controller.display[1] = (int32_t)(speed_output*100.0f);
      controller.display[2] = (int32_t)(error);
 8005010:	ed8a 6a0f 	vstr	s12, [sl, #60]	; 0x3c
      controller.display[3] = (int32_t)(g_IMU1.theta * 100.0f);
    }

    chThdSleepMilliseconds(20);
 8005014:	20c8      	movs	r0, #200	; 0xc8
 8005016:	f7ff fc93 	bl	8004940 <chThdSleep>
 800501a:	f8db a000 	ldr.w	sl, [fp]
  else
    stand_up = 30;

  while(true)
  {
    rc_cmd = (float)((int16_t)(rc_channel[0]) - 1500);
 800501e:	f8d9 3000 	ldr.w	r3, [r9]
 8005022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005026:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <Controller_thread+0x3f4>)

    if(rc_cmd < POSITION_CONTROL && rc_cmd > -POSITION_CONTROL)
 8005034:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  else
    stand_up = 30;

  while(true)
  {
    rc_cmd = (float)((int16_t)(rc_channel[0]) - 1500);
 800503c:	edc3 7a00 	vstr	s15, [r3]

    if(rc_cmd < POSITION_CONTROL && rc_cmd > -POSITION_CONTROL)
 8005040:	f53f aea7 	bmi.w	8004d92 <Controller_thread+0x92>
*/
      speed_cmd = 0.0f;
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
 8005044:	f8da 2000 	ldr.w	r2, [sl]
        + motors[1].Hall_Encoder->count);
 8005048:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800504c:	6892      	ldr	r2, [r2, #8]
 800504e:	689b      	ldr	r3, [r3, #8]
      position_output = 0.0f;
 8005050:	4929      	ldr	r1, [pc, #164]	; (80050f8 <Controller_thread+0x3f8>)
      speed_cmd = 0.0f;
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
        + motors[1].Hall_Encoder->count);
 8005052:	4413      	add	r3, r2
*/
      speed_cmd = 0.0f;
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
 8005054:	ee06 3a90 	vmov	s13, r3
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <Controller_thread+0x38c>)
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
 800505a:	ed81 8a00 	vstr	s16, [r1]
*/
      speed_cmd = 0.0f;
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
 800505e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
 8005062:	eeb4 7a00 	vmov.f32	s14, #64	; 0x40
*/
      speed_cmd = 0.0f;
    }
    else
    {
      encoder_norm = (float)(motors[0].Hall_Encoder->count
 8005066:	edc3 6a00 	vstr	s13, [r3]
        + motors[1].Hall_Encoder->count);
      position_output = 0.0f;
      speed_cmd = rc_cmd/8.0f;
 800506a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <Controller_thread+0x3b0>)
 8005070:	edc3 7a00 	vstr	s15, [r3]
 8005074:	e698      	b.n	8004da8 <Controller_thread+0xa8>
 8005076:	bf00      	nop
 8005078:	60000000 	.word	0x60000000
 800507c:	400921fb 	.word	0x400921fb
 8005080:	20000b30 	.word	0x20000b30
 8005084:	08007a40 	.word	0x08007a40
 8005088:	20003b14 	.word	0x20003b14
 800508c:	200014e8 	.word	0x200014e8
 8005090:	200014e4 	.word	0x200014e4
 8005094:	20003b0c 	.word	0x20003b0c
 8005098:	200014ec 	.word	0x200014ec
 800509c:	20001754 	.word	0x20001754
 80050a0:	20003ba8 	.word	0x20003ba8
 80050a4:	42200000 	.word	0x42200000
 80050a8:	00000000 	.word	0x00000000
 80050ac:	c2200000 	.word	0xc2200000
 80050b0:	20003b98 	.word	0x20003b98
 80050b4:	20003b10 	.word	0x20003b10
 80050b8:	447a0000 	.word	0x447a0000
 80050bc:	40668000 	.word	0x40668000
 80050c0:	20003b9c 	.word	0x20003b9c
 80050c4:	43160000 	.word	0x43160000
 80050c8:	200015c0 	.word	0x200015c0
 80050cc:	3f19999a 	.word	0x3f19999a
 80050d0:	3f35c290 	.word	0x3f35c290
 80050d4:	200014e0 	.word	0x200014e0
 80050d8:	200014f4 	.word	0x200014f4
 80050dc:	20003ba0 	.word	0x20003ba0
 80050e0:	42c80000 	.word	0x42c80000
 80050e4:	20003d3c 	.word	0x20003d3c
 80050e8:	08007a4c 	.word	0x08007a4c
 80050ec:	08007a54 	.word	0x08007a54
 80050f0:	08007a60 	.word	0x08007a60
 80050f4:	20003b08 	.word	0x20003b08
 80050f8:	200014f0 	.word	0x200014f0
 80050fc:	20003910 	.word	0x20003910
 8005100:	20003ba4 	.word	0x20003ba4
 8005104:	20001798 	.word	0x20001798

    speed_output = atan((controller.Kp_v * speed_error)/1000.0f) * 180.0f/M_PI;

    error =  g_IMU1.theta - BALANCE_POS;

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b1d      	cmp	r3, #29
 800510c:	d865      	bhi.n	80051da <Controller_thread+0x4da>
      stand_up++;

    error -= speed_output;

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 800510e:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <Controller_thread+0x4f0>)
 8005110:	edd4 6a03 	vldr	s13, [r4, #12]
 8005114:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005118:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80051f4 <Controller_thread+0x4f4>
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;
 800511c:	9901      	ldr	r1, [sp, #4]

    error -= speed_output;

    output = controller.Kp_s * error -
 800511e:	ed94 6a02 	vldr	s12, [r4, #8]
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 8005122:	ee66 7aa7 	vmul.f32	s15, s13, s15
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;
 8005126:	ee79 9aca 	vsub.f32	s19, s19, s20

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;
 800512a:	eec7 7a87 	vdiv.f32	s15, s15, s14
    {
      motor_stop();
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;
 800512e:	3301      	adds	r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	700b      	strb	r3, [r1, #0]

    error -= speed_output;
 8005134:	4930      	ldr	r1, [pc, #192]	; (80051f8 <Controller_thread+0x4f8>)

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    if(stand_up < 2)
 8005136:	2b01      	cmp	r3, #1
      palTogglePad(GPIOD, GPIOD_LED5);
    }
    else if(stand_up < 30)
      stand_up++;

    error -= speed_output;
 8005138:	edc1 9a00 	vstr	s19, [r1]

    output = controller.Kp_s * error -
 800513c:	eed9 7a86 	vfnms.f32	s15, s19, s12
 8005140:	492e      	ldr	r1, [pc, #184]	; (80051fc <Controller_thread+0x4fc>)
 8005142:	edc1 7a00 	vstr	s15, [r1]
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    if(stand_up < 2)
 8005146:	d02c      	beq.n	80051a2 <Controller_thread+0x4a2>
      temp = ( g_IMU1.theta - BALANCE_POS > 0 ? -0.17f : 0.062f);
    else if(stand_up < 30)
 8005148:	2b1e      	cmp	r3, #30
 800514a:	f43f aea2 	beq.w	8004e92 <Controller_thread+0x192>
      temp += output/4.25f;
 800514e:	eeb1 7a01 	vmov.f32	s14, #17
 8005152:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005156:	ed96 7a00 	vldr	s14, [r6]
 800515a:	ee77 7a87 	vadd.f32	s15, s15, s14
    else
      temp += output;

    if(temp > 0.6f)
 800515e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005200 <Controller_thread+0x500>
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    if(stand_up < 2)
      temp = ( g_IMU1.theta - BALANCE_POS > 0 ? -0.17f : 0.062f);
    else if(stand_up < 30)
      temp += output/4.25f;
 8005162:	edc6 7a00 	vstr	s15, [r6]
    else
      temp += output;

    if(temp > 0.6f)
 8005166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	f73f ae9e 	bgt.w	8004eae <Controller_thread+0x1ae>
      temp = 0.6f;
    else if(temp < -0.6f)
 8005172:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005204 <Controller_thread+0x504>
 8005176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d520      	bpl.n	80051c2 <Controller_thread+0x4c2>
      temp = -0.6f;
 8005180:	ed86 7a00 	vstr	s14, [r6]
 8005184:	eddf 7a20 	vldr	s15, [pc, #128]	; 8005208 <Controller_thread+0x508>
 8005188:	e695      	b.n	8004eb6 <Controller_thread+0x1b6>

    diff_error_int += diff_error;

    if(diff_error_int > controller.int_max_r)
      diff_error_int = controller.int_max_r;
    else if(diff_error_int < -controller.int_max_r)
 800518a:	eef1 5a65 	vneg.f32	s11, s11
 800518e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      diff_error_int = -controller.int_max_r;
 8005196:	bf44      	itt	mi
 8005198:	eef0 7a65 	vmovmi.f32	s15, s11
 800519c:	edc2 5a00 	vstrmi	s11, [r2]
 80051a0:	e6c8      	b.n	8004f34 <Controller_thread+0x234>

    output = controller.Kp_s * error -
            controller.Kd_s * g_IMU1.gyroFiltered[2] / 150.0f;

    if(stand_up < 2)
      temp = ( g_IMU1.theta - BALANCE_POS > 0 ? -0.17f : 0.062f);
 80051a2:	edd2 6a1d 	vldr	s13, [r2, #116]	; 0x74
 80051a6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800520c <Controller_thread+0x50c>
 80051aa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005210 <Controller_thread+0x510>
 80051ae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	bfc8      	it	gt
 80051b8:	eef0 7a47 	vmovgt.f32	s15, s14
 80051bc:	edc6 7a00 	vstr	s15, [r6]
 80051c0:	e66d      	b.n	8004e9e <Controller_thread+0x19e>
    if(temp > 0.6f)
      temp = 0.6f;
    else if(temp < -0.6f)
      temp = -0.6f;

    if(temp > 0.0f)
 80051c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051c6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005214 <Controller_thread+0x514>
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	bfcc      	ite	gt
 80051d0:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80051d4:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80051d8:	e66d      	b.n	8004eb6 <Controller_thread+0x1b6>

    error =  g_IMU1.theta - BALANCE_POS;

    if((error > CONTROL_FAIL || error < -CONTROL_FAIL) && stand_up >= 30)
    {
      motor_stop();
 80051da:	f7fd ffb9 	bl	8003150 <pwmStop.constprop.33>
      palTogglePad(GPIOD, GPIOD_LED5);
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <Controller_thread+0x518>)
 80051e0:	6953      	ldr	r3, [r2, #20]
 80051e2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80051e6:	6153      	str	r3, [r2, #20]
 80051e8:	e63c      	b.n	8004e64 <Controller_thread+0x164>

  diff_cmd = (float)(motors[0].Hall_Encoder->count - motors[1].Hall_Encoder->count);

  error =  g_IMU1.theta - BALANCE_POS;
  if(error > CONTROL_FAIL || error < -CONTROL_FAIL)
    stand_up = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	7013      	strb	r3, [r2, #0]
 80051ee:	e5c4      	b.n	8004d7a <Controller_thread+0x7a>
 80051f0:	20003b14 	.word	0x20003b14
 80051f4:	43160000 	.word	0x43160000
 80051f8:	200014e4 	.word	0x200014e4
 80051fc:	200015c0 	.word	0x200015c0
 8005200:	3f19999a 	.word	0x3f19999a
 8005204:	bf19999a 	.word	0xbf19999a
 8005208:	bf35c290 	.word	0xbf35c290
 800520c:	be2e147b 	.word	0xbe2e147b
 8005210:	3d7df3b6 	.word	0x3d7df3b6
 8005214:	3de147ae 	.word	0x3de147ae
 8005218:	40020c00 	.word	0x40020c00
 800521c:	00000000 	.word	0x00000000

08005220 <cmd_Kip.lto_priv.108>:
}

static void cmd_Kip(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005220:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005222:	780b      	ldrb	r3, [r1, #0]
 8005224:	b1bb      	cbz	r3, 8005256 <cmd_Kip.lto_priv.108+0x36>
 8005226:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005228:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800522c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kip(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005230:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005234:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kip(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f6      	bne.n	8005228 <cmd_Kip.lto_priv.108+0x8>
 800523a:	ee07 2a90 	vmov	s15, r2
 800523e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005260 <cmd_Kip.lto_priv.108+0x40>
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_p = (float)(finalNum/10000.0f);
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <cmd_Kip.lto_priv.108+0x44>)

  chprintf(chp,"Ki_p: %d\n", finalNum);
 800524c:	4906      	ldr	r1, [pc, #24]	; (8005268 <cmd_Kip.lto_priv.108+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_p = (float)(finalNum/10000.0f);
 800524e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  chprintf(chp,"Ki_p: %d\n", finalNum);
 8005252:	f7fe bb45 	b.w	80038e0 <chprintf>
static void cmd_Kip(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005256:	eddf 7a05 	vldr	s15, [pc, #20]	; 800526c <cmd_Kip.lto_priv.108+0x4c>

static void cmd_Kip(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 800525a:	461a      	mov	r2, r3
 800525c:	e7f5      	b.n	800524a <cmd_Kip.lto_priv.108+0x2a>
 800525e:	bf00      	nop
 8005260:	461c4000 	.word	0x461c4000
 8005264:	20001754 	.word	0x20001754
 8005268:	08007a6c 	.word	0x08007a6c
 800526c:	00000000 	.word	0x00000000

08005270 <cmd_Kpp.lto_priv.107>:
}

static void cmd_Kpp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005270:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005272:	780b      	ldrb	r3, [r1, #0]
 8005274:	b1bb      	cbz	r3, 80052a6 <cmd_Kpp.lto_priv.107+0x36>
 8005276:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005278:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800527c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kpp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005280:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005284:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kpp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f6      	bne.n	8005278 <cmd_Kpp.lto_priv.107+0x8>
 800528a:	ee07 2a90 	vmov	s15, r2
 800528e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80052b0 <cmd_Kpp.lto_priv.107+0x40>
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_p = (float)(finalNum/10000.0f);
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <cmd_Kpp.lto_priv.107+0x44>)

  chprintf(chp,"Kp_p: %d\n", finalNum);
 800529c:	4906      	ldr	r1, [pc, #24]	; (80052b8 <cmd_Kpp.lto_priv.107+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_p = (float)(finalNum/10000.0f);
 800529e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  chprintf(chp,"Kp_p: %d\n", finalNum);
 80052a2:	f7fe bb1d 	b.w	80038e0 <chprintf>
static void cmd_Kpp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80052a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80052bc <cmd_Kpp.lto_priv.107+0x4c>

static void cmd_Kpp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 80052aa:	461a      	mov	r2, r3
 80052ac:	e7f5      	b.n	800529a <cmd_Kpp.lto_priv.107+0x2a>
 80052ae:	bf00      	nop
 80052b0:	461c4000 	.word	0x461c4000
 80052b4:	20001754 	.word	0x20001754
 80052b8:	08007a78 	.word	0x08007a78
 80052bc:	00000000 	.word	0x00000000

080052c0 <cmd_Kiv.lto_priv.106>:
}

static void cmd_Kiv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 80052c0:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80052c2:	780b      	ldrb	r3, [r1, #0]
 80052c4:	b1bb      	cbz	r3, 80052f6 <cmd_Kiv.lto_priv.106+0x36>
 80052c6:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 80052c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80052cc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kiv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80052d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 80052d4:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kiv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f6      	bne.n	80052c8 <cmd_Kiv.lto_priv.106+0x8>
 80052da:	ee07 2a90 	vmov	s15, r2
 80052de:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005300 <cmd_Kiv.lto_priv.106+0x40>
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_v = (float)(finalNum/10000.0f);
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <cmd_Kiv.lto_priv.106+0x44>)

  chprintf(chp,"Ki_v: %d\n", finalNum);
 80052ec:	4906      	ldr	r1, [pc, #24]	; (8005308 <cmd_Kiv.lto_priv.106+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_v = (float)(finalNum/10000.0f);
 80052ee:	edc3 7a08 	vstr	s15, [r3, #32]

  chprintf(chp,"Ki_v: %d\n", finalNum);
 80052f2:	f7fe baf5 	b.w	80038e0 <chprintf>
static void cmd_Kiv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80052f6:	eddf 7a05 	vldr	s15, [pc, #20]	; 800530c <cmd_Kiv.lto_priv.106+0x4c>

static void cmd_Kiv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 80052fa:	461a      	mov	r2, r3
 80052fc:	e7f5      	b.n	80052ea <cmd_Kiv.lto_priv.106+0x2a>
 80052fe:	bf00      	nop
 8005300:	461c4000 	.word	0x461c4000
 8005304:	20001754 	.word	0x20001754
 8005308:	08007a84 	.word	0x08007a84
 800530c:	00000000 	.word	0x00000000

08005310 <cmd_Kpv.lto_priv.105>:
}

static void cmd_Kpv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005310:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005312:	780b      	ldrb	r3, [r1, #0]
 8005314:	b1bb      	cbz	r3, 8005346 <cmd_Kpv.lto_priv.105+0x36>
 8005316:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005318:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800531c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kpv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005320:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005324:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kpv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f6      	bne.n	8005318 <cmd_Kpv.lto_priv.105+0x8>
 800532a:	ee07 2a90 	vmov	s15, r2
 800532e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005350 <cmd_Kpv.lto_priv.105+0x40>
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_v = (float)(finalNum/10000.0f);
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <cmd_Kpv.lto_priv.105+0x44>)

  chprintf(chp,"Kp_v: %d\n", finalNum);
 800533c:	4906      	ldr	r1, [pc, #24]	; (8005358 <cmd_Kpv.lto_priv.105+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_v = (float)(finalNum/10000.0f);
 800533e:	edc3 7a07 	vstr	s15, [r3, #28]

  chprintf(chp,"Kp_v: %d\n", finalNum);
 8005342:	f7fe bacd 	b.w	80038e0 <chprintf>
static void cmd_Kpv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005346:	eddf 7a05 	vldr	s15, [pc, #20]	; 800535c <cmd_Kpv.lto_priv.105+0x4c>

static void cmd_Kpv(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 800534a:	461a      	mov	r2, r3
 800534c:	e7f5      	b.n	800533a <cmd_Kpv.lto_priv.105+0x2a>
 800534e:	bf00      	nop
 8005350:	461c4000 	.word	0x461c4000
 8005354:	20001754 	.word	0x20001754
 8005358:	08007a90 	.word	0x08007a90
 800535c:	00000000 	.word	0x00000000

08005360 <cmd_Kir.lto_priv.104>:
}

static void cmd_Kir(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005360:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005362:	780b      	ldrb	r3, [r1, #0]
 8005364:	b1bb      	cbz	r3, 8005396 <cmd_Kir.lto_priv.104+0x36>
 8005366:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005368:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800536c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kir(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005370:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005374:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kir(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f6      	bne.n	8005368 <cmd_Kir.lto_priv.104+0x8>
 800537a:	ee07 2a90 	vmov	s15, r2
 800537e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80053a0 <cmd_Kir.lto_priv.104+0x40>
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_r = (float)(finalNum/10000.0f);
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <cmd_Kir.lto_priv.104+0x44>)

  chprintf(chp,"Ki_r: %d\n", finalNum);
 800538c:	4906      	ldr	r1, [pc, #24]	; (80053a8 <cmd_Kir.lto_priv.104+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Ki_r = (float)(finalNum/10000.0f);
 800538e:	edc3 7a05 	vstr	s15, [r3, #20]

  chprintf(chp,"Ki_r: %d\n", finalNum);
 8005392:	f7fe baa5 	b.w	80038e0 <chprintf>
static void cmd_Kir(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005396:	eddf 7a05 	vldr	s15, [pc, #20]	; 80053ac <cmd_Kir.lto_priv.104+0x4c>

static void cmd_Kir(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 800539a:	461a      	mov	r2, r3
 800539c:	e7f5      	b.n	800538a <cmd_Kir.lto_priv.104+0x2a>
 800539e:	bf00      	nop
 80053a0:	461c4000 	.word	0x461c4000
 80053a4:	20001754 	.word	0x20001754
 80053a8:	08007a9c 	.word	0x08007a9c
 80053ac:	00000000 	.word	0x00000000

080053b0 <cmd_Kpr.lto_priv.103>:
}

static void cmd_Kpr(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 80053b0:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80053b2:	780b      	ldrb	r3, [r1, #0]
 80053b4:	b1bb      	cbz	r3, 80053e6 <cmd_Kpr.lto_priv.103+0x36>
 80053b6:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 80053b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kpr(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80053c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 80053c4:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kpr(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f6      	bne.n	80053b8 <cmd_Kpr.lto_priv.103+0x8>
 80053ca:	ee07 2a90 	vmov	s15, r2
 80053ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80053f0 <cmd_Kpr.lto_priv.103+0x40>
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_r = (float)(finalNum/10000.0f);
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <cmd_Kpr.lto_priv.103+0x44>)

  chprintf(chp,"Kp_r: %d\n", finalNum);
 80053dc:	4906      	ldr	r1, [pc, #24]	; (80053f8 <cmd_Kpr.lto_priv.103+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_r = (float)(finalNum/10000.0f);
 80053de:	edc3 7a04 	vstr	s15, [r3, #16]

  chprintf(chp,"Kp_r: %d\n", finalNum);
 80053e2:	f7fe ba7d 	b.w	80038e0 <chprintf>
static void cmd_Kpr(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 80053e6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80053fc <cmd_Kpr.lto_priv.103+0x4c>

static void cmd_Kpr(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 80053ea:	461a      	mov	r2, r3
 80053ec:	e7f5      	b.n	80053da <cmd_Kpr.lto_priv.103+0x2a>
 80053ee:	bf00      	nop
 80053f0:	461c4000 	.word	0x461c4000
 80053f4:	20001754 	.word	0x20001754
 80053f8:	08007aa8 	.word	0x08007aa8
 80053fc:	00000000 	.word	0x00000000

08005400 <cmd_Kd.lto_priv.102>:
}

static void cmd_Kd(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005400:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005402:	780b      	ldrb	r3, [r1, #0]
 8005404:	b1bb      	cbz	r3, 8005436 <cmd_Kd.lto_priv.102+0x36>
 8005406:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005408:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800540c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kd(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005410:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005414:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kd(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f6      	bne.n	8005408 <cmd_Kd.lto_priv.102+0x8>
 800541a:	ee07 2a90 	vmov	s15, r2
 800541e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005440 <cmd_Kd.lto_priv.102+0x40>
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kd_s = (float)(finalNum/10000.0f);
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <cmd_Kd.lto_priv.102+0x44>)

  chprintf(chp,"Kd: %d\n", finalNum);
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <cmd_Kd.lto_priv.102+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kd_s = (float)(finalNum/10000.0f);
 800542e:	edc3 7a03 	vstr	s15, [r3, #12]

  chprintf(chp,"Kd: %d\n", finalNum);
 8005432:	f7fe ba55 	b.w	80038e0 <chprintf>
static void cmd_Kd(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005436:	eddf 7a05 	vldr	s15, [pc, #20]	; 800544c <cmd_Kd.lto_priv.102+0x4c>

static void cmd_Kd(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 800543a:	461a      	mov	r2, r3
 800543c:	e7f5      	b.n	800542a <cmd_Kd.lto_priv.102+0x2a>
 800543e:	bf00      	nop
 8005440:	461c4000 	.word	0x461c4000
 8005444:	20001754 	.word	0x20001754
 8005448:	08007ab4 	.word	0x08007ab4
 800544c:	00000000 	.word	0x00000000

08005450 <cmd_Kp.lto_priv.101>:
}

static void cmd_Kp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
 8005450:	6811      	ldr	r1, [r2, #0]
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005452:	780b      	ldrb	r3, [r1, #0]
 8005454:	b1bb      	cbz	r3, 8005486 <cmd_Kp.lto_priv.101+0x36>
 8005456:	2200      	movs	r2, #0
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005458:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800545c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
static void cmd_Kp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005460:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    finalNum=finalNum*10+*(toNumber++)-'0';
 8005464:	3a30      	subs	r2, #48	; 0x30
static void cmd_Kp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f6      	bne.n	8005458 <cmd_Kp.lto_priv.101+0x8>
 800546a:	ee07 2a90 	vmov	s15, r2
 800546e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005490 <cmd_Kp.lto_priv.101+0x40>
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eec7 7a87 	vdiv.f32	s15, s15, s14
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_s = (float)(finalNum/10000.0f);
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <cmd_Kp.lto_priv.101+0x44>)

  chprintf(chp,"Kp: %d\n", finalNum);
 800547c:	4906      	ldr	r1, [pc, #24]	; (8005498 <cmd_Kp.lto_priv.101+0x48>)
  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
    finalNum=finalNum*10+*(toNumber++)-'0';

  controller.Kp_s = (float)(finalNum/10000.0f);
 800547e:	edc3 7a02 	vstr	s15, [r3, #8]

  chprintf(chp,"Kp: %d\n", finalNum);
 8005482:	f7fe ba2d 	b.w	80038e0 <chprintf>
static void cmd_Kp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
  while(*toNumber!='\0')
 8005486:	eddf 7a05 	vldr	s15, [pc, #20]	; 800549c <cmd_Kp.lto_priv.101+0x4c>

static void cmd_Kp(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc;

  char *toNumber = argv[0];
  uint32_t finalNum=0;
 800548a:	461a      	mov	r2, r3
 800548c:	e7f5      	b.n	800547a <cmd_Kp.lto_priv.101+0x2a>
 800548e:	bf00      	nop
 8005490:	461c4000 	.word	0x461c4000
 8005494:	20001754 	.word	0x20001754
 8005498:	08007abc 	.word	0x08007abc
 800549c:	00000000 	.word	0x00000000

080054a0 <cmd_print.lto_priv.100>:
static THD_FUNCTION(Controller_thread, p);
static THD_FUNCTION(Printing_thread, p);

static Control_Param controller;

static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
 80054a0:	b510      	push	{r4, lr}
  (void) argc,argv;

  if(!controller.display_status)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <cmd_print.lto_priv.100+0x34>)
  {
    palTogglePad(GPIOD,GPIOD_LED4);
 80054a4:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <cmd_print.lto_priv.100+0x38>)
static Control_Param controller;

static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  if(!controller.display_status)
 80054a6:	7963      	ldrb	r3, [r4, #5]
 80054a8:	b14b      	cbz	r3, 80054be <cmd_print.lto_priv.100+0x1e>
    chprintf(chp,"display on\n");
    controller.display_status = 1;
  }
  else
  {
    palTogglePad(GPIOD,GPIOD_LED4);
 80054aa:	6953      	ldr	r3, [r2, #20]
    chprintf(chp,"display off\n");
 80054ac:	490b      	ldr	r1, [pc, #44]	; (80054dc <cmd_print.lto_priv.100+0x3c>)
    chprintf(chp,"display on\n");
    controller.display_status = 1;
  }
  else
  {
    palTogglePad(GPIOD,GPIOD_LED4);
 80054ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054b2:	6153      	str	r3, [r2, #20]
    chprintf(chp,"display off\n");
 80054b4:	f7fe fa14 	bl	80038e0 <chprintf>
    controller.display_status = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	7163      	strb	r3, [r4, #5]
 80054bc:	bd10      	pop	{r4, pc}
static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  if(!controller.display_status)
  {
    palTogglePad(GPIOD,GPIOD_LED4);
 80054be:	6953      	ldr	r3, [r2, #20]
    chprintf(chp,"display on\n");
 80054c0:	4907      	ldr	r1, [pc, #28]	; (80054e0 <cmd_print.lto_priv.100+0x40>)
static void cmd_print(BaseSequentialStream * chp, int argc, char *argv[]){
  (void) argc,argv;

  if(!controller.display_status)
  {
    palTogglePad(GPIOD,GPIOD_LED4);
 80054c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054c6:	6153      	str	r3, [r2, #20]
    chprintf(chp,"display on\n");
 80054c8:	f7fe fa0a 	bl	80038e0 <chprintf>
    controller.display_status = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	7163      	strb	r3, [r4, #5]
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	bf00      	nop
 80054d4:	20001754 	.word	0x20001754
 80054d8:	40020c00 	.word	0x40020c00
 80054dc:	08007ad0 	.word	0x08007ad0
 80054e0:	08007ac4 	.word	0x08007ac4
	...

080054f0 <Printing_thread>:
    chThdSleepMilliseconds(20);
  }
}

static THD_FUNCTION(Printing_thread, p)
{
 80054f0:	b508      	push	{r3, lr}
 80054f2:	4b18      	ldr	r3, [pc, #96]	; (8005554 <Printing_thread+0x64>)
 80054f4:	4a18      	ldr	r2, [pc, #96]	; (8005558 <Printing_thread+0x68>)
 80054f6:	699b      	ldr	r3, [r3, #24]

  sdStart(BLE2, NULL);

  static uint8_t i;
  for (i = 1; i < DISPLAY_NUM; i++)
    controller.display[i] = 0;
 80054f8:	4d18      	ldr	r5, [pc, #96]	; (800555c <Printing_thread+0x6c>)
 80054fa:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Printing_thread, p)
{
  (void)p;
  chRegSetThreadName("Printing Data");

  sdStart(BLE2, NULL);
 80054fc:	4818      	ldr	r0, [pc, #96]	; (8005560 <Printing_thread+0x70>)
 80054fe:	4c19      	ldr	r4, [pc, #100]	; (8005564 <Printing_thread+0x74>)
 8005500:	f7fd fe7e 	bl	8003200 <sdStart.constprop.31>

  static uint8_t i;
  for (i = 1; i < DISPLAY_NUM; i++)
    controller.display[i] = 0;
 8005504:	2600      	movs	r6, #0
 8005506:	2304      	movs	r3, #4
 8005508:	63ae      	str	r6, [r5, #56]	; 0x38
 800550a:	63ee      	str	r6, [r5, #60]	; 0x3c
 800550c:	642e      	str	r6, [r5, #64]	; 0x40
 800550e:	7023      	strb	r3, [r4, #0]

  while(true)
  {
    if(controller.display_status)
 8005510:	796b      	ldrb	r3, [r5, #5]
 8005512:	b1cb      	cbz	r3, 8005548 <Printing_thread+0x58>
      for (i = 0; i < DISPLAY_NUM + 1; i++)
 8005514:	7026      	strb	r6, [r4, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	e00c      	b.n	8005534 <Printing_thread+0x44>
      {
        if(i == 1)
          chprintf(CHP2,"a.");
        else
          chprintf(CHP2,"%d.",controller.display[i - 2]);
 800551a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800551c:	f7fe f9e0 	bl	80038e0 <chprintf>

        chThdSleepMilliseconds(200);
 8005520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005524:	f7ff fa0c 	bl	8004940 <chThdSleep>
    controller.display[i] = 0;

  while(true)
  {
    if(controller.display_status)
      for (i = 0; i < DISPLAY_NUM + 1; i++)
 8005528:	7823      	ldrb	r3, [r4, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b04      	cmp	r3, #4
 8005530:	7023      	strb	r3, [r4, #0]
 8005532:	d8ed      	bhi.n	8005510 <Printing_thread+0x20>
      {
        if(i == 1)
 8005534:	2b01      	cmp	r3, #1
          chprintf(CHP2,"a.");
        else
          chprintf(CHP2,"%d.",controller.display[i - 2]);
 8005536:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800553a:	490b      	ldr	r1, [pc, #44]	; (8005568 <Printing_thread+0x78>)
 800553c:	4808      	ldr	r0, [pc, #32]	; (8005560 <Printing_thread+0x70>)
  while(true)
  {
    if(controller.display_status)
      for (i = 0; i < DISPLAY_NUM + 1; i++)
      {
        if(i == 1)
 800553e:	d1ec      	bne.n	800551a <Printing_thread+0x2a>
          chprintf(CHP2,"a.");
 8005540:	490a      	ldr	r1, [pc, #40]	; (800556c <Printing_thread+0x7c>)
 8005542:	f7fe f9cd 	bl	80038e0 <chprintf>
 8005546:	e7eb      	b.n	8005520 <Printing_thread+0x30>
          chprintf(CHP2,"%d.",controller.display[i - 2]);

        chThdSleepMilliseconds(200);
      }
    else
      chThdSleepMilliseconds(500);
 8005548:	f241 3088 	movw	r0, #5000	; 0x1388
 800554c:	f7ff f9f8 	bl	8004940 <chThdSleep>
 8005550:	e7de      	b.n	8005510 <Printing_thread+0x20>
 8005552:	bf00      	nop
 8005554:	20000b30 	.word	0x20000b30
 8005558:	08007ae0 	.word	0x08007ae0
 800555c:	20001754 	.word	0x20001754
 8005560:	2000126c 	.word	0x2000126c
 8005564:	2000179c 	.word	0x2000179c
 8005568:	08007af4 	.word	0x08007af4
 800556c:	08007af0 	.word	0x08007af0

08005570 <Hall_update>:
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 8005570:	6803      	ldr	r3, [r0, #0]

  Hall->count += ((Hall->reverse)?
 8005572:	7942      	ldrb	r2, [r0, #5]
  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;
 8005574:	68d9      	ldr	r1, [r3, #12]
 8005576:	6a4b      	ldr	r3, [r1, #36]	; 0x24

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
}

void Hall_update(HallStruct* Hall)
{
 8005578:	b410      	push	{r4}
  uint16_t count = Hall->Timer->tim->CNT;
 800557a:	b29b      	uxth	r3, r3

  Hall->count += ((Hall->reverse)?
 800557c:	6884      	ldr	r4, [r0, #8]
 800557e:	b1a2      	cbz	r2, 80055aa <Hall_update+0x3a>
 8005580:	8982      	ldrh	r2, [r0, #12]
 8005582:	1a9a      	subs	r2, r3, r2
 8005584:	4422      	add	r2, r4
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
 8005586:	f24f 542f 	movw	r4, #62767	; 0xf52f
 800558a:	42a3      	cmp	r3, r4

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 800558c:	6082      	str	r2, [r0, #8]
      (count - Hall->count_prev):(Hall->count_prev - count));

  Hall->count_prev = count;
 800558e:	8183      	strh	r3, [r0, #12]

  if(count > HALL_UPPER_LIMIT)
 8005590:	d80e      	bhi.n	80055b0 <Hall_update+0x40>
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
  }
  else if (count < HALL_LOWER_LIMIT)
 8005592:	f640 22ce 	movw	r2, #2766	; 0xace
 8005596:	4293      	cmp	r3, r2
 8005598:	d804      	bhi.n	80055a4 <Hall_update+0x34>
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
 800559a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800559e:	3330      	adds	r3, #48	; 0x30
 80055a0:	624b      	str	r3, [r1, #36]	; 0x24
    Hall->count_prev += HALL_RANGE;
 80055a2:	8183      	strh	r3, [r0, #12]
  }
}
 80055a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a8:	4770      	bx	lr

void Hall_update(HallStruct* Hall)
{
  uint16_t count = Hall->Timer->tim->CNT;

  Hall->count += ((Hall->reverse)?
 80055aa:	8982      	ldrh	r2, [r0, #12]
 80055ac:	1ad2      	subs	r2, r2, r3
 80055ae:	e7e9      	b.n	8005584 <Hall_update+0x14>

  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
 80055b0:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80055b4:	3b30      	subs	r3, #48	; 0x30
 80055b6:	624b      	str	r3, [r1, #36]	; 0x24
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 80055b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  Hall->count_prev = count;

  if(count > HALL_UPPER_LIMIT)
  {
    Hall->Timer->tim->CNT = count - HALL_RANGE;
    Hall->count_prev -= HALL_RANGE;
 80055bc:	8183      	strh	r3, [r0, #12]
  else if (count < HALL_LOWER_LIMIT)
  {
    Hall->Timer->tim->CNT = count + HALL_RANGE;
    Hall->count_prev += HALL_RANGE;
  }
}
 80055be:	4770      	bx	lr

080055c0 <Hall_init>:
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 80055c0:	b538      	push	{r3, r4, r5, lr}
  GPTDriver* Hall_GPT = Hall->Timer;
 80055c2:	6805      	ldr	r5, [r0, #0]

  gptStart(Hall_GPT, &hall_cfg);
 80055c4:	4911      	ldr	r1, [pc, #68]	; (800560c <Hall_init+0x4c>)
  0,
  0
};

void Hall_init(HallStruct* Hall)
{
 80055c6:	4604      	mov	r4, r0
  GPTDriver* Hall_GPT = Hall->Timer;

  gptStart(Hall_GPT, &hall_cfg);
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7fc fee1 	bl	8002390 <gptStart>

  if (HALL_USE_CHANNEL1_2)
  {
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(1);
 80055ce:	68eb      	ldr	r3, [r5, #12]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_CC2S(1);
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055de:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC1F(8);
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055e6:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR1 |= STM32_TIM_CCMR1_IC2F(8);
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ee:	619a      	str	r2, [r3, #24]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 80055f0:	689a      	ldr	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 80055f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_CC4S(1);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC3F(8);
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
 80055f6:	f042 0203 	orr.w	r2, r2, #3
 80055fa:	609a      	str	r2, [r3, #8]
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
 80055fc:	6259      	str	r1, [r3, #36]	; 0x24
  Hall->count_prev = HALL_INITIAL_VALUE;

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 80055fe:	681a      	ldr	r2, [r3, #0]
    Hall_GPT->tim->CCMR2 |= STM32_TIM_CCMR2_IC4F(8);
  }

  Hall_GPT->tim->SMCR |= STM32_TIM_SMCR_SMS(3);
  Hall_GPT->tim->CNT = HALL_INITIAL_VALUE;
  Hall->count_prev = HALL_INITIAL_VALUE;
 8005600:	81a1      	strh	r1, [r4, #12]

  Hall_GPT->tim->CR1 |= STM32_TIM_CR1_CEN;
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	bd38      	pop	{r3, r4, r5, pc}
 800560a:	bf00      	nop
 800560c:	08007a20 	.word	0x08007a20

08005610 <tft_char_is_changed>:
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 8005610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8005614:	0086      	lsls	r6, r0, #2
 8005616:	1833      	adds	r3, r6, r0
 8005618:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    tft_write_data(color >> 8);
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
 800561c:	4602      	mov	r2, r0
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 800561e:	4c18      	ldr	r4, [pc, #96]	; (8005680 <tft_char_is_changed+0x70>)
 8005620:	4818      	ldr	r0, [pc, #96]	; (8005684 <tft_char_is_changed+0x74>)
 8005622:	5cc5      	ldrb	r5, [r0, r3]
 8005624:	5ce0      	ldrb	r0, [r4, r3]
 8005626:	42a8      	cmp	r0, r5
 8005628:	d013      	beq.n	8005652 <tft_char_is_changed+0x42>
 800562a:	4f17      	ldr	r7, [pc, #92]	; (8005688 <tft_char_is_changed+0x78>)
 800562c:	4817      	ldr	r0, [pc, #92]	; (800568c <tft_char_is_changed+0x7c>)
 800562e:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8005632:	f8df c060 	ldr.w	ip, [pc, #96]	; 8005694 <tft_char_is_changed+0x84>
 8005636:	4f16      	ldr	r7, [pc, #88]	; (8005690 <tft_char_is_changed+0x80>)
 8005638:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800563c:	2001      	movs	r0, #1
	text_prev[x][y] = text[x][y];
 800563e:	4432      	add	r2, r6
 8005640:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005644:	5465      	strb	r5, [r4, r1]
	text_color_prev[x][y] = text_color[x][y];
 8005646:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
	bg_color_prev[x][y] = bg_color[x][y];
 800564a:	f82c 8011 	strh.w	r8, [ip, r1, lsl #1]
	return re;
}
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tft_write_data(color);
}

uint8_t tft_char_is_changed(uint8_t x, uint8_t y)
{
	uint8_t re = (text_prev[x][y] != text[x][y] || text_color_prev[x][y] != text_color[x][y] || bg_color_prev[x][y] != bg_color[x][y]);
 8005652:	4f0f      	ldr	r7, [pc, #60]	; (8005690 <tft_char_is_changed+0x80>)
 8005654:	f8df e030 	ldr.w	lr, [pc, #48]	; 8005688 <tft_char_is_changed+0x78>
 8005658:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 800565c:	f83e e013 	ldrh.w	lr, [lr, r3, lsl #1]
 8005660:	f8df c030 	ldr.w	ip, [pc, #48]	; 8005694 <tft_char_is_changed+0x84>
 8005664:	4570      	cmp	r0, lr
 8005666:	4809      	ldr	r0, [pc, #36]	; (800568c <tft_char_is_changed+0x7c>)
 8005668:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800566c:	d001      	beq.n	8005672 <tft_char_is_changed+0x62>
 800566e:	2001      	movs	r0, #1
 8005670:	e7e5      	b.n	800563e <tft_char_is_changed+0x2e>
 8005672:	f83c 0013 	ldrh.w	r0, [ip, r3, lsl #1]
 8005676:	ebb0 0008 	subs.w	r0, r0, r8
 800567a:	bf18      	it	ne
 800567c:	2001      	movne	r0, #1
 800567e:	e7de      	b.n	800563e <tft_char_is_changed+0x2e>
 8005680:	200014f8 	.word	0x200014f8
 8005684:	20000a54 	.word	0x20000a54
 8005688:	20001320 	.word	0x20001320
 800568c:	20000894 	.word	0x20000894
 8005690:	200015c4 	.word	0x200015c4
 8005694:	20003bac 	.word	0x20003bac
	...

080056a0 <tft_write_data>:
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 80056a0:	b510      	push	{r4, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	ac02      	add	r4, sp, #8
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <tft_write_data+0x24>)
  * @brief  Sending a data
  * @param  data: one byte data to be sent
  * @retval None
  */
void tft_write_data(uint8_t data)
{
 80056a8:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palSetPad(TFT_DC_PORT, TFT_DC_PIN);
 80056ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056b0:	831a      	strh	r2, [r3, #24]

  spiSelect(TFT_SPI);
 80056b2:	f7fd fe25 	bl	8003300 <spiSelect.constprop.27>
  spiSend(TFT_SPI, 1, &data);
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7fd fe92 	bl	80033e0 <spiSend.constprop.23>
  spiUnselect(TFT_SPI);
 80056bc:	f7fd fe58 	bl	8003370 <spiUnselect.constprop.25>
}
 80056c0:	b002      	add	sp, #8
 80056c2:	bd10      	pop	{r4, pc}
 80056c4:	40021000 	.word	0x40021000
	...

080056d0 <tft_write_command>:
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 80056d0:	b510      	push	{r4, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	ac02      	add	r4, sp, #8
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 80056d6:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <tft_write_command+0x24>)
  * @brief  Sending a command
  * @param  command: one byte command to be sent
  * @retval None
  */
void tft_write_command(uint8_t command)
{
 80056d8:	f804 0d01 	strb.w	r0, [r4, #-1]!
	palClearPad(TFT_DC_PORT, TFT_DC_PIN);
 80056dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056e0:	835a      	strh	r2, [r3, #26]

  spiSelect(TFT_SPI);
 80056e2:	f7fd fe0d 	bl	8003300 <spiSelect.constprop.27>
  spiSend(TFT_SPI, 1, &command);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7fd fe7a 	bl	80033e0 <spiSend.constprop.23>
  spiUnselect(TFT_SPI);
 80056ec:	f7fd fe40 	bl	8003370 <spiUnselect.constprop.25>
}
 80056f0:	b002      	add	sp, #8
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	40021000 	.word	0x40021000
	...

08005700 <tft_set_char_pos>:
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	4607      	mov	r7, r0
	tft_write_command(0x2a);		// Column addr set
 8005704:	202a      	movs	r0, #42	; 0x2a
  * @brief  Set the position of some characters
  * @param  None
  * @retval None
  */
void tft_set_char_pos(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8005706:	460d      	mov	r5, r1
 8005708:	4616      	mov	r6, r2
 800570a:	461c      	mov	r4, r3
	tft_write_command(0x2a);		// Column addr set
 800570c:	f7ff ffe0 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 8005710:	2000      	movs	r0, #0
 8005712:	f7ff ffc5 	bl	80056a0 <tft_write_data>
	tft_write_data(x1); 			//X START
 8005716:	4638      	mov	r0, r7
 8005718:	f7ff ffc2 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 800571c:	2000      	movs	r0, #0
 800571e:	f7ff ffbf 	bl	80056a0 <tft_write_data>
	tft_write_data(x2); 			//X END
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ffbc 	bl	80056a0 <tft_write_data>

	tft_write_command(0x2b);		//Row addr set
 8005728:	202b      	movs	r0, #43	; 0x2b
 800572a:	f7ff ffd1 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 800572e:	2000      	movs	r0, #0
 8005730:	f7ff ffb6 	bl	80056a0 <tft_write_data>
	tft_write_data(y1);			//Y START
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff ffb3 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 800573a:	2000      	movs	r0, #0
 800573c:	f7ff ffb0 	bl	80056a0 <tft_write_data>
	tft_write_data(y2);		//Y END
 8005740:	4620      	mov	r0, r4
 8005742:	f7ff ffad 	bl	80056a0 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 8005746:	202c      	movs	r0, #44	; 0x2c
}
 8005748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tft_write_data(0x00);
	tft_write_data(y1);			//Y START
	tft_write_data(0x00);
	tft_write_data(y2);		//Y END

	tft_write_command(0x2c); 		// write to RAM
 800574c:	f7ff bfc0 	b.w	80056d0 <tft_write_command>

08005750 <cmd_control_start.part.0.lto_priv.116>:
                                         (uint32_t)(controller.Ki_v * 10000.0f));
  chprintf(chp, "Kp_p = %d, Ki_p = %d\n",(uint32_t)(controller.Kp_p * 10000.0f),
                                         (uint32_t)(controller.Ki_p * 10000.0f));
}

void cmd_control_start(BaseSequentialStream * chp, int argc, char *argv[])
 8005750:	b510      	push	{r4, lr}
 8005752:	b082      	sub	sp, #8
{
  (void) argc,argv;

  if(!controller.status)
  {
    chThdCreateStatic(Controller_thread_wa, sizeof(Controller_thread_wa),
 8005754:	2400      	movs	r4, #0
 8005756:	9400      	str	r4, [sp, #0]
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <cmd_control_start.part.0.lto_priv.116+0x30>)
 800575a:	480a      	ldr	r0, [pc, #40]	; (8005784 <cmd_control_start.part.0.lto_priv.116+0x34>)
 800575c:	f242 1170 	movw	r1, #8560	; 0x2170
 8005760:	2242      	movs	r2, #66	; 0x42
 8005762:	f7ff f91d 	bl	80049a0 <chThdCreateStatic>
      NORMALPRIO + 2,
                      Controller_thread, NULL);

    chThdCreateStatic(Printing_thread_wa, sizeof(Printing_thread_wa),
 8005766:	9400      	str	r4, [sp, #0]
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <cmd_control_start.part.0.lto_priv.116+0x38>)
 800576a:	4808      	ldr	r0, [pc, #32]	; (800578c <cmd_control_start.part.0.lto_priv.116+0x3c>)
 800576c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005770:	223b      	movs	r2, #59	; 0x3b
 8005772:	f7ff f915 	bl	80049a0 <chThdCreateStatic>
      NORMALPRIO - 5,
                      Printing_thread, NULL);

    controller.status = 1;
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <cmd_control_start.part.0.lto_priv.116+0x40>)
 8005778:	2201      	movs	r2, #1
 800577a:	711a      	strb	r2, [r3, #4]
  }
}
 800577c:	b002      	add	sp, #8
 800577e:	bd10      	pop	{r4, pc}
 8005780:	08004d01 	.word	0x08004d01
 8005784:	200017a0 	.word	0x200017a0
 8005788:	080054f1 	.word	0x080054f1
 800578c:	20003918 	.word	0x20003918
 8005790:	20001754 	.word	0x20001754
	...

080057a0 <cmd_control_start>:

void cmd_control_start(BaseSequentialStream * chp, int argc, char *argv[])
{
  (void) argc,argv;

  if(!controller.status)
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <cmd_control_start+0xc>)
 80057a2:	791b      	ldrb	r3, [r3, #4]
 80057a4:	b103      	cbz	r3, 80057a8 <cmd_control_start+0x8>
 80057a6:	4770      	bx	lr
 80057a8:	f7ff bfd2 	b.w	8005750 <cmd_control_start.part.0.lto_priv.116>
 80057ac:	20001754 	.word	0x20001754

080057b0 <control_param_init>:
  shellCreateStatic(&shell_cfg1, Shell_thread_wa,
      sizeof(Shell_thread_wa), NORMALPRIO);
}

void control_param_init(void)
{
 80057b0:	b500      	push	{lr}
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <control_param_init+0xd0>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	b08d      	sub	sp, #52	; 0x34
 80057ba:	db5c      	blt.n	8005876 <control_param_init+0xc6>
 80057bc:	4831      	ldr	r0, [pc, #196]	; (8005884 <control_param_init+0xd4>)
 80057be:	a901      	add	r1, sp, #4
 80057c0:	222c      	movs	r2, #44	; 0x2c
 80057c2:	f7fd fb55 	bl	8002e70 <flashRead.part.6.lto_priv.85>
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 80057c6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80057ca:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8005888 <control_param_init+0xd8>
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <control_param_init+0xdc>)
 80057d0:	eef8 3a47 	vcvt.f32.u32	s7, s14
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 80057d4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80057d8:	eeb8 4a47 	vcvt.f32.u32	s8, s14
  controller.Kp_r = (float)(parameters[2]/10000.0f);
 80057dc:	ed9d 7a03 	vldr	s14, [sp, #12]
 80057e0:	eef8 4a47 	vcvt.f32.u32	s9, s14
  controller.Ki_r = (float)(parameters[3]/10000.0f);
 80057e4:	ed9d 7a04 	vldr	s14, [sp, #16]
 80057e8:	eeb8 5a47 	vcvt.f32.u32	s10, s14
  controller.int_max_r = (float)(parameters[4]);
  controller.Kp_v = (float)(parameters[5]/10000.0f);
 80057ec:	ed9d 7a06 	vldr	s14, [sp, #24]
 80057f0:	eef8 5a47 	vcvt.f32.u32	s11, s14
  controller.Ki_v = (float)(parameters[6]/10000.0f);
 80057f4:	ed9d 7a07 	vldr	s14, [sp, #28]
 80057f8:	eeb8 6a47 	vcvt.f32.u32	s12, s14
  controller.int_max_v = (float)(parameters[7]);
  controller.Kp_p = (float)(parameters[8]/10000.0f);
 80057fc:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8005800:	eef8 6a47 	vcvt.f32.u32	s13, s14
  controller.Ki_p = (float)(parameters[9]/10000.0f);
 8005804:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8005808:	eeb8 7a47 	vcvt.f32.u32	s14, s14
void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 800580c:	eec3 3aa7 	vdiv.f32	s7, s7, s15
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 8005810:	ee84 4a27 	vdiv.f32	s8, s8, s15
  controller.Kp_r = (float)(parameters[2]/10000.0f);
 8005814:	eec4 4aa7 	vdiv.f32	s9, s9, s15
  controller.Ki_r = (float)(parameters[3]/10000.0f);
 8005818:	ee85 5a27 	vdiv.f32	s10, s10, s15
  controller.int_max_r = (float)(parameters[4]);
  controller.Kp_v = (float)(parameters[5]/10000.0f);
 800581c:	eec5 5aa7 	vdiv.f32	s11, s11, s15
  controller.Ki_v = (float)(parameters[6]/10000.0f);
 8005820:	ee86 6a27 	vdiv.f32	s12, s12, s15
  controller.int_max_v = (float)(parameters[7]);
  controller.Kp_p = (float)(parameters[8]/10000.0f);
 8005824:	eec6 6aa7 	vdiv.f32	s13, s13, s15
  controller.Ki_p = (float)(parameters[9]/10000.0f);
 8005828:	eec7 7a27 	vdiv.f32	s15, s14, s15

  controller.Kp_s = (float)(parameters[0]/10000.0f);
  controller.Kd_s = (float)(parameters[1]/10000.0f);
  controller.Kp_r = (float)(parameters[2]/10000.0f);
  controller.Ki_r = (float)(parameters[3]/10000.0f);
  controller.int_max_r = (float)(parameters[4]);
 800582c:	ed9d 7a05 	vldr	s14, [sp, #20]
void control_param_init(void)
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
 8005830:	edc3 3a02 	vstr	s7, [r3, #8]
  controller.Kd_s = (float)(parameters[1]/10000.0f);
  controller.Kp_r = (float)(parameters[2]/10000.0f);
  controller.Ki_r = (float)(parameters[3]/10000.0f);
  controller.int_max_r = (float)(parameters[4]);
 8005834:	eef8 2a47 	vcvt.f32.u32	s5, s14
  controller.Kp_v = (float)(parameters[5]/10000.0f);
  controller.Ki_v = (float)(parameters[6]/10000.0f);
  controller.int_max_v = (float)(parameters[7]);
 8005838:	ed9d 7a08 	vldr	s14, [sp, #32]
{
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
  controller.Kd_s = (float)(parameters[1]/10000.0f);
 800583c:	ed83 4a03 	vstr	s8, [r3, #12]
  controller.Kp_r = (float)(parameters[2]/10000.0f);
  controller.Ki_r = (float)(parameters[3]/10000.0f);
  controller.int_max_r = (float)(parameters[4]);
  controller.Kp_v = (float)(parameters[5]/10000.0f);
  controller.Ki_v = (float)(parameters[6]/10000.0f);
  controller.int_max_v = (float)(parameters[7]);
 8005840:	eeb8 3a47 	vcvt.f32.u32	s6, s14
  controller.Kp_p = (float)(parameters[8]/10000.0f);
  controller.Ki_p = (float)(parameters[9]/10000.0f);
  controller.int_max_p = (float)(parameters[10]);
 8005844:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
  uint32_t parameters[PARAM_NUM];
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
  controller.Kd_s = (float)(parameters[1]/10000.0f);
  controller.Kp_r = (float)(parameters[2]/10000.0f);
 8005848:	edc3 4a04 	vstr	s9, [r3, #16]
  controller.Kp_v = (float)(parameters[5]/10000.0f);
  controller.Ki_v = (float)(parameters[6]/10000.0f);
  controller.int_max_v = (float)(parameters[7]);
  controller.Kp_p = (float)(parameters[8]/10000.0f);
  controller.Ki_p = (float)(parameters[9]/10000.0f);
  controller.int_max_p = (float)(parameters[10]);
 800584c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  flashRead(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  controller.Kp_s = (float)(parameters[0]/10000.0f);
  controller.Kd_s = (float)(parameters[1]/10000.0f);
  controller.Kp_r = (float)(parameters[2]/10000.0f);
  controller.Ki_r = (float)(parameters[3]/10000.0f);
 8005850:	ed83 5a05 	vstr	s10, [r3, #20]
  controller.int_max_r = (float)(parameters[4]);
 8005854:	edc3 2a06 	vstr	s5, [r3, #24]
  controller.Kp_v = (float)(parameters[5]/10000.0f);
 8005858:	edc3 5a07 	vstr	s11, [r3, #28]
  controller.Ki_v = (float)(parameters[6]/10000.0f);
 800585c:	ed83 6a08 	vstr	s12, [r3, #32]
  controller.int_max_v = (float)(parameters[7]);
 8005860:	ed83 3a09 	vstr	s6, [r3, #36]	; 0x24
  controller.Kp_p = (float)(parameters[8]/10000.0f);
 8005864:	edc3 6a0a 	vstr	s13, [r3, #40]	; 0x28
  controller.Ki_p = (float)(parameters[9]/10000.0f);
 8005868:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  controller.int_max_p = (float)(parameters[10]);
 800586c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 8005870:	b00d      	add	sp, #52	; 0x34
 8005872:	f85d fb04 	ldr.w	pc, [sp], #4
 8005876:	f7fd fb1b 	bl	8002eb0 <flashUnlock.part.1.lto_priv.86>
    flashLock();
}

void flashRead(flashaddr_t address, char* buffer, size_t size)
{
    if(flashUnlock() == CH_FAILED)
 800587a:	2800      	cmp	r0, #0
 800587c:	d0a3      	beq.n	80057c6 <control_param_init+0x16>
 800587e:	e79d      	b.n	80057bc <control_param_init+0xc>
 8005880:	40023c00 	.word	0x40023c00
 8005884:	08010000 	.word	0x08010000
 8005888:	461c4000 	.word	0x461c4000
 800588c:	20001754 	.word	0x20001754

08005890 <cmd_control_update.lto_priv.109>:

  chprintf(chp,"Ki_p: %d\n", finalNum);
}

static void cmd_control_update(BaseSequentialStream * chp, int argc, char *argv[])
{
 8005890:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) argc,argv;

  uint32_t parameters[PARAM_NUM] = {(uint32_t)(controller.Kp_s * 10000.0f),
 8005892:	4d95      	ldr	r5, [pc, #596]	; (8005ae8 <cmd_control_update.lto_priv.109+0x258>)
 8005894:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005aec <cmd_control_update.lto_priv.109+0x25c>
 8005898:	edd5 3a02 	vldr	s7, [r5, #8]
                                    (uint32_t)(controller.Kd_s * 10000.0f),
 800589c:	ed95 4a03 	vldr	s8, [r5, #12]
                                    (uint32_t)(controller.Kp_r * 10000.0f),
 80058a0:	edd5 4a04 	vldr	s9, [r5, #16]
                                    (uint32_t)(controller.Ki_r * 10000.0f),
 80058a4:	ed95 5a05 	vldr	s10, [r5, #20]
                                    (uint32_t)(controller.int_max_r),
                                    (uint32_t)(controller.Kp_v * 10000.0f),
 80058a8:	edd5 5a07 	vldr	s11, [r5, #28]
                                    (uint32_t)(controller.Ki_v * 10000.0f),
 80058ac:	ed95 6a08 	vldr	s12, [r5, #32]
                                    (uint32_t)(controller.int_max_v),
                                    (uint32_t)(controller.Kp_p * 10000.0f),
 80058b0:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
                                    (uint32_t)(controller.Ki_p * 10000.0f),
 80058b4:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c

  uint32_t parameters[PARAM_NUM] = {(uint32_t)(controller.Kp_s * 10000.0f),
                                    (uint32_t)(controller.Kd_s * 10000.0f),
                                    (uint32_t)(controller.Kp_r * 10000.0f),
                                    (uint32_t)(controller.Ki_r * 10000.0f),
                                    (uint32_t)(controller.int_max_r),
 80058b8:	ed95 2a06 	vldr	s4, [r5, #24]
                                    (uint32_t)(controller.Kp_v * 10000.0f),
                                    (uint32_t)(controller.Ki_v * 10000.0f),
                                    (uint32_t)(controller.int_max_v),
 80058bc:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
                                    (uint32_t)(controller.Kp_p * 10000.0f),
                                    (uint32_t)(controller.Ki_p * 10000.0f),
                                    (uint32_t)(controller.int_max_p)};
 80058c0:	ed95 3a0c 	vldr	s6, [r5, #48]	; 0x30
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 80058c4:	4b8a      	ldr	r3, [pc, #552]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)

  chprintf(chp,"Ki_p: %d\n", finalNum);
}

static void cmd_control_update(BaseSequentialStream * chp, int argc, char *argv[])
{
 80058c6:	ed2d 8b02 	vpush	{d8}
  (void) argc,argv;

  uint32_t parameters[PARAM_NUM] = {(uint32_t)(controller.Kp_s * 10000.0f),
 80058ca:	ee63 3aa7 	vmul.f32	s7, s7, s15
                                    (uint32_t)(controller.Kd_s * 10000.0f),
 80058ce:	ee24 4a27 	vmul.f32	s8, s8, s15
                                    (uint32_t)(controller.Kp_r * 10000.0f),
 80058d2:	ee64 4aa7 	vmul.f32	s9, s9, s15
                                    (uint32_t)(controller.Ki_r * 10000.0f),
 80058d6:	ee25 5a27 	vmul.f32	s10, s10, s15
                                    (uint32_t)(controller.int_max_r),
                                    (uint32_t)(controller.Kp_v * 10000.0f),
 80058da:	ee65 5aa7 	vmul.f32	s11, s11, s15
                                    (uint32_t)(controller.Ki_v * 10000.0f),
 80058de:	ee26 6a27 	vmul.f32	s12, s12, s15
                                    (uint32_t)(controller.int_max_v),
                                    (uint32_t)(controller.Kp_p * 10000.0f),
 80058e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                    (uint32_t)(controller.Ki_p * 10000.0f),
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15

static void cmd_control_update(BaseSequentialStream * chp, int argc, char *argv[])
{
  (void) argc,argv;

  uint32_t parameters[PARAM_NUM] = {(uint32_t)(controller.Kp_s * 10000.0f),
 80058ea:	eefc 3ae3 	vcvt.u32.f32	s7, s7
                                    (uint32_t)(controller.Kd_s * 10000.0f),
 80058ee:	eebc 4ac4 	vcvt.u32.f32	s8, s8
                                    (uint32_t)(controller.Kp_r * 10000.0f),
 80058f2:	eefc 4ae4 	vcvt.u32.f32	s9, s9
                                    (uint32_t)(controller.Ki_r * 10000.0f),
 80058f6:	eebc 5ac5 	vcvt.u32.f32	s10, s10
                                    (uint32_t)(controller.int_max_r),
 80058fa:	eebc 2ac2 	vcvt.u32.f32	s4, s4
                                    (uint32_t)(controller.Kp_v * 10000.0f),
 80058fe:	eefc 5ae5 	vcvt.u32.f32	s11, s11
                                    (uint32_t)(controller.Ki_v * 10000.0f),
 8005902:	eebc 6ac6 	vcvt.u32.f32	s12, s12
                                    (uint32_t)(controller.int_max_v),
 8005906:	eefc 2ae2 	vcvt.u32.f32	s5, s5
                                    (uint32_t)(controller.Kp_p * 10000.0f),
 800590a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
                                    (uint32_t)(controller.Ki_p * 10000.0f),
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
                                    (uint32_t)(controller.int_max_p)};
 8005912:	eebc 3ac3 	vcvt.u32.f32	s6, s6

  chprintf(chp,"Ki_p: %d\n", finalNum);
}

static void cmd_control_update(BaseSequentialStream * chp, int argc, char *argv[])
{
 8005916:	b08d      	sub	sp, #52	; 0x34
  (void) argc,argv;

  uint32_t parameters[PARAM_NUM] = {(uint32_t)(controller.Kp_s * 10000.0f),
 8005918:	edcd 3a01 	vstr	s7, [sp, #4]
                                    (uint32_t)(controller.Kd_s * 10000.0f),
 800591c:	ed8d 4a02 	vstr	s8, [sp, #8]
                                    (uint32_t)(controller.Kp_r * 10000.0f),
 8005920:	edcd 4a03 	vstr	s9, [sp, #12]
                                    (uint32_t)(controller.Ki_r * 10000.0f),
 8005924:	ed8d 5a04 	vstr	s10, [sp, #16]
                                    (uint32_t)(controller.int_max_r),
 8005928:	ed8d 2a05 	vstr	s4, [sp, #20]
                                    (uint32_t)(controller.Kp_v * 10000.0f),
 800592c:	edcd 5a06 	vstr	s11, [sp, #24]
                                    (uint32_t)(controller.Ki_v * 10000.0f),
 8005930:	ed8d 6a07 	vstr	s12, [sp, #28]
                                    (uint32_t)(controller.int_max_v),
 8005934:	edcd 2a08 	vstr	s5, [sp, #32]
                                    (uint32_t)(controller.Kp_p * 10000.0f),
 8005938:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
                                    (uint32_t)(controller.Ki_p * 10000.0f),
 800593c:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
                                    (uint32_t)(controller.int_max_p)};
 8005940:	ed8d 3a0b 	vstr	s6, [sp, #44]	; 0x2c
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0

  chprintf(chp,"Ki_p: %d\n", finalNum);
}

static void cmd_control_update(BaseSequentialStream * chp, int argc, char *argv[])
{
 8005948:	4604      	mov	r4, r0
 800594a:	f2c0 80c1 	blt.w	8005ad0 <cmd_control_update.lto_priv.109+0x240>
    /* Unlock flash for write access */
    if(flashUnlock() == CH_FAILED)
        return;

    /* Wait for any busy flags. */
    flashWaitWhileBusy();
 800594e:	4968      	ldr	r1, [pc, #416]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 8005950:	68ca      	ldr	r2, [r1, #12]
 8005952:	4b67      	ldr	r3, [pc, #412]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 8005954:	03d2      	lsls	r2, r2, #15
 8005956:	d4fb      	bmi.n	8005950 <cmd_control_update.lto_priv.109+0xc0>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595e:	601a      	str	r2, [r3, #0]
    flashWaitWhileBusy();

    FLASH_DataCacheCmd(DISABLE);//disable cache

    /* Setup parallelism before any program/erase */
    FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005966:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	611a      	str	r2, [r3, #16]

    flashWaitWhileBusy();
 8005970:	461a      	mov	r2, r3
 8005972:	68d1      	ldr	r1, [r2, #12]
 8005974:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 8005976:	03cf      	lsls	r7, r1, #15
 8005978:	d4fb      	bmi.n	8005972 <cmd_control_update.lto_priv.109+0xe2>
     * 0000 sector 0
     * 0001 sector 1
     * ...
     * 1011 sector 11
     * others not allowed */
    FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2 | FLASH_CR_SNB_3);//sector mask
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8005980:	611a      	str	r2, [r3, #16]
    if (sector & 0x1) FLASH->CR |= FLASH_CR_SNB_0;
    if (sector & 0x2) FLASH->CR |= FLASH_CR_SNB_1;
    if (sector & 0x4) FLASH->CR |= FLASH_CR_SNB_2;
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	f042 0220 	orr.w	r2, r2, #32
 8005988:	611a      	str	r2, [r3, #16]
    if (sector & 0x8) FLASH->CR |= FLASH_CR_SNB_3;
    FLASH->CR |= FLASH_CR_SER;
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	f042 0202 	orr.w	r2, r2, #2
 8005990:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005998:	611a      	str	r2, [r3, #16]

    /* Wait until it's finished. */
    flashWaitWhileBusy();
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	4954      	ldr	r1, [pc, #336]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 800599e:	03d6      	lsls	r6, r2, #15
 80059a0:	d4fb      	bmi.n	800599a <cmd_control_update.lto_priv.109+0x10a>

    /* Sector erase flag does not clear automatically. */
    FLASH->CR &= ~FLASH_CR_SER;
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	f023 0302 	bic.w	r3, r3, #2
 80059a8:	610b      	str	r3, [r1, #16]
    FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2 | FLASH_CR_SNB_3);
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80059b0:	610b      	str	r3, [r1, #16]
  */
static void FLASH_DataCacheCmd(FunctionalState NewState)
{
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80059b2:	680b      	ldr	r3, [r1, #0]
 80059b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b8:	600b      	str	r3, [r1, #0]
    FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2 | FLASH_CR_SNB_3);

    FLASH_DataCacheCmd(ENABLE);

    /* Lock flash again */
    flashLock();
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	610b      	str	r3, [r1, #16]
 * @return CH_FAILED    Unlock failed.
 */
static uint8_t flashUnlock(void)
{
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 80059c2:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f2c0 8088 	blt.w	8005adc <cmd_control_update.lto_priv.109+0x24c>
void flashWrite(flashaddr_t address, const char* buffer, size_t size)
{
    if(flashUnlock() == CH_FAILED)
        return;

    flashWaitWhileBusy();
 80059cc:	4a48      	ldr	r2, [pc, #288]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 80059ce:	68d3      	ldr	r3, [r2, #12]
 80059d0:	4947      	ldr	r1, [pc, #284]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 80059d2:	03d8      	lsls	r0, r3, #15
 80059d4:	d4fb      	bmi.n	80059ce <cmd_control_update.lto_priv.109+0x13e>

    /* Setup parallelism before any program/erase */
    FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
 80059d6:	690b      	ldr	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;
 80059d8:	4846      	ldr	r0, [pc, #280]	; (8005af4 <cmd_control_update.lto_priv.109+0x264>)

    /* Now, address is correctly aligned. One can copy data directly from
     * buffer's data to flash memory until the size of the data remaining to be
     * copied requires special treatment. */
    while (size >= sizeof(flashdata_t))
 80059da:	f8df e12c 	ldr.w	lr, [pc, #300]	; 8005b08 <cmd_control_update.lto_priv.109+0x278>
        return;

    flashWaitWhileBusy();

    /* Setup parallelism before any program/erase */
    FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
 80059de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e2:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
}

static void flashWriteDataI(flashaddr_t address, const flashdata_t data)
{
    /* Enter flash programming mode */
    FLASH->CR |= FLASH_CR_PG;
 80059ea:	460a      	mov	r2, r1

    flashWaitWhileBusy();

    /* Setup parallelism before any program/erase */
    FLASH->CR &= ~FLASH_CR_PSIZE_MASK;
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;
 80059ec:	610b      	str	r3, [r1, #16]

    /* Write the data */
    *(flashdata_t*)address = data;

    /* Wait for completion */
    flashWaitWhileBusy();
 80059ee:	460f      	mov	r7, r1
 80059f0:	ae01      	add	r6, sp, #4
}

static void flashWriteDataI(flashaddr_t address, const flashdata_t data)
{
    /* Enter flash programming mode */
    FLASH->CR |= FLASH_CR_PG;
 80059f2:	6913      	ldr	r3, [r2, #16]
    /* Now, address is correctly aligned. One can copy data directly from
     * buffer's data to flash memory until the size of the data remaining to be
     * copied requires special treatment. */
    while (size >= sizeof(flashdata_t))
    {
        flashWriteDataI(address, *(const flashdata_t*)buffer);
 80059f4:	f856 1b04 	ldr.w	r1, [r6], #4
}

static void flashWriteDataI(flashaddr_t address, const flashdata_t data)
{
    /* Enter flash programming mode */
    FLASH->CR |= FLASH_CR_PG;
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6113      	str	r3, [r2, #16]

    /* Write the data */
    *(flashdata_t*)address = data;
 80059fe:	f840 1b04 	str.w	r1, [r0], #4

    /* Wait for completion */
    flashWaitWhileBusy();
 8005a02:	68d3      	ldr	r3, [r2, #12]
 8005a04:	493a      	ldr	r1, [pc, #232]	; (8005af0 <cmd_control_update.lto_priv.109+0x260>)
 8005a06:	03db      	lsls	r3, r3, #15
 8005a08:	d4fb      	bmi.n	8005a02 <cmd_control_update.lto_priv.109+0x172>

    /* Exit flash programming mode */
    FLASH->CR &= ~FLASH_CR_PG;
 8005a0a:	693b      	ldr	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;

    /* Now, address is correctly aligned. One can copy data directly from
     * buffer's data to flash memory until the size of the data remaining to be
     * copied requires special treatment. */
    while (size >= sizeof(flashdata_t))
 8005a0c:	4570      	cmp	r0, lr

    /* Wait for completion */
    flashWaitWhileBusy();

    /* Exit flash programming mode */
    FLASH->CR &= ~FLASH_CR_PG;
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PSIZE_VALUE;

    /* Now, address is correctly aligned. One can copy data directly from
     * buffer's data to flash memory until the size of the data remaining to be
     * copied requires special treatment. */
    while (size >= sizeof(flashdata_t))
 8005a14:	d1ed      	bne.n	80059f2 <cmd_control_update.lto_priv.109+0x162>
        flashdata_t tmp = *(volatile flashdata_t*)address;
        memcpy(&tmp, buffer, size);
        flashWriteDataI(address, tmp);
    }
    /* Lock flash again */
    flashLock();
 8005a16:	690b      	ldr	r3, [r1, #16]
 8005a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	610b      	str	r3, [r1, #16]
                                    (uint32_t)(controller.Ki_p * 10000.0f),
                                    (uint32_t)(controller.int_max_p)};
  flashSectorErase(CONTROL_PARAMETERS_SECTOR);
  flashWrite(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  control_param_init();
 8005a1e:	f7ff fec7 	bl	80057b0 <control_param_init>
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
 8005a22:	ed9f 8a32 	vldr	s16, [pc, #200]	; 8005aec <cmd_control_update.lto_priv.109+0x25c>
 8005a26:	ed95 7a02 	vldr	s14, [r5, #8]
                                         (uint32_t)(controller.Kd_s * 10000.0f));
 8005a2a:	edd5 7a03 	vldr	s15, [r5, #12]
                                    (uint32_t)(controller.int_max_p)};
  flashSectorErase(CONTROL_PARAMETERS_SECTOR);
  flashWrite(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
 8005a2e:	4932      	ldr	r1, [pc, #200]	; (8005af8 <cmd_control_update.lto_priv.109+0x268>)
 8005a30:	ee27 7a08 	vmul.f32	s14, s14, s16
                                         (uint32_t)(controller.Kd_s * 10000.0f));
 8005a34:	ee67 7a88 	vmul.f32	s15, s15, s16
                                    (uint32_t)(controller.int_max_p)};
  flashSectorErase(CONTROL_PARAMETERS_SECTOR);
  flashWrite(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
 8005a38:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a40:	ee17 2a10 	vmov	r2, s14
 8005a44:	ee17 3a90 	vmov	r3, s15
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fd ff49 	bl	80038e0 <chprintf>
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
 8005a4e:	ed95 7a04 	vldr	s14, [r5, #16]
                                         (uint32_t)(controller.Ki_r * 10000.0f));
 8005a52:	edd5 7a05 	vldr	s15, [r5, #20]
  flashWrite(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
 8005a56:	4929      	ldr	r1, [pc, #164]	; (8005afc <cmd_control_update.lto_priv.109+0x26c>)
 8005a58:	ee27 7a08 	vmul.f32	s14, s14, s16
                                         (uint32_t)(controller.Ki_r * 10000.0f));
 8005a5c:	ee67 7a88 	vmul.f32	s15, s15, s16
  flashWrite(CONTROL_PARAMETERS_FLASH, (char*)parameters, PARAM_NUM*4);

  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
 8005a60:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a68:	ee17 2a10 	vmov	r2, s14
 8005a6c:	ee17 3a90 	vmov	r3, s15
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7fd ff35 	bl	80038e0 <chprintf>
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
 8005a76:	ed95 7a07 	vldr	s14, [r5, #28]
                                         (uint32_t)(controller.Ki_v * 10000.0f));
 8005a7a:	edd5 7a08 	vldr	s15, [r5, #32]
  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
 8005a7e:	4920      	ldr	r1, [pc, #128]	; (8005b00 <cmd_control_update.lto_priv.109+0x270>)
 8005a80:	ee27 7a08 	vmul.f32	s14, s14, s16
                                         (uint32_t)(controller.Ki_v * 10000.0f));
 8005a84:	ee67 7a88 	vmul.f32	s15, s15, s16
  control_param_init();
  chprintf(chp, "Kp_s = %d, Kd_s = %d\n",(uint32_t)(controller.Kp_s * 10000.0f),
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
 8005a88:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a90:	ee17 2a10 	vmov	r2, s14
 8005a94:	ee17 3a90 	vmov	r3, s15
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7fd ff21 	bl	80038e0 <chprintf>
                                         (uint32_t)(controller.Ki_v * 10000.0f));
  chprintf(chp, "Kp_p = %d, Ki_p = %d\n",(uint32_t)(controller.Kp_p * 10000.0f),
 8005a9e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
                                         (uint32_t)(controller.Ki_p * 10000.0f));
 8005aa2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
                                         (uint32_t)(controller.Ki_v * 10000.0f));
  chprintf(chp, "Kp_p = %d, Ki_p = %d\n",(uint32_t)(controller.Kp_p * 10000.0f),
 8005aa6:	4917      	ldr	r1, [pc, #92]	; (8005b04 <cmd_control_update.lto_priv.109+0x274>)
 8005aa8:	ee27 7a08 	vmul.f32	s14, s14, s16
                                         (uint32_t)(controller.Ki_p * 10000.0f));
 8005aac:	ee27 8a88 	vmul.f32	s16, s15, s16
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
                                         (uint32_t)(controller.Ki_v * 10000.0f));
  chprintf(chp, "Kp_p = %d, Ki_p = %d\n",(uint32_t)(controller.Kp_p * 10000.0f),
 8005ab0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	ee17 2a90 	vmov	r2, s15
 8005aba:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8005abe:	ee17 3a90 	vmov	r3, s15
                                         (uint32_t)(controller.Ki_p * 10000.0f));
}
 8005ac2:	b00d      	add	sp, #52	; 0x34
 8005ac4:	ecbd 8b02 	vpop	{d8}
 8005ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                                         (uint32_t)(controller.Kd_s * 10000.0f));
  chprintf(chp, "Kp_r = %d, Ki_r = %d\n",(uint32_t)(controller.Kp_r * 10000.0f),
                                         (uint32_t)(controller.Ki_r * 10000.0f));
  chprintf(chp, "Kp_v = %d, Ki_v = %d\n",(uint32_t)(controller.Kp_v * 10000.0f),
                                         (uint32_t)(controller.Ki_v * 10000.0f));
  chprintf(chp, "Kp_p = %d, Ki_p = %d\n",(uint32_t)(controller.Kp_p * 10000.0f),
 8005acc:	f7fd bf08 	b.w	80038e0 <chprintf>
 8005ad0:	f7fd f9ee 	bl	8002eb0 <flashUnlock.part.1.lto_priv.86>
}

void flashSectorErase(flashsector_t sector)
{
    /* Unlock flash for write access */
    if(flashUnlock() == CH_FAILED)
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f47f af3a 	bne.w	800594e <cmd_control_update.lto_priv.109+0xbe>
 8005ada:	e772      	b.n	80059c2 <cmd_control_update.lto_priv.109+0x132>
 8005adc:	f7fd f9e8 	bl	8002eb0 <flashUnlock.part.1.lto_priv.86>
    flashLock();
}

void flashWrite(flashaddr_t address, const char* buffer, size_t size)
{
    if(flashUnlock() == CH_FAILED)
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	f47f af73 	bne.w	80059cc <cmd_control_update.lto_priv.109+0x13c>
 8005ae6:	e79a      	b.n	8005a1e <cmd_control_update.lto_priv.109+0x18e>
 8005ae8:	20001754 	.word	0x20001754
 8005aec:	461c4000 	.word	0x461c4000
 8005af0:	40023c00 	.word	0x40023c00
 8005af4:	08010000 	.word	0x08010000
 8005af8:	08007af8 	.word	0x08007af8
 8005afc:	08007b10 	.word	0x08007b10
 8005b00:	08007b28 	.word	0x08007b28
 8005b04:	08007b40 	.word	0x08007b40
 8005b08:	0801002c 	.word	0x0801002c
 8005b0c:	00000000 	.word	0x00000000

08005b10 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8005b10:	4bc3      	ldr	r3, [pc, #780]	; (8005e20 <main+0x310>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005b12:	4cc4      	ldr	r4, [pc, #784]	; (8005e24 <main+0x314>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	f04f 31ff 	mov.w	r1, #4294967295
 8005b1a:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 8005b1c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005b20:	6119      	str	r1, [r3, #16]
 8005b22:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8005b24:	6958      	ldr	r0, [r3, #20]
 8005b26:	6159      	str	r1, [r3, #20]
 8005b28:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8005b2a:	6a18      	ldr	r0, [r3, #32]
 8005b2c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8005b30:	6218      	str	r0, [r3, #32]
 8005b32:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8005b34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b36:	6259      	str	r1, [r3, #36]	; 0x24
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8005b3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b3c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005b40:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005b42:	6821      	ldr	r1, [r4, #0]
 8005b44:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b48:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8005b4a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005b4c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8005b50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005b54:	b08b      	sub	sp, #44	; 0x2c
 8005b56:	d003      	beq.n	8005b60 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8005b58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005b5c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8005b5e:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8005b60:	48b0      	ldr	r0, [pc, #704]	; (8005e24 <main+0x314>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8005b62:	4cb1      	ldr	r4, [pc, #708]	; (8005e28 <main+0x318>)
 8005b64:	6842      	ldr	r2, [r0, #4]
 8005b66:	4eb1      	ldr	r6, [pc, #708]	; (8005e2c <main+0x31c>)
 8005b68:	4db1      	ldr	r5, [pc, #708]	; (8005e30 <main+0x320>)
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b70:	6042      	str	r2, [r0, #4]
 8005b72:	460b      	mov	r3, r1
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b74:	460f      	mov	r7, r1
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8005b76:	6021      	str	r1, [r4, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8005b78:	460a      	mov	r2, r1
 8005b7a:	58f1      	ldr	r1, [r6, r3]
 8005b7c:	600a      	str	r2, [r1, #0]
    dma_isr_redir[i].dma_func = NULL;
 8005b7e:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b82:	3701      	adds	r7, #1
 8005b84:	2f10      	cmp	r7, #16
 8005b86:	f103 030c 	add.w	r3, r3, #12
    _stm32_dma_streams[i].stream->CR = 0U;
 8005b8a:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b8e:	d1f4      	bne.n	8005b7a <main+0x6a>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005b90:	48a8      	ldr	r0, [pc, #672]	; (8005e34 <main+0x324>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005b92:	4aa9      	ldr	r2, [pc, #676]	; (8005e38 <main+0x328>)
 8005b94:	9702      	str	r7, [sp, #8]
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005b96:	f04f 35ff 	mov.w	r5, #4294967295
 8005b9a:	6085      	str	r5, [r0, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8005b9c:	60c5      	str	r5, [r0, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005b9e:	6095      	str	r5, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8005ba0:	60d5      	str	r5, [r2, #12]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8005ba2:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00
 8005ba6:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
 8005baa:	6b12      	ldr	r2, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8005bac:	4f9c      	ldr	r7, [pc, #624]	; (8005e20 <main+0x310>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005bae:	49a3      	ldr	r1, [pc, #652]	; (8005e3c <main+0x32c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005bb0:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8005e8c <main+0x37c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005bb4:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8005e90 <main+0x380>
 8005bb8:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8005e94 <main+0x384>
 8005bbc:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8005e98 <main+0x388>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8005bc0:	4b9f      	ldr	r3, [pc, #636]	; (8005e40 <main+0x330>)
 8005bc2:	4ea0      	ldr	r6, [pc, #640]	; (8005e44 <main+0x334>)
 8005bc4:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8005e9c <main+0x38c>
 8005bc8:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8005ea0 <main+0x390>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8005bcc:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8005bd0:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 8005bd4:	6302      	str	r2, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8005bd6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005bd8:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8005bdc:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 8005be0:	653a      	str	r2, [r7, #80]	; 0x50
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005be2:	f46f 42a8 	mvn.w	r2, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005be6:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005be8:	608a      	str	r2, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005bea:	f8c1 b00c 	str.w	fp, [r1, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8005bee:	f10b 5baa 	add.w	fp, fp, #356515840	; 0x15400000
 8005bf2:	f50b 3b88 	add.w	fp, fp, #69632	; 0x11000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8005bfa:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005bfe:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005c00:	f8c1 b020 	str.w	fp, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8005c04:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8005ea4 <main+0x394>
 8005c08:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005c0c:	f8df b298 	ldr.w	fp, [pc, #664]	; 8005ea8 <main+0x398>
 8005c10:	f8c1 b000 	str.w	fp, [r1]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005c14:	f44f 7110 	mov.w	r1, #576	; 0x240
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005c18:	f8df b290 	ldr.w	fp, [pc, #656]	; 8005eac <main+0x39c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005c1c:	f8ca 1004 	str.w	r1, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005c20:	f8ca 5008 	str.w	r5, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 8005c24:	f8ca b00c 	str.w	fp, [sl, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8005c28:	f8df b284 	ldr.w	fp, [pc, #644]	; 8005eb0 <main+0x3a0>
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005c2c:	f8ca 2014 	str.w	r2, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8005c30:	f8ca b020 	str.w	fp, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8005c34:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8005eb4 <main+0x3a4>
 8005c38:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005c3c:	f8df b278 	ldr.w	fp, [pc, #632]	; 8005eb8 <main+0x3a8>
 8005c40:	f8ca b000 	str.w	fp, [sl]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005c44:	f8df a274 	ldr.w	sl, [pc, #628]	; 8005ebc <main+0x3ac>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005c48:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005c4c:	f8c9 5008 	str.w	r5, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8005c50:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8005c54:	f04f 5a4c 	mov.w	sl, #855638016	; 0x33000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005c58:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8005c5c:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8005c60:	f648 0a33 	movw	sl, #34867	; 0x8833
 8005c64:	f8c9 a024 	str.w	sl, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005c68:	f8df a254 	ldr.w	sl, [pc, #596]	; 8005ec0 <main+0x3b0>
 8005c6c:	f8c9 a000 	str.w	sl, [r9]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005c70:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8005ec4 <main+0x3b4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005c74:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005c78:	f8c8 5008 	str.w	r5, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8005c7c:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->ODR     = config->odr;
 8005c80:	f640 79ff 	movw	r9, #4095	; 0xfff
 8005c84:	f8c8 9014 	str.w	r9, [r8, #20]
  gpiop->AFRL    = config->afrl;
 8005c88:	f04f 69ee 	mov.w	r9, #124780544	; 0x7700000
 8005c8c:	f8c8 9020 	str.w	r9, [r8, #32]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005c90:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
 8005c94:	496c      	ldr	r1, [pc, #432]	; (8005e48 <main+0x338>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005c96:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8005ec8 <main+0x3b8>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8005c9a:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
 8005c9e:	9f02      	ldr	r7, [sp, #8]
  gpiop->MODER   = config->moder;
 8005ca0:	f8c8 9000 	str.w	r9, [r8]
 8005ca4:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8005ecc <main+0x3bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005ca8:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005caa:	60b5      	str	r5, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005cac:	60f4      	str	r4, [r6, #12]
  gpiop->ODR     = config->odr;
 8005cae:	6172      	str	r2, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8005cb0:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8005cb2:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005cb4:	f8c6 8000 	str.w	r8, [r6]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005cb8:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005cbc:	f8cc 5008 	str.w	r5, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8005cc0:	f8cc 400c 	str.w	r4, [ip, #12]
  gpiop->ODR     = config->odr;
 8005cc4:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8005cc8:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8005ccc:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005cd0:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005cd4:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005cd8:	f8ce 5008 	str.w	r5, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8005cdc:	f8ce 400c 	str.w	r4, [lr, #12]
  gpiop->ODR     = config->odr;
 8005ce0:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8005ce4:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8005ce8:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005cec:	f8ce 4000 	str.w	r4, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005cf0:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005cf2:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8005cf4:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8005cf6:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8005cf8:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8005cfa:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005cfc:	6004      	str	r4, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005cfe:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005d00:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005d02:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8005d04:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005d06:	620c      	str	r4, [r1, #32]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8005d08:	4a50      	ldr	r2, [pc, #320]	; (8005e4c <main+0x33c>)
  i2cp->config = NULL;
 8005d0a:	605c      	str	r4, [r3, #4]
  gpiop->AFRH    = config->afrh;
 8005d0c:	624c      	str	r4, [r1, #36]	; 0x24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8005d0e:	615c      	str	r4, [r3, #20]
  gpiop->MODER   = config->moder;
 8005d10:	600c      	str	r4, [r1, #0]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8005d12:	4946      	ldr	r1, [pc, #280]	; (8005e2c <main+0x31c>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d16:	f103 020c 	add.w	r2, r3, #12
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8005d1a:	f04f 0801 	mov.w	r8, #1
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 8005d1e:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005ed0 <main+0x3c0>
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 8005d22:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8005ed4 <main+0x3c4>
 8005d26:	60da      	str	r2, [r3, #12]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8005d28:	4608      	mov	r0, r1
  tqp->p_prev = (thread_t *)tqp;
 8005d2a:	611a      	str	r2, [r3, #16]
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8005d2c:	3148      	adds	r1, #72	; 0x48
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 8005d2e:	4a48      	ldr	r2, [pc, #288]	; (8005e50 <main+0x340>)
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8005d30:	4e48      	ldr	r6, [pc, #288]	; (8005e54 <main+0x344>)
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8005d32:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005ed8 <main+0x3c8>

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8005d36:	62d8      	str	r0, [r3, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8005d38:	6319      	str	r1, [r3, #48]	; 0x30
 8005d3a:	4847      	ldr	r0, [pc, #284]	; (8005e58 <main+0x348>)
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8005d3c:	61dc      	str	r4, [r3, #28]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8005d3e:	f883 8000 	strb.w	r8, [r3]
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 8005d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d46:	f8df c194 	ldr.w	ip, [pc, #404]	; 8005edc <main+0x3cc>
 */
void gpt_lld_init(void) {

#if STM32_GPT_USE_TIM1
  /* Driver initialization.*/
  GPTD1.tim = STM32_TIM1;
 8005d4a:	f8cb 200c 	str.w	r2, [fp, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8005d4e:	4943      	ldr	r1, [pc, #268]	; (8005e5c <main+0x34c>)
  gptObjectInit(&GPTD1);
#endif

#if STM32_GPT_USE_TIM2
  /* Driver initialization.*/
  GPTD2.tim = STM32_TIM2;
 8005d50:	f8ca 300c 	str.w	r3, [sl, #12]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8005d54:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
#endif

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8005d58:	2306      	movs	r3, #6

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
  PWMD9.tim = STM32_TIM9;
 8005d5a:	f5ae 4e58 	sub.w	lr, lr, #55296	; 0xd800
 8005d5e:	f8c9 200c 	str.w	r2, [r9, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8005d62:	60c1      	str	r1, [r0, #12]

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
  PWMD8.tim = STM32_TIM8;
 8005d64:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8005d68:	f880 8000 	strb.w	r8, [r0]
  gptp->config = NULL;
 8005d6c:	6044      	str	r4, [r0, #4]
#endif

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8005d6e:	7433      	strb	r3, [r6, #16]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8005d70:	483b      	ldr	r0, [pc, #236]	; (8005e60 <main+0x350>)
 8005d72:	493c      	ldr	r1, [pc, #240]	; (8005e64 <main+0x354>)
 8005d74:	f88c 8000 	strb.w	r8, [ip]
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8005d78:	f04f 0302 	mov.w	r3, #2
  pwmp->config   = NULL;
 8005d7c:	f8cc 4004 	str.w	r4, [ip, #4]

#if STM32_PWM_USE_TIM8
  /* Driver initialization.*/
  pwmObjectInit(&PWMD8);
  PWMD8.channels = STM32_TIM8_CHANNELS;
  PWMD8.tim = STM32_TIM8;
 8005d80:	61b2      	str	r2, [r6, #24]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8005d82:	f88b 8000 	strb.w	r8, [fp]
  gptp->config = NULL;
 8005d86:	f8cb 4004 	str.w	r4, [fp, #4]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8005d8a:	f889 8000 	strb.w	r8, [r9]
  gptp->config = NULL;
 8005d8e:	f8c9 4004 	str.w	r4, [r9, #4]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8005d92:	f88a 8000 	strb.w	r8, [sl]
  gptp->config = NULL;
 8005d96:	f8ca 4004 	str.w	r4, [sl, #4]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8005d9a:	f886 8000 	strb.w	r8, [r6]
  pwmp->config   = NULL;
 8005d9e:	6074      	str	r4, [r6, #4]
  pwmp->enabled  = 0;
 8005da0:	60f4      	str	r4, [r6, #12]
 8005da2:	f8cc 400c 	str.w	r4, [ip, #12]
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8005da6:	f88c 3010 	strb.w	r3, [ip, #16]
  PWMD9.tim = STM32_TIM9;
 8005daa:	f8cc e018 	str.w	lr, [ip, #24]
 8005dae:	f7fc fec7 	bl	8002b40 <sdObjectInit.constprop.47>
  SD2.usart = USART2;
 8005db2:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <main+0x350>)
 8005db4:	4b2c      	ldr	r3, [pc, #176]	; (8005e68 <main+0x358>)
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8005db6:	492d      	ldr	r1, [pc, #180]	; (8005e6c <main+0x35c>)
 8005db8:	482d      	ldr	r0, [pc, #180]	; (8005e70 <main+0x360>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8005dba:	6753      	str	r3, [r2, #116]	; 0x74
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8005dbc:	f7fc fec0 	bl	8002b40 <sdObjectInit.constprop.47>
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <main+0x364>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <main+0x368>)
 8005dc4:	8015      	strh	r5, [r2, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <main+0x310>)
 8005dc8:	4f15      	ldr	r7, [pc, #84]	; (8005e20 <main+0x310>)
 8005dca:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005dcc:	f8df e110 	ldr.w	lr, [pc, #272]	; 8005ee0 <main+0x3d0>
 8005dd0:	f883 8000 	strb.w	r8, [r3]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005dd4:	f042 0208 	orr.w	r2, r2, #8
  spip->config = NULL;
 8005dd8:	605c      	str	r4, [r3, #4]
 8005dda:	643a      	str	r2, [r7, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005ddc:	f8de c008 	ldr.w	ip, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005de0:	4926      	ldr	r1, [pc, #152]	; (8005e7c <main+0x36c>)
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8005de2:	609c      	str	r4, [r3, #8]

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005de4:	f04c 0c08 	orr.w	ip, ip, #8
 8005de8:	f8ce c008 	str.w	ip, [lr, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8005dec:	4a24      	ldr	r2, [pc, #144]	; (8005e80 <main+0x370>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005dee:	4825      	ldr	r0, [pc, #148]	; (8005e84 <main+0x374>)
  SD4.usart = UART4;
 8005df0:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8005ee4 <main+0x3d4>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005df4:	4f24      	ldr	r7, [pc, #144]	; (8005e88 <main+0x378>)

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005df6:	f242 0ecf 	movw	lr, #8399	; 0x20cf
 8005dfa:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 8005dfe:	f04f 0c80 	mov.w	ip, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005e02:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005e06:	62cd      	str	r5, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005e08:	618c      	str	r4, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005e0a:	634c      	str	r4, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8005e0c:	60cc      	str	r4, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8005e0e:	604c      	str	r4, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005e10:	f8c1 8014 	str.w	r8, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005e14:	f8c1 8000 	str.w	r8, [r1]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005e18:	f880 c332 	strb.w	ip, [r0, #818]	; 0x332
 8005e1c:	e064      	b.n	8005ee8 <main+0x3d8>
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800
 8005e24:	40007000 	.word	0x40007000
 8005e28:	2000d028 	.word	0x2000d028
 8005e2c:	08007bb0 	.word	0x08007bb0
 8005e30:	2000dcd4 	.word	0x2000dcd4
 8005e34:	40026000 	.word	0x40026000
 8005e38:	40026400 	.word	0x40026400
 8005e3c:	40020000 	.word	0x40020000
 8005e40:	200012e8 	.word	0x200012e8
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40022000 	.word	0x40022000
 8005e4c:	40005400 	.word	0x40005400
 8005e50:	40010000 	.word	0x40010000
 8005e54:	20001230 	.word	0x20001230
 8005e58:	2000125c 	.word	0x2000125c
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	2000126c 	.word	0x2000126c
 8005e64:	080010a1 	.word	0x080010a1
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	08001091 	.word	0x08001091
 8005e70:	200011ac 	.word	0x200011ac
 8005e74:	2000dd54 	.word	0x2000dd54
 8005e78:	20000a24 	.word	0x20000a24
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	e000ed00 	.word	0xe000ed00
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	20020000 	.word	0x20020000
 8005e8c:	40150000 	.word	0x40150000
 8005e90:	40020400 	.word	0x40020400
 8005e94:	40020800 	.word	0x40020800
 8005e98:	40020c00 	.word	0x40020c00
 8005e9c:	40021400 	.word	0x40021400
 8005ea0:	40021800 	.word	0x40021800
 8005ea4:	000aa770 	.word	0x000aa770
 8005ea8:	2aa8aaa8 	.word	0x2aa8aaa8
 8005eac:	55514015 	.word	0x55514015
 8005eb0:	22220000 	.word	0x22220000
 8005eb4:	55550044 	.word	0x55550044
 8005eb8:	aa0aaa80 	.word	0xaa0aaa80
 8005ebc:	54400554 	.word	0x54400554
 8005ec0:	02aaa001 	.word	0x02aaa001
 8005ec4:	aa555055 	.word	0xaa555055
 8005ec8:	55002900 	.word	0x55002900
 8005ecc:	50082840 	.word	0x50082840
 8005ed0:	2000dcc4 	.word	0x2000dcc4
 8005ed4:	2000124c 	.word	0x2000124c
 8005ed8:	20000b1c 	.word	0x20000b1c
 8005edc:	20001190 	.word	0x20001190
 8005ee0:	e0042000 	.word	0xe0042000
 8005ee4:	40004c00 	.word	0x40004c00
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005ee8:	f8c0 e184 	str.w	lr, [r0, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005eec:	f8c0 e004 	str.w	lr, [r0, #4]
 8005ef0:	6094      	str	r4, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef2:	f8d2 900c 	ldr.w	r9, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005ef6:	49b7      	ldr	r1, [pc, #732]	; (80061d4 <main+0x6c4>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005ef8:	f8df c348 	ldr.w	ip, [pc, #840]	; 8006244 <main+0x734>
 8005efc:	615c      	str	r4, [r3, #20]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005efe:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8005f02:	ea09 0000 	and.w	r0, r9, r0
  reg_value  =  (reg_value                                   |
 8005f06:	4301      	orrs	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005f08:	60d1      	str	r1, [r2, #12]
 8005f0a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8005f0e:	48b2      	ldr	r0, [pc, #712]	; (80061d8 <main+0x6c8>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005f10:	f8df e334 	ldr.w	lr, [pc, #820]	; 8006248 <main+0x738>
 8005f14:	f8c0 b074 	str.w	fp, [r0, #116]	; 0x74

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005f18:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8005f1c:	f8cc 100c 	str.w	r1, [ip, #12]
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8005f20:	49ae      	ldr	r1, [pc, #696]	; (80061dc <main+0x6cc>)
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8005f22:	f8df 9328 	ldr.w	r9, [pc, #808]	; 800624c <main+0x73c>
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8005f26:	48ae      	ldr	r0, [pc, #696]	; (80061e0 <main+0x6d0>)
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8005f28:	f8c3 901c 	str.w	r9, [r3, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8005f2c:	f101 0c24 	add.w	ip, r1, #36	; 0x24
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8005f30:	f101 0b30 	add.w	fp, r1, #48	; 0x30
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8005f34:	49ab      	ldr	r1, [pc, #684]	; (80061e4 <main+0x6d4>)
#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8005f36:	6298      	str	r0, [r3, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005f38:	f103 090c 	add.w	r9, r3, #12
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8005f3c:	62d9      	str	r1, [r3, #44]	; 0x2c
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8005f3e:	f8c3 c020 	str.w	ip, [r3, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8005f42:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8005f46:	f8c3 900c 	str.w	r9, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8005f4a:	f8c3 9010 	str.w	r9, [r3, #16]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005f4e:	f8de 3000 	ldr.w	r3, [lr]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005f52:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8006250 <main+0x740>
 8005f56:	ea43 0308 	orr.w	r3, r3, r8
 8005f5a:	f8ce 3000 	str.w	r3, [lr]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5e:	f04f 0b20 	mov.w	fp, #32
 8005f62:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005f66:	77d3      	strb	r3, [r2, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8005f68:	f109 011c 	add.w	r1, r9, #28
 8005f6c:	f882 b022 	strb.w	fp, [r2, #34]	; 0x22
 8005f70:	2300      	movs	r3, #0
 8005f72:	2200      	movs	r2, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005f74:	a804      	add	r0, sp, #16
 8005f76:	f8c9 9000 	str.w	r9, [r9]
  tqp->p_prev = (thread_t *)tqp;
 8005f7a:	f8c9 9004 	str.w	r9, [r9, #4]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8005f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f86:	f8c9 101c 	str.w	r1, [r9, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005f8a:	f8c9 1020 	str.w	r1, [r9, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8005f8e:	9504      	str	r5, [sp, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
 8005f90:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
  tmp->worst      = (rtcnt_t)0;
 8005f94:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8005f96:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8005f98:	9407      	str	r4, [sp, #28]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8005f9a:	f8c9 4008 	str.w	r4, [r9, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8005f9e:	f8c9 9010 	str.w	r9, [r9, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8005fa2:	f8c9 9014 	str.w	r9, [r9, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8005fa6:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8005faa:	f8c9 44a0 	str.w	r4, [r9, #1184]	; 0x4a0
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005fae:	f7fe f93f 	bl	8004230 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8005fb2:	a804      	add	r0, sp, #16
 8005fb4:	f7fe f904 	bl	80041c0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	f8c9 34a0 	str.w	r3, [r9, #1184]	; 0x4a0

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8005fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fc2:	f027 0e07 	bic.w	lr, r7, #7
 8005fc6:	f509 6798 	add.w	r7, r9, #1216	; 0x4c0
 8005fca:	e9c7 2300 	strd	r2, r3, [r7]
 8005fce:	f509 679b 	add.w	r7, r9, #1240	; 0x4d8
 8005fd2:	e9c7 2300 	strd	r2, r3, [r7]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005fd6:	4884      	ldr	r0, [pc, #528]	; (80061e8 <main+0x6d8>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8005fd8:	4984      	ldr	r1, [pc, #528]	; (80061ec <main+0x6dc>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005fda:	f8d9 c014 	ldr.w	ip, [r9, #20]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8005fde:	f8c9 54b0 	str.w	r5, [r9, #1200]	; 0x4b0
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8005fe2:	f109 0740 	add.w	r7, r9, #64	; 0x40
 8005fe6:	f8c9 703c 	str.w	r7, [r9, #60]	; 0x3c
 8005fea:	4f81      	ldr	r7, [pc, #516]	; (80061f0 <main+0x6e0>)
 8005fec:	f8c9 54c8 	str.w	r5, [r9, #1224]	; 0x4c8
 8005ff0:	f020 0007 	bic.w	r0, r0, #7
 8005ff4:	6038      	str	r0, [r7, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005ff6:	487f      	ldr	r0, [pc, #508]	; (80061f4 <main+0x6e4>)
 8005ff8:	4f7f      	ldr	r7, [pc, #508]	; (80061f8 <main+0x6e8>)
 8005ffa:	f8c0 e000 	str.w	lr, [r0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005ffe:	f101 0010 	add.w	r0, r1, #16
 8006002:	600f      	str	r7, [r1, #0]
 8006004:	6108      	str	r0, [r1, #16]
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 8006006:	2740      	movs	r7, #64	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 8006008:	6148      	str	r0, [r1, #20]
 800600a:	f509 6088 	add.w	r0, r9, #1088	; 0x440
  default_heap.h_free.h.u.next = NULL;
 800600e:	608c      	str	r4, [r1, #8]
  default_heap.h_free.h.size = 0;
 8006010:	60cc      	str	r4, [r1, #12]
 8006012:	618c      	str	r4, [r1, #24]
 8006014:	f8c9 7038 	str.w	r7, [r9, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006018:	f8c9 7448 	str.w	r7, [r9, #1096]	; 0x448
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800601c:	f509 6e8d 	add.w	lr, r9, #1128	; 0x468

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8006020:	4976      	ldr	r1, [pc, #472]	; (80061fc <main+0x6ec>)
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8006022:	f8c9 44a8 	str.w	r4, [r9, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8006026:	f8c9 44ac 	str.w	r4, [r9, #1196]	; 0x4ac
  tmp->worst      = (rtcnt_t)0;
 800602a:	f8c9 44b4 	str.w	r4, [r9, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 800602e:	f8c9 44b8 	str.w	r4, [r9, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 8006032:	f8c9 44bc 	str.w	r4, [r9, #1212]	; 0x4bc
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8006036:	f8c9 44cc 	str.w	r4, [r9, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 800603a:	f8c9 44d0 	str.w	r4, [r9, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 800603e:	f8c9 44d4 	str.w	r4, [r9, #1236]	; 0x4d4
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006042:	f889 4461 	strb.w	r4, [r9, #1121]	; 0x461
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006046:	f8c9 447c 	str.w	r4, [r9, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800604a:	f8c9 4478 	str.w	r4, [r9, #1144]	; 0x478
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800604e:	f889 8462 	strb.w	r8, [r9, #1122]	; 0x462
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006052:	f8c9 4458 	str.w	r4, [r9, #1112]	; 0x458
  REG_INSERT(tp);
 8006056:	f8c9 9450 	str.w	r9, [r9, #1104]	; 0x450
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800605a:	f8c9 7480 	str.w	r7, [r9, #1152]	; 0x480
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800605e:	f8c9 c454 	str.w	ip, [r9, #1108]	; 0x454
  tmp->cumulative = (rttime_t)0;
 8006062:	f509 6793 	add.w	r7, r9, #1176	; 0x498
 8006066:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800606a:	f8c9 5488 	str.w	r5, [r9, #1160]	; 0x488
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800606e:	f209 456c 	addw	r5, r9, #1132	; 0x46c
 8006072:	f8c9 0014 	str.w	r0, [r9, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8006076:	f8c9 0018 	str.w	r0, [r9, #24]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800607a:	e9c7 2300 	strd	r2, r3, [r7]
  currp->p_stklimit = &__main_thread_stack_base__;
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 800607e:	f509 6091 	add.w	r0, r9, #1160	; 0x488
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8006082:	f8c9 448c 	str.w	r4, [r9, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 8006086:	f8c9 4490 	str.w	r4, [r9, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 800608a:	f8c9 4494 	str.w	r4, [r9, #1172]	; 0x494
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800608e:	f889 8460 	strb.w	r8, [r9, #1120]	; 0x460
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006092:	f8c9 e468 	str.w	lr, [r9, #1128]	; 0x468
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8006096:	f8c9 145c 	str.w	r1, [r9, #1116]	; 0x45c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800609a:	f8c9 546c 	str.w	r5, [r9, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 800609e:	f8c9 5470 	str.w	r5, [r9, #1136]	; 0x470
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 80060a2:	f7fe f8c5 	bl	8004230 <chTMStartMeasurementX>
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80060a6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80060aa:	b913      	cbnz	r3, 80060b2 <main+0x5a2>
 80060ac:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 80060b0:	b125      	cbz	r5, 80060bc <main+0x5ac>
 80060b2:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80060b4:	4b52      	ldr	r3, [pc, #328]	; (8006200 <main+0x6f0>)
 80060b6:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 80060ba:	e7fe      	b.n	80060ba <main+0x5aa>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80060bc:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80060c0:	b662      	cpsie	i
 80060c2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80060c6:	4a4f      	ldr	r2, [pc, #316]	; (8006204 <main+0x6f4>)
 80060c8:	619a      	str	r2, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80060ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80060ce:	4642      	mov	r2, r8
 80060d0:	f509 609c 	add.w	r0, r9, #1248	; 0x4e0
 80060d4:	9500      	str	r5, [sp, #0]
 80060d6:	4b4c      	ldr	r3, [pc, #304]	; (8006208 <main+0x6f8>)
};

void shellStart(void)
{
  sdStart(BLE, NULL);
  motors = getMotors();
 80060d8:	4c4c      	ldr	r4, [pc, #304]	; (800620c <main+0x6fc>)
 80060da:	f7fe fc61 	bl	80049a0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80060de:	4b4c      	ldr	r3, [pc, #304]	; (8006210 <main+0x700>)
 80060e0:	6183      	str	r3, [r0, #24]
  commands
};

void shellStart(void)
{
  sdStart(BLE, NULL);
 80060e2:	483d      	ldr	r0, [pc, #244]	; (80061d8 <main+0x6c8>)
 80060e4:	f7fd f88c 	bl	8003200 <sdStart.constprop.31>
  motors = getMotors();

  controller.status = 0;
 80060e8:	4b4a      	ldr	r3, [pc, #296]	; (8006214 <main+0x704>)
};

void shellStart(void)
{
  sdStart(BLE, NULL);
  motors = getMotors();
 80060ea:	4a4b      	ldr	r2, [pc, #300]	; (8006218 <main+0x708>)
  return rc_channel;
}

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);
 80060ec:	494b      	ldr	r1, [pc, #300]	; (800621c <main+0x70c>)

  controller.status = 0;
  controller.display_status = 1;
 80060ee:	f883 8005 	strb.w	r8, [r3, #5]
 80060f2:	4650      	mov	r0, sl
void shellStart(void)
{
  sdStart(BLE, NULL);
  motors = getMotors();

  controller.status = 0;
 80060f4:	711d      	strb	r5, [r3, #4]
};

void shellStart(void)
{
  sdStart(BLE, NULL);
  motors = getMotors();
 80060f6:	6014      	str	r4, [r2, #0]
 80060f8:	f7fc f94a 	bl	8002390 <gptStart>

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 80060fc:	f8da 200c 	ldr.w	r2, [sl, #12]
  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 8006100:	4b47      	ldr	r3, [pc, #284]	; (8006220 <main+0x710>)

rc_channel_t* rc_init(void)
{
  gptStart(&RC_GPT, &RC_cfg);

  RC_GPT.tim->CR1    = 0;                  /* Timer disabled.              */
 8006102:	6015      	str	r5, [r2, #0]
  RC_GPT.tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8006104:	6355      	str	r5, [r2, #52]	; 0x34
  RC_GPT.tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8006106:	6395      	str	r5, [r2, #56]	; 0x38
  RC_GPT.tim->CCR[2] = 0;                  /* Comparator 2 disabled.       */
 8006108:	63d5      	str	r5, [r2, #60]	; 0x3c
  RC_GPT.tim->CCR[3] = 0;                  /* Comparator 2 disabled.       */
 800610a:	6415      	str	r5, [r2, #64]	; 0x40
  RC_GPT.tim->CNT    = 0;                  /* Counter reset to zero.       */
 800610c:	6255      	str	r5, [r2, #36]	; 0x24

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
 800610e:	6991      	ldr	r1, [r2, #24]
  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 8006110:	4844      	ldr	r0, [pc, #272]	; (8006224 <main+0x714>)
  RC_GPT.tim->CCR[2] = 0;                  /* Comparator 2 disabled.       */
  RC_GPT.tim->CCR[3] = 0;                  /* Comparator 2 disabled.       */
  RC_GPT.tim->CNT    = 0;                  /* Counter reset to zero.       */

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
 8006112:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 8006116:	f041 0142 	orr.w	r1, r1, #66	; 0x42
 800611a:	6191      	str	r1, [r2, #24]
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 800611c:	69d1      	ldr	r1, [r2, #28]
 800611e:	f441 4182 	orr.w	r1, r1, #16640	; 0x4100
 8006122:	f041 0141 	orr.w	r1, r1, #65	; 0x41
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8006126:	f243 3713 	movw	r7, #13075	; 0x3313

  //Use Channel1 as trigger
  RC_GPT.tim->CCMR1 |= STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1)|
                  STM32_TIM_CCMR1_IC1F(4) | STM32_TIM_CCMR1_IC2F(4);

  RC_GPT.tim->CCMR2 |= STM32_TIM_CCMR2_CC3S(1) | STM32_TIM_CCMR2_CC4S(1) |
 800612a:	61d1      	str	r1, [r2, #28]
                   STM32_TIM_CCMR2_IC3F(4) | STM32_TIM_CCMR2_IC4F(4);

  RC_GPT.tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800612c:	6217      	str	r7, [r2, #32]
                    STM32_TIM_CCER_CC2E |
                    STM32_TIM_CCER_CC3E | STM32_TIM_CCER_CC3P |
                    STM32_TIM_CCER_CC4E | STM32_TIM_CCER_CC4P;


  RC_GPT.tim->SMCR |= STM32_TIM_SMCR_SMS(4) | STM32_TIM_SMCR_TS(6);
 800612e:	6891      	ldr	r1, [r2, #8]
 8006130:	f041 0164 	orr.w	r1, r1, #100	; 0x64
 8006134:	6091      	str	r1, [r2, #8]


  RC_GPT.tim->CR1 |= STM32_TIM_CR1_CEN;
 8006136:	6811      	ldr	r1, [r2, #0]
 8006138:	f041 0101 	orr.w	r1, r1, #1
 800613c:	6011      	str	r1, [r2, #0]

  chThdCreateStatic(RC_thread_wa, sizeof(RC_thread_wa),
 800613e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006142:	9500      	str	r5, [sp, #0]
 8006144:	223b      	movs	r2, #59	; 0x3b
 8006146:	f7fe fc2b 	bl	80049a0 <chThdCreateStatic>

  controller.status = 0;
  controller.display_status = 1;

  rc_channel = rc_init();
 800614a:	4b37      	ldr	r3, [pc, #220]	; (8006228 <main+0x718>)
 800614c:	4a37      	ldr	r2, [pc, #220]	; (800622c <main+0x71c>)
 800614e:	601a      	str	r2, [r3, #0]

  control_param_init();
 8006150:	f7ff fb2e 	bl	80057b0 <control_param_init>
}

inline void motor_init(void)
{

  chThdCreateStatic(Hall_thread_wa, sizeof(Hall_thread_wa),
 8006154:	9500      	str	r5, [sp, #0]
 8006156:	4b36      	ldr	r3, [pc, #216]	; (8006230 <main+0x720>)
 8006158:	4836      	ldr	r0, [pc, #216]	; (8006234 <main+0x724>)
 800615a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 800615e:	2245      	movs	r2, #69	; 0x45
 8006160:	f7fe fc1e 	bl	80049a0 <chThdCreateStatic>
  return motors;
}

void motor_sound(void)
{
  uint16_t freq[5] = {1200,1350,1800,1350,1800};
 8006164:	4b34      	ldr	r3, [pc, #208]	; (8006238 <main+0x728>)
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
 800616a:	891a      	ldrh	r2, [r3, #8]
 800616c:	ab04      	add	r3, sp, #16
 800616e:	c303      	stmia	r3!, {r0, r1}
  chThdSleepMilliseconds(1000);
 8006170:	f242 7010 	movw	r0, #10000	; 0x2710
  return motors;
}

void motor_sound(void)
{
  uint16_t freq[5] = {1200,1350,1800,1350,1800};
 8006174:	801a      	strh	r2, [r3, #0]
  chThdSleepMilliseconds(1000);
 8006176:	f7fe fbe3 	bl	8004940 <chThdSleep>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800617a:	f38b 8811 	msr	BASEPRI, fp
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800617e:	f7fe f867 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8006182:	f7fe faed 	bl	8004760 <_dbg_check_lock>
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {

  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8006186:	7833      	ldrb	r3, [r6, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	d904      	bls.n	8006198 <main+0x688>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800618e:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8006190:	4b2a      	ldr	r3, [pc, #168]	; (800623c <main+0x72c>)
 8006192:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 8006196:	e7fe      	b.n	8006196 <main+0x686>
                "invalid state");
  pwmp->config = config;
 8006198:	4b29      	ldr	r3, [pc, #164]	; (8006240 <main+0x730>)
 800619a:	6073      	str	r3, [r6, #4]
  pwmp->period = config->period;
 800619c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80061a0:	60b3      	str	r3, [r6, #8]
  pwm_lld_start(pwmp);
 80061a2:	f7fc fcfd 	bl	8002ba0 <pwm_lld_start.constprop.36>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 80061a6:	f04f 0302 	mov.w	r3, #2
 80061aa:	7033      	strb	r3, [r6, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 80061ac:	60f5      	str	r5, [r6, #12]
 *
 * @special
 */
static inline void osalSysUnlock(void) {

  chSysUnlock();
 80061ae:	f7fc f8cf 	bl	8002350 <chSysUnlock.lto_priv.59>

  pwmStart(&MOTOR_USE_TIMER, &music_pwmcfg);

  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_ARPE;
 80061b2:	69b3      	ldr	r3, [r6, #24]

  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
 80061b4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8006254 <main+0x744>
  uint16_t freq[5] = {1200,1350,1800,1350,1800};
  chThdSleepMilliseconds(1000);

  pwmStart(&MOTOR_USE_TIMER, &music_pwmcfg);

  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_ARPE;
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061be:	601a      	str	r2, [r3, #0]
  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_CMS(3);
 80061c0:	681a      	ldr	r2, [r3, #0]

  MOTOR_USE_TIMER.tim->PSC = 167;
 80061c2:	21a7      	movs	r1, #167	; 0xa7
  chThdSleepMilliseconds(1000);

  pwmStart(&MOTOR_USE_TIMER, &music_pwmcfg);

  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_ARPE;
  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_CMS(3);
 80061c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	af04      	add	r7, sp, #16
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
    if(i>2)
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
 80061cc:	46aa      	mov	sl, r5
  pwmStart(&MOTOR_USE_TIMER, &music_pwmcfg);

  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_ARPE;
  MOTOR_USE_TIMER.tim->CR1 |=  STM32_TIM_CR1_CMS(3);

  MOTOR_USE_TIMER.tim->PSC = 167;
 80061ce:	6299      	str	r1, [r3, #40]	; 0x28
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
 80061d0:	46a3      	mov	fp, r4
 80061d2:	e054      	b.n	800627e <main+0x76e>
 80061d4:	05fa0300 	.word	0x05fa0300
 80061d8:	200011ac 	.word	0x200011ac
 80061dc:	08007bb0 	.word	0x08007bb0
 80061e0:	00010016 	.word	0x00010016
 80061e4:	00010046 	.word	0x00010046
 80061e8:	2000f0a7 	.word	0x2000f0a7
 80061ec:	2000f078 	.word	0x2000f078
 80061f0:	2000dcc0 	.word	0x2000dcc0
 80061f4:	20004eb0 	.word	0x20004eb0
 80061f8:	08002541 	.word	0x08002541
 80061fc:	20000400 	.word	0x20000400
 8006200:	08007c90 	.word	0x08007c90
 8006204:	08007c70 	.word	0x08007c70
 8006208:	08004191 	.word	0x08004191
 800620c:	20000828 	.word	0x20000828
 8006210:	08007c98 	.word	0x08007c98
 8006214:	20001754 	.word	0x20001754
 8006218:	20003910 	.word	0x20003910
 800621c:	08007cd0 	.word	0x08007cd0
 8006220:	080029b1 	.word	0x080029b1
 8006224:	2000dd58 	.word	0x2000dd58
 8006228:	20001798 	.word	0x20001798
 800622c:	20000820 	.word	0x20000820
 8006230:	08002a11 	.word	0x08002a11
 8006234:	2000d750 	.word	0x2000d750
 8006238:	08007330 	.word	0x08007330
 800623c:	08007b60 	.word	0x08007b60
 8006240:	08007d40 	.word	0x08007d40
 8006244:	e000edf0 	.word	0xe000edf0
 8006248:	e0001000 	.word	0xe0001000
 800624c:	40003800 	.word	0x40003800
 8006250:	20000b30 	.word	0x20000b30
 8006254:	001e8480 	.word	0x001e8480
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
    }
    else
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] =
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
 8006258:	f89b 2035 	ldrb.w	r2, [fp, #53]	; 0x35
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
    }
    else
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] =
 800625c:	f89b 0034 	ldrb.w	r0, [fp, #52]	; 0x34
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
 8006260:	320c      	adds	r2, #12
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
    }
    else
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] =
 8006262:	300c      	adds	r0, #12
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
 8006264:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
    }
    else
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] =
 8006268:	eb03 0380 	add.w	r3, r3, r0, lsl #2
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
 800626c:	6051      	str	r1, [r2, #4]
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
    }
    else
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] =
 800626e:	6059      	str	r1, [r3, #4]
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
    }
    chThdSleepMilliseconds(250);
 8006270:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006274:	3501      	adds	r5, #1
 8006276:	f7fe fb63 	bl	8004940 <chThdSleep>

  MOTOR_USE_TIMER.tim->PSC = 167;

  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
 800627a:	2d05      	cmp	r5, #5
 800627c:	d025      	beq.n	80062ca <main+0x7ba>
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
 800627e:	f894 e005 	ldrb.w	lr, [r4, #5]
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
 8006282:	7920      	ldrb	r0, [r4, #4]
  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
 8006284:	69b3      	ldr	r3, [r6, #24]

  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
 8006286:	f837 2b02 	ldrh.w	r2, [r7], #2
 800628a:	fbb8 f2f2 	udiv	r2, r8, r2
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
 800628e:	f10e 0e0c 	add.w	lr, lr, #12
  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
 8006292:	b292      	uxth	r2, r2
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
 8006294:	300c      	adds	r0, #12
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
 8006296:	0851      	lsrs	r1, r2, #1
 8006298:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
 800629c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
 80062a0:	3905      	subs	r1, #5
    if(i>2)
 80062a2:	2d02      	cmp	r5, #2
  uint8_t i = 0;
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
 80062a6:	f8ce 1004 	str.w	r1, [lr, #4]
  uint16_t ARR;
  for(; i<5; i++)
  {
    ARR = 2000000U/freq[i];
    MOTOR_USE_TIMER.tim->ARR = ARR;
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelA] =
 80062aa:	6041      	str	r1, [r0, #4]
    MOTOR_USE_TIMER.tim->CCR[motors[0].PWMChannelB] = ARR/2 - 5U;
    if(i>2)
 80062ac:	d9d4      	bls.n	8006258 <main+0x748>
    {
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelA] = ARR;
 80062ae:	f89b 1034 	ldrb.w	r1, [fp, #52]	; 0x34
 80062b2:	310c      	adds	r1, #12
 80062b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80062b8:	604a      	str	r2, [r1, #4]
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = 0;
 80062ba:	f89b 2035 	ldrb.w	r2, [fp, #53]	; 0x35
 80062be:	320c      	adds	r2, #12
 80062c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80062c4:	f8c3 a004 	str.w	sl, [r3, #4]
 80062c8:	e7d2      	b.n	8006270 <main+0x760>
      MOTOR_USE_TIMER.tim->CCR[motors[1].PWMChannelB] = ARR/2 - 5U;
    }
    chThdSleepMilliseconds(250);
  }

  pwmStop(&MOTOR_USE_TIMER);
 80062ca:	f7fc ff41 	bl	8003150 <pwmStop.constprop.33>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80062ce:	2320      	movs	r3, #32
 80062d0:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80062d4:	f7fd ffbc 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80062d8:	f7fe fa42 	bl	8004760 <_dbg_check_lock>
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {

  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 80062dc:	7833      	ldrb	r3, [r6, #0]
 80062de:	4d22      	ldr	r5, [pc, #136]	; (8006368 <main+0x858>)
 80062e0:	3b01      	subs	r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d904      	bls.n	80062f0 <main+0x7e0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062e6:	b672      	cpsid	i
 80062e8:	4b20      	ldr	r3, [pc, #128]	; (800636c <main+0x85c>)
 80062ea:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 80062ee:	e7fe      	b.n	80062ee <main+0x7de>
                "invalid state");
  pwmp->config = config;
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <main+0x860>)
 80062f2:	606b      	str	r3, [r5, #4]
  pwmp->period = config->period;
 80062f4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 80062f8:	2400      	movs	r4, #0

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 80062fa:	60ab      	str	r3, [r5, #8]
  pwm_lld_start(pwmp);
 80062fc:	f7fc fc50 	bl	8002ba0 <pwm_lld_start.constprop.36>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8006300:	2302      	movs	r3, #2
 8006302:	702b      	strb	r3, [r5, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8006304:	60ec      	str	r4, [r5, #12]
 8006306:	f7fc f823 	bl	8002350 <chSysUnlock.lto_priv.59>

  motor_sound();
  pwmStart(&MOTOR_USE_TIMER, &motor_pwmcfg);


  chThdCreateStatic(Motor_thread_wa, sizeof(Motor_thread_wa),
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <main+0x864>)
 800630c:	9400      	str	r4, [sp, #0]
 800630e:	f241 1170 	movw	r1, #4464	; 0x1170
 8006312:	2241      	movs	r2, #65	; 0x41
 8006314:	4818      	ldr	r0, [pc, #96]	; (8006378 <main+0x868>)
 8006316:	f7fe fb43 	bl	80049a0 <chThdCreateStatic>
 * @api
 */
thread_t *shellCreateStatic(const ShellConfig *scp, void *wsp,
                            size_t size, tprio_t prio) {

  return chThdCreateStatic(wsp, size, prio, shell_thread, (void *)scp);
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <main+0x86c>)
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 8006322:	4b17      	ldr	r3, [pc, #92]	; (8006380 <main+0x870>)
 8006324:	4817      	ldr	r0, [pc, #92]	; (8006384 <main+0x874>)
 8006326:	2240      	movs	r2, #64	; 0x40
 8006328:	f7fe fb3a 	bl	80049a0 <chThdCreateStatic>
  halInit();
  chSysInit();

  shellStart();

  chThdCreateStatic(Test_thread_wa, sizeof(Test_thread_wa),
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <main+0x878>)
 800632e:	9400      	str	r4, [sp, #0]
 8006330:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006334:	2240      	movs	r2, #64	; 0x40
 8006336:	4815      	ldr	r0, [pc, #84]	; (800638c <main+0x87c>)
 8006338:	f7fe fb32 	bl	80049a0 <chThdCreateStatic>
  NORMALPRIO,
                    Test_thread, NULL);

  chThdCreateStatic(MPU_thread_wa, sizeof(MPU_thread_wa),
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <main+0x880>)
 800633e:	9400      	str	r4, [sp, #0]
 8006340:	f248 1170 	movw	r1, #33136	; 0x8170
 8006344:	2245      	movs	r2, #69	; 0x45
 8006346:	4813      	ldr	r0, [pc, #76]	; (8006394 <main+0x884>)
 8006348:	f7fe fb2a 	bl	80049a0 <chThdCreateStatic>
  NORMALPRIO + 5,
                    MPU_thread, NULL);

  chThdCreateStatic(TFT_thread_wa, sizeof(TFT_thread_wa),
 800634c:	9400      	str	r4, [sp, #0]
 800634e:	4812      	ldr	r0, [pc, #72]	; (8006398 <main+0x888>)
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <main+0x88c>)
 8006352:	f241 1170 	movw	r1, #4464	; 0x1170
 8006356:	223b      	movs	r2, #59	; 0x3b
 8006358:	f7fe fb22 	bl	80049a0 <chThdCreateStatic>
  NORMALPRIO - 5,
                    TFT_thread, NULL);

  while (true) {
    //chprintf(chp,"Serial OK\n");
    chThdSleepMilliseconds(500);
 800635c:	f241 3088 	movw	r0, #5000	; 0x1388
 8006360:	f7fe faee 	bl	8004940 <chThdSleep>
 8006364:	e7fa      	b.n	800635c <main+0x84c>
 8006366:	bf00      	nop
 8006368:	20001230 	.word	0x20001230
 800636c:	08007b60 	.word	0x08007b60
 8006370:	08007b70 	.word	0x08007b70
 8006374:	08004bd1 	.word	0x08004bd1
 8006378:	20003d40 	.word	0x20003d40
 800637c:	08007d80 	.word	0x08007d80
 8006380:	08001a81 	.word	0x08001a81
 8006384:	2000d1e0 	.word	0x2000d1e0
 8006388:	080034f1 	.word	0x080034f1
 800638c:	2000d030 	.word	0x2000d030
 8006390:	08003901 	.word	0x08003901
 8006394:	20004eb8 	.word	0x20004eb8
 8006398:	2000df08 	.word	0x2000df08
 800639c:	080063a1 	.word	0x080063a1

080063a0 <TFT_thread.lto_priv.89>:
  }
}

static THD_WORKING_AREA(TFT_thread_wa, 4096);
static THD_FUNCTION(TFT_thread, p)
{
 80063a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80063a4:	4d0f      	ldr	r5, [pc, #60]	; (80063e4 <TFT_thread.lto_priv.89+0x44>)
  * @retval None
  */
void tft_init(uint8_t orientation, uint16_t in_bg_color,
  uint16_t in_text_color, uint16_t in_text_color_sp)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <TFT_thread.lto_priv.89+0x48>)
 80063a8:	69aa      	ldr	r2, [r5, #24]
 80063aa:	4910      	ldr	r1, [pc, #64]	; (80063ec <TFT_thread.lto_priv.89+0x4c>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 80063ac:	4c10      	ldr	r4, [pc, #64]	; (80063f0 <TFT_thread.lto_priv.89+0x50>)
 80063ae:	6191      	str	r1, [r2, #24]
 80063b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063b4:	831a      	strh	r2, [r3, #24]
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7fe f9e1 	bl	8004780 <chMtxLock>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80063be:	2320      	movs	r3, #32
 80063c0:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 80063c4:	f7fd ff44 	bl	8004250 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80063c8:	f7fe f9ca 	bl	8004760 <_dbg_check_lock>
void spiStart(SPIDriver *spip, const SPIConfig *config) {

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80063cc:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
 80063d0:	1e53      	subs	r3, r2, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	f1a4 040c 	sub.w	r4, r4, #12
 80063d8:	d90e      	bls.n	80063f8 <TFT_thread.lto_priv.89+0x58>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063da:	b672      	cpsid	i
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <TFT_thread.lto_priv.89+0x54>)
 80063de:	62eb      	str	r3, [r5, #44]	; 0x2c
 80063e0:	e7fe      	b.n	80063e0 <TFT_thread.lto_priv.89+0x40>
 80063e2:	bf00      	nop
 80063e4:	20000b30 	.word	0x20000b30
 80063e8:	40020400 	.word	0x40020400
 80063ec:	08008db0 	.word	0x08008db0
 80063f0:	20000a30 	.word	0x20000a30
 80063f4:	08007d90 	.word	0x08007d90
                "invalid state");
  spip->config = config;
 80063f8:	4be4      	ldr	r3, [pc, #912]	; (800678c <TFT_thread.lto_priv.89+0x3ec>)
 80063fa:	6063      	str	r3, [r4, #4]
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	f000 8216 	beq.w	800682e <TFT_thread.lto_priv.89+0x48e>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8006402:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006406:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8006408:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800640a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800640e:	bf48      	it	mi
 8006410:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8006414:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006418:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800641a:	bf48      	it	mi
 800641c:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8006420:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8006422:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8006424:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8006428:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800642a:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800642c:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800642e:	6019      	str	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8006430:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006438:	601a      	str	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800643a:	2302      	movs	r3, #2
 800643c:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800643e:	f7fe f97f 	bl	8004740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006442:	f7fd feed 	bl	8004220 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8006446:	682a      	ldr	r2, [r5, #0]
 8006448:	4bd1      	ldr	r3, [pc, #836]	; (8006790 <TFT_thread.lto_priv.89+0x3f0>)
 800644a:	42aa      	cmp	r2, r5
 800644c:	d005      	beq.n	800645a <TFT_thread.lto_priv.89+0xba>
 800644e:	6999      	ldr	r1, [r3, #24]
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	6889      	ldr	r1, [r1, #8]
 8006454:	4291      	cmp	r1, r2
 8006456:	f0c0 8207 	bcc.w	8006868 <TFT_thread.lto_priv.89+0x4c8>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800645a:	2400      	movs	r4, #0
 800645c:	f384 8811 	msr	BASEPRI, r4
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 8006460:	4dcc      	ldr	r5, [pc, #816]	; (8006794 <TFT_thread.lto_priv.89+0x3f4>)
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8006462:	4ecd      	ldr	r6, [pc, #820]	; (8006798 <TFT_thread.lto_priv.89+0x3f8>)
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 8006464:	696b      	ldr	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8006466:	f44f 4780 	mov.w	r7, #16384	; 0x4000
{
  palSetPad(GPIO_CS, GPIO_Pin_CS);
  spiAcquireBus(TFT_SPI);
  spiStart(TFT_SPI, &TFTSPI_cfg);

  palTogglePad(GPIOD,GPIOD_LED4);
 800646a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800646e:	616b      	str	r3, [r5, #20]
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 8006470:	200a      	movs	r0, #10
  * @param  None
  * @retval None
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
 8006472:	8377      	strh	r7, [r6, #26]
	chThdSleepMilliseconds(1);
 8006474:	f7fe fa64 	bl	8004940 <chThdSleep>
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
 8006478:	200a      	movs	r0, #10
  */
void tft_reset(void)
{
 	palClearPad(TFT_RST_PORT, TFT_RST_PIN);
	chThdSleepMilliseconds(1);
	palSetPad(TFT_RST_PORT, TFT_RST_PIN);
 800647a:	8337      	strh	r7, [r6, #24]
	chThdSleepMilliseconds(1);
 800647c:	f7fe fa60 	bl	8004940 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED4);

  tft_reset();

  palTogglePad(GPIOD,GPIOD_LED5);
 8006480:	696b      	ldr	r3, [r5, #20]
 8006482:	407b      	eors	r3, r7
 8006484:	616b      	str	r3, [r5, #20]
  * @param  None
  * @retval None
  */
void tft_config(void)
{
	tft_write_command(0x01);   //Sofeware setting
 8006486:	2001      	movs	r0, #1
 8006488:	f7ff f922 	bl	80056d0 <tft_write_command>
	//chThdSleepMilliseconds(0);
	tft_write_command(0x11);//Sleep out
 800648c:	2011      	movs	r0, #17
 800648e:	f7ff f91f 	bl	80056d0 <tft_write_command>
	chThdSleepMilliseconds(120);
 8006492:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006496:	f7fe fa53 	bl	8004940 <chThdSleep>

	//ST7735R Frame Rate
	tft_write_command(0xB1);
 800649a:	20b1      	movs	r0, #177	; 0xb1
 800649c:	f7ff f918 	bl	80056d0 <tft_write_command>
	tft_write_data(0x01);
 80064a0:	2001      	movs	r0, #1
 80064a2:	f7ff f8fd 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2C);
 80064a6:	202c      	movs	r0, #44	; 0x2c
 80064a8:	f7ff f8fa 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2D);
 80064ac:	202d      	movs	r0, #45	; 0x2d
 80064ae:	f7ff f8f7 	bl	80056a0 <tft_write_data>
	tft_write_command(0xB2);
 80064b2:	20b2      	movs	r0, #178	; 0xb2
 80064b4:	f7ff f90c 	bl	80056d0 <tft_write_command>
	tft_write_data(0x01);
 80064b8:	2001      	movs	r0, #1
 80064ba:	f7ff f8f1 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2C);
 80064be:	202c      	movs	r0, #44	; 0x2c
 80064c0:	f7ff f8ee 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2D);
 80064c4:	202d      	movs	r0, #45	; 0x2d
 80064c6:	f7ff f8eb 	bl	80056a0 <tft_write_data>
	tft_write_command(0xB3);
 80064ca:	20b3      	movs	r0, #179	; 0xb3
 80064cc:	f7ff f900 	bl	80056d0 <tft_write_command>
	tft_write_data(0x01);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f7ff f8e5 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2C);
 80064d6:	202c      	movs	r0, #44	; 0x2c
 80064d8:	f7ff f8e2 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2D);
 80064dc:	202d      	movs	r0, #45	; 0x2d
 80064de:	f7ff f8df 	bl	80056a0 <tft_write_data>
	tft_write_data(0x01);
 80064e2:	2001      	movs	r0, #1
 80064e4:	f7ff f8dc 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2C);
 80064e8:	202c      	movs	r0, #44	; 0x2c
 80064ea:	f7ff f8d9 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2D);
 80064ee:	202d      	movs	r0, #45	; 0x2d
 80064f0:	f7ff f8d6 	bl	80056a0 <tft_write_data>
	//------------------------------------End ST7735R Frame Rate-----------------------------------------//
	tft_write_command(0xB4);//Column inversion
 80064f4:	20b4      	movs	r0, #180	; 0xb4
 80064f6:	f7ff f8eb 	bl	80056d0 <tft_write_command>
	tft_write_data(0x07);
 80064fa:	2007      	movs	r0, #7
 80064fc:	f7ff f8d0 	bl	80056a0 <tft_write_data>
	//------------------------------------ST7735R Power Sequence-----------------------------------------//
	tft_write_command(0xC0);
 8006500:	20c0      	movs	r0, #192	; 0xc0
 8006502:	f7ff f8e5 	bl	80056d0 <tft_write_command>
	tft_write_data(0xA2);
 8006506:	20a2      	movs	r0, #162	; 0xa2
 8006508:	f7ff f8ca 	bl	80056a0 <tft_write_data>
	tft_write_data(0x02);
 800650c:	2002      	movs	r0, #2
 800650e:	f7ff f8c7 	bl	80056a0 <tft_write_data>
	tft_write_data(0x84);
 8006512:	2084      	movs	r0, #132	; 0x84
 8006514:	f7ff f8c4 	bl	80056a0 <tft_write_data>
	tft_write_command(0xC1);
 8006518:	20c1      	movs	r0, #193	; 0xc1
 800651a:	f7ff f8d9 	bl	80056d0 <tft_write_command>
	tft_write_data(0xC5);
 800651e:	20c5      	movs	r0, #197	; 0xc5
 8006520:	f7ff f8be 	bl	80056a0 <tft_write_data>
	tft_write_command(0xC2);
 8006524:	20c2      	movs	r0, #194	; 0xc2
 8006526:	f7ff f8d3 	bl	80056d0 <tft_write_command>
	tft_write_data(0x0A);
 800652a:	200a      	movs	r0, #10
 800652c:	f7ff f8b8 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff f8b5 	bl	80056a0 <tft_write_data>
	tft_write_command(0xC3);
 8006536:	20c3      	movs	r0, #195	; 0xc3
 8006538:	f7ff f8ca 	bl	80056d0 <tft_write_command>
	tft_write_data(0x8A);
 800653c:	208a      	movs	r0, #138	; 0x8a
 800653e:	f7ff f8af 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2A);
 8006542:	202a      	movs	r0, #42	; 0x2a
 8006544:	f7ff f8ac 	bl	80056a0 <tft_write_data>
	tft_write_command(0xC4);
 8006548:	20c4      	movs	r0, #196	; 0xc4
 800654a:	f7ff f8c1 	bl	80056d0 <tft_write_command>
	tft_write_data(0x8A);
 800654e:	208a      	movs	r0, #138	; 0x8a
 8006550:	f7ff f8a6 	bl	80056a0 <tft_write_data>
	tft_write_data(0xEE);
 8006554:	20ee      	movs	r0, #238	; 0xee
 8006556:	f7ff f8a3 	bl	80056a0 <tft_write_data>
	//---------------------------------End ST7735R Power Sequence-------------------------------------//
	tft_write_command(0xC5);//VCOM
 800655a:	20c5      	movs	r0, #197	; 0xc5
 800655c:	f7ff f8b8 	bl	80056d0 <tft_write_command>
	tft_write_data(0x0E);
 8006560:	200e      	movs	r0, #14
 8006562:	f7ff f89d 	bl	80056a0 <tft_write_data>
	tft_write_command(0x36);//MX, MY, RGB mode
 8006566:	2036      	movs	r0, #54	; 0x36
 8006568:	f7ff f8b2 	bl	80056d0 <tft_write_command>
	tft_write_data(0xC8);
 800656c:	20c8      	movs	r0, #200	; 0xc8
 800656e:	f7ff f897 	bl	80056a0 <tft_write_data>
	//------------------------------------ST7735R Gamma Sequence-----------------------------------------//
	tft_write_command(0xe0);
 8006572:	20e0      	movs	r0, #224	; 0xe0
 8006574:	f7ff f8ac 	bl	80056d0 <tft_write_command>
	tft_write_data(0x02);
 8006578:	2002      	movs	r0, #2
 800657a:	f7ff f891 	bl	80056a0 <tft_write_data>
	tft_write_data(0x1c);
 800657e:	201c      	movs	r0, #28
 8006580:	f7ff f88e 	bl	80056a0 <tft_write_data>
	tft_write_data(0x07);
 8006584:	2007      	movs	r0, #7
 8006586:	f7ff f88b 	bl	80056a0 <tft_write_data>
	tft_write_data(0x12);
 800658a:	2012      	movs	r0, #18
 800658c:	f7ff f888 	bl	80056a0 <tft_write_data>
	tft_write_data(0x37);
 8006590:	2037      	movs	r0, #55	; 0x37
 8006592:	f7ff f885 	bl	80056a0 <tft_write_data>
	tft_write_data(0x32);
 8006596:	2032      	movs	r0, #50	; 0x32
 8006598:	f7ff f882 	bl	80056a0 <tft_write_data>
	tft_write_data(0x29);
 800659c:	2029      	movs	r0, #41	; 0x29
 800659e:	f7ff f87f 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2d);
 80065a2:	202d      	movs	r0, #45	; 0x2d
 80065a4:	f7ff f87c 	bl	80056a0 <tft_write_data>
	tft_write_data(0x29);
 80065a8:	2029      	movs	r0, #41	; 0x29
 80065aa:	f7ff f879 	bl	80056a0 <tft_write_data>
	tft_write_data(0x25);
 80065ae:	2025      	movs	r0, #37	; 0x25
 80065b0:	f7ff f876 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2b);
 80065b4:	202b      	movs	r0, #43	; 0x2b
 80065b6:	f7ff f873 	bl	80056a0 <tft_write_data>
	tft_write_data(0x39);
 80065ba:	2039      	movs	r0, #57	; 0x39
 80065bc:	f7ff f870 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7ff f86d 	bl	80056a0 <tft_write_data>
	tft_write_data(0x01);
 80065c6:	2001      	movs	r0, #1
 80065c8:	f7ff f86a 	bl	80056a0 <tft_write_data>
	tft_write_data(0x03);
 80065cc:	2003      	movs	r0, #3
 80065ce:	f7ff f867 	bl	80056a0 <tft_write_data>
	tft_write_data(0x10);
 80065d2:	2010      	movs	r0, #16
 80065d4:	f7ff f864 	bl	80056a0 <tft_write_data>
	tft_write_command(0xe1);
 80065d8:	20e1      	movs	r0, #225	; 0xe1
 80065da:	f7ff f879 	bl	80056d0 <tft_write_command>
	tft_write_data(0x03);
 80065de:	2003      	movs	r0, #3
 80065e0:	f7ff f85e 	bl	80056a0 <tft_write_data>
	tft_write_data(0x1d);
 80065e4:	201d      	movs	r0, #29
 80065e6:	f7ff f85b 	bl	80056a0 <tft_write_data>
	tft_write_data(0x07);
 80065ea:	2007      	movs	r0, #7
 80065ec:	f7ff f858 	bl	80056a0 <tft_write_data>
	tft_write_data(0x06);
 80065f0:	2006      	movs	r0, #6
 80065f2:	f7ff f855 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2e);
 80065f6:	202e      	movs	r0, #46	; 0x2e
 80065f8:	f7ff f852 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2c);
 80065fc:	202c      	movs	r0, #44	; 0x2c
 80065fe:	f7ff f84f 	bl	80056a0 <tft_write_data>
	tft_write_data(0x29);
 8006602:	2029      	movs	r0, #41	; 0x29
 8006604:	f7ff f84c 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2d);
 8006608:	202d      	movs	r0, #45	; 0x2d
 800660a:	f7ff f849 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2e);
 800660e:	202e      	movs	r0, #46	; 0x2e
 8006610:	f7ff f846 	bl	80056a0 <tft_write_data>
	tft_write_data(0x2e);
 8006614:	202e      	movs	r0, #46	; 0x2e
 8006616:	f7ff f843 	bl	80056a0 <tft_write_data>
	tft_write_data(0x37);
 800661a:	2037      	movs	r0, #55	; 0x37
 800661c:	f7ff f840 	bl	80056a0 <tft_write_data>
	tft_write_data(0x3f);
 8006620:	203f      	movs	r0, #63	; 0x3f
 8006622:	f7ff f83d 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff f83a 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff f837 	bl	80056a0 <tft_write_data>
	tft_write_data(0x02);
 8006632:	2002      	movs	r0, #2
 8006634:	f7ff f834 	bl	80056a0 <tft_write_data>
	tft_write_data(0x10);
 8006638:	2010      	movs	r0, #16
 800663a:	f7ff f831 	bl	80056a0 <tft_write_data>
	tft_write_command(0x2A);
 800663e:	202a      	movs	r0, #42	; 0x2a
 8006640:	f7ff f846 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 8006644:	4620      	mov	r0, r4
 8006646:	f7ff f82b 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 800664a:	4620      	mov	r0, r4
 800664c:	f7ff f828 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff f825 	bl	80056a0 <tft_write_data>
	tft_write_data(0x7f);
 8006656:	207f      	movs	r0, #127	; 0x7f
 8006658:	f7ff f822 	bl	80056a0 <tft_write_data>

	tft_write_command(0x2B);
 800665c:	202b      	movs	r0, #43	; 0x2b
 800665e:	f7ff f837 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff f81c 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff f819 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff f816 	bl	80056a0 <tft_write_data>
	tft_write_data(0x9f);
 8006674:	209f      	movs	r0, #159	; 0x9f
 8006676:	f7ff f813 	bl	80056a0 <tft_write_data>
	//------------------------------------End ST7735R Gamma Sequence-----------------------------------------//

	tft_write_command(0x3A);
 800667a:	203a      	movs	r0, #58	; 0x3a
 800667c:	f7ff f828 	bl	80056d0 <tft_write_command>
	tft_write_data(0x05);
 8006680:	2005      	movs	r0, #5
 8006682:	f7ff f80d 	bl	80056a0 <tft_write_data>
	tft_write_command(0x29);//Display on
 8006686:	2029      	movs	r0, #41	; 0x29
 8006688:	f7ff f822 	bl	80056d0 <tft_write_command>

	chThdSleepMilliseconds(10);
 800668c:	2064      	movs	r0, #100	; 0x64
 800668e:	f7fe f957 	bl	8004940 <chThdSleep>

  palTogglePad(GPIOD,GPIOD_LED5);

  tft_config();

  palTogglePad(GPIOD,GPIOD_LED6);
 8006692:	696b      	ldr	r3, [r5, #20]
 8006694:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8006698:	616b      	str	r3, [r5, #20]

  tft_write_command(0x2C);
 800669a:	202c      	movs	r0, #44	; 0x2c
 800669c:	f7ff f818 	bl	80056d0 <tft_write_command>
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 80066a0:	4a3e      	ldr	r2, [pc, #248]	; (800679c <TFT_thread.lto_priv.89+0x3fc>)
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 80066a2:	493f      	ldr	r1, [pc, #252]	; (80067a0 <TFT_thread.lto_priv.89+0x400>)
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 80066a4:	4b3f      	ldr	r3, [pc, #252]	; (80067a4 <TFT_thread.lto_priv.89+0x404>)
  * @param  None
  * @retval None
  */
void tft_set_text_color(uint16_t in_text_color)
{
	curr_text_color = in_text_color;
 80066a6:	8014      	strh	r4, [r2, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 80066a8:	202a      	movs	r0, #42	; 0x2a
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 80066aa:	f64f 4251 	movw	r2, #64593	; 0xfc51
  * @param  None
  * @retval None
  */
void tft_set_special_color(uint16_t text_color_sp)
{
	curr_text_color_sp = text_color_sp;
 80066ae:	800c      	strh	r4, [r1, #0]
  * @param  None
  * @retval None
  */
void tft_set_bg_color(uint16_t in_bg_color)
{
	curr_bg_color = in_bg_color;
 80066b0:	801a      	strh	r2, [r3, #0]
  */
void tft_fill_color(uint16_t color)
{
	uint16_t i;					//160*128

	tft_write_command(0x2a);		// Column addr set
 80066b2:	f7ff f80d 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7fe fff2 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00); 				// X START
 80066bc:	4620      	mov	r0, r4
 80066be:	f7fe ffef 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fe ffec 	bl	80056a0 <tft_write_data>
	tft_write_data(0x7f); 			// X END
 80066c8:	207f      	movs	r0, #127	; 0x7f
 80066ca:	f7fe ffe9 	bl	80056a0 <tft_write_data>

	tft_write_command(0x2b);		// Row addr set
 80066ce:	202b      	movs	r0, #43	; 0x2b
 80066d0:	f7fe fffe 	bl	80056d0 <tft_write_command>
	tft_write_data(0x00);
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7fe ffe3 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);				// Y START
 80066da:	4620      	mov	r0, r4
 80066dc:	f7fe ffe0 	bl	80056a0 <tft_write_data>
	tft_write_data(0x00);
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7fe ffdd 	bl	80056a0 <tft_write_data>
	tft_write_data(0x9f);			// Y END
 80066e6:	209f      	movs	r0, #159	; 0x9f
 80066e8:	f7fe ffda 	bl	80056a0 <tft_write_data>

	tft_write_command(0x2c); 		// write to RAM
 80066ec:	202c      	movs	r0, #44	; 0x2c
 80066ee:	f7fe ffef 	bl	80056d0 <tft_write_command>
 80066f2:	f44f 44a0 	mov.w	r4, #20480	; 0x5000

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
		tft_write_data(color >> 8);
 80066f6:	20fc      	movs	r0, #252	; 0xfc
 80066f8:	3c01      	subs	r4, #1
 80066fa:	f7fe ffd1 	bl	80056a0 <tft_write_data>
 80066fe:	b2a4      	uxth	r4, r4
		tft_write_data(color);
 8006700:	2051      	movs	r0, #81	; 0x51
 8006702:	f7fe ffcd 	bl	80056a0 <tft_write_data>
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM

  //spiSelect(TFT_SPI);
	for (i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
 8006706:	2c00      	cmp	r4, #0
 8006708:	d1f5      	bne.n	80066f6 <TFT_thread.lto_priv.89+0x356>

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 800670a:	4927      	ldr	r1, [pc, #156]	; (80067a8 <TFT_thread.lto_priv.89+0x408>)
 800670c:	4d27      	ldr	r5, [pc, #156]	; (80067ac <TFT_thread.lto_priv.89+0x40c>)
 800670e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80067cc <TFT_thread.lto_priv.89+0x42c>
 8006712:	2201      	movs	r2, #1
 8006714:	4623      	mov	r3, r4
 8006716:	4620      	mov	r0, r4
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 8006718:	4626      	mov	r6, r4

  tft_set_bg_color(in_bg_color);
	tft_set_text_color(in_text_color);
	tft_set_special_color(in_text_color_sp);
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;
 800671a:	700a      	strb	r2, [r1, #0]


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
			text[x][y] = ' ';
 800671c:	f04f 0a20 	mov.w	sl, #32
			text_color[x][y] = in_text_color;
			bg_color[x][y] = in_bg_color;
 8006720:	f64f 4951 	movw	r9, #64593	; 0xfc51
 8006724:	4c22      	ldr	r4, [pc, #136]	; (80067b0 <TFT_thread.lto_priv.89+0x410>)
 8006726:	1e41      	subs	r1, r0, #1
 8006728:	eb05 0c01 	add.w	ip, r5, r1
 800672c:	4421      	add	r1, r4
 800672e:	4c21      	ldr	r4, [pc, #132]	; (80067b4 <TFT_thread.lto_priv.89+0x414>)
 8006730:	9101      	str	r1, [sp, #4]
 8006732:	1e9a      	subs	r2, r3, #2
 8006734:	eb04 0e02 	add.w	lr, r4, r2
 8006738:	491f      	ldr	r1, [pc, #124]	; (80067b8 <TFT_thread.lto_priv.89+0x418>)
 800673a:	4c20      	ldr	r4, [pc, #128]	; (80067bc <TFT_thread.lto_priv.89+0x41c>)
 800673c:	18a7      	adds	r7, r4, r2
 800673e:	eb0b 0402 	add.w	r4, fp, r2
 8006742:	440a      	add	r2, r1
 8006744:	9901      	ldr	r1, [sp, #4]
	tft_write_data(0x00);
	tft_write_data(0x00);				// Y START
	tft_write_data(0x00);
	tft_write_data(0x9f);			// Y END

	tft_write_command(0x2c); 		// write to RAM
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	f108 0801 	add.w	r8, r8, #1
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 800674e:	f1b8 0f0a 	cmp.w	r8, #10
			text[x][y] = ' ';
 8006752:	f80c af01 	strb.w	sl, [ip, #1]!
			text_color[x][y] = in_text_color;
 8006756:	f82e 6f02 	strh.w	r6, [lr, #2]!
			bg_color[x][y] = in_bg_color;
 800675a:	f827 9f02 	strh.w	r9, [r7, #2]!

			text_prev[x][y] = ' ';
 800675e:	f801 af01 	strb.w	sl, [r1, #1]!
			text_color_prev[x][y] = in_text_color;
 8006762:	f824 6f02 	strh.w	r6, [r4, #2]!
			bg_color_prev[x][y] = in_bg_color;
 8006766:	f822 9f02 	strh.w	r9, [r2, #2]!
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
		for (y = 0; y < CHAR_MAX_Y; y++) {
 800676a:	d1ee      	bne.n	800674a <TFT_thread.lto_priv.89+0x3aa>
 800676c:	300a      	adds	r0, #10
	tft_fill_color(in_bg_color);
	tft_orientation = orientation;


  uint16_t x,y;
	for (x = 0; x < CHAR_MAX_X; x++) {
 800676e:	28c8      	cmp	r0, #200	; 0xc8
 8006770:	f103 0314 	add.w	r3, r3, #20
 8006774:	d1d6      	bne.n	8006724 <TFT_thread.lto_priv.89+0x384>
 8006776:	f8df a058 	ldr.w	sl, [pc, #88]	; 80067d0 <TFT_thread.lto_priv.89+0x430>

  tft_init(1, CYAN,BLACK,BLACK);

  while(true)
  {
    tft_printf(5,1,"Theta:%6d",(int16_t)(g_IMU1.theta * 100.0f));
 800677a:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80067c0 <TFT_thread.lto_priv.89+0x420>
 800677e:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <TFT_thread.lto_priv.89+0x424>)
 8006780:	4a11      	ldr	r2, [pc, #68]	; (80067c8 <TFT_thread.lto_priv.89+0x428>)
 8006782:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006786:	ee67 7a88 	vmul.f32	s15, s15, s16
 800678a:	e023      	b.n	80067d4 <TFT_thread.lto_priv.89+0x434>
 800678c:	08008de0 	.word	0x08008de0
 8006790:	20000b30 	.word	0x20000b30
 8006794:	40020c00 	.word	0x40020c00
 8006798:	40021000 	.word	0x40021000
 800679c:	20000b2c 	.word	0x20000b2c
 80067a0:	200012e4 	.word	0x200012e4
 80067a4:	20001224 	.word	0x20001224
 80067a8:	2000f098 	.word	0x2000f098
 80067ac:	20000a54 	.word	0x20000a54
 80067b0:	200014f8 	.word	0x200014f8
 80067b4:	20001320 	.word	0x20001320
 80067b8:	20003bac 	.word	0x20003bac
 80067bc:	20000894 	.word	0x20000894
 80067c0:	42c80000 	.word	0x42c80000
 80067c4:	20003b14 	.word	0x20003b14
 80067c8:	08008dbc 	.word	0x08008dbc
 80067cc:	200015c4 	.word	0x200015c4
 80067d0:	08007db0 	.word	0x08007db0
 80067d4:	2005      	movs	r0, #5
 80067d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067da:	2101      	movs	r1, #1
 80067dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80067e0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80067e4:	f7fc fabc 	bl	8002d60 <tft_printf.constprop.13>
    tft_printf(5,5,"RC1:%5d", rc_channel[0]);
 80067e8:	4bb6      	ldr	r3, [pc, #728]	; (8006ac4 <TFT_thread.lto_priv.89+0x724>)
 80067ea:	4ab7      	ldr	r2, [pc, #732]	; (8006ac8 <TFT_thread.lto_priv.89+0x728>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2005      	movs	r0, #5
 80067f0:	4601      	mov	r1, r0
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f7fc fab4 	bl	8002d60 <tft_printf.constprop.13>
    tft_printf(5,6,"RC2:%5d", rc_channel[1]);
 80067f8:	4bb2      	ldr	r3, [pc, #712]	; (8006ac4 <TFT_thread.lto_priv.89+0x724>)
 80067fa:	4ab4      	ldr	r2, [pc, #720]	; (8006acc <TFT_thread.lto_priv.89+0x72c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2005      	movs	r0, #5
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	2106      	movs	r1, #6
 8006804:	f7fc faac 	bl	8002d60 <tft_printf.constprop.13>
    tft_printf(5,7,"RC3:%5d", rc_channel[2]);
 8006808:	4bae      	ldr	r3, [pc, #696]	; (8006ac4 <TFT_thread.lto_priv.89+0x724>)
 800680a:	4ab1      	ldr	r2, [pc, #708]	; (8006ad0 <TFT_thread.lto_priv.89+0x730>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2005      	movs	r0, #5
 8006810:	889b      	ldrh	r3, [r3, #4]
 8006812:	2107      	movs	r1, #7
 8006814:	f7fc faa4 	bl	8002d60 <tft_printf.constprop.13>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8006818:	4bae      	ldr	r3, [pc, #696]	; (8006ad4 <TFT_thread.lto_priv.89+0x734>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b03      	cmp	r3, #3
 800681e:	f200 82a3 	bhi.w	8006d68 <TFT_thread.lto_priv.89+0x9c8>
 8006822:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006826:	01f8      	.short	0x01f8
 8006828:	00be016b 	.word	0x00be016b
 800682c:	002d      	.short	0x002d
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 800682e:	6a20      	ldr	r0, [r4, #32]
 8006830:	4aa9      	ldr	r2, [pc, #676]	; (8006ad8 <TFT_thread.lto_priv.89+0x738>)
 8006832:	210a      	movs	r1, #10
 8006834:	4623      	mov	r3, r4
 8006836:	f7fb fa83 	bl	8001d40 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 800683a:	b9e8      	cbnz	r0, 8006878 <TFT_thread.lto_priv.89+0x4d8>
      b = dmaStreamAllocate(spip->dmatx,
 800683c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800683e:	4aa7      	ldr	r2, [pc, #668]	; (8006adc <TFT_thread.lto_priv.89+0x73c>)
 8006840:	210a      	movs	r1, #10
 8006842:	4623      	mov	r3, r4
 8006844:	f7fb fa7c 	bl	8001d40 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8006848:	b990      	cbnz	r0, 8006870 <TFT_thread.lto_priv.89+0x4d0>
      rccEnableSPI2(FALSE);
 800684a:	48a5      	ldr	r0, [pc, #660]	; (8006ae0 <TFT_thread.lto_priv.89+0x740>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800684c:	6a26      	ldr	r6, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800684e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8006850:	6c01      	ldr	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8006852:	69e2      	ldr	r2, [r4, #28]
 8006854:	6837      	ldr	r7, [r6, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8006856:	681e      	ldr	r6, [r3, #0]
 8006858:	6863      	ldr	r3, [r4, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800685a:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 800685c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006860:	6401      	str	r1, [r0, #64]	; 0x40
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8006862:	60ba      	str	r2, [r7, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8006864:	60b2      	str	r2, [r6, #8]
 8006866:	e5cc      	b.n	8006402 <TFT_thread.lto_priv.89+0x62>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006868:	b672      	cpsid	i
 800686a:	4a9e      	ldr	r2, [pc, #632]	; (8006ae4 <TFT_thread.lto_priv.89+0x744>)
 800686c:	62da      	str	r2, [r3, #44]	; 0x2c
 800686e:	e7fe      	b.n	800686e <TFT_thread.lto_priv.89+0x4ce>
 8006870:	b672      	cpsid	i
 8006872:	4b9d      	ldr	r3, [pc, #628]	; (8006ae8 <TFT_thread.lto_priv.89+0x748>)
 8006874:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006876:	e7fe      	b.n	8006876 <TFT_thread.lto_priv.89+0x4d6>
 8006878:	b672      	cpsid	i
 800687a:	4b9b      	ldr	r3, [pc, #620]	; (8006ae8 <TFT_thread.lto_priv.89+0x748>)
 800687c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800687e:	e7fe      	b.n	800687e <TFT_thread.lto_priv.89+0x4de>
 8006880:	2313      	movs	r3, #19
 8006882:	9307      	str	r3, [sp, #28]
 8006884:	2300      	movs	r3, #0
 8006886:	9304      	str	r3, [sp, #16]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8006888:	9b04      	ldr	r3, [sp, #16]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 800688a:	9907      	ldr	r1, [sp, #28]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 800688c:	3307      	adds	r3, #7
 800688e:	b2db      	uxtb	r3, r3
 8006890:	9306      	str	r3, [sp, #24]
 8006892:	b2cb      	uxtb	r3, r1
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006894:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8006898:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 800689a:	2300      	movs	r3, #0
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 800689c:	ea4f 064c 	mov.w	r6, ip, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 80068a0:	9301      	str	r3, [sp, #4]
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
 80068a2:	f89d 7004 	ldrb.w	r7, [sp, #4]
 80068a6:	9803      	ldr	r0, [sp, #12]
 80068a8:	4639      	mov	r1, r7
 80068aa:	f7fe feb1 	bl	8005610 <tft_char_is_changed>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f000 82a8 	beq.w	8006e04 <TFT_thread.lto_priv.89+0xa64>
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 80068b4:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
 80068b8:	f109 0b01 	add.w	fp, r9, #1
 80068bc:	f1bb 0f07 	cmp.w	fp, #7
 80068c0:	f300 82b9 	bgt.w	8006e36 <TFT_thread.lto_priv.89+0xa96>
 80068c4:	2401      	movs	r4, #1
 80068c6:	46a0      	mov	r8, r4
 80068c8:	9602      	str	r6, [sp, #8]
 80068ca:	4626      	mov	r6, r4
 80068cc:	464c      	mov	r4, r9
 80068ce:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80068d2:	e008      	b.n	80068e6 <TFT_thread.lto_priv.89+0x546>
 80068d4:	fa1f f883 	uxth.w	r8, r3
 80068d8:	fa0f f688 	sxth.w	r6, r8
 80068dc:	eb06 0b04 	add.w	fp, r6, r4
 80068e0:	f1bb 0f07 	cmp.w	fp, #7
 80068e4:	dc09      	bgt.n	80068fa <TFT_thread.lto_priv.89+0x55a>
 80068e6:	eb07 0108 	add.w	r1, r7, r8
 80068ea:	b2c9      	uxtb	r1, r1
 80068ec:	4648      	mov	r0, r9
 80068ee:	f7fe fe8f 	bl	8005610 <tft_char_is_changed>
 80068f2:	f108 0301 	add.w	r3, r8, #1
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d1ec      	bne.n	80068d4 <TFT_thread.lto_priv.89+0x534>
 80068fa:	4634      	mov	r4, r6
 80068fc:	fa1f f388 	uxth.w	r3, r8
 8006900:	9e02      	ldr	r6, [sp, #8]
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	0124      	lsls	r4, r4, #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
 8006906:	9f01      	ldr	r7, [sp, #4]
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	9904      	ldr	r1, [sp, #16]
 800690c:	ea4f 120b 	mov.w	r2, fp, lsl #4
 8006910:	0138      	lsls	r0, r7, #4
 8006912:	3a01      	subs	r2, #1
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800691a:	b2bf      	uxth	r7, r7
 800691c:	9701      	str	r7, [sp, #4]
 800691e:	f7fe feef 	bl	8005700 <tft_set_char_pos>
 8006922:	2307      	movs	r3, #7
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	46b3      	mov	fp, r6
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8006928:	2c00      	cmp	r4, #0
 800692a:	f340 825d 	ble.w	8006de8 <TFT_thread.lto_priv.89+0xa48>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	2780      	movs	r7, #128	; 0x80
 8006932:	2600      	movs	r6, #0
 8006934:	411f      	asrs	r7, r3
 8006936:	4630      	mov	r0, r6
								y2 = y+py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006938:	f04f 0810 	mov.w	r8, #16
 800693c:	e01a      	b.n	8006974 <TFT_thread.lto_priv.89+0x5d4>
 800693e:	b21b      	sxth	r3, r3
 8006940:	fb18 3300 	smlabb	r3, r8, r0, r3
 8006944:	3601      	adds	r6, #1
 8006946:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800694a:	423b      	tst	r3, r7
 800694c:	bf15      	itete	ne
 800694e:	4b67      	ldrne	r3, [pc, #412]	; (8006aec <TFT_thread.lto_priv.89+0x74c>)
 8006950:	4b67      	ldreq	r3, [pc, #412]	; (8006af0 <TFT_thread.lto_priv.89+0x750>)
 8006952:	f833 9011 	ldrhne.w	r9, [r3, r1, lsl #1]
 8006956:	f833 9012 	ldrheq.w	r9, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 800695a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 800695e:	f7fe fe9f 	bl	80056a0 <tft_write_data>
 8006962:	b2b6      	uxth	r6, r6
								tft_write_data(clr);
 8006964:	fa5f f089 	uxtb.w	r0, r9
 8006968:	f7fe fe9a 	bl	80056a0 <tft_write_data>
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 800696c:	b230      	sxth	r0, r6
 800696e:	42a0      	cmp	r0, r4
 8006970:	f280 823a 	bge.w	8006de8 <TFT_thread.lto_priv.89+0xa48>
								y2 = y+py/CHAR_HEIGHT;
 8006974:	2800      	cmp	r0, #0
 8006976:	9901      	ldr	r1, [sp, #4]
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006978:	4b5e      	ldr	r3, [pc, #376]	; (8006af4 <TFT_thread.lto_priv.89+0x754>)
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y+py/CHAR_HEIGHT;
 800697a:	4602      	mov	r2, r0
 800697c:	bfb8      	it	lt
 800697e:	f100 020f 	addlt.w	r2, r0, #15
 8006982:	eb01 1222 	add.w	r2, r1, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (py % CHAR_HEIGHT)] & (0x80 >> (CHAR_WIDTH-px-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006986:	b212      	sxth	r2, r2
 8006988:	4003      	ands	r3, r0
 800698a:	eb0b 0002 	add.w	r0, fp, r2
 800698e:	4601      	mov	r1, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	5c28      	ldrb	r0, [r5, r0]
 8006994:	460a      	mov	r2, r1
 8006996:	dad2      	bge.n	800693e <TFT_thread.lto_priv.89+0x59e>
 8006998:	3b01      	subs	r3, #1
 800699a:	f063 030f 	orn	r3, r3, #15
 800699e:	3301      	adds	r3, #1
 80069a0:	e7cd      	b.n	800693e <TFT_thread.lto_priv.89+0x59e>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 80069a2:	2300      	movs	r3, #0
 80069a4:	f04f 0b09 	mov.w	fp, #9
 80069a8:	9303      	str	r3, [sp, #12]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	330f      	adds	r3, #15
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	fa5f f38b 	uxtb.w	r3, fp
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	260f      	movs	r6, #15
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
 80069ba:	b2f7      	uxtb	r7, r6
 80069bc:	4638      	mov	r0, r7
 80069be:	9902      	ldr	r1, [sp, #8]
 80069c0:	f7fe fe26 	bl	8005610 <tft_char_is_changed>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f000 81fb 	beq.w	8006dc0 <TFT_thread.lto_priv.89+0xa20>
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 80069ca:	b234      	sxth	r4, r6
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	f340 823b 	ble.w	8006e48 <TFT_thread.lto_priv.89+0xaa8>
 80069d2:	f04f 0901 	mov.w	r9, #1
 80069d6:	9601      	str	r6, [sp, #4]
 80069d8:	46c8      	mov	r8, r9
 80069da:	4626      	mov	r6, r4
 80069dc:	9c02      	ldr	r4, [sp, #8]
 80069de:	e007      	b.n	80069f0 <TFT_thread.lto_priv.89+0x650>
 80069e0:	fa1f f883 	uxth.w	r8, r3
 80069e4:	fa0f f988 	sxth.w	r9, r8
 80069e8:	ebc9 0306 	rsb	r3, r9, r6
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	db09      	blt.n	8006a04 <TFT_thread.lto_priv.89+0x664>
 80069f0:	ebc8 0007 	rsb	r0, r8, r7
 80069f4:	b2c0      	uxtb	r0, r0
 80069f6:	4621      	mov	r1, r4
 80069f8:	f7fe fe0a 	bl	8005610 <tft_char_is_changed>
 80069fc:	f108 0301 	add.w	r3, r8, #1
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d1ed      	bne.n	80069e0 <TFT_thread.lto_priv.89+0x640>
 8006a04:	4634      	mov	r4, r6
 8006a06:	fa1f f388 	uxth.w	r3, r8
 8006a0a:	9e01      	ldr	r6, [sp, #4]
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
 8006a12:	f1c4 040f 	rsb	r4, r4, #15
 8006a16:	eb04 0209 	add.w	r2, r4, r9
 8006a1a:	00d2      	lsls	r2, r2, #3
 8006a1c:	00e0      	lsls	r0, r4, #3
 8006a1e:	3a01      	subs	r2, #1
 8006a20:	b2b4      	uxth	r4, r6
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006a28:	9903      	ldr	r1, [sp, #12]
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	9401      	str	r4, [sp, #4]
 8006a2e:	f7fe fe67 	bl	8005700 <tft_set_char_pos>
 8006a32:	240f      	movs	r4, #15
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f340 81ba 	ble.w	8006dae <TFT_thread.lto_priv.89+0xa0e>
 8006a3a:	f04f 0900 	mov.w	r9, #0
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006a3e:	2680      	movs	r6, #128	; 0x80
 8006a40:	4649      	mov	r1, r9
 8006a42:	e01f      	b.n	8006a84 <TFT_thread.lto_priv.89+0x6e4>
 8006a44:	b212      	sxth	r2, r2
 8006a46:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8006a4a:	f1c2 0207 	rsb	r2, r2, #7
 8006a4e:	fa46 f202 	asr.w	r2, r6, r2
 8006a52:	4202      	tst	r2, r0
 8006a54:	bf15      	itete	ne
 8006a56:	4b25      	ldrne	r3, [pc, #148]	; (8006aec <TFT_thread.lto_priv.89+0x74c>)
 8006a58:	4a25      	ldreq	r2, [pc, #148]	; (8006af0 <TFT_thread.lto_priv.89+0x750>)
 8006a5a:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8006a5e:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8006a62:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8006a66:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8006a6a:	f7fe fe19 	bl	80056a0 <tft_write_data>
 8006a6e:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8006a72:	fa5f f088 	uxtb.w	r0, r8
 8006a76:	f7fe fe13 	bl	80056a0 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8006a7a:	fa0f f189 	sxth.w	r1, r9
 8006a7e:	42b9      	cmp	r1, r7
 8006a80:	f280 8195 	bge.w	8006dae <TFT_thread.lto_priv.89+0xa0e>
								x2 = x-px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <TFT_thread.lto_priv.89+0x758>)
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8006a86:	2900      	cmp	r1, #0
 8006a88:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006a8a:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x-px/CHAR_WIDTH;
 8006a8e:	bfb8      	it	lt
 8006a90:	1dcb      	addlt	r3, r1, #7
 8006a92:	9901      	ldr	r1, [sp, #4]
 8006a94:	eba1 03e3 	sub.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + (CHAR_HEIGHT-py-1)] & (0x80 >> (CHAR_WIDTH-(px % CHAR_WIDTH)-1)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006a98:	b21b      	sxth	r3, r3
 8006a9a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006a9e:	eb0e 0003 	add.w	r0, lr, r3
 8006aa2:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	5c28      	ldrb	r0, [r5, r0]
 8006aaa:	f04f 0e10 	mov.w	lr, #16
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	dac5      	bge.n	8006a44 <TFT_thread.lto_priv.89+0x6a4>
 8006ab8:	3a01      	subs	r2, #1
 8006aba:	f062 0207 	orn	r2, r2, #7
 8006abe:	3201      	adds	r2, #1
 8006ac0:	e7c0      	b.n	8006a44 <TFT_thread.lto_priv.89+0x6a4>
 8006ac2:	bf00      	nop
 8006ac4:	2000f09c 	.word	0x2000f09c
 8006ac8:	08008dc8 	.word	0x08008dc8
 8006acc:	08008dd0 	.word	0x08008dd0
 8006ad0:	08008dd8 	.word	0x08008dd8
 8006ad4:	2000f098 	.word	0x2000f098
 8006ad8:	08001571 	.word	0x08001571
 8006adc:	08001141 	.word	0x08001141
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	08007710 	.word	0x08007710
 8006ae8:	08007da0 	.word	0x08007da0
 8006aec:	20001320 	.word	0x20001320
 8006af0:	20000894 	.word	0x20000894
 8006af4:	8000000f 	.word	0x8000000f
 8006af8:	80000007 	.word	0x80000007
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8006afc:	2307      	movs	r3, #7
 8006afe:	9305      	str	r3, [sp, #20]
 8006b00:	2300      	movs	r3, #0
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	9306      	str	r3, [sp, #24]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8006b10:	2407      	movs	r4, #7
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
 8006b12:	b2e6      	uxtb	r6, r4
 8006b14:	4631      	mov	r1, r6
 8006b16:	9802      	ldr	r0, [sp, #8]
 8006b18:	f7fe fd7a 	bl	8005610 <tft_char_is_changed>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f000 8132 	beq.w	8006d86 <TFT_thread.lto_priv.89+0x9e6>
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 8006b22:	b227      	sxth	r7, r4
 8006b24:	2f00      	cmp	r7, #0
 8006b26:	f340 818a 	ble.w	8006e3e <TFT_thread.lto_priv.89+0xa9e>
 8006b2a:	f04f 0b01 	mov.w	fp, #1
 8006b2e:	46d8      	mov	r8, fp
 8006b30:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006b34:	e007      	b.n	8006b46 <TFT_thread.lto_priv.89+0x7a6>
 8006b36:	fa1f f883 	uxth.w	r8, r3
 8006b3a:	fa0f fb88 	sxth.w	fp, r8
 8006b3e:	ebcb 0307 	rsb	r3, fp, r7
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db09      	blt.n	8006b5a <TFT_thread.lto_priv.89+0x7ba>
 8006b46:	ebc8 0106 	rsb	r1, r8, r6
 8006b4a:	b2c9      	uxtb	r1, r1
 8006b4c:	4648      	mov	r0, r9
 8006b4e:	f7fe fd5f 	bl	8005610 <tft_char_is_changed>
 8006b52:	f108 0301 	add.w	r3, r8, #1
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1ed      	bne.n	8006b36 <TFT_thread.lto_priv.89+0x796>
 8006b5a:	fa1f f388 	uxth.w	r3, r8
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	ea4f 160b 	mov.w	r6, fp, lsl #4
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8006b64:	f1c7 0707 	rsb	r7, r7, #7
 8006b68:	eb07 020b 	add.w	r2, r7, fp
 8006b6c:	0112      	lsls	r2, r2, #4
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	0138      	lsls	r0, r7, #4
 8006b72:	9906      	ldr	r1, [sp, #24]
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8006b7c:	f7fe fdc0 	bl	8005700 <tft_set_char_pos>
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	eb03 0183 	add.w	r1, r3, r3, lsl #2
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8006b86:	2300      	movs	r3, #0
 8006b88:	b2a4      	uxth	r4, r4
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8006b8a:	ea4f 0b41 	mov.w	fp, r1, lsl #1
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
 8006b8e:	9301      	str	r3, [sp, #4]
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	f340 80ee 	ble.w	8006d72 <TFT_thread.lto_priv.89+0x9d2>
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	f04f 0900 	mov.w	r9, #0
 8006b9c:	2280      	movs	r2, #128	; 0x80
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	fa42 f703 	asr.w	r7, r2, r3
 8006ba4:	e01f      	b.n	8006be6 <TFT_thread.lto_priv.89+0x846>
								y2 = y-py/CHAR_HEIGHT;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	ebc3 1300 	rsb	r3, r3, r0, lsl #4
 8006bac:	48ab      	ldr	r0, [pc, #684]	; (8006e5c <TFT_thread.lto_priv.89+0xabc>)
 8006bae:	4403      	add	r3, r0
 8006bb0:	f109 0901 	add.w	r9, r9, #1
 8006bb4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006bb8:	423b      	tst	r3, r7
 8006bba:	bf15      	itete	ne
 8006bbc:	4ba8      	ldrne	r3, [pc, #672]	; (8006e60 <TFT_thread.lto_priv.89+0xac0>)
 8006bbe:	4ba9      	ldreq	r3, [pc, #676]	; (8006e64 <TFT_thread.lto_priv.89+0xac4>)
 8006bc0:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8006bc4:	f833 8012 	ldrheq.w	r8, [r3, r2, lsl #1]
								tft_write_data(clr >> 8);
 8006bc8:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8006bcc:	f7fe fd68 	bl	80056a0 <tft_write_data>
 8006bd0:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8006bd4:	fa5f f088 	uxtb.w	r0, r8
 8006bd8:	f7fe fd62 	bl	80056a0 <tft_write_data>
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
							for (py = 0; py < char_n*CHAR_HEIGHT; py++) {
 8006bdc:	fa0f f189 	sxth.w	r1, r9
 8006be0:	42b1      	cmp	r1, r6
 8006be2:	f280 80c6 	bge.w	8006d72 <TFT_thread.lto_priv.89+0x9d2>
								y2 = y-py/CHAR_HEIGHT;
 8006be6:	2900      	cmp	r1, #0
 8006be8:	460a      	mov	r2, r1
 8006bea:	bfb8      	it	lt
 8006bec:	f101 020f 	addlt.w	r2, r1, #15
 8006bf0:	eba4 1222 	sub.w	r2, r4, r2, asr #4
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + CHAR_HEIGHT-(py % CHAR_HEIGHT)-1] & (0x80 >> px) ? text_color[x2][y2] : bg_color[x2][y2];
 8006bf4:	b212      	sxth	r2, r2
 8006bf6:	eb0b 0002 	add.w	r0, fp, r2
 8006bfa:	4b9b      	ldr	r3, [pc, #620]	; (8006e68 <TFT_thread.lto_priv.89+0xac8>)
 8006bfc:	400b      	ands	r3, r1
 8006bfe:	4601      	mov	r1, r0
 8006c00:	5c28      	ldrb	r0, [r5, r0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f100 0001 	add.w	r0, r0, #1
 8006c08:	460a      	mov	r2, r1
 8006c0a:	dacc      	bge.n	8006ba6 <TFT_thread.lto_priv.89+0x806>
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f063 030f 	orn	r3, r3, #15
 8006c12:	3301      	adds	r3, #1
 8006c14:	e7c7      	b.n	8006ba6 <TFT_thread.lto_priv.89+0x806>
	uint16_t clr;

	if (!tft_enabled)
		return;

	switch (tft_orientation) {
 8006c16:	230f      	movs	r3, #15
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	f04f 0b00 	mov.w	fp, #0
 8006c1e:	fa5f f38b 	uxtb.w	r3, fp
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	9305      	str	r3, [sp, #20]
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9301      	str	r3, [sp, #4]

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
 8006c2e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8006c32:	9902      	ldr	r1, [sp, #8]
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7fe fceb 	bl	8005610 <tft_char_is_changed>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f000 8082 	beq.w	8006d44 <TFT_thread.lto_priv.89+0x9a4>
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 8006c40:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8006c44:	f108 0901 	add.w	r9, r8, #1
 8006c48:	f1b9 0f0f 	cmp.w	r9, #15
 8006c4c:	f300 8101 	bgt.w	8006e52 <TFT_thread.lto_priv.89+0xab2>
 8006c50:	2601      	movs	r6, #1
 8006c52:	4637      	mov	r7, r6
 8006c54:	f8cd b010 	str.w	fp, [sp, #16]
 8006c58:	46b3      	mov	fp, r6
 8006c5a:	4646      	mov	r6, r8
 8006c5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c60:	e007      	b.n	8006c72 <TFT_thread.lto_priv.89+0x8d2>
 8006c62:	b29f      	uxth	r7, r3
 8006c64:	fa0f fb87 	sxth.w	fp, r7
 8006c68:	eb0b 0906 	add.w	r9, fp, r6
 8006c6c:	f1b9 0f0f 	cmp.w	r9, #15
 8006c70:	dc07      	bgt.n	8006c82 <TFT_thread.lto_priv.89+0x8e2>
 8006c72:	19e0      	adds	r0, r4, r7
 8006c74:	b2c0      	uxtb	r0, r0
 8006c76:	4641      	mov	r1, r8
 8006c78:	f7fe fcca 	bl	8005610 <tft_char_is_changed>
 8006c7c:	1c7b      	adds	r3, r7, #1
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1ef      	bne.n	8006c62 <TFT_thread.lto_priv.89+0x8c2>
 8006c82:	465e      	mov	r6, fp
 8006c84:	b2bb      	uxth	r3, r7
 8006c86:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	00f6      	lsls	r6, r6, #3
								break;
							} else {
								char_n++;
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
 8006c8e:	9c01      	ldr	r4, [sp, #4]
 8006c90:	9905      	ldr	r1, [sp, #20]
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c98:	00e0      	lsls	r0, r4, #3
 8006c9a:	3a01      	subs	r2, #1
 8006c9c:	b2a4      	uxth	r4, r4
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006ca4:	9401      	str	r4, [sp, #4]
 8006ca6:	f7fe fd2b 	bl	8005700 <tft_set_char_pos>
 8006caa:	2400      	movs	r4, #0
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	dd40      	ble.n	8006d32 <TFT_thread.lto_priv.89+0x992>
 8006cb0:	f04f 0900 	mov.w	r9, #0
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006cb4:	2780      	movs	r7, #128	; 0x80
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	e01c      	b.n	8006cf4 <TFT_thread.lto_priv.89+0x954>
 8006cba:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8006cbe:	b212      	sxth	r2, r2
 8006cc0:	fa47 f202 	asr.w	r2, r7, r2
 8006cc4:	4202      	tst	r2, r0
 8006cc6:	bf15      	itete	ne
 8006cc8:	4b65      	ldrne	r3, [pc, #404]	; (8006e60 <TFT_thread.lto_priv.89+0xac0>)
 8006cca:	4a66      	ldreq	r2, [pc, #408]	; (8006e64 <TFT_thread.lto_priv.89+0xac4>)
 8006ccc:	f833 8011 	ldrhne.w	r8, [r3, r1, lsl #1]
 8006cd0:	f832 8013 	ldrheq.w	r8, [r2, r3, lsl #1]
 8006cd4:	f109 0901 	add.w	r9, r9, #1
								tft_write_data(clr >> 8);
 8006cd8:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8006cdc:	f7fe fce0 	bl	80056a0 <tft_write_data>
 8006ce0:	fa1f f989 	uxth.w	r9, r9
								tft_write_data(clr);
 8006ce4:	fa5f f088 	uxtb.w	r0, r8
 8006ce8:	f7fe fcda 	bl	80056a0 <tft_write_data>
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
 8006cec:	fa0f f189 	sxth.w	r1, r9
 8006cf0:	42b1      	cmp	r1, r6
 8006cf2:	da1e      	bge.n	8006d32 <TFT_thread.lto_priv.89+0x992>
								x2 = x+px/CHAR_WIDTH;
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006cf4:	4a5d      	ldr	r2, [pc, #372]	; (8006e6c <TFT_thread.lto_priv.89+0xacc>)
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	460b      	mov	r3, r1
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006cfa:	ea02 0201 	and.w	r2, r2, r1
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
							for (px = 0; px < char_n*CHAR_WIDTH; px++) {
								x2 = x+px/CHAR_WIDTH;
 8006cfe:	bfb8      	it	lt
 8006d00:	1dcb      	addlt	r3, r1, #7
 8006d02:	9901      	ldr	r1, [sp, #4]
 8006d04:	eb01 03e3 	add.w	r3, r1, r3, asr #3
								clr = ascii_8x16[((text[x2][y2] - STARTING_ASCII) * CHAR_HEIGHT) + py] & (0x80 >> (px % CHAR_WIDTH)) ? text_color[x2][y2] : bg_color[x2][y2];
 8006d08:	b21b      	sxth	r3, r3
 8006d0a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006d0e:	eb0e 0003 	add.w	r0, lr, r3
 8006d12:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8006d16:	4601      	mov	r1, r0
 8006d18:	5c28      	ldrb	r0, [r5, r0]
 8006d1a:	f04f 0e10 	mov.w	lr, #16
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	fb1e 4000 	smlabb	r0, lr, r0, r4
 8006d24:	460b      	mov	r3, r1
 8006d26:	dac8      	bge.n	8006cba <TFT_thread.lto_priv.89+0x91a>
 8006d28:	3a01      	subs	r2, #1
 8006d2a:	f062 0207 	orn	r2, r2, #7
 8006d2e:	3201      	adds	r2, #1
 8006d30:	e7c3      	b.n	8006cba <TFT_thread.lto_priv.89+0x91a>
 8006d32:	3401      	adds	r4, #1
							}
						}
						tft_set_char_pos(x*CHAR_WIDTH, y*CHAR_HEIGHT, (x+char_n)*CHAR_WIDTH-1, (y+1)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 8006d34:	2c10      	cmp	r4, #16
 8006d36:	d1b9      	bne.n	8006cac <TFT_thread.lto_priv.89+0x90c>
 8006d38:	9b01      	ldr	r3, [sp, #4]
 8006d3a:	1e5f      	subs	r7, r3, #1
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x += char_n-1;
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	443b      	add	r3, r7
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	9301      	str	r3, [sp, #4]
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
 8006d44:	9f01      	ldr	r7, [sp, #4]
 8006d46:	3701      	adds	r7, #1
 8006d48:	b2bb      	uxth	r3, r7
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	2b0f      	cmp	r3, #15
 8006d50:	f77f af6d 	ble.w	8006c2e <TFT_thread.lto_priv.89+0x88e>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	f10b 0b01 	add.w	fp, fp, #1
 8006d5a:	3310      	adds	r3, #16
 8006d5c:	b2db      	uxtb	r3, r3
	if (!tft_enabled)
		return;

	switch (tft_orientation) {
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
 8006d5e:	f1bb 0f0a 	cmp.w	fp, #10
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	f47f af5b 	bne.w	8006c1e <TFT_thread.lto_priv.89+0x87e>
    tft_update();

    chThdSleepMilliseconds(100);
 8006d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d6c:	f7fd fde8 	bl	8004940 <chThdSleep>
 8006d70:	e505      	b.n	800677e <TFT_thread.lto_priv.89+0x3de>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	3301      	adds	r3, #1
							}
						}
						tft_set_char_pos((CHAR_MAX_Y_HORIZONTAL-y-1)*CHAR_HEIGHT, x*CHAR_WIDTH, (CHAR_MAX_Y_HORIZONTAL-y-1+char_n)*CHAR_HEIGHT-1, (x+1)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	f47f af09 	bne.w	8006b90 <TFT_thread.lto_priv.89+0x7f0>
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y -= char_n-1;
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	3401      	adds	r4, #1
 8006d82:	1ae4      	subs	r4, r4, r3
 8006d84:	b2a4      	uxth	r4, r4
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
 8006d86:	3c01      	subs	r4, #1
 8006d88:	b2a4      	uxth	r4, r4
 8006d8a:	0422      	lsls	r2, r4, #16
 8006d8c:	f57f aec1 	bpl.w	8006b12 <TFT_thread.lto_priv.89+0x772>
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	9a03      	ldr	r2, [sp, #12]
 8006d94:	3308      	adds	r3, #8
 8006d96:	3201      	adds	r2, #1
 8006d98:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
 8006d9a:	2a14      	cmp	r2, #20
 8006d9c:	9203      	str	r2, [sp, #12]
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	f47f aeb0 	bne.w	8006b04 <TFT_thread.lto_priv.89+0x764>
 8006da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006da8:	f7fd fdca 	bl	8004940 <chThdSleep>
 8006dac:	e4e7      	b.n	800677e <TFT_thread.lto_priv.89+0x3de>
							}
						}
						tft_set_char_pos((CHAR_MAX_X_VERTICAL-x-1)*CHAR_WIDTH, (CHAR_MAX_Y_VERTICAL-y-1)*CHAR_HEIGHT, (CHAR_MAX_X_VERTICAL-x-1+char_n)*CHAR_WIDTH-1, (CHAR_MAX_Y_VERTICAL-y)*CHAR_HEIGHT-1);
						y2 = y;

            for (py = 0; py < CHAR_HEIGHT; py++) {
 8006dae:	f114 34ff 	adds.w	r4, r4, #4294967295
 8006db2:	f4bf ae3f 	bcs.w	8006a34 <TFT_thread.lto_priv.89+0x694>
 8006db6:	9e01      	ldr	r6, [sp, #4]
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						x -= char_n-1;
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	3601      	adds	r6, #1
 8006dbc:	1af6      	subs	r6, r6, r3
 8006dbe:	b2b6      	uxth	r6, r6
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	b2b6      	uxth	r6, r6
 8006dc4:	0433      	lsls	r3, r6, #16
 8006dc6:	f57f adf8 	bpl.w	80069ba <TFT_thread.lto_priv.89+0x61a>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dd0:	3310      	adds	r3, #16
 8006dd2:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
 8006dd4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	f47f ade6 	bne.w	80069aa <TFT_thread.lto_priv.89+0x60a>
 8006dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006de2:	f7fd fdad 	bl	8004940 <chThdSleep>
 8006de6:	e4ca      	b.n	800677e <TFT_thread.lto_priv.89+0x3de>
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	9302      	str	r3, [sp, #8]
							}
						}
						tft_set_char_pos(y*CHAR_HEIGHT, (CHAR_MAX_X_HORIZONTAL-x-1)*CHAR_WIDTH, (y+char_n)*CHAR_HEIGHT-1, (CHAR_MAX_X_HORIZONTAL-x)*CHAR_WIDTH-1);
						x2 = x;

            for (px = 0; px < CHAR_WIDTH; px++) {
 8006dee:	3301      	adds	r3, #1
 8006df0:	f47f ad9a 	bne.w	8006928 <TFT_thread.lto_priv.89+0x588>
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	f103 38ff 	add.w	r8, r3, #4294967295
								tft_write_data(clr >> 8);
								tft_write_data(clr);
							}
						}

						y += char_n-1;
 8006dfa:	9b05      	ldr	r3, [sp, #20]
 8006dfc:	4443      	add	r3, r8
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	465e      	mov	r6, fp
 8006e02:	9301      	str	r3, [sp, #4]
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	f103 0801 	add.w	r8, r3, #1
 8006e0a:	fa1f f388 	uxth.w	r3, r8
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	b21b      	sxth	r3, r3
 8006e12:	2b07      	cmp	r3, #7
 8006e14:	f77f ad45 	ble.w	80068a2 <TFT_thread.lto_priv.89+0x502>
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	9a07      	ldr	r2, [sp, #28]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	9207      	str	r2, [sp, #28]
 8006e22:	b2db      	uxtb	r3, r3
					}
				}
			}
			break;
		case 3:
			for (x = CHAR_MAX_X_HORIZONTAL-1; x >= 0; x--) {
 8006e24:	3201      	adds	r2, #1
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	f47f ad2e 	bne.w	8006888 <TFT_thread.lto_priv.89+0x4e8>
 8006e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e30:	f7fd fd86 	bl	8004940 <chThdSleep>
 8006e34:	e4a3      	b.n	800677e <TFT_thread.lto_priv.89+0x3de>
				for (y = 0; y < CHAR_MAX_Y_HORIZONTAL; y++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y+char_n < CHAR_MAX_Y_HORIZONTAL && tft_char_is_changed(x, y+char_n)) {
 8006e36:	2301      	movs	r3, #1
 8006e38:	2410      	movs	r4, #16
 8006e3a:	9305      	str	r3, [sp, #20]
 8006e3c:	e563      	b.n	8006906 <TFT_thread.lto_priv.89+0x566>
		case 1:
			for (x = 0; x < CHAR_MAX_X_HORIZONTAL; x++) {
				for (y = CHAR_MAX_Y_HORIZONTAL-1; y >= 0; y--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (y-char_n > -1 && tft_char_is_changed(x, y-char_n)) {
 8006e3e:	2301      	movs	r3, #1
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	469b      	mov	fp, r3
 8006e44:	2610      	movs	r6, #16
 8006e46:	e68d      	b.n	8006b64 <TFT_thread.lto_priv.89+0x7c4>
		case 2:
			for (y = CHAR_MAX_Y_VERTICAL-1; y >= 0; y--) {
				for (x = CHAR_MAX_X_VERTICAL-1; x >= 0; x--) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x-char_n > -1 && tft_char_is_changed(x-char_n, y)) {
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	2708      	movs	r7, #8
 8006e50:	e5df      	b.n	8006a12 <TFT_thread.lto_priv.89+0x672>
		case 0:
			for (y = 0; y < CHAR_MAX_Y_VERTICAL; y++) {
				for (x = 0; x < CHAR_MAX_X_VERTICAL; x++) {
					if (tft_char_is_changed(x, y)) {
						char_n = 1;
						while (x+char_n < CHAR_MAX_X_VERTICAL && tft_char_is_changed(x+char_n, y)) {
 8006e52:	2301      	movs	r3, #1
 8006e54:	2608      	movs	r6, #8
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	e719      	b.n	8006c8e <TFT_thread.lto_priv.89+0x8ee>
 8006e5a:	bf00      	nop
 8006e5c:	08007db0 	.word	0x08007db0
 8006e60:	20001320 	.word	0x20001320
 8006e64:	20000894 	.word	0x20000894
 8006e68:	8000000f 	.word	0x8000000f
 8006e6c:	80000007 	.word	0x80000007

08006e70 <abs>:
 8006e70:	2800      	cmp	r0, #0
 8006e72:	bfb8      	it	lt
 8006e74:	4240      	neglt	r0, r0
 8006e76:	4770      	bx	lr
	...

08006e80 <memset>:
 8006e80:	b470      	push	{r4, r5, r6}
 8006e82:	0784      	lsls	r4, r0, #30
 8006e84:	d046      	beq.n	8006f14 <memset+0x94>
 8006e86:	1e54      	subs	r4, r2, #1
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d041      	beq.n	8006f10 <memset+0x90>
 8006e8c:	b2cd      	uxtb	r5, r1
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e002      	b.n	8006e98 <memset+0x18>
 8006e92:	1e62      	subs	r2, r4, #1
 8006e94:	b3e4      	cbz	r4, 8006f10 <memset+0x90>
 8006e96:	4614      	mov	r4, r2
 8006e98:	f803 5b01 	strb.w	r5, [r3], #1
 8006e9c:	079a      	lsls	r2, r3, #30
 8006e9e:	d1f8      	bne.n	8006e92 <memset+0x12>
 8006ea0:	2c03      	cmp	r4, #3
 8006ea2:	d92e      	bls.n	8006f02 <memset+0x82>
 8006ea4:	b2cd      	uxtb	r5, r1
 8006ea6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006eaa:	2c0f      	cmp	r4, #15
 8006eac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006eb0:	d919      	bls.n	8006ee6 <memset+0x66>
 8006eb2:	f103 0210 	add.w	r2, r3, #16
 8006eb6:	4626      	mov	r6, r4
 8006eb8:	3e10      	subs	r6, #16
 8006eba:	2e0f      	cmp	r6, #15
 8006ebc:	f842 5c10 	str.w	r5, [r2, #-16]
 8006ec0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006ec4:	f842 5c08 	str.w	r5, [r2, #-8]
 8006ec8:	f842 5c04 	str.w	r5, [r2, #-4]
 8006ecc:	f102 0210 	add.w	r2, r2, #16
 8006ed0:	d8f2      	bhi.n	8006eb8 <memset+0x38>
 8006ed2:	f1a4 0210 	sub.w	r2, r4, #16
 8006ed6:	f022 020f 	bic.w	r2, r2, #15
 8006eda:	f004 040f 	and.w	r4, r4, #15
 8006ede:	3210      	adds	r2, #16
 8006ee0:	2c03      	cmp	r4, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	d90d      	bls.n	8006f02 <memset+0x82>
 8006ee6:	461e      	mov	r6, r3
 8006ee8:	4622      	mov	r2, r4
 8006eea:	3a04      	subs	r2, #4
 8006eec:	2a03      	cmp	r2, #3
 8006eee:	f846 5b04 	str.w	r5, [r6], #4
 8006ef2:	d8fa      	bhi.n	8006eea <memset+0x6a>
 8006ef4:	1f22      	subs	r2, r4, #4
 8006ef6:	f022 0203 	bic.w	r2, r2, #3
 8006efa:	3204      	adds	r2, #4
 8006efc:	4413      	add	r3, r2
 8006efe:	f004 0403 	and.w	r4, r4, #3
 8006f02:	b12c      	cbz	r4, 8006f10 <memset+0x90>
 8006f04:	b2c9      	uxtb	r1, r1
 8006f06:	441c      	add	r4, r3
 8006f08:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d1fb      	bne.n	8006f08 <memset+0x88>
 8006f10:	bc70      	pop	{r4, r5, r6}
 8006f12:	4770      	bx	lr
 8006f14:	4614      	mov	r4, r2
 8006f16:	4603      	mov	r3, r0
 8006f18:	e7c2      	b.n	8006ea0 <memset+0x20>
 8006f1a:	bf00      	nop
 8006f1c:	0000      	movs	r0, r0
	...

08006f20 <strpbrk>:
 8006f20:	b430      	push	{r4, r5}
 8006f22:	7804      	ldrb	r4, [r0, #0]
 8006f24:	b1ec      	cbz	r4, 8006f62 <strpbrk+0x42>
 8006f26:	780d      	ldrb	r5, [r1, #0]
 8006f28:	b1ad      	cbz	r5, 8006f56 <strpbrk+0x36>
 8006f2a:	42ac      	cmp	r4, r5
 8006f2c:	d00e      	beq.n	8006f4c <strpbrk+0x2c>
 8006f2e:	460a      	mov	r2, r1
 8006f30:	e001      	b.n	8006f36 <strpbrk+0x16>
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d009      	beq.n	8006f4a <strpbrk+0x2a>
 8006f36:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f9      	bne.n	8006f32 <strpbrk+0x12>
 8006f3e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006f42:	2c00      	cmp	r4, #0
 8006f44:	d1f0      	bne.n	8006f28 <strpbrk+0x8>
 8006f46:	7815      	ldrb	r5, [r2, #0]
 8006f48:	e000      	b.n	8006f4c <strpbrk+0x2c>
 8006f4a:	4625      	mov	r5, r4
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	bf08      	it	eq
 8006f50:	2000      	moveq	r0, #0
 8006f52:	bc30      	pop	{r4, r5}
 8006f54:	4770      	bx	lr
 8006f56:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	d1e3      	bne.n	8006f28 <strpbrk+0x8>
 8006f60:	e7f1      	b.n	8006f46 <strpbrk+0x26>
 8006f62:	4620      	mov	r0, r4
 8006f64:	bc30      	pop	{r4, r5}
 8006f66:	4770      	bx	lr
	...

08006f70 <strspn>:
 8006f70:	b470      	push	{r4, r5, r6}
 8006f72:	7804      	ldrb	r4, [r0, #0]
 8006f74:	b1a4      	cbz	r4, 8006fa0 <strspn+0x30>
 8006f76:	780e      	ldrb	r6, [r1, #0]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	b14e      	cbz	r6, 8006f90 <strspn+0x20>
 8006f7c:	42b4      	cmp	r4, r6
 8006f7e:	d00a      	beq.n	8006f96 <strspn+0x26>
 8006f80:	460a      	mov	r2, r1
 8006f82:	e001      	b.n	8006f88 <strspn+0x18>
 8006f84:	429c      	cmp	r4, r3
 8006f86:	d006      	beq.n	8006f96 <strspn+0x26>
 8006f88:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f9      	bne.n	8006f84 <strspn+0x14>
 8006f90:	1a28      	subs	r0, r5, r0
 8006f92:	bc70      	pop	{r4, r5, r6}
 8006f94:	4770      	bx	lr
 8006f96:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d1ed      	bne.n	8006f7a <strspn+0xa>
 8006f9e:	e7f7      	b.n	8006f90 <strspn+0x20>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e7f6      	b.n	8006f92 <strspn+0x22>
	...

08006fb0 <atan>:
 8006fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ec55 4b10 	vmov	r4, r5, d0
 8006fb8:	4bcd      	ldr	r3, [pc, #820]	; (80072f0 <atan+0x340>)
 8006fba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fbe:	429e      	cmp	r6, r3
 8006fc0:	46ab      	mov	fp, r5
 8006fc2:	dd10      	ble.n	8006fe6 <atan+0x36>
 8006fc4:	4bcb      	ldr	r3, [pc, #812]	; (80072f4 <atan+0x344>)
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	f300 80b2 	bgt.w	8007130 <atan+0x180>
 8006fcc:	f000 80ad 	beq.w	800712a <atan+0x17a>
 8006fd0:	f1bb 0f00 	cmp.w	fp, #0
 8006fd4:	f340 80f6 	ble.w	80071c4 <atan+0x214>
 8006fd8:	a5a9      	add	r5, pc, #676	; (adr r5, 8007280 <atan+0x2d0>)
 8006fda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fde:	ec45 4b10 	vmov	d0, r4, r5
 8006fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	4bc4      	ldr	r3, [pc, #784]	; (80072f8 <atan+0x348>)
 8006fe8:	429e      	cmp	r6, r3
 8006fea:	f300 80c0 	bgt.w	800716e <atan+0x1be>
 8006fee:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006ff2:	429e      	cmp	r6, r3
 8006ff4:	f340 80a8 	ble.w	8007148 <atan+0x198>
 8006ff8:	f04f 3aff 	mov.w	sl, #4294967295
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	462b      	mov	r3, r5
 8007000:	4620      	mov	r0, r4
 8007002:	4629      	mov	r1, r5
 8007004:	f7f9 fb44 	bl	8000690 <__aeabi_dmul>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4680      	mov	r8, r0
 800700e:	4689      	mov	r9, r1
 8007010:	f7f9 fb3e 	bl	8000690 <__aeabi_dmul>
 8007014:	a39c      	add	r3, pc, #624	; (adr r3, 8007288 <atan+0x2d8>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	f7f9 fb37 	bl	8000690 <__aeabi_dmul>
 8007022:	a39b      	add	r3, pc, #620	; (adr r3, 8007290 <atan+0x2e0>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 f980 	bl	800032c <__adddf3>
 800702c:	4632      	mov	r2, r6
 800702e:	463b      	mov	r3, r7
 8007030:	f7f9 fb2e 	bl	8000690 <__aeabi_dmul>
 8007034:	a398      	add	r3, pc, #608	; (adr r3, 8007298 <atan+0x2e8>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f977 	bl	800032c <__adddf3>
 800703e:	4632      	mov	r2, r6
 8007040:	463b      	mov	r3, r7
 8007042:	f7f9 fb25 	bl	8000690 <__aeabi_dmul>
 8007046:	a396      	add	r3, pc, #600	; (adr r3, 80072a0 <atan+0x2f0>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 f96e 	bl	800032c <__adddf3>
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	f7f9 fb1c 	bl	8000690 <__aeabi_dmul>
 8007058:	a393      	add	r3, pc, #588	; (adr r3, 80072a8 <atan+0x2f8>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 f965 	bl	800032c <__adddf3>
 8007062:	4632      	mov	r2, r6
 8007064:	463b      	mov	r3, r7
 8007066:	f7f9 fb13 	bl	8000690 <__aeabi_dmul>
 800706a:	a391      	add	r3, pc, #580	; (adr r3, 80072b0 <atan+0x300>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 f95c 	bl	800032c <__adddf3>
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	f7f9 fb0a 	bl	8000690 <__aeabi_dmul>
 800707c:	a38e      	add	r3, pc, #568	; (adr r3, 80072b8 <atan+0x308>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	4680      	mov	r8, r0
 8007084:	4689      	mov	r9, r1
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 fb01 	bl	8000690 <__aeabi_dmul>
 800708e:	a38c      	add	r3, pc, #560	; (adr r3, 80072c0 <atan+0x310>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 f948 	bl	8000328 <__aeabi_dsub>
 8007098:	4632      	mov	r2, r6
 800709a:	463b      	mov	r3, r7
 800709c:	f7f9 faf8 	bl	8000690 <__aeabi_dmul>
 80070a0:	a389      	add	r3, pc, #548	; (adr r3, 80072c8 <atan+0x318>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 f93f 	bl	8000328 <__aeabi_dsub>
 80070aa:	4632      	mov	r2, r6
 80070ac:	463b      	mov	r3, r7
 80070ae:	f7f9 faef 	bl	8000690 <__aeabi_dmul>
 80070b2:	a387      	add	r3, pc, #540	; (adr r3, 80072d0 <atan+0x320>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 f936 	bl	8000328 <__aeabi_dsub>
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	f7f9 fae6 	bl	8000690 <__aeabi_dmul>
 80070c4:	a384      	add	r3, pc, #528	; (adr r3, 80072d8 <atan+0x328>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f7f9 f92d 	bl	8000328 <__aeabi_dsub>
 80070ce:	4632      	mov	r2, r6
 80070d0:	463b      	mov	r3, r7
 80070d2:	f7f9 fadd 	bl	8000690 <__aeabi_dmul>
 80070d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	d079      	beq.n	80071d4 <atan+0x224>
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 f922 	bl	800032c <__adddf3>
 80070e8:	4622      	mov	r2, r4
 80070ea:	462b      	mov	r3, r5
 80070ec:	f7f9 fad0 	bl	8000690 <__aeabi_dmul>
 80070f0:	4e82      	ldr	r6, [pc, #520]	; (80072fc <atan+0x34c>)
 80070f2:	4b83      	ldr	r3, [pc, #524]	; (8007300 <atan+0x350>)
 80070f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80070f8:	4456      	add	r6, sl
 80070fa:	449a      	add	sl, r3
 80070fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007100:	f7f9 f912 	bl	8000328 <__aeabi_dsub>
 8007104:	4622      	mov	r2, r4
 8007106:	462b      	mov	r3, r5
 8007108:	f7f9 f90e 	bl	8000328 <__aeabi_dsub>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007114:	f7f9 f908 	bl	8000328 <__aeabi_dsub>
 8007118:	f1bb 0f00 	cmp.w	fp, #0
 800711c:	db56      	blt.n	80071cc <atan+0x21c>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	ec45 4b10 	vmov	d0, r4, r5
 8007126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	2c00      	cmp	r4, #0
 800712c:	f43f af50 	beq.w	8006fd0 <atan+0x20>
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	4622      	mov	r2, r4
 8007136:	462b      	mov	r3, r5
 8007138:	f7f9 f8f8 	bl	800032c <__adddf3>
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	ec45 4b10 	vmov	d0, r4, r5
 8007144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	a365      	add	r3, pc, #404	; (adr r3, 80072e0 <atan+0x330>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	ee10 0a10 	vmov	r0, s0
 8007152:	4629      	mov	r1, r5
 8007154:	f7f9 f8ea 	bl	800032c <__adddf3>
 8007158:	2200      	movs	r2, #0
 800715a:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <atan+0x354>)
 800715c:	f7f9 ff8e 	bl	800107c <__aeabi_dcmpgt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f43f af49 	beq.w	8006ff8 <atan+0x48>
 8007166:	ec45 4b10 	vmov	d0, r4, r5
 800716a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	f000 f8d7 	bl	8007320 <fabs>
 8007172:	4b65      	ldr	r3, [pc, #404]	; (8007308 <atan+0x358>)
 8007174:	429e      	cmp	r6, r3
 8007176:	ec55 4b10 	vmov	r4, r5, d0
 800717a:	dc3c      	bgt.n	80071f6 <atan+0x246>
 800717c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007180:	429e      	cmp	r6, r3
 8007182:	ee10 0a10 	vmov	r0, s0
 8007186:	4629      	mov	r1, r5
 8007188:	dc62      	bgt.n	8007250 <atan+0x2a0>
 800718a:	ee10 2a10 	vmov	r2, s0
 800718e:	462b      	mov	r3, r5
 8007190:	f7f9 f8cc 	bl	800032c <__adddf3>
 8007194:	2200      	movs	r2, #0
 8007196:	4b5b      	ldr	r3, [pc, #364]	; (8007304 <atan+0x354>)
 8007198:	f7f9 f8c6 	bl	8000328 <__aeabi_dsub>
 800719c:	2200      	movs	r2, #0
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	4620      	mov	r0, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071aa:	f7f9 f8bf 	bl	800032c <__adddf3>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4630      	mov	r0, r6
 80071b4:	4639      	mov	r1, r7
 80071b6:	f7f9 fb95 	bl	80008e4 <__aeabi_ddiv>
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	4604      	mov	r4, r0
 80071c0:	460d      	mov	r5, r1
 80071c2:	e71b      	b.n	8006ffc <atan+0x4c>
 80071c4:	a548      	add	r5, pc, #288	; (adr r5, 80072e8 <atan+0x338>)
 80071c6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071ca:	e7b9      	b.n	8007140 <atan+0x190>
 80071cc:	4604      	mov	r4, r0
 80071ce:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80071d2:	e7b5      	b.n	8007140 <atan+0x190>
 80071d4:	4640      	mov	r0, r8
 80071d6:	4649      	mov	r1, r9
 80071d8:	f7f9 f8a8 	bl	800032c <__adddf3>
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	f7f9 fa56 	bl	8000690 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4620      	mov	r0, r4
 80071ea:	4629      	mov	r1, r5
 80071ec:	f7f9 f89c 	bl	8000328 <__aeabi_dsub>
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	e7a4      	b.n	8007140 <atan+0x190>
 80071f6:	4b45      	ldr	r3, [pc, #276]	; (800730c <atan+0x35c>)
 80071f8:	429e      	cmp	r6, r3
 80071fa:	dc1d      	bgt.n	8007238 <atan+0x288>
 80071fc:	ee10 0a10 	vmov	r0, s0
 8007200:	4629      	mov	r1, r5
 8007202:	2200      	movs	r2, #0
 8007204:	4b42      	ldr	r3, [pc, #264]	; (8007310 <atan+0x360>)
 8007206:	f7f9 f88f 	bl	8000328 <__aeabi_dsub>
 800720a:	2200      	movs	r2, #0
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	4b3e      	ldr	r3, [pc, #248]	; (8007310 <atan+0x360>)
 8007216:	f7f9 fa3b 	bl	8000690 <__aeabi_dmul>
 800721a:	2200      	movs	r2, #0
 800721c:	4b39      	ldr	r3, [pc, #228]	; (8007304 <atan+0x354>)
 800721e:	f7f9 f885 	bl	800032c <__adddf3>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 fb5b 	bl	80008e4 <__aeabi_ddiv>
 800722e:	f04f 0a02 	mov.w	sl, #2
 8007232:	4604      	mov	r4, r0
 8007234:	460d      	mov	r5, r1
 8007236:	e6e1      	b.n	8006ffc <atan+0x4c>
 8007238:	462b      	mov	r3, r5
 800723a:	ee10 2a10 	vmov	r2, s0
 800723e:	2000      	movs	r0, #0
 8007240:	4934      	ldr	r1, [pc, #208]	; (8007314 <atan+0x364>)
 8007242:	f7f9 fb4f 	bl	80008e4 <__aeabi_ddiv>
 8007246:	f04f 0a03 	mov.w	sl, #3
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	e6d5      	b.n	8006ffc <atan+0x4c>
 8007250:	2200      	movs	r2, #0
 8007252:	4b2c      	ldr	r3, [pc, #176]	; (8007304 <atan+0x354>)
 8007254:	f7f9 f868 	bl	8000328 <__aeabi_dsub>
 8007258:	2200      	movs	r2, #0
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	4b28      	ldr	r3, [pc, #160]	; (8007304 <atan+0x354>)
 8007264:	f7f9 f862 	bl	800032c <__adddf3>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fb38 	bl	80008e4 <__aeabi_ddiv>
 8007274:	f04f 0a01 	mov.w	sl, #1
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	e6be      	b.n	8006ffc <atan+0x4c>
 800727e:	bf00      	nop
 8007280:	54442d18 	.word	0x54442d18
 8007284:	3ff921fb 	.word	0x3ff921fb
 8007288:	e322da11 	.word	0xe322da11
 800728c:	3f90ad3a 	.word	0x3f90ad3a
 8007290:	24760deb 	.word	0x24760deb
 8007294:	3fa97b4b 	.word	0x3fa97b4b
 8007298:	a0d03d51 	.word	0xa0d03d51
 800729c:	3fb10d66 	.word	0x3fb10d66
 80072a0:	c54c206e 	.word	0xc54c206e
 80072a4:	3fb745cd 	.word	0x3fb745cd
 80072a8:	920083ff 	.word	0x920083ff
 80072ac:	3fc24924 	.word	0x3fc24924
 80072b0:	5555550d 	.word	0x5555550d
 80072b4:	3fd55555 	.word	0x3fd55555
 80072b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80072bc:	bfa2b444 	.word	0xbfa2b444
 80072c0:	52defd9a 	.word	0x52defd9a
 80072c4:	3fadde2d 	.word	0x3fadde2d
 80072c8:	af749a6d 	.word	0xaf749a6d
 80072cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80072d0:	fe231671 	.word	0xfe231671
 80072d4:	3fbc71c6 	.word	0x3fbc71c6
 80072d8:	9998ebc4 	.word	0x9998ebc4
 80072dc:	3fc99999 	.word	0x3fc99999
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	7e37e43c 	.word	0x7e37e43c
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	bff921fb 	.word	0xbff921fb
 80072f0:	440fffff 	.word	0x440fffff
 80072f4:	7ff00000 	.word	0x7ff00000
 80072f8:	3fdbffff 	.word	0x3fdbffff
 80072fc:	08008e10 	.word	0x08008e10
 8007300:	08008df0 	.word	0x08008df0
 8007304:	3ff00000 	.word	0x3ff00000
 8007308:	3ff2ffff 	.word	0x3ff2ffff
 800730c:	40037fff 	.word	0x40037fff
 8007310:	3ff80000 	.word	0x3ff80000
 8007314:	bff00000 	.word	0xbff00000
	...

08007320 <fabs>:
 8007320:	ec53 2b10 	vmov	r2, r3, d0
 8007324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007328:	ec43 2b10 	vmov	d0, r2, r3
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	054604b0 	.word	0x054604b0
 8007334:	05460708 	.word	0x05460708
 8007338:	00000708 	.word	0x00000708
 800733c:	00000000 	.word	0x00000000

08007340 <__func__.6282>:
 8007340:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007350 <__func__.6057>:
 8007350:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....
 8007360:	20414d44 6c696166 00657275 67617355     DMA failure.Usag
 8007370:	25203a65 000a0d73 6f666e69 00000000     e: %s...info....
 8007380:	6e72654b 203a6c65 20202020 73252020     Kernel:       %s
 8007390:	00000a0d 2e312e33 00000035 706d6f43     ....3.1.5...Comp
 80073a0:	72656c69 2020203a 73252020 00000a0d     iler:     %s....
 80073b0:	20434347 2e392e34 30322033 35303531     GCC 4.9.3 201505
 80073c0:	28203932 656c6572 29657361 52415b20     29 (release) [AR
 80073d0:	6d652f4d 64646562 342d6465 622d395f     M/embedded-4_9-b
 80073e0:	636e6172 65722068 69736976 32206e6f     ranch revision 2
 80073f0:	37393732 00005d37 68637241 63657469     27977]..Architec
 8007400:	65727574 7325203a 00000a0d 764d5241     ture: %s....ARMv
 8007410:	4d2d4537 00000000 65726f43 72615620     7E-M....Core Var
 8007420:	746e6169 7325203a 00000a0d 74726f43     iant: %s....Cort
 8007430:	4d2d7865 00004634 74726f50 666e4920     ex-M4F..Port Inf
 8007440:	20203a6f 73252020 00000a0d 61766441     o:    %s....Adva
 8007450:	6465636e 72656b20 206c656e 65646f6d     nced kernel mode
 8007460:	00000000 74616c50 6d726f66 2020203a     ....Platform:   
 8007470:	73252020 00000a0d 334d5453 30344632       %s....STM32F40
 8007480:	69482037 50206867 6f667265 6e616d72     7 High Performan
 8007490:	77206563 20687469 20505344 20646e61     ce with DSP and 
 80074a0:	00555046 72616f42 20203a64 20202020     FPU.Board:      
 80074b0:	73252020 00000a0d 694d5453 656f7263       %s....STMicroe
 80074c0:	7463656c 696e6f72 53207363 32334d54     lectronics STM32
 80074d0:	442d3446 6f637369 79726576 00000000     F4-Discovery....
 80074e0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 80074f0:	73257325 00000a0d 2079614d 32203031     %s%s....May 10 2
 8007500:	00373130 00202d20 323a3230 36343a39     017. - .02:29:46
 8007510:	00000000 6c656873 0000006c 68430a0d     ....shell.....Ch
 8007520:	4f696269 54522f53 65685320 0a0d6c6c     ibiOS/RT Shell..
 8007530:	00000000 203e6863 00000000 0000445e     ....ch> ....^D..
 8007540:	206f6f74 796e616d 67726120 6e656d75     too many argumen
 8007550:	0a0d7374 00000000 74697865 00000000     ts......exit....
 8007560:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 8007570:	6568203a 6520706c 20746978 00000000     : help exit ....
 8007580:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 8007590:	6f6c0a0d 74756f67 00000000 74737973     ..logout....syst
 80075a0:	00656d69 0d756c25 0000000a 00000000     ime.%lu.........

080075b0 <local_commands>:
 80075b0:	08007378 080011b1 0800759c 08001cb1     xs.......u......
	...

080075d0 <__func__.7541>:
 80075d0:	53747067 74726174 00000000 00000000     gptStart........

080075e0 <__func__.7544>:
 80075e0:	65537473 616c4174 00006d72 00000000     stSetAlarm......

080075f0 <__func__.6708>:
 80075f0:	76456863 67695374 496c616e 00000000     chEvtSignalI....

08007600 <__func__.7554>:
 8007600:	5f747067 5f646c6c 72617473 00000074     gpt_lld_start...

08007610 <__func__.6730>:
 8007610:	514f6863 74697257 6d695465 74756f65     chOQWriteTimeout
	...

08007630 <__func__.7615>:
 8007630:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 8007640:	00000065 00000000 00000000 00000000     e...............

08007650 <__func__.6691>:
 8007650:	76456863 6f724274 61636461 6c467473     chEvtBroadcastFl
 8007660:	49736761 00000000 00000000 00000000     agsI............

08007670 <__func__.6694>:
 8007670:	51496863 64616552 656d6954 0074756f     chIQReadTimeout.

08007680 <__func__.5968.lto_priv.122>:
 8007680:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007690 <__func__.5968.lto_priv.123>:
 8007690:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080076a0 <__func__.5968.lto_priv.124>:
 80076a0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080076b0 <__func__.7549>:
 80076b0:	53697073 63656c65 00000074 00000000     spiSelect.......

080076c0 <__func__.7553>:
 80076c0:	55697073 6c65736e 00746365 00000000     spiUnselect.....

080076d0 <__func__.7545>:
 80076d0:	536d7770 00706f74 00000000 00000000     pwmStop.........

080076e0 <__func__.5968.lto_priv.63>:
 80076e0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080076f0 <__func__.5968.lto_priv.64>:
 80076f0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007700 <vmt.lto_priv.70>:
 8007700:	080035a1 08003571 080034d1 080034b1     .5..q5...4...4..

08007710 <__func__.5968.lto_priv.67>:
 8007710:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007720 <__func__.5968.lto_priv.68>:
 8007720:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007730 <__func__.7560>:
 8007730:	4d633269 65747361 61725472 696d736e     i2cMasterTransmi
 8007740:	6d695474 74756f65 00000000 00000000     tTimeout........

08007750 <__func__.6154>:
 8007750:	68546863 446f4464 65757165 654e6575     chThdDoDequeueNe
 8007760:	00497478 00000000 00000000 00000000     xtI.............

08007770 <__func__.6737>:
 8007770:	68546863 73755364 646e6570 00000053     chThdSuspendS...

08007780 <__func__.5968.lto_priv.66>:
 8007780:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007790 <__func__.7582>:
 8007790:	74536473 00747261 00000000 00000000     sdStart.........
 80077a0:	69646152 6f63206f 6f72746e 0000006c     Radio control...
 80077b0:	6c6c6148 6e655320 00726f73 00000920     Hall Sensor. ...

080077c0 <__func__.7595>:
 80077c0:	53697073 00646e65 00000000 00000000     spiSend.........

080077d0 <__func__.6697>:
 80077d0:	744d6863 6c6e5578 006b636f 00000000     chMtxUnlock.....

080077e0 <__func__.6743>:
 80077e0:	68546863 73755364 646e6570 656d6954     chThdSuspendTime
 80077f0:	5374756f 00000000 00000000 00000000     outS............

08007800 <__func__.5968.lto_priv.65>:
 8007800:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08007810 <vmt.lto_priv.69>:
 8007810:	080026d1 080028d1 080027a1 080029a1     .&...(...'...)..
 8007820:	08002791 08002991 080026c1 080028c1     .'...)...&...(..

08007830 <__func__.7550>:
 8007830:	5f6d7770 5f646c6c 72617473 00000074     pwm_lld_start...

08007840 <__func__.7541>:
 8007840:	53633269 74726174 00000000 00000000     i2cStart........

08007850 <__func__.7550>:
 8007850:	5f633269 5f646c6c 5f746573 636f6c63     i2c_lld_set_cloc
 8007860:	0000006b 00000000 00000000 00000000     k...............

08007870 <__func__.7615>:
 8007870:	5f633269 5f646c6c 72617473 00000074     i2c_lld_start...
 8007880:	74736554 00000000 6c756e28 0000296c     Test....(null)..
 8007890:	3655504d 00303530 00000000 00000000     MPU6050.........

080078a0 <i2cfg>:
 80078a0:	00000001 00030d40 00000002 00000000     ....@...........

080078b0 <__func__.6674.lto_priv.127>:
 80078b0:	54566863 65536f44 00004974 00000000     chVTDoSetI......

080078c0 <__func__.7537>:
 80078c0:	74537473 41747261 6d72616c 00000000     stStartAlarm....

080078d0 <__func__.6671>:
 80078d0:	63536863 61655268 00497964 00000000     chSchReadyI.....

080078e0 <__func__.6674.lto_priv.128>:
 80078e0:	744d6863 636f4c78 0000536b 00000000     chMtxLockS......

080078f0 <__func__.6727>:
 80078f0:	68546863 69784564 00005374 00000000     chThdExitS......

08007900 <__func__.6683>:
 8007900:	68546863 65724364 49657461 00000000     chThdCreateI....
 8007910:	63617473 766f206b 6c667265 0000776f     stack overflow..
 8007920:	31235653 00000031 31235653 00000030     SV#11...SV#10...
 8007930:	39235653 00000000 38235653 00000000     SV#9....SV#8....
 8007940:	37235653 00000000 36235653 00000000     SV#7....SV#6....
 8007950:	35235653 00000000 34235653 00000000     SV#5....SV#4....

08007960 <ram_areas>:
 8007960:	08008ebc 2000f0a0 2000f0a0 2000f0a0     ....... ... ... 
 8007970:	08008ebc 20000000 20000000 20000000     ....... ... ... 
 8007980:	08008ebc 2001c000 2001c000 2001c000     ....... ... ... 
 8007990:	08008ebc 00000000 00000000 00000000     ................
 80079a0:	08008ebc 10000000 10000000 10000000     ................
 80079b0:	08008ebc 40024000 40024000 40024000     .....@.@.@.@.@.@
 80079c0:	08008ebc 00000000 00000000 00000000     ................
 80079d0:	08008ebc 00000000 00000000 00000000     ................

080079e0 <__func__.5968>:
 80079e0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080079f0 <__func__.6699>:
 80079f0:	63536863 6b615768 53707565 00000000     chSchWakeupS....

08007a00 <__func__.6142>:
 8007a00:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08007a10 <__func__.6749>:
 8007a10:	68546863 73655264 49656d75 00000000     chThdResumeI....

08007a20 <hall_cfg>:
 8007a20:	0501bd00 00000000 00000000 00000000     ................
 8007a30:	6f746f4d 6f432072 6f72746e 0000006c     Motor Control...
 8007a40:	746e6f43 6c6c6f72 00007265 3a78616d     Controller..max:
 8007a50:	00643525 65657073 253a2b64 00006435     %5d.speed+:%5d..
 8007a60:	6f727265 35253a72 00000064 705f694b     error:%5d...Ki_p
 8007a70:	6425203a 0000000a 705f704b 6425203a     : %d....Kp_p: %d
 8007a80:	0000000a 765f694b 6425203a 0000000a     ....Ki_v: %d....
 8007a90:	765f704b 6425203a 0000000a 725f694b     Kp_v: %d....Ki_r
 8007aa0:	6425203a 0000000a 725f704b 6425203a     : %d....Kp_r: %d
 8007ab0:	0000000a 203a644b 000a6425 203a704b     ....Kd: %d..Kp: 
 8007ac0:	000a6425 70736964 2079616c 000a6e6f     %d..display on..
 8007ad0:	70736964 2079616c 0a66666f 00000000     display off.....
 8007ae0:	6e697250 676e6974 74614420 00000061     Printing Data...
 8007af0:	00002e61 002e6425 735f704b 25203d20     a...%d..Kp_s = %
 8007b00:	4b202c64 20735f64 6425203d 0000000a     d, Kd_s = %d....
 8007b10:	725f704b 25203d20 4b202c64 20725f69     Kp_r = %d, Ki_r 
 8007b20:	6425203d 0000000a 765f704b 25203d20     = %d....Kp_v = %
 8007b30:	4b202c64 20765f69 6425203d 0000000a     d, Ki_v = %d....
 8007b40:	705f704b 25203d20 4b202c64 20705f69     Kp_p = %d, Ki_p 
 8007b50:	6425203d 0000000a 00000000 00000000     = %d............

08007b60 <__func__.7541>:
 8007b60:	536d7770 74726174 00000000 00000000     pwmStart........

08007b70 <motor_pwmcfg>:
 8007b70:	0501bd00 00000fa0 00000000 00000001     ................
 8007b80:	00000000 00000001 00000000 00000001     ................
 8007b90:	00000000 00000001 00000000 00000000     ................
	...

08007bb0 <_stm32_dma_streams>:
 8007bb0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8007bc0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8007bd0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8007be0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8007bf0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8007c00:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8007c10:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8007c20:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8007c30:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8007c40:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8007c50:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8007c60:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08007c70 <ch_debug>:
 8007c70:	6e69616d 18451600 08600404 1814100c     main..E...`.....
 8007c80:	2221201c 00000000 00000000 00000000     . !"............
 8007c90:	33235653 00000000 656c6469 00000000     SV#3....idle....
 8007ca0:	6e697270 00000074 00007370 00007364     print...ps..ds..
 8007cb0:	00007270 00007269 00007670 00007669     pr..ir..pv..iv..
 8007cc0:	00007070 00007069 00007075 00000073     pp..ip..up..s...

08007cd0 <RC_cfg>:
 8007cd0:	000f4240 00000000 00000000 00000000     @B..............

08007ce0 <commands>:
 8007ce0:	08007ca0 080054a1 08007ca8 08005451     .|...T...|..QT..
 8007cf0:	08007cac 08005401 08007cb0 080053b1     .|...T...|...S..
 8007d00:	08007cb4 08005361 08007cb8 08005311     .|..aS...|...S..
 8007d10:	08007cbc 080052c1 08007cc0 08005271     .|...R...|..qR..
 8007d20:	08007cc4 08005221 08007cc8 08005891     .|..!R...|...X..
 8007d30:	08007ccc 080057a1 00000000 00000000     .|...W..........

08007d40 <music_pwmcfg>:
 8007d40:	0501bd00 00000fa0 00000000 00000001     ................
 8007d50:	00000000 00000002 00000000 00000001     ................
 8007d60:	00000000 00000002 00000000 00000000     ................
	...

08007d80 <shell_cfg1>:
 8007d80:	200011ac 08007ce0 00000000 00000000     ... .|..........

08007d90 <__func__.7541>:
 8007d90:	53697073 74726174 00000000 00000000     spiStart........

08007da0 <__func__.7555>:
 8007da0:	5f697073 5f646c6c 72617473 00000074     spi_lld_start...

08007db0 <ascii_8x16>:
	...
 8007dc0:	817e0000 bd8181a5 7e818199 00000000     ..~........~....
 8007dd0:	ff7e0000 c3ffffdb 7effffe7 00000000     ..~........~....
 8007de0:	00000000 fefefe6c 10387cfe 00000000     ....l....|8.....
 8007df0:	00000000 fe7c3810 0010387c 00000000     .....8|.|8......
 8007e00:	18000000 e7e73c3c 3c1818e7 00000000     ....<<.....<....
 8007e10:	18000000 ffff7e3c 3c18187e 00000000     ....<~..~..<....
 8007e20:	00000000 3c180000 0000183c 00000000     .......<<.......
 8007e30:	ffffffff c3e7ffff ffffe7c3 ffffffff     ................
 8007e40:	00000000 42663c00 003c6642 00000000     .....<fBBf<.....
 8007e50:	ffffffff bd99c3ff ffc399bd ffffffff     ................
 8007e60:	0e1e0000 cc78321a 78cccccc 00000000     .....2x....x....
 8007e70:	663c0000 3c666666 18187e18 00000000     ..<ffff<.~......
 8007e80:	333f0000 3030303f e0f07030 00000000     ..?3?0000p......
 8007e90:	637f0000 6363637f e6e76763 000000c0     ...c.ccccg......
 8007ea0:	18000000 e73cdb18 1818db3c 00000000     ......<.<.......
 8007eb0:	e0c08000 f8fef8f0 80c0e0f0 00000000     ................
 8007ec0:	0e060200 3efe3e1e 02060e1e 00000000     .....>.>........
 8007ed0:	3c180000 1818187e 00183c7e 00000000     ...<~...~<......
 8007ee0:	66660000 66666666 66660066 00000000     ..fffffff.ff....
 8007ef0:	db7f0000 1b7bdbdb 1b1b1b1b 00000000     ......{.........
 8007f00:	60c67c00 c6c66c38 c60c386c 0000007c     .|.`8l..l8..|...
	...
 8007f18:	fefefefe 00000000 3c180000 1818187e     ...........<~...
 8007f28:	7e183c7e 00000000 3c180000 1818187e     ~<.~.......<~...
 8007f38:	18181818 00000000 18180000 18181818     ................
 8007f48:	183c7e18 00000000 00000000 fe0c1800     .~<.............
 8007f58:	0000180c 00000000 00000000 fe603000     .............0`.
 8007f68:	00003060 00000000 00000000 c0c00000     `0..............
 8007f78:	0000fec0 00000000 00000000 fe6c2800     .............(l.
 8007f88:	0000286c 00000000 00000000 7c383810     l(...........88|
 8007f98:	00fefe7c 00000000 00000000 7c7cfefe     |.............||
 8007fa8:	00103838 00000000 00000000 00000000     88..............
	...
 8007fc0:	3c180000 18183c3c 18180018 00000000     ...<<<..........
 8007fd0:	66666600 00000024 00000000 00000000     .fff$...........
 8007fe0:	6c000000 6c6cfe6c 6c6cfe6c 00000000     ...ll.lll.ll....
 8007ff0:	c67c1818 067cc0c2 7cc68606 00001818     ..|...|....|....
 8008000:	00000000 180cc6c2 86c66030 00000000     ........0`......
 8008010:	6c380000 dc76386c 76cccccc 00000000     ..8ll8v....v....
 8008020:	30303000 00000060 00000000 00000000     .000`...........
 8008030:	180c0000 30303030 0c183030 00000000     ....000000......
 8008040:	18300000 0c0c0c0c 30180c0c 00000000     ..0........0....
 8008050:	00000000 ff3c6600 0000663c 00000000     .....f<.<f......
 8008060:	00000000 7e181800 00001818 00000000     .......~........
	...
 8008078:	18181800 00000030 00000000 fe000000     ....0...........
	...
 8008098:	18180000 00000000 00000000 180c0602     ................
 80080a8:	80c06030 00000000 6c380000 d6d6c6c6     0`........8l....
 80080b8:	386cc6c6 00000000 38180000 18181878     ..l8.......8x...
 80080c8:	7e181818 00000000 c67c0000 30180c06     ...~......|....0
 80080d8:	fec6c060 00000000 c67c0000 063c0606     `.........|...<.
 80080e8:	7cc60606 00000000 1c0c0000 fecc6c3c     ...|........<l..
 80080f8:	1e0c0c0c 00000000 c0fe0000 06fcc0c0     ................
 8008108:	7cc60606 00000000 60380000 c6fcc0c0     ...|......8`....
 8008118:	7cc6c6c6 00000000 c6fe0000 180c0606     ...|............
 8008128:	30303030 00000000 c67c0000 c67cc6c6     0000......|...|.
 8008138:	7cc6c6c6 00000000 c67c0000 067ec6c6     ...|......|...~.
 8008148:	780c0606 00000000 00000000 00001818     ...x............
 8008158:	00181800 00000000 00000000 00001818     ................
 8008168:	30181800 00000000 06000000 6030180c     ...0..........0`
 8008178:	060c1830 00000000 00000000 00007e00     0............~..
 8008188:	0000007e 00000000 60000000 060c1830     ~..........`0...
 8008198:	6030180c 00000000 c67c0000 18180cc6     ..0`......|.....
 80081a8:	18180018 00000000 7c000000 dedec6c6     ...........|....
 80081b8:	7cc0dcde 00000000 38100000 fec6c66c     ...|.......8l...
 80081c8:	c6c6c6c6 00000000 66fc0000 667c6666     ...........fff|f
 80081d8:	fc666666 00000000 663c0000 c0c0c0c2     fff.......<f....
 80081e8:	3c66c2c0 00000000 6cf80000 66666666     ..f<.......lffff
 80081f8:	f86c6666 00000000 66fe0000 68786862     ffl........fbhxh
 8008208:	fe666260 00000000 66fe0000 68786862     `bf........fbhxh
 8008218:	f0606060 00000000 663c0000 dec0c0c2     ```.......<f....
 8008228:	3a66c6c6 00000000 c6c60000 c6fec6c6     ..f:............
 8008238:	c6c6c6c6 00000000 183c0000 18181818     ..........<.....
 8008248:	3c181818 00000000 0c1e0000 0c0c0c0c     ...<............
 8008258:	78cccccc 00000000 66e60000 78786c66     ...x.......fflxx
 8008268:	e666666c 00000000 60f00000 60606060     lff........`````
 8008278:	fe666260 00000000 eec60000 c6d6fefe     `bf.............
 8008288:	c6c6c6c6 00000000 e6c60000 cedefef6     ................
 8008298:	c6c6c6c6 00000000 c67c0000 c6c6c6c6     ..........|.....
 80082a8:	7cc6c6c6 00000000 66fc0000 607c6666     ...|.......fff|`
 80082b8:	f0606060 00000000 c67c0000 c6c6c6c6     ```.......|.....
 80082c8:	7cded6c6 00000e0c 66fc0000 6c7c6666     ...|.......fff|l
 80082d8:	e6666666 00000000 c67c0000 0c3860c6     fff.......|..`8.
 80082e8:	7cc6c606 00000000 7e7e0000 1818185a     ...|......~~Z...
 80082f8:	3c181818 00000000 c6c60000 c6c6c6c6     ...<............
 8008308:	7cc6c6c6 00000000 c6c60000 c6c6c6c6     ...|............
 8008318:	10386cc6 00000000 c6c60000 d6d6c6c6     .l8.............
 8008328:	6ceefed6 00000000 c6c60000 38387c6c     ...l........l|88
 8008338:	c6c66c7c 00000000 66660000 183c6666     |l........ffff<.
 8008348:	3c181818 00000000 c6fe0000 30180c86     ...<...........0
 8008358:	fec6c260 00000000 303c0000 30303030     `.........<00000
 8008368:	3c303030 00000000 80000000 3870e0c0     000<..........p8
 8008378:	02060e1c 00000000 0c3c0000 0c0c0c0c     ..........<.....
 8008388:	3c0c0c0c 00000000 c66c3810 00000000     ...<.....8l.....
	...
 80083ac:	0000ff00 0c183000 00000000 00000000     .....0..........
	...
 80083c4:	7c0c7800 76cccccc 00000000 60e00000     .x.|...v.......`
 80083d4:	666c7860 7c666666 00000000 00000000     `xlffff|........
 80083e4:	c0c67c00 7cc6c0c0 00000000 0c1c0000     .|.....|........
 80083f4:	cc6c3c0c 76cccccc 00000000 00000000     .<l....v........
 8008404:	fec67c00 7cc6c0c0 00000000 361c0000     .|.....|.......6
 8008414:	30783032 78303030 00000000 00000000     20x0000x........
 8008424:	cccc7600 7ccccccc 0078cc0c 60e00000     .v.....|..x....`
 8008434:	66766c60 e6666666 00000000 18180000     `lvffff.........
 8008444:	18183800 3c181818 00000000 06060000     .8.....<........
 8008454:	06060e00 06060606 003c6666 60e00000     ........ff<....`
 8008464:	786c6660 e6666c78 00000000 18380000     `flxxlf.......8.
 8008474:	18181818 3c181818 00000000 00000000     .......<........
 8008484:	d6feec00 c6d6d6d6 00000000 00000000     ................
 8008494:	6666dc00 66666666 00000000 00000000     ..ffffff........
 80084a4:	c6c67c00 7cc6c6c6 00000000 00000000     .|.....|........
 80084b4:	6666dc00 7c666666 00f06060 00000000     ..fffff|``......
 80084c4:	cccc7600 7ccccccc 001e0c0c 00000000     .v.....|........
 80084d4:	6676dc00 f0606060 00000000 00000000     ..vf```.........
 80084e4:	60c67c00 7cc60c38 00000000 30100000     .|.`8..|.......0
 80084f4:	3030fc30 1c363030 00000000 00000000     0.00006.........
 8008504:	cccccc00 76cccccc 00000000 00000000     .......v........
 8008514:	c6c6c600 386cc6c6 00000000 00000000     ......l8........
 8008524:	d6c6c600 6cfed6d6 00000000 00000000     .......l........
 8008534:	386cc600 c66c3838 00000000 00000000     ..l888l.........
 8008544:	c6c6c600 7ec6c6c6 00f80c06 00000000     .......~........
 8008554:	18ccfe00 fec66030 00000000 180e0000     ....0`..........
 8008564:	18701818 0e181818 00000000 18180000     ..p.............
 8008574:	18181818 18181818 00000000 18700000     ..............p.
 8008584:	180e1818 70181818 00000000 00dc7600     .......p.....v..
	...
 80085a4:	c66c3810 00fec6c6 00000000 fe000000     .8l.............
 80085b4:	82828282 00fe8282 00000000 fe000000     ................
 80085c4:	aad6aad6 00feaad6 00000000 fe000000     ................
 80085d4:	da8a8a86 00feb2f2 00000000 fe000000     ................
 80085e4:	fadeaad6 00febaf6 00000000 00cc0000     ................
 80085f4:	7c0c7800 76cccccc 00000000 18306000     .x.|...v.....`0.
 8008604:	7c0c7800 76cccccc 00000000 386c3800     .x.|...v.....8l8
 8008614:	7c0c7800 76cccccc 00000000 00000000     .x.|...v........
 8008624:	c0c67c00 7cc6c0c0 00007018 6c381000     .|.....|.p....8l
 8008634:	fec67c00 7cc6c0c0 00000000 00c60000     .|.....|........
 8008644:	fec67c00 7cc6c0c0 00000000 18306000     .|.....|.....`0.
 8008654:	fec67c00 7cc6c0c0 00000000 00660000     .|.....|......f.
 8008664:	18183800 3c181818 00000000 663c1800     .8.....<......<f
 8008674:	18183800 3c181818 00000000 18306000     .8.....<.....`0.
 8008684:	18183800 3c181818 00000000 1000c600     .8.....<........
 8008694:	c6c66c38 c6c6c6fe 00000000 10386c38     8l..........8l8.
 80086a4:	fec66c38 c6c6c6c6 00000000 fe00180c     8l..............
 80086b4:	78686266 fe666268 00000000 00000000     fbhxhbf.........
 80086c4:	3636ec00 6ed8d87e 00000000 6c3e0000     ..66~..n......>l
 80086d4:	ccfecccc cecccccc 00000000 6c381000     ..............8l
 80086e4:	c6c67c00 7cc6c6c6 00000000 00c60000     .|.....|........
 80086f4:	c6c67c00 7cc6c6c6 00000000 18306000     .|.....|.....`0.
 8008704:	c6c67c00 7cc6c6c6 00000000 cc783000     .|.....|.....0x.
 8008714:	cccccc00 76cccccc 00000000 18306000     .......v.....`0.
 8008724:	cccccc00 76cccccc 00000000 00c60000     .......v........
 8008734:	c6c6c600 7ec6c6c6 00780c06 7c00c600     .......~..x....|
 8008744:	c6c6c6c6 7cc6c6c6 00000000 c600c600     .......|........
 8008754:	c6c6c6c6 7cc6c6c6 00000000 7c181800     .......|.......|
 8008764:	c0c0c0c6 18187cc6 00000000 646c3800     .....|.......8ld
 8008774:	6060f060 fce66060 00000000 66660000     `.````........ff
 8008784:	187e183c 1818187e 00000000 ccccf800     <.~.~...........
 8008794:	deccc4f8 c6cccccc 00000000 181b0e00     ................
 80087a4:	187e1818 70d81818 00000000 60301800     ..~....p......0`
 80087b4:	7c0c7800 76cccccc 00000000 30180c00     .x.|...v.......0
 80087c4:	18183800 3c181818 00000000 60301800     .8.....<......0`
 80087d4:	c6c67c00 7cc6c6c6 00000000 60301800     .|.....|......0`
 80087e4:	cccccc00 76cccccc 00000000 dc760000     .......v......v.
 80087f4:	6666dc00 66666666 00000000 c600dc76     ..ffffff....v...
 8008804:	defef6e6 c6c6c6ce 00000000 6c3c0000     ..............<l
 8008814:	7e003e6c 00000000 00000000 6c380000     l>.~..........8l
 8008824:	7c00386c 00000000 00000000 30300000     l8.|..........00
 8008834:	60303000 7cc6c6c0 00000000 00000000     .00`...|........
 8008844:	c0fe0000 00c0c0c0 00000000 00000000     ................
 8008854:	06fe0000 00060606 00000000 62e06000     .............`.b
 8008864:	30186c66 0c86dc60 00003e18 62e06000     fl.0`....>...`.b
 8008874:	30186c66 3f9ace66 00000606 18180000     fl.0f..?........
 8008884:	18181800 183c3c3c 00000000 00000000     ....<<<.........
 8008894:	d86c3600 0000366c 00000000 00000000     .6l.l6..........
 80088a4:	366cd800 0000d86c 00000000 44114411     ..l6l........D.D
 80088b4:	44114411 44114411 44114411 aa55aa55     .D.D.D.D.D.DU.U.
 80088c4:	aa55aa55 aa55aa55 aa55aa55 77dd77dd     U.U.U.U.U.U..w.w
 80088d4:	77dd77dd 77dd77dd 77dd77dd 18181818     .w.w.w.w.w.w....
 80088e4:	18181818 18181818 18181818 18181818     ................
 80088f4:	f8181818 18181818 18181818 18181818     ................
 8008904:	f818f818 18181818 18181818 36363636     ............6666
 8008914:	f6363636 36363636 36363636 00000000     666.66666666....
 8008924:	fe000000 36363636 36363636 00000000     ....66666666....
 8008934:	f818f800 18181818 18181818 36363636     ............6666
 8008944:	f606f636 36363636 36363636 36363636     6...666666666666
 8008954:	36363636 36363636 36363636 00000000     666666666666....
 8008964:	f606fe00 36363636 36363636 36363636     ....666666666666
 8008974:	fe06f636 00000000 00000000 36363636     6...........6666
 8008984:	fe363636 00000000 00000000 18181818     666.............
 8008994:	f818f818 00000000 00000000 00000000     ................
 80089a4:	f8000000 18181818 18181818 18181818     ................
 80089b4:	1f181818 00000000 00000000 18181818     ................
 80089c4:	ff181818 00000000 00000000 00000000     ................
 80089d4:	ff000000 18181818 18181818 18181818     ................
 80089e4:	1f181818 18181818 18181818 00000000     ................
 80089f4:	ff000000 00000000 00000000 18181818     ................
 8008a04:	ff181818 18181818 18181818 18181818     ................
 8008a14:	1f181f18 18181818 18181818 36363636     ............6666
 8008a24:	37363636 36363636 36363636 36363636     6667666666666666
 8008a34:	3f303736 00000000 00000000 00000000     670?............
 8008a44:	37303f00 36363636 36363636 36363636     .?07666666666666
 8008a54:	ff00f736 00000000 00000000 00000000     6...............
 8008a64:	f700ff00 36363636 36363636 36363636     ....666666666666
 8008a74:	37303736 36363636 36363636 00000000     670766666666....
 8008a84:	ff00ff00 00000000 00000000 36363636     ............6666
 8008a94:	f700f736 36363636 36363636 18181818     6...66666666....
 8008aa4:	ff00ff18 00000000 00000000 36363636     ............6666
 8008ab4:	ff363636 00000000 00000000 00000000     666.............
 8008ac4:	ff00ff00 18181818 18181818 00000000     ................
 8008ad4:	ff000000 36363636 36363636 36363636     ....666666666666
 8008ae4:	3f363636 00000000 00000000 18181818     666?............
 8008af4:	1f181f18 00000000 00000000 00000000     ................
 8008b04:	1f181f00 18181818 18181818 00000000     ................
 8008b14:	3f000000 36363636 36363636 36363636     ...?666666666666
 8008b24:	ff363636 36363636 36363636 18181818     666.66666666....
 8008b34:	ff18ff18 18181818 18181818 18181818     ................
 8008b44:	f8181818 00000000 00000000 00000000     ................
 8008b54:	1f000000 18181818 18181818 ffffffff     ................
 8008b64:	ffffffff ffffffff ffffffff 00000000     ................
 8008b74:	ff000000 ffffffff ffffffff f0f0f0f0     ................
 8008b84:	f0f0f0f0 f0f0f0f0 f0f0f0f0 0f0f0f0f     ................
 8008b94:	0f0f0f0f 0f0f0f0f 0f0f0f0f ffffffff     ................
 8008ba4:	00ffffff 00000000 00000000 00000000     ................
 8008bb4:	d8dc7600 76dcd8d8 00000000 cc780000     .v.....v......x.
 8008bc4:	ccd8cccc ccc6c6c6 00000000 c6fe0000     ................
 8008bd4:	c0c0c0c6 c0c0c0c0 00000000 00000000     ................
 8008be4:	6c6cfe00 6c6c6c6c 00000000 c6fe0000     ..llllll........
 8008bf4:	18183060 fec66030 00000000 00000000     `0..0`..........
 8008c04:	d8d87e00 70d8d8d8 00000000 00000000     .~.....p........
 8008c14:	66666600 7c666666 00c06060 00000000     .ffffff|``......
 8008c24:	1818dc76 18181818 00000000 187e0000     v.............~.
 8008c34:	6666663c 7e183c66 00000000 6c380000     <ffff<.~......8l
 8008c44:	c6fec6c6 386cc6c6 00000000 6c380000     ......l8......8l
 8008c54:	6cc6c6c6 ee6c6c6c 00000000 301e0000     ...llll........0
 8008c64:	663e0c18 3c666666 00000000 00000000     ..>ffff<........
 8008c74:	dbdb7e00 00007edb 00000000 03000000     .~...~..........
 8008c84:	dbdb7e06 c0607ef3 00000000 301c0000     .~...~`........0
 8008c94:	607c6060 1c306060 00000000 7c000000     ``|```0........|
 8008ca4:	c6c6c6c6 c6c6c6c6 00000000 00000000     ................
 8008cb4:	fe0000fe 00fe0000 00000000 00000000     ................
 8008cc4:	187e1818 7e000018 00000000 30000000     ..~....~.......0
 8008cd4:	0c060c18 7e003018 00000000 0c000000     .....0.~........
 8008ce4:	30603018 7e000c18 00000000 1b0e0000     .0`0...~........
 8008cf4:	1818181b 18181818 18181818 18181818     ................
 8008d04:	18181818 d8d8d818 00000070 00000000     ........p.......
 8008d14:	7e001800 00001800 00000000 00000000     ...~............
 8008d24:	00dc7600 0000dc76 00000000 6c6c3800     .v..v........8ll
 8008d34:	00000038 00000000 00000000 00000000     8...............
 8008d44:	18000000 00000018 00000000 00000000     ................
 8008d54:	18000000 00000000 00000000 0c0c0f00     ................
 8008d64:	ec0c0c0c 1c3c6c6c 00000000 36366c00     ....ll<......l66
 8008d74:	00363636 00000000 00000000 0c663c00     666..........<f.
 8008d84:	007e3218 00000000 00000000 00000000     .2~.............
 8008d94:	7e7e7e7e 007e7e7e 00000000 00000000     ~~~~~~~.........
	...
 8008db0:	20544654 70736944 0079616c 74656854     TFT Display.Thet
 8008dc0:	36253a61 00000064 3a314352 00643525     a:%6d...RC1:%5d.
 8008dd0:	3a324352 00643525 3a334352 00643525     RC2:%5d.RC3:%5d.

08008de0 <TFTSPI_cfg>:
 8008de0:	00000000 40020400 000f000c 00000000     .......@........

08008df0 <atanlo>:
 8008df0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8008e00:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08008e10 <atanhi>:
 8008e10:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8008e20:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
